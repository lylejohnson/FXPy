/*
 * FILE : ../src/misc.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a) __declspec(dllexport) a
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a) a _export 
#	else
#	    define SWIGEXPORT(a) a 
#	endif
#   endif
#else
#   define SWIGEXPORT(a) a 
#endif

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern char *SWIG_GetPtrObj(PyObject *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif
#define SWIG_init    initmiscc

#define SWIG_name    "miscc"

#include "fx.h"
#include "fx3d.h"
#include "FXCURCursor.h"
#include "FXJPGImage.h"
#include "FXJPGIcon.h"
#include "FXPNGIcon.h"
#include "FXPNGImage.h"
#include "FXTIFIcon.h"
#include "FXTIFImage.h"
#include "FXRGBIcon.h"
#include "FXRGBImage.h"
#include "FXICOIcon.h"
#include "FXICOImage.h"
#include "FXPyApp.h"
#include "FXPy.h"

static PyObject* l_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyList_Check(target)) {
            o2 = target;
            target = PyList_New(0);
            PyList_Append(target, o2);
	    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
	Py_XDECREF(o);
    }
    return target;
}

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}
extern void FXPyRegister(PyObject *);

  /// Construct font from font description
  FXPyFont *CreateFont1(FXApp* a,const FXFontDesc& fontdesc) {
    return new FXPyFont(a,fontdesc);
    }

  /// Construct a font with given face name, size in points(pixels), weight, slant, character set encoding, setwidth, and hints
  FXPyFont *CreateFont2(FXApp* a,const FXString& face,FXuint sz,FXuint wt=FONTWEIGHT_NORMAL,FXuint sl=FONTSLANT_REGULAR,FXuint enc=FONTENCODING_DEFAULT,FXuint setw=FONTSETWIDTH_DONTCARE,FXuint h=0) {
    return new FXPyFont(a,face,sz,wt,sl,enc,setw,h);
    }

  /// Construct a font with given X11 font string
  FXPyFont *CreateFont3(FXApp* a,const FXString& nm) {
    return new FXPyFont(a,nm);
    }

  /// Make new Recent Files Group with default groupname
  FXPyRecentFiles *CreateRecentFiles1() {
    return new FXPyRecentFiles();
    }

  /// Make new Recent Files Group with groupname gp
  FXPyRecentFiles *CreateRecentFiles2(const FXString& gp,FXObject *tgt=NULL,FXSelector sel=0) {
    return new FXPyRecentFiles(gp,tgt,sel);
    }
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_FXPyRegister(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "pPyObject", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPyRegister",_kwnames,&_obj0)) 
        return NULL;
{
  _arg0 = _obj0;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPyRegister(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_CreateFont1(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _result;
    FXApp * _arg0;
    FXFontDesc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","fontdesc", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:CreateFont1",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of CreateFont1. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of CreateFont1. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFont *)CreateFont1(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFont_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_CreateFont2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _result;
    FXApp * _arg0;
    FXString * _arg1;
    FXuint  _arg2;
    FXuint  _arg3 = (FXuint ) FONTWEIGHT_NORMAL;
    FXuint  _arg4 = (FXuint ) FONTSLANT_REGULAR;
    FXuint  _arg5 = (FXuint ) FONTENCODING_DEFAULT;
    FXuint  _arg6 = (FXuint ) FONTSETWIDTH_DONTCARE;
    FXuint  _arg7 = (FXuint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","face","sz","wt","sl","enc","setw","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi|iiiii:CreateFont2",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of CreateFont2. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFont *)CreateFont2(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFont_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

static PyObject *_wrap_CreateFont3(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _result;
    FXApp * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","nm", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:CreateFont3",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of CreateFont3. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFont *)CreateFont3(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFont_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

static PyObject *_wrap_CreateRecentFiles1(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRecentFiles * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":CreateRecentFiles1",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRecentFiles *)CreateRecentFiles1();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRecentFiles_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_CreateRecentFiles2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRecentFiles * _result;
    FXString * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "gp","tgt","sel", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oi:CreateRecentFiles2",_kwnames,&_obj0,&_obj1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRecentFiles *)CreateRecentFiles2(*_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRecentFiles_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg0;
}
    return _resultobj;
}

#define FXRectangle_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static PyObject *_wrap_FX_Rectangle_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_x_set. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_x_get(_swigobj) ((FXshort ) _swigobj->x)
static PyObject *_wrap_FX_Rectangle_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_x_get. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static PyObject *_wrap_FX_Rectangle_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_y_set. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_y_get(_swigobj) ((FXshort ) _swigobj->y)
static PyObject *_wrap_FX_Rectangle_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_y_get. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_w_set(_swigobj,_swigval) (_swigobj->w = _swigval,_swigval)
static PyObject *_wrap_FX_Rectangle_w_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_w_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_w_set. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_w_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_w_get(_swigobj) ((FXshort ) _swigobj->w)
static PyObject *_wrap_FX_Rectangle_w_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_w_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_w_get. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_w_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_h_set(_swigobj,_swigval) (_swigobj->h = _swigval,_swigval)
static PyObject *_wrap_FX_Rectangle_h_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_h_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_h_set. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_h_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXRectangle_h_get(_swigobj) ((FXshort ) _swigobj->h)
static PyObject *_wrap_FX_Rectangle_h_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_h_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_h_get. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXRectangle_h_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define new_FX_Rectangle(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new FXRectangle(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_FX_Rectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXshort  _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    FXshort  _arg3;
    char *_kwnames[] = { "xx","yy","ww","hh", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"hhhh:new_FX_Rectangle",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRectangle *)new_FX_Rectangle(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXbool  FXRectangle___eq__(FXRectangle *self,const FXRectangle & other) {
      return (*self == other);
      }
static PyObject *_wrap_FX_Rectangle___eq__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Rectangle___eq__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle___eq__. Expected _FXRectangle_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Rectangle___eq__. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRectangle___eq__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXbool  FXRectangle___ne__(FXRectangle *self,const FXRectangle & other) {
      return (*self != other);
      }
static PyObject *_wrap_FX_Rectangle___ne__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Rectangle___ne__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle___ne__. Expected _FXRectangle_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Rectangle___ne__. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRectangle___ne__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Rectangle_containsPoint(_swigobj,_swigarg0)  (_swigobj->contains(_swigarg0))
static PyObject *_wrap_FX_Rectangle_containsPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","p", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Rectangle_containsPoint",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_containsPoint. Expected _FXRectangle_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Rectangle_containsPoint. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Rectangle_containsPoint(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Rectangle_containsXY(_swigobj,_swigarg0,_swigarg1)  (_swigobj->contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Rectangle_containsXY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","xx","yy", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohh:FX_Rectangle_containsXY",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_containsXY. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Rectangle_containsXY(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Rectangle_containsRectangle(_swigobj,_swigarg0)  (_swigobj->contains(_swigarg0))
static PyObject *_wrap_FX_Rectangle_containsRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","r", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Rectangle_containsRectangle",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_containsRectangle. Expected _FXRectangle_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Rectangle_containsRectangle. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Rectangle_containsRectangle(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXbool  FXRectangle_overlaps(FXRectangle *self,const FXRectangle & other) {
      return overlap(*self, other);
      }
static PyObject *_wrap_FX_Rectangle_overlaps(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRectangle * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Rectangle_overlaps",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_overlaps. Expected _FXRectangle_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Rectangle_overlaps. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRectangle_overlaps(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Rectangle_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->move(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Rectangle_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dx","dy", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohh:FX_Rectangle_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_move. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_move(_arg0,_arg1,_arg2);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_grow(_swigobj,_swigarg0)  (_swigobj->grow(_swigarg0))
static PyObject *_wrap_FX_Rectangle_grow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","margin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_grow",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_grow. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_grow(_arg0,_arg1);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_grow2(_swigobj,_swigarg0,_swigarg1)  (_swigobj->grow(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Rectangle_grow2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hormargin","vermargin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohh:FX_Rectangle_grow2",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_grow2. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_grow2(_arg0,_arg1,_arg2);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_grow4(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->grow(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Rectangle_grow4(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    FXshort  _arg3;
    FXshort  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","leftmargin","rightmargin","topmargin","bottommargin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohhhh:FX_Rectangle_grow4",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_grow4. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_grow4(_arg0,_arg1,_arg2,_arg3,_arg4);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_shrink(_swigobj,_swigarg0)  (_swigobj->shrink(_swigarg0))
static PyObject *_wrap_FX_Rectangle_shrink(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","margin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Rectangle_shrink",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_shrink. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_shrink(_arg0,_arg1);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_shrink2(_swigobj,_swigarg0,_swigarg1)  (_swigobj->shrink(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Rectangle_shrink2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hormargin","vermargin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohh:FX_Rectangle_shrink2",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_shrink2. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_shrink2(_arg0,_arg1,_arg2);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_shrink4(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->shrink(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Rectangle_shrink4(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXRectangle * _arg0;
    FXshort  _arg1;
    FXshort  _arg2;
    FXshort  _arg3;
    FXshort  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","leftmargin","rightmargin","topmargin","bottommargin", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ohhhh:FX_Rectangle_shrink4",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_shrink4. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRectangle & _result_ref = FX_Rectangle_shrink4(_arg0,_arg1,_arg2,_arg3,_arg4);
    _result = (FXRectangle *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Rectangle_tl(_swigobj)  (_swigobj->tl())
static PyObject *_wrap_FX_Rectangle_tl(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_tl",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_tl. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FX_Rectangle_tl(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_Rectangle_tr(_swigobj)  (_swigobj->tr())
static PyObject *_wrap_FX_Rectangle_tr(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_tr",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_tr. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FX_Rectangle_tr(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_Rectangle_bl(_swigobj)  (_swigobj->bl())
static PyObject *_wrap_FX_Rectangle_bl(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_bl",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_bl. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FX_Rectangle_bl(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_Rectangle_br(_swigobj)  (_swigobj->br())
static PyObject *_wrap_FX_Rectangle_br(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXRectangle * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Rectangle_br",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Rectangle_br. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FX_Rectangle_br(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FXSize_w_set(_swigobj,_swigval) (_swigobj->w = _swigval,_swigval)
static PyObject *_wrap_FX_Size_w_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size_w_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size_w_set. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXSize_w_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXSize_w_get(_swigobj) ((FXshort ) _swigobj->w)
static PyObject *_wrap_FX_Size_w_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXSize * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Size_w_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size_w_get. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXSize_w_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXSize_h_set(_swigobj,_swigval) (_swigobj->h = _swigval,_swigval)
static PyObject *_wrap_FX_Size_h_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size_h_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size_h_set. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXSize_h_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXSize_h_get(_swigobj) ((FXshort ) _swigobj->h)
static PyObject *_wrap_FX_Size_h_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXSize * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Size_h_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size_h_get. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXSize_h_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define new_FX_Size(_swigarg0,_swigarg1) (new FXSize(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_Size(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXshort  _arg0;
    FXshort  _arg1;
    char *_kwnames[] = { "ww","hh", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"hh:new_FX_Size",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSize *)new_FX_Size(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSize_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXbool  FXSize___eq__(FXSize *self,const FXSize & other) {
      return (*self == other);
      }
static PyObject *_wrap_FX_Size___eq__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___eq__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___eq__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___eq__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSize___eq__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXbool  FXSize___ne__(FXSize *self,const FXSize & other) {
      return (*self != other);
      }
static PyObject *_wrap_FX_Size___ne__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___ne__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___ne__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___ne__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSize___ne__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXSize  FXSize___add__(FXSize *self,const FXSize & s) {
      return (*self + s);
      }
static PyObject *_wrap_FX_Size___add__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","s", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___add__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___add__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___add__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXSize (FXSize___add__(_arg0,*_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXSize_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXSize  FXSize___sub__(FXSize *self,const FXSize & s) {
      return (*self - s);
      }
static PyObject *_wrap_FX_Size___sub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","s", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___sub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___sub__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___sub__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXSize (FXSize___sub__(_arg0,*_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXSize_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXSize  FXSize___mul__(FXSize *self,FXshort  c) {
      return (*self * c);
      }
static PyObject *_wrap_FX_Size___mul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size___mul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___mul__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXSize (FXSize___mul__(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXSize_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXSize  FXSize___div__(FXSize *self,FXshort  c) {
      return (*self / c);
      }
static PyObject *_wrap_FX_Size___div__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size___div__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___div__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXSize (FXSize___div__(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXSize_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXSize & FXSize___iadd__(FXSize *self,const FXSize & s) {
      return (*self += s);
      }
static PyObject *_wrap_FX_Size___iadd__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","s", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___iadd__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___iadd__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___iadd__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSize & _result_ref = FXSize___iadd__(_arg0,*_arg1);
    _result = (FXSize *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSize_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXSize & FXSize___isub__(FXSize *self,const FXSize & s) {
      return (*self -= s);
      }
static PyObject *_wrap_FX_Size___isub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXSize * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","s", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Size___isub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___isub__. Expected _FXSize_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Size___isub__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSize & _result_ref = FXSize___isub__(_arg0,*_arg1);
    _result = (FXSize *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSize_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXSize & FXSize___imul__(FXSize *self,FXshort  c) {
      return (*self *= c);
      }
static PyObject *_wrap_FX_Size___imul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size___imul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___imul__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSize & _result_ref = FXSize___imul__(_arg0,_arg1);
    _result = (FXSize *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSize_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXSize & FXSize___idiv__(FXSize *self,FXshort  c) {
      return (*self /= c);
      }
static PyObject *_wrap_FX_Size___idiv__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Size___idiv__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___idiv__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSize & _result_ref = FXSize___idiv__(_arg0,_arg1);
    _result = (FXSize *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSize_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXSize  FXSize___neg__(FXSize *self) {
      return -(*self);
      }
static PyObject *_wrap_FX_Size___neg__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSize * _result;
    FXSize * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Size___neg__",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSize_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Size___neg__. Expected _FXSize_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXSize (FXSize___neg__(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXSize_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FXPoint_x_set(_swigobj,_swigval) (_swigobj->x = _swigval,_swigval)
static PyObject *_wrap_FX_Point_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point_x_set. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXPoint_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXPoint_x_get(_swigobj) ((FXshort ) _swigobj->x)
static PyObject *_wrap_FX_Point_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXPoint * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Point_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point_x_get. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXPoint_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXPoint_y_set(_swigobj,_swigval) (_swigobj->y = _swigval,_swigval)
static PyObject *_wrap_FX_Point_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point_y_set. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXPoint_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define FXPoint_y_get(_swigobj) ((FXshort ) _swigobj->y)
static PyObject *_wrap_FX_Point_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXshort  _result;
    FXPoint * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Point_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point_y_get. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXshort )FXPoint_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("h",_result);
    return _resultobj;
}

#define new_FX_Point(_swigarg0,_swigarg1) (new FXPoint(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_Point(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXshort  _arg0;
    FXshort  _arg1;
    char *_kwnames[] = { "xx","yy", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"hh:new_FX_Point",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPoint *)new_FX_Point(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPoint_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXbool  FXPoint___eq__(FXPoint *self,const FXPoint & other) {
      return (*self == other);
      }
static PyObject *_wrap_FX_Point___eq__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___eq__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___eq__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___eq__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPoint___eq__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXbool  FXPoint___ne__(FXPoint *self,const FXPoint & other) {
      return (*self != other);
      }
static PyObject *_wrap_FX_Point___ne__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___ne__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___ne__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___ne__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPoint___ne__(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static FXPoint  FXPoint___add__(FXPoint *self,const FXPoint & other) {
      return (*self + other);
      }
static PyObject *_wrap_FX_Point___add__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___add__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___add__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___add__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FXPoint___add__(_arg0,*_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXPoint  FXPoint___sub__(FXPoint *self,const FXPoint & other) {
      return (*self - other);
      }
static PyObject *_wrap_FX_Point___sub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___sub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___sub__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___sub__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FXPoint___sub__(_arg0,*_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXPoint  FXPoint___mul__(FXPoint *self,FXshort  c) {
      return (*self * c);
      }
static PyObject *_wrap_FX_Point___mul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point___mul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___mul__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FXPoint___mul__(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXPoint  FXPoint___div__(FXPoint *self,FXshort  c) {
      return (*self / c);
      }
static PyObject *_wrap_FX_Point___div__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point___div__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___div__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FXPoint___div__(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXPoint & FXPoint___iadd__(FXPoint *self,const FXPoint & other) {
      return (*self += other);
      }
static PyObject *_wrap_FX_Point___iadd__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___iadd__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___iadd__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___iadd__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPoint & _result_ref = FXPoint___iadd__(_arg0,*_arg1);
    _result = (FXPoint *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPoint_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXPoint & FXPoint___isub__(FXPoint *self,const FXPoint & other) {
      return (*self -= other);
      }
static PyObject *_wrap_FX_Point___isub__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXPoint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","other", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Point___isub__",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___isub__. Expected _FXPoint_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Point___isub__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPoint & _result_ref = FXPoint___isub__(_arg0,*_arg1);
    _result = (FXPoint *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPoint_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXPoint & FXPoint___imul__(FXPoint *self,FXshort  c) {
      return (*self *= c);
      }
static PyObject *_wrap_FX_Point___imul__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point___imul__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___imul__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPoint & _result_ref = FXPoint___imul__(_arg0,_arg1);
    _result = (FXPoint *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPoint_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXPoint & FXPoint___idiv__(FXPoint *self,FXshort  c) {
      return (*self /= c);
      }
static PyObject *_wrap_FX_Point___idiv__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    FXshort  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oh:FX_Point___idiv__",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___idiv__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPoint & _result_ref = FXPoint___idiv__(_arg0,_arg1);
    _result = (FXPoint *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPoint_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static FXPoint  FXPoint___neg__(FXPoint *self) {
      return -(*self);
      }
static PyObject *_wrap_FX_Point___neg__(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPoint * _result;
    FXPoint * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Point___neg__",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPoint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Point___neg__. Expected _FXPoint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXPoint (FXPoint___neg__(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXPoint_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static FXchar * FXFontDesc_face_set(FXFontDesc *obj, FXchar val[48]) {
{ strncpy(obj->face, val, 48); }
    return (FXchar *) val;
}
static PyObject *_wrap_FXFontDesc_face_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXFontDesc * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","face", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FXFontDesc_face_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_face_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FXFontDesc_face_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FXFontDesc_face_get(_swigobj) ((FXchar *) _swigobj->face)
static PyObject *_wrap_FXFontDesc_face_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_face_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_face_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FXFontDesc_face_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FXFontDesc_size_set(_swigobj,_swigval) (_swigobj->size = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_size_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","size", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_size_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_size_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_size_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_size_get(_swigobj) ((FXuint ) _swigobj->size)
static PyObject *_wrap_FXFontDesc_size_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_size_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_size_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_size_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_weight_set(_swigobj,_swigval) (_swigobj->weight = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_weight_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","weight", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_weight_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_weight_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_weight_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_weight_get(_swigobj) ((FXuint ) _swigobj->weight)
static PyObject *_wrap_FXFontDesc_weight_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_weight_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_weight_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_weight_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_slant_set(_swigobj,_swigval) (_swigobj->slant = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_slant_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","slant", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_slant_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_slant_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_slant_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_slant_get(_swigobj) ((FXuint ) _swigobj->slant)
static PyObject *_wrap_FXFontDesc_slant_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_slant_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_slant_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_slant_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_encoding_set(_swigobj,_swigval) (_swigobj->encoding = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_encoding_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","encoding", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_encoding_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_encoding_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_encoding_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_encoding_get(_swigobj) ((FXuint ) _swigobj->encoding)
static PyObject *_wrap_FXFontDesc_encoding_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_encoding_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_encoding_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_encoding_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_setwidth_set(_swigobj,_swigval) (_swigobj->setwidth = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_setwidth_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","setwidth", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_setwidth_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_setwidth_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_setwidth_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_setwidth_get(_swigobj) ((FXuint ) _swigobj->setwidth)
static PyObject *_wrap_FXFontDesc_setwidth_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_setwidth_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_setwidth_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_setwidth_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_flags_set(_swigobj,_swigval) (_swigobj->flags = _swigval,_swigval)
static PyObject *_wrap_FXFontDesc_flags_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFontDesc_flags_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_flags_set. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_flags_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFontDesc_flags_get(_swigobj) ((FXuint ) _swigobj->flags)
static PyObject *_wrap_FXFontDesc_flags_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFontDesc * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFontDesc_flags_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFontDesc_flags_get. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXFontDesc_flags_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_name_set(_swigobj,_swigval) (_swigobj->name = *(_swigval),_swigval)
static PyObject *_wrap_FXPrinter_name_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXPrinter * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","name", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPrinter_name_set",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_name_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXString *)FXPrinter_name_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _arg1;
}
    return _resultobj;
}

#define FXPrinter_name_get(_swigobj) (&_swigobj->name)
static PyObject *_wrap_FXPrinter_name_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_name_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_name_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXString *)FXPrinter_name_get(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FXPrinter_firstpage_set(_swigobj,_swigval) (_swigobj->firstpage = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_firstpage_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","firstpage", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_firstpage_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_firstpage_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_firstpage_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_firstpage_get(_swigobj) ((FXuint ) _swigobj->firstpage)
static PyObject *_wrap_FXPrinter_firstpage_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_firstpage_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_firstpage_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_firstpage_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_lastpage_set(_swigobj,_swigval) (_swigobj->lastpage = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_lastpage_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","lastpage", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_lastpage_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_lastpage_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_lastpage_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_lastpage_get(_swigobj) ((FXuint ) _swigobj->lastpage)
static PyObject *_wrap_FXPrinter_lastpage_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_lastpage_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_lastpage_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_lastpage_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_currentpage_set(_swigobj,_swigval) (_swigobj->currentpage = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_currentpage_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","currentpage", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_currentpage_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_currentpage_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_currentpage_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_currentpage_get(_swigobj) ((FXuint ) _swigobj->currentpage)
static PyObject *_wrap_FXPrinter_currentpage_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_currentpage_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_currentpage_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_currentpage_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_frompage_set(_swigobj,_swigval) (_swigobj->frompage = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_frompage_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","frompage", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_frompage_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_frompage_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_frompage_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_frompage_get(_swigobj) ((FXuint ) _swigobj->frompage)
static PyObject *_wrap_FXPrinter_frompage_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_frompage_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_frompage_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_frompage_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_topage_set(_swigobj,_swigval) (_swigobj->topage = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_topage_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","topage", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_topage_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_topage_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_topage_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_topage_get(_swigobj) ((FXuint ) _swigobj->topage)
static PyObject *_wrap_FXPrinter_topage_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_topage_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_topage_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_topage_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_mediasize_set(_swigobj,_swigval) (_swigobj->mediasize = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_mediasize_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mediasize", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_mediasize_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediasize_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_mediasize_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_mediasize_get(_swigobj) ((FXuint ) _swigobj->mediasize)
static PyObject *_wrap_FXPrinter_mediasize_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_mediasize_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediasize_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_mediasize_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_mediawidth_set(_swigobj,_swigval) (_swigobj->mediawidth = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_mediawidth_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mediawidth", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_mediawidth_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediawidth_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_mediawidth_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_mediawidth_get(_swigobj) ((FXdouble ) _swigobj->mediawidth)
static PyObject *_wrap_FXPrinter_mediawidth_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_mediawidth_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediawidth_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_mediawidth_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_mediaheight_set(_swigobj,_swigval) (_swigobj->mediaheight = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_mediaheight_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mediaheight", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_mediaheight_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediaheight_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_mediaheight_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_mediaheight_get(_swigobj) ((FXdouble ) _swigobj->mediaheight)
static PyObject *_wrap_FXPrinter_mediaheight_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_mediaheight_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_mediaheight_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_mediaheight_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_leftmargin_set(_swigobj,_swigval) (_swigobj->leftmargin = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_leftmargin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","leftmargin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_leftmargin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_leftmargin_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_leftmargin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_leftmargin_get(_swigobj) ((FXdouble ) _swigobj->leftmargin)
static PyObject *_wrap_FXPrinter_leftmargin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_leftmargin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_leftmargin_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_leftmargin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_rightmargin_set(_swigobj,_swigval) (_swigobj->rightmargin = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_rightmargin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","rightmargin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_rightmargin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_rightmargin_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_rightmargin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_rightmargin_get(_swigobj) ((FXdouble ) _swigobj->rightmargin)
static PyObject *_wrap_FXPrinter_rightmargin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_rightmargin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_rightmargin_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_rightmargin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_topmargin_set(_swigobj,_swigval) (_swigobj->topmargin = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_topmargin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","topmargin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_topmargin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_topmargin_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_topmargin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_topmargin_get(_swigobj) ((FXdouble ) _swigobj->topmargin)
static PyObject *_wrap_FXPrinter_topmargin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_topmargin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_topmargin_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_topmargin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_bottommargin_set(_swigobj,_swigval) (_swigobj->bottommargin = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_bottommargin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","bottommargin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPrinter_bottommargin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_bottommargin_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_bottommargin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_bottommargin_get(_swigobj) ((FXdouble ) _swigobj->bottommargin)
static PyObject *_wrap_FXPrinter_bottommargin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_bottommargin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_bottommargin_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPrinter_bottommargin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPrinter_numcopies_set(_swigobj,_swigval) (_swigobj->numcopies = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_numcopies_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","numcopies", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_numcopies_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_numcopies_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_numcopies_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_numcopies_get(_swigobj) ((FXuint ) _swigobj->numcopies)
static PyObject *_wrap_FXPrinter_numcopies_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_numcopies_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_numcopies_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_numcopies_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_flags_set(_swigobj,_swigval) (_swigobj->flags = _swigval,_swigval)
static PyObject *_wrap_FXPrinter_flags_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPrinter_flags_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_flags_set. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_flags_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPrinter_flags_get(_swigobj) ((FXuint ) _swigobj->flags)
static PyObject *_wrap_FXPrinter_flags_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPrinter * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPrinter_flags_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPrinter_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPrinter_flags_get. Expected _FXPrinter_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXPrinter_flags_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPSBounds_xmin_set(_swigobj,_swigval) (_swigobj->xmin = _swigval,_swigval)
static PyObject *_wrap_FXPSBounds_xmin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","xmin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPSBounds_xmin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_xmin_set. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_xmin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_xmin_get(_swigobj) ((FXdouble ) _swigobj->xmin)
static PyObject *_wrap_FXPSBounds_xmin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPSBounds_xmin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_xmin_get. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_xmin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_xmax_set(_swigobj,_swigval) (_swigobj->xmax = _swigval,_swigval)
static PyObject *_wrap_FXPSBounds_xmax_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","xmax", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPSBounds_xmax_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_xmax_set. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_xmax_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_xmax_get(_swigobj) ((FXdouble ) _swigobj->xmax)
static PyObject *_wrap_FXPSBounds_xmax_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPSBounds_xmax_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_xmax_get. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_xmax_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_ymin_set(_swigobj,_swigval) (_swigobj->ymin = _swigval,_swigval)
static PyObject *_wrap_FXPSBounds_ymin_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ymin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPSBounds_ymin_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_ymin_set. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_ymin_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_ymin_get(_swigobj) ((FXdouble ) _swigobj->ymin)
static PyObject *_wrap_FXPSBounds_ymin_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPSBounds_ymin_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_ymin_get. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_ymin_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_ymax_set(_swigobj,_swigval) (_swigobj->ymax = _swigval,_swigval)
static PyObject *_wrap_FXPSBounds_ymax_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    FXdouble  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ymax", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Od:FXPSBounds_ymax_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_ymax_set. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_ymax_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FXPSBounds_ymax_get(_swigobj) ((FXdouble ) _swigobj->ymax)
static PyObject *_wrap_FXPSBounds_ymax_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXPSBounds * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPSBounds_ymax_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPSBounds_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPSBounds_ymax_get. Expected _FXPSBounds_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FXPSBounds_ymax_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

static FXEvent *new_FXEvent(const char *str) {
      if (str) {
        FXEvent *ptr;
        sscanf(str,"%p",&ptr);
        FXEvent *ev = new FXEvent(*ptr);
        return ev;
      }
      else
	return 0;
    }

static PyObject *_wrap_new_FXEvent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXEvent * _result;
    char * _arg0;
    char *_kwnames[] = { "str", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"s:new_FXEvent",_kwnames,&_arg0)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXEvent *)new_FXEvent(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXEvent_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXEvent_type_set(_swigobj,_swigval) (_swigobj->type = _swigval,_swigval)
static PyObject *_wrap_FXEvent_type_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","type", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_type_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_type_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_type_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_type_get(_swigobj) ((FXuint ) _swigobj->type)
static PyObject *_wrap_FXEvent_type_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_type_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_type_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_type_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_time_set(_swigobj,_swigval) (_swigobj->time = _swigval,_swigval)
static PyObject *_wrap_FXEvent_time_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","time", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_time_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_time_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_time_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_time_get(_swigobj) ((FXuint ) _swigobj->time)
static PyObject *_wrap_FXEvent_time_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_time_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_time_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_time_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_win_x_set(_swigobj,_swigval) (_swigobj->win_x = _swigval,_swigval)
static PyObject *_wrap_FXEvent_win_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","win_x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_win_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_win_x_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_win_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_win_x_get(_swigobj) ((FXint ) _swigobj->win_x)
static PyObject *_wrap_FXEvent_win_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_win_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_win_x_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_win_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_win_y_set(_swigobj,_swigval) (_swigobj->win_y = _swigval,_swigval)
static PyObject *_wrap_FXEvent_win_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","win_y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_win_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_win_y_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_win_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_win_y_get(_swigobj) ((FXint ) _swigobj->win_y)
static PyObject *_wrap_FXEvent_win_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_win_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_win_y_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_win_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_root_x_set(_swigobj,_swigval) (_swigobj->root_x = _swigval,_swigval)
static PyObject *_wrap_FXEvent_root_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","root_x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_root_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_root_x_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_root_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_root_x_get(_swigobj) ((FXint ) _swigobj->root_x)
static PyObject *_wrap_FXEvent_root_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_root_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_root_x_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_root_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_root_y_set(_swigobj,_swigval) (_swigobj->root_y = _swigval,_swigval)
static PyObject *_wrap_FXEvent_root_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","root_y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_root_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_root_y_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_root_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_root_y_get(_swigobj) ((FXint ) _swigobj->root_y)
static PyObject *_wrap_FXEvent_root_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_root_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_root_y_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_root_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_state_set(_swigobj,_swigval) (_swigobj->state = _swigval,_swigval)
static PyObject *_wrap_FXEvent_state_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","state", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_state_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_state_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_state_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_state_get(_swigobj) ((FXint ) _swigobj->state)
static PyObject *_wrap_FXEvent_state_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_state_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_state_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_state_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_code_set(_swigobj,_swigval) (_swigobj->code = _swigval,_swigval)
static PyObject *_wrap_FXEvent_code_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","code", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_code_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_code_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_code_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_code_get(_swigobj) ((FXint ) _swigobj->code)
static PyObject *_wrap_FXEvent_code_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_code_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_code_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_code_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_text_set(_swigobj,_swigval) (_swigobj->text = *(_swigval),_swigval)
static PyObject *_wrap_FXEvent_text_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXEvent * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXEvent_text_set",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_text_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXString *)FXEvent_text_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _arg1;
}
    return _resultobj;
}

#define FXEvent_text_get(_swigobj) (&_swigobj->text)
static PyObject *_wrap_FXEvent_text_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_text_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_text_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXString *)FXEvent_text_get(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FXEvent_last_x_set(_swigobj,_swigval) (_swigobj->last_x = _swigval,_swigval)
static PyObject *_wrap_FXEvent_last_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","last_x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_last_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_last_x_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_last_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_last_x_get(_swigobj) ((FXint ) _swigobj->last_x)
static PyObject *_wrap_FXEvent_last_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_last_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_last_x_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_last_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_last_y_set(_swigobj,_swigval) (_swigobj->last_y = _swigval,_swigval)
static PyObject *_wrap_FXEvent_last_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","last_y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_last_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_last_y_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_last_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_last_y_get(_swigobj) ((FXint ) _swigobj->last_y)
static PyObject *_wrap_FXEvent_last_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_last_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_last_y_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_last_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_x_set(_swigobj,_swigval) (_swigobj->click_x = _swigval,_swigval)
static PyObject *_wrap_FXEvent_click_x_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","click_x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_click_x_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_x_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_x_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_x_get(_swigobj) ((FXint ) _swigobj->click_x)
static PyObject *_wrap_FXEvent_click_x_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_click_x_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_x_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_x_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_y_set(_swigobj,_swigval) (_swigobj->click_y = _swigval,_swigval)
static PyObject *_wrap_FXEvent_click_y_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","click_y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_click_y_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_y_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_y_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_y_get(_swigobj) ((FXint ) _swigobj->click_y)
static PyObject *_wrap_FXEvent_click_y_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_click_y_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_y_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_y_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_time_set(_swigobj,_swigval) (_swigobj->click_time = _swigval,_swigval)
static PyObject *_wrap_FXEvent_click_time_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","click_time", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_click_time_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_time_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_click_time_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_time_get(_swigobj) ((FXuint ) _swigobj->click_time)
static PyObject *_wrap_FXEvent_click_time_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_click_time_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_time_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_click_time_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_button_set(_swigobj,_swigval) (_swigobj->click_button = _swigval,_swigval)
static PyObject *_wrap_FXEvent_click_button_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","click_button", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_click_button_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_button_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_click_button_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_button_get(_swigobj) ((FXuint ) _swigobj->click_button)
static PyObject *_wrap_FXEvent_click_button_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_click_button_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_button_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FXEvent_click_button_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_count_set(_swigobj,_swigval) (_swigobj->click_count = _swigval,_swigval)
static PyObject *_wrap_FXEvent_click_count_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","click_count", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_click_count_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_count_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_count_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_click_count_get(_swigobj) ((FXint ) _swigobj->click_count)
static PyObject *_wrap_FXEvent_click_count_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_click_count_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_click_count_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXEvent_click_count_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_moved_set(_swigobj,_swigval) (_swigobj->moved = _swigval,_swigval)
static PyObject *_wrap_FXEvent_moved_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXEvent * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","moved", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXEvent_moved_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_moved_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXEvent_moved_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXEvent_moved_get(_swigobj) ((FXbool ) _swigobj->moved)
static PyObject *_wrap_FXEvent_moved_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_moved_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_moved_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXEvent_moved_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXEvent_rect_set(_swigobj,_swigval) (_swigobj->rect = *(_swigval),_swigval)
static PyObject *_wrap_FXEvent_rect_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXEvent * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","rect", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXEvent_rect_set",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_rect_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXEvent_rect_set. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRectangle *)FXEvent_rect_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXEvent_rect_get(_swigobj) (&_swigobj->rect)
static PyObject *_wrap_FXEvent_rect_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRectangle * _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_rect_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_rect_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRectangle *)FXEvent_rect_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRectangle_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXEvent_synthetic_set(_swigobj,_swigval) (_swigobj->synthetic = _swigval,_swigval)
static PyObject *_wrap_FXEvent_synthetic_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXEvent * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","synthetic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXEvent_synthetic_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_synthetic_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXEvent_synthetic_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXEvent_synthetic_get(_swigobj) ((FXbool ) _swigobj->synthetic)
static PyObject *_wrap_FXEvent_synthetic_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_synthetic_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_synthetic_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXEvent_synthetic_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXEvent_target_set(_swigobj,_swigval) (_swigobj->target = _swigval,_swigval)
static PyObject *_wrap_FXEvent_target_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragType  _result;
    FXEvent * _arg0;
    FXDragType  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","target", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXEvent_target_set",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_target_set. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragType )FXEvent_target_set(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXEvent_target_get(_swigobj) ((FXDragType ) _swigobj->target)
static PyObject *_wrap_FXEvent_target_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragType  _result;
    FXEvent * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXEvent_target_get",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXEvent_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXEvent_target_get. Expected _FXEvent_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragType )FXEvent_target_get(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Object_getClassName(_swigobj)  (_swigobj->getClassName())
static PyObject *_wrap_FX_Object_getClassName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    char * _result;
    FXObject * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Object_getClassName",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (char *)FX_Object_getClassName(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_Object_save(_swigobj,_swigarg0)  (_swigobj->save(_swigarg0))
static PyObject *_wrap_FX_Object_save(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _arg0;
    FXStream * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Object_save",_kwnames,&_obj0,&_argo1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Object_save. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Object_save(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Object_load(_swigobj,_swigarg0)  (_swigobj->load(_swigarg0))
static PyObject *_wrap_FX_Object_load(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _arg0;
    FXStream * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Object_load",_kwnames,&_obj0,&_argo1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Object_load. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Object_load(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Object_handle(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->handle(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Object_handle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXObject * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","sender","sel","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Object_handle",_kwnames,&_obj0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Object_handle(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Object_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Object_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXObject * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","sender","sel","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Object_onDefault",_kwnames,&_obj0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Object_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXPyObjectToFXObject(void *ptr) {
    FXPyObject *src;
    FXObject *dest;
    src = (FXPyObject *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXObject() (new FXPyObject())
static PyObject *_wrap_new_FXObject(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyObject * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXObject",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyObject *)new_FXObject();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXObject_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXObject_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyObject * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXObject_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyObject_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXObject_onDefault. Expected _FXPyObject_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXObject_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXIdToFXObject(void *ptr) {
    FXId *src;
    FXObject *dest;
    src = (FXId *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Id_getApp(_swigobj)  (_swigobj->getApp())
static PyObject *_wrap_FX_Id_getApp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _result;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_getApp",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_getApp. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXApp *)FX_Id_getApp(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Id_id(_swigobj)  (_swigobj->id())
static PyObject *_wrap_FX_Id_id(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXID  _result;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_id",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_id. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXID )FX_Id_id(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Id_create(_swigobj)  (_swigobj->create())
static PyObject *_wrap_FX_Id_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_create. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Id_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Id_detach(_swigobj)  (_swigobj->detach())
static PyObject *_wrap_FX_Id_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_detach. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Id_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Id_destroy(_swigobj)  (_swigobj->destroy())
static PyObject *_wrap_FX_Id_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_destroy. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Id_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Id_setUserData(_swigobj,_swigarg0)  (_swigobj->setUserData(_swigarg0))
static PyObject *_wrap_FX_Id_setUserData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXId * _arg0;
    void * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Id_setUserData",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_setUserData. Expected _FXId_p.");
        return NULL;
        }
    }
{
    _arg1 = NULL;
    if (PyObject_HasAttrString(_obj1, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj1, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg1 = NULL;
	}
	else
	    _arg1 = (void*) _obj1;
	Py_DECREF(obj);
    }
    else
	_arg1 = (void*) _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Id_setUserData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Id_getUserData(_swigobj)  (_swigobj->getUserData())
static PyObject *_wrap_FX_Id_getUserData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Id_getUserData",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Id_getUserData. Expected _FXId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Id_getUserData(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXPyIdToFXId(void *ptr) {
    FXPyId *src;
    FXId *dest;
    src = (FXPyId *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyIdToFXObject(void *ptr) {
    FXPyId *src;
    FXObject *dest;
    src = (FXPyId *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FXId_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXId_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyId * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXId_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXId_onDefault. Expected _FXPyId_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXId_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXId_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXId_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXId_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXId_create. Expected _FXPyId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXId_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXId_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXId_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXId_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXId_destroy. Expected _FXPyId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXId_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXId_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXId_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyId * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXId_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyId_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXId_detach. Expected _FXPyId_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXId_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXDrawableToFXId(void *ptr) {
    FXDrawable *src;
    FXId *dest;
    src = (FXDrawable *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXDrawableToFXObject(void *ptr) {
    FXDrawable *src;
    FXObject *dest;
    src = (FXDrawable *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Drawable_getWidth(_swigobj)  (_swigobj->getWidth())
static PyObject *_wrap_FX_Drawable_getWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Drawable_getWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Drawable_getWidth. Expected _FXDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Drawable_getWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Drawable_getHeight(_swigobj)  (_swigobj->getHeight())
static PyObject *_wrap_FX_Drawable_getHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Drawable_getHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Drawable_getHeight. Expected _FXDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Drawable_getHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Drawable_getVisual(_swigobj)  (_swigobj->getVisual())
static PyObject *_wrap_FX_Drawable_getVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisual * _result;
    FXDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Drawable_getVisual",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Drawable_getVisual. Expected _FXDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXVisual *)FX_Drawable_getVisual(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXVisual_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Drawable_setVisual(_swigobj,_swigarg0)  (_swigobj->setVisual(_swigarg0))
static PyObject *_wrap_FX_Drawable_setVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDrawable * _arg0;
    FXVisual * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","vis", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Drawable_setVisual",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Drawable_setVisual. Expected _FXDrawable_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Drawable_setVisual. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Drawable_setVisual(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Drawable_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Drawable_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDrawable * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Drawable_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Drawable_resize. Expected _FXDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Drawable_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyDrawableToFXDrawable(void *ptr) {
    FXPyDrawable *src;
    FXDrawable *dest;
    src = (FXPyDrawable *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyDrawableToFXId(void *ptr) {
    FXPyDrawable *src;
    FXId *dest;
    src = (FXPyDrawable *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyDrawableToFXObject(void *ptr) {
    FXPyDrawable *src;
    FXObject *dest;
    src = (FXPyDrawable *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FXDrawable_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDrawable_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDrawable * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDrawable_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDrawable_onDefault. Expected _FXPyDrawable_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDrawable_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXDrawable_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXDrawable_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDrawable_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDrawable_create. Expected _FXPyDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDrawable_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDrawable_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXDrawable_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDrawable_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDrawable_destroy. Expected _FXPyDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDrawable_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDrawable_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXDrawable_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDrawable * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDrawable_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDrawable_detach. Expected _FXPyDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDrawable_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDrawable_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDrawable_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDrawable * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDrawable_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDrawable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDrawable_resize. Expected _FXPyDrawable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDrawable_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXAppToFXObject(void *ptr) {
    FXApp *src;
    FXObject *dest;
    src = (FXApp *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_App_onCmdQuit(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdQuit(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_App_onCmdQuit(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXApp * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_App_onCmdQuit",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_onCmdQuit. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_App_onCmdQuit. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_App_onCmdQuit(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_App_onCmdDump(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDump(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_App_onCmdDump(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXApp * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_App_onCmdDump",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_onCmdDump. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_App_onCmdDump. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_App_onCmdDump(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject * FXApp_copyright(FXApp *self) {
      return PyString_FromString((const char *) FXApp::copyright);
    }
static PyObject *_wrap_FX_App_copyright(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_copyright",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_copyright. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXApp_copyright(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define new_FX_App(_swigarg0,_swigarg1) (new FXApp(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_App(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _result;
    FXchar * _arg0 = (FXchar *) "Application";
    FXchar * _arg1 = (FXchar *) "FoxDefault";
    char *_kwnames[] = { "name","vendor", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ss:new_FX_App",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXApp *)new_FX_App(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_getAppName(_swigobj)  (_swigobj->getAppName())
static PyObject *_wrap_FX_App_getAppName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getAppName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getAppName. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        const FXString & _result_ref = FX_App_getAppName(_arg0);
    _result = (FXString *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FX_App_getVendorName(_swigobj)  (_swigobj->getVendorName())
static PyObject *_wrap_FX_App_getVendorName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getVendorName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getVendorName. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        const FXString & _result_ref = FX_App_getVendorName(_arg0);
    _result = (FXString *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FX_App_openDisplay(_swigobj,_swigarg0)  (_swigobj->openDisplay(_swigarg0))
static PyObject *_wrap_FX_App_openDisplay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    FXchar * _arg1 = (FXchar *) ":0";
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dpyname", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|s:FX_App_openDisplay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_openDisplay. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_openDisplay(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_closeDisplay(_swigobj)  (_swigobj->closeDisplay())
static PyObject *_wrap_FX_App_closeDisplay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_closeDisplay",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_closeDisplay. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_closeDisplay(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_getDefaultVisual(_swigobj)  (_swigobj->getDefaultVisual())
static PyObject *_wrap_FX_App_getDefaultVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisual * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getDefaultVisual",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getDefaultVisual. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXVisual *)FX_App_getDefaultVisual(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXVisual_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_setDefaultVisual(_swigobj,_swigarg0)  (_swigobj->setDefaultVisual(_swigarg0))
static PyObject *_wrap_FX_App_setDefaultVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXVisual * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","vis", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_setDefaultVisual",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setDefaultVisual. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_setDefaultVisual. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setDefaultVisual(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_getMonoVisual(_swigobj)  (_swigobj->getMonoVisual())
static PyObject *_wrap_FX_App_getMonoVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisual * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getMonoVisual",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getMonoVisual. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXVisual *)FX_App_getMonoVisual(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXVisual_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_getRoot(_swigobj)  (_swigobj->getRoot())
static PyObject *_wrap_FX_App_getRoot(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRootWindow * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getRoot",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getRoot. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRootWindow *)FX_App_getRoot(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_getCursorWindow(_swigobj)  (_swigobj->getCursorWindow())
static PyObject *_wrap_FX_App_getCursorWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getCursorWindow",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getCursorWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_getCursorWindow(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_getFocusWindow(_swigobj)  (_swigobj->getFocusWindow())
static PyObject *_wrap_FX_App_getFocusWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getFocusWindow",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getFocusWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_getFocusWindow(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_getMainWindow(_swigobj)  (_swigobj->getMainWindow())
static PyObject *_wrap_FX_App_getMainWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getMainWindow",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getMainWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_getMainWindow(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_findWindowWithId(_swigobj,_swigarg0)  (_swigobj->findWindowWithId(_swigarg0))
static PyObject *_wrap_FX_App_findWindowWithId(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    FXID  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","xid", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_findWindowWithId",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_findWindowWithId. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_findWindowWithId(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_findWindowAt(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->findWindowAt(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_App_findWindowAt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXID  _arg3 = (FXID ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","rx","ry","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii|i:FX_App_findWindowAt",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_findWindowAt. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_findWindowAt(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_addTimeout(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->addTimeout(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_App_addTimeout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTimer * _result;
    FXApp * _arg0;
    FXint  _arg1;
    FXObject * _arg2;
    FXSelector  _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","ms","tgt","sel", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiOi:FX_App_addTimeout",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_addTimeout. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTimer *)FX_App_addTimeout(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTimer_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_removeTimeout(_swigobj,_swigarg0)  (_swigobj->removeTimeout(_swigarg0))
static PyObject *_wrap_FX_App_removeTimeout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTimer * _result;
    FXApp * _arg0;
    FXTimer * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","t", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_removeTimeout",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_removeTimeout. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXTimer_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_removeTimeout. Expected _FXTimer_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTimer *)FX_App_removeTimeout(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTimer_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_addChore(_swigobj,_swigarg0,_swigarg1)  (_swigobj->addChore(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_App_addChore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXChore * _result;
    FXApp * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","tgt","sel", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:FX_App_addChore",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_addChore. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXChore *)FX_App_addChore(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXChore_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_removeChore(_swigobj,_swigarg0)  (_swigobj->removeChore(_swigarg0))
static PyObject *_wrap_FX_App_removeChore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXChore * _result;
    FXApp * _arg0;
    FXChore * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","c", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_removeChore",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_removeChore. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXChore_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_removeChore. Expected _FXChore_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXChore *)FX_App_removeChore(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXChore_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_addSignal(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->addSignal(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_App_addSignal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1;
    FXObject * _arg2;
    FXSelector  _arg3;
    FXbool  _arg4 = (FXbool ) FALSE;
    FXuint  _arg5 = (FXuint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","sig","tgt","sel","immediate","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiOi|bi:FX_App_addSignal",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_addSignal. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_addSignal(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_removeSignal(_swigobj,_swigarg0)  (_swigobj->removeSignal(_swigarg0))
static PyObject *_wrap_FX_App_removeSignal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","sig", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_removeSignal",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_removeSignal. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_removeSignal(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_addInput(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->addInput(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_App_addInput(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    FXInputHandle  _arg1;
    FXuint  _arg2;
    FXObject * _arg3;
    FXSelector  _arg4;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","fd","mode","tgt","sel", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiOi:FX_App_addInput",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_addInput. Expected _FXApp_p.");
        return NULL;
        }
    }
{
#ifdef WIN32
    if (_obj1) {
        if (PyFile_Check(_obj1)) {
            FILE *fp = PyFile_AsFile(_obj1);
            if (fp) {
                int fd = fileno(fp);
                _arg1 = (FXInputHandle) _get_osfhandle(fd);
            }
        } else if (PyInt_Check(_obj1)) {
             int fd = PyInt_AsLong(_obj1);
             _arg1 = (FXInputHandle) _get_osfhandle(fd);
        }
    }
#else
    if (_obj1) {
        if (PyFile_Check(_obj1)) {
            FILE *fp = PyFile_AsFile(_obj1);
            if (fp != NULL)
                _arg1 = (FXInputHandle) fileno(fp);
        } else if (PyInt_Check(_obj1)) {
             _arg1 = (FXInputHandle) PyInt_AsLong(_obj1);
        }
    }
#endif
}
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_addInput(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_removeInput(_swigobj,_swigarg0,_swigarg1)  (_swigobj->removeInput(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_App_removeInput(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    FXInputHandle  _arg1;
    FXuint  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","fd","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:FX_App_removeInput",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_removeInput. Expected _FXApp_p.");
        return NULL;
        }
    }
{
#ifdef WIN32
    if (_obj1) {
        if (PyFile_Check(_obj1)) {
            FILE *fp = PyFile_AsFile(_obj1);
            if (fp) {
                int fd = fileno(fp);
                _arg1 = (FXInputHandle) _get_osfhandle(fd);
            }
        } else if (PyInt_Check(_obj1)) {
             int fd = PyInt_AsLong(_obj1);
             _arg1 = (FXInputHandle) _get_osfhandle(fd);
        }
    }
#else
    if (_obj1) {
        if (PyFile_Check(_obj1)) {
            FILE *fp = PyFile_AsFile(_obj1);
            if (fp != NULL)
                _arg1 = (FXInputHandle) fileno(fp);
        } else if (PyInt_Check(_obj1)) {
             _arg1 = (FXInputHandle) PyInt_AsLong(_obj1);
        }
    }
#endif
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_removeInput(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_create(_swigobj)  (_swigobj->create())
static PyObject *_wrap_FX_App_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_create. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_destroy(_swigobj)  (_swigobj->destroy())
static PyObject *_wrap_FX_App_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_destroy. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_detach(_swigobj)  (_swigobj->detach())
static PyObject *_wrap_FX_App_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_detach. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_peekEvent(_swigobj)  (_swigobj->peekEvent())
static PyObject *_wrap_FX_App_peekEvent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_peekEvent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_peekEvent. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_peekEvent(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_runOneEvent(_swigobj)  (_swigobj->runOneEvent())
static PyObject *_wrap_FX_App_runOneEvent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_runOneEvent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runOneEvent. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_runOneEvent(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_runUntil(_swigobj,_swigarg0)  (_swigobj->runUntil(_swigarg0))
static PyObject *_wrap_FX_App_runUntil(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    FXuint * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","condition", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_runUntil",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runUntil. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXuint_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_runUntil. Expected _FXuint_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runUntil(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_runWhileEvents(_swigobj,_swigarg0)  (_swigobj->runWhileEvents(_swigarg0))
static PyObject *_wrap_FX_App_runWhileEvents(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    FXWindow * _arg1 = (FXWindow *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|O:FX_App_runWhileEvents",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runWhileEvents. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runWhileEvents(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_runModal(_swigobj)  (_swigobj->runModal())
static PyObject *_wrap_FX_App_runModal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_runModal",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runModal. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runModal(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_runModalFor(_swigobj,_swigarg0)  (_swigobj->runModalFor(_swigarg0))
static PyObject *_wrap_FX_App_runModalFor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    FXWindow * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_runModalFor",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runModalFor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runModalFor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_runModalWhileShown(_swigobj,_swigarg0)  (_swigobj->runModalWhileShown(_swigarg0))
static PyObject *_wrap_FX_App_runModalWhileShown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    FXWindow * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_runModalWhileShown",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runModalWhileShown. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runModalWhileShown(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_runPopup(_swigobj,_swigarg0)  (_swigobj->runPopup(_swigarg0))
static PyObject *_wrap_FX_App_runPopup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    FXWindow * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_runPopup",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_runPopup. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_runPopup(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_isModal(_swigobj,_swigarg0)  (_swigobj->isModal(_swigarg0))
static PyObject *_wrap_FX_App_isModal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXApp * _arg0;
    FXWindow * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_isModal",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_isModal. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_App_isModal(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_App_modalWindow(_swigobj)  (_swigobj->modalWindow())
static PyObject *_wrap_FX_App_modalWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_modalWindow",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_modalWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_App_modalWindow(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_modalModality(_swigobj)  (_swigobj->modalModality())
static PyObject *_wrap_FX_App_modalModality(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXModality  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_modalModality",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_modalModality. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXModality )FX_App_modalModality(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_stop(_swigobj,_swigarg0)  (_swigobj->stop(_swigarg0))
static PyObject *_wrap_FX_App_stop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_App_stop",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_stop. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_stop(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_stopModal(_swigobj,_swigarg0,_swigarg1)  (_swigobj->stopModal(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_App_stopModal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXWindow * _arg1;
    FXint  _arg2 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|i:FX_App_stopModal",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_stopModal. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_stopModal(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_stopModal2(_swigobj,_swigarg0)  (_swigobj->stopModal(_swigarg0))
static PyObject *_wrap_FX_App_stopModal2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_App_stopModal2",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_stopModal2. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_stopModal2(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_forceRefresh(_swigobj)  (_swigobj->forceRefresh())
static PyObject *_wrap_FX_App_forceRefresh(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_forceRefresh",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_forceRefresh. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_forceRefresh(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_refresh(_swigobj)  (_swigobj->refresh())
static PyObject *_wrap_FX_App_refresh(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_refresh",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_refresh. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_refresh(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_flush(_swigobj,_swigarg0)  (_swigobj->flush(_swigarg0))
static PyObject *_wrap_FX_App_flush(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXbool  _arg1 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","sync", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_App_flush",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_flush. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_flush(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_repaint(_swigobj)  (_swigobj->repaint())
static PyObject *_wrap_FX_App_repaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_repaint",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_repaint. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_repaint(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_exit(_swigobj,_swigarg0)  (_swigobj->exit(_swigarg0))
static PyObject *_wrap_FX_App_exit(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","code", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_App_exit",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_exit. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_exit(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_reg(_swigobj)  (_swigobj->reg())
static PyObject *_wrap_FX_App_reg(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegistry * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_reg",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_reg. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRegistry & _result_ref = FX_App_reg(_arg0);
    _result = (FXRegistry *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRegistry_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_App_registerDragType(_swigobj,_swigarg0)  (_swigobj->registerDragType(_swigarg0))
static PyObject *_wrap_FX_App_registerDragType(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragType  _result;
    FXApp * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","name", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_registerDragType",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_registerDragType. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragType )FX_App_registerDragType(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_App_getDragTypeName(_swigobj,_swigarg0)  (_swigobj->getDragTypeName(_swigarg0))
static PyObject *_wrap_FX_App_getDragTypeName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXApp * _arg0;
    FXDragType  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","type", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_getDragTypeName",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getDragTypeName. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_App_getDragTypeName(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_App_beep(_swigobj)  (_swigobj->beep())
static PyObject *_wrap_FX_App_beep(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_beep",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_beep. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_beep(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject *_wrap_FX_App_instance(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":FX_App_instance",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXApp *)FXApp::instance();

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_setNormalFont(_swigobj,_swigarg0)  (_swigobj->setNormalFont(_swigarg0))
static PyObject *_wrap_FX_App_setNormalFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","font", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_setNormalFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setNormalFont. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_setNormalFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setNormalFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_getNormalFont(_swigobj)  (_swigobj->getNormalFont())
static PyObject *_wrap_FX_App_getNormalFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getNormalFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getNormalFont. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_App_getNormalFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_beginWaitCursor(_swigobj)  (_swigobj->beginWaitCursor())
static PyObject *_wrap_FX_App_beginWaitCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_beginWaitCursor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_beginWaitCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_beginWaitCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_endWaitCursor(_swigobj)  (_swigobj->endWaitCursor())
static PyObject *_wrap_FX_App_endWaitCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_endWaitCursor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_endWaitCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_endWaitCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setWaitCursor(_swigobj,_swigarg0)  (_swigobj->setWaitCursor(_swigarg0))
static PyObject *_wrap_FX_App_setWaitCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXCursor * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","cur", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_App_setWaitCursor",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setWaitCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXCursor_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_App_setWaitCursor. Expected _FXCursor_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setWaitCursor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_getWaitCursor(_swigobj)  (_swigobj->getWaitCursor())
static PyObject *_wrap_FX_App_getWaitCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCursor * _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getWaitCursor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getWaitCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCursor *)FX_App_getWaitCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_getDefaultCursor(_swigobj,_swigarg0)  (_swigobj->getDefaultCursor(_swigarg0))
static PyObject *_wrap_FX_App_getDefaultCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCursor * _result;
    FXApp * _arg0;
    FXDefaultCursor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","which", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_getDefaultCursor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getDefaultCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCursor *)FX_App_getDefaultCursor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_App_setDefaultCursor(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setDefaultCursor(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_App_setDefaultCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXDefaultCursor  _arg1;
    FXCursor * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","which","cur", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_App_setDefaultCursor",_kwnames,&_argo0,&_arg1,&_argo2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setDefaultCursor. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_FXCursor_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of FX_App_setDefaultCursor. Expected _FXCursor_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setDefaultCursor(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_getTypingSpeed(_swigobj)  (_swigobj->getTypingSpeed())
static PyObject *_wrap_FX_App_getTypingSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getTypingSpeed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getTypingSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getTypingSpeed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getClickSpeed(_swigobj)  (_swigobj->getClickSpeed())
static PyObject *_wrap_FX_App_getClickSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getClickSpeed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getClickSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getClickSpeed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getScrollSpeed(_swigobj)  (_swigobj->getScrollSpeed())
static PyObject *_wrap_FX_App_getScrollSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getScrollSpeed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getScrollSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getScrollSpeed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getScrollDelay(_swigobj)  (_swigobj->getScrollDelay())
static PyObject *_wrap_FX_App_getScrollDelay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getScrollDelay",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getScrollDelay. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getScrollDelay(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getBlinkSpeed(_swigobj)  (_swigobj->getBlinkSpeed())
static PyObject *_wrap_FX_App_getBlinkSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getBlinkSpeed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getBlinkSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getBlinkSpeed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getAnimSpeed(_swigobj)  (_swigobj->getAnimSpeed())
static PyObject *_wrap_FX_App_getAnimSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getAnimSpeed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getAnimSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getAnimSpeed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getMenuPause(_swigobj)  (_swigobj->getMenuPause())
static PyObject *_wrap_FX_App_getMenuPause(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getMenuPause",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getMenuPause. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getMenuPause(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getTooltipPause(_swigobj)  (_swigobj->getTooltipPause())
static PyObject *_wrap_FX_App_getTooltipPause(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getTooltipPause",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getTooltipPause. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getTooltipPause(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getTooltipTime(_swigobj)  (_swigobj->getTooltipTime())
static PyObject *_wrap_FX_App_getTooltipTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getTooltipTime",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getTooltipTime. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_App_getTooltipTime(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getDragDelta(_swigobj)  (_swigobj->getDragDelta())
static PyObject *_wrap_FX_App_getDragDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getDragDelta",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getDragDelta. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_getDragDelta(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getWheelLines(_swigobj)  (_swigobj->getWheelLines())
static PyObject *_wrap_FX_App_getWheelLines(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getWheelLines",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getWheelLines. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_App_getWheelLines(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_setTypingSpeed(_swigobj,_swigarg0)  (_swigobj->setTypingSpeed(_swigarg0))
static PyObject *_wrap_FX_App_setTypingSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","speed", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setTypingSpeed",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setTypingSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setTypingSpeed(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setClickSpeed(_swigobj,_swigarg0)  (_swigobj->setClickSpeed(_swigarg0))
static PyObject *_wrap_FX_App_setClickSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","speed", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setClickSpeed",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setClickSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setClickSpeed(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setScrollSpeed(_swigobj,_swigarg0)  (_swigobj->setScrollSpeed(_swigarg0))
static PyObject *_wrap_FX_App_setScrollSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","speed", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setScrollSpeed",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setScrollSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setScrollSpeed(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setScrollDelay(_swigobj,_swigarg0)  (_swigobj->setScrollDelay(_swigarg0))
static PyObject *_wrap_FX_App_setScrollDelay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","delay", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setScrollDelay",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setScrollDelay. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setScrollDelay(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setBlinkSpeed(_swigobj,_swigarg0)  (_swigobj->setBlinkSpeed(_swigarg0))
static PyObject *_wrap_FX_App_setBlinkSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","speed", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setBlinkSpeed",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setBlinkSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setBlinkSpeed(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setAnimSpeed(_swigobj,_swigarg0)  (_swigobj->setAnimSpeed(_swigarg0))
static PyObject *_wrap_FX_App_setAnimSpeed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","speed", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setAnimSpeed",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setAnimSpeed. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setAnimSpeed(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setMenuPause(_swigobj,_swigarg0)  (_swigobj->setMenuPause(_swigarg0))
static PyObject *_wrap_FX_App_setMenuPause(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pause", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setMenuPause",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setMenuPause. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setMenuPause(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setTooltipPause(_swigobj,_swigarg0)  (_swigobj->setTooltipPause(_swigarg0))
static PyObject *_wrap_FX_App_setTooltipPause(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pause", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setTooltipPause",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setTooltipPause. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setTooltipPause(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setTooltipTime(_swigobj,_swigarg0)  (_swigobj->setTooltipTime(_swigarg0))
static PyObject *_wrap_FX_App_setTooltipTime(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","time", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setTooltipTime",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setTooltipTime. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setTooltipTime(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setDragDelta(_swigobj,_swigarg0)  (_swigobj->setDragDelta(_swigarg0))
static PyObject *_wrap_FX_App_setDragDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","delta", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setDragDelta",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setDragDelta. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setDragDelta(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setWheelLines(_swigobj,_swigarg0)  (_swigobj->setWheelLines(_swigarg0))
static PyObject *_wrap_FX_App_setWheelLines(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","lines", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setWheelLines",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setWheelLines. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setWheelLines(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_App_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getBorderColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getBaseColor(_swigobj)  (_swigobj->getBaseColor())
static PyObject *_wrap_FX_App_getBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getBaseColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getBaseColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getBaseColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_App_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getHiliteColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_App_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getShadowColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getBackColor(_swigobj)  (_swigobj->getBackColor())
static PyObject *_wrap_FX_App_getBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getBackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getForeColor(_swigobj)  (_swigobj->getForeColor())
static PyObject *_wrap_FX_App_getForeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getForeColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getForeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getForeColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getSelforeColor(_swigobj)  (_swigobj->getSelforeColor())
static PyObject *_wrap_FX_App_getSelforeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getSelforeColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getSelforeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getSelforeColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getSelbackColor(_swigobj)  (_swigobj->getSelbackColor())
static PyObject *_wrap_FX_App_getSelbackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getSelbackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getSelbackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getSelbackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getTipforeColor(_swigobj)  (_swigobj->getTipforeColor())
static PyObject *_wrap_FX_App_getTipforeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getTipforeColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getTipforeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getTipforeColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_getTipbackColor(_swigobj)  (_swigobj->getTipbackColor())
static PyObject *_wrap_FX_App_getTipbackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_getTipbackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_getTipbackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_App_getTipbackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_App_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_App_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setBorderColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setBaseColor(_swigobj,_swigarg0)  (_swigobj->setBaseColor(_swigarg0))
static PyObject *_wrap_FX_App_setBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setBaseColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setBaseColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setBaseColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_App_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setHiliteColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_App_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setShadowColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setBackColor(_swigobj,_swigarg0)  (_swigobj->setBackColor(_swigarg0))
static PyObject *_wrap_FX_App_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setBackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setForeColor(_swigobj,_swigarg0)  (_swigobj->setForeColor(_swigarg0))
static PyObject *_wrap_FX_App_setForeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setForeColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setForeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setForeColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setSelforeColor(_swigobj,_swigarg0)  (_swigobj->setSelforeColor(_swigarg0))
static PyObject *_wrap_FX_App_setSelforeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setSelforeColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setSelforeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setSelforeColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setSelbackColor(_swigobj,_swigarg0)  (_swigobj->setSelbackColor(_swigarg0))
static PyObject *_wrap_FX_App_setSelbackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setSelbackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setSelbackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setSelbackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setTipforeColor(_swigobj,_swigarg0)  (_swigobj->setTipforeColor(_swigarg0))
static PyObject *_wrap_FX_App_setTipforeColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setTipforeColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setTipforeColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setTipforeColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_setTipbackColor(_swigobj,_swigarg0)  (_swigobj->setTipbackColor(_swigarg0))
static PyObject *_wrap_FX_App_setTipbackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_App_setTipbackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_setTipbackColor. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_setTipbackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_App_dumpWidgets(_swigobj)  (_swigobj->dumpWidgets())
static PyObject *_wrap_FX_App_dumpWidgets(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_App_dumpWidgets",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_dumpWidgets. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_App_dumpWidgets(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void  FXApp_init(FXApp *self,char ** argv,FXbool  connect) {
    int argc = 0;
    while (argv[argc]) argc++;
    self->init(argc, argv, connect);
  }
static PyObject *_wrap_FX_App_init(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXApp * _arg0;
    char ** _arg1;
    FXbool  _arg2 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","argv","connect", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|b:FX_App_init",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_App_init. Expected _FXApp_p.");
        return NULL;
        }
    }
{
  if (PyList_Check(_obj1)) {
    int size = PyList_Size(_obj1);
    FXMALLOC(&_arg1,char*,size+1);
    for (int i=0; i<size; i++) {
      PyObject *o = PyList_GetItem(_obj1,i);
      if (PyString_Check(o))
	_arg1[i] = PyString_AsString(PyList_GetItem(_obj1,i));
      else {
	PyErr_SetString(PyExc_TypeError,"list must contain strings");
	FXFREE(&_arg1);
	return NULL;
	}
      }
    _arg1[size] = 0;
    }
  else{
    PyErr_SetString(PyExc_TypeError,"not a list");
    return NULL;
    }
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_init(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
  FXFREE(&_arg1);
}
    return _resultobj;
}

static void *SwigFXPyAppToFXApp(void *ptr) {
    FXPyApp *src;
    FXApp *dest;
    src = (FXPyApp *) ptr;
    dest = (FXApp *) src;
    return (void *) dest;
}

static void *SwigFXPyAppToFXObject(void *ptr) {
    FXPyApp *src;
    FXObject *dest;
    src = (FXPyApp *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXApp(_swigarg0,_swigarg1) (new FXPyApp(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FXApp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _result;
    FXchar * _arg0 = (FXchar *) "Application";
    FXchar * _arg1 = (FXchar *) "FoxDefault";
    char *_kwnames[] = { "name","vendor", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|ss:new_FXApp",_kwnames,&_arg0,&_arg1)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyApp *)new_FXApp(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyApp_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXApp_enableEventHook(_swigobj)  (_swigobj->enableEventHook())
static PyObject *_wrap_FXApp_enableEventHook(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_enableEventHook",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_enableEventHook. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_enableEventHook(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXApp_disableEventHook(_swigobj)  (_swigobj->disableEventHook())
static PyObject *_wrap_FXApp_disableEventHook(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_disableEventHook",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_disableEventHook. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_disableEventHook(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXApp_run(_swigobj)  (_swigobj->FXPyRunApp())
static PyObject *_wrap_FXApp_run(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_run",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_run. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXApp_run(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FXApp_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXApp_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyApp * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXApp_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_onDefault. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXApp_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXApp_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXApp_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_create. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXApp_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXApp_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_destroy. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXApp_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXApp_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyApp * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXApp_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXApp_detach. Expected _FXPyApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXApp_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXVisualToFXId(void *ptr) {
    FXVisual *src;
    FXId *dest;
    src = (FXVisual *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXVisualToFXObject(void *ptr) {
    FXVisual *src;
    FXObject *dest;
    src = (FXVisual *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Visual(_swigarg0,_swigarg1,_swigarg2) (new FXVisual(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FX_Visual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisual * _result;
    FXApp * _arg0;
    FXuint  _arg1;
    FXuint  _arg2 = (FXuint ) 32;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "a","flgs","d", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|i:new_FX_Visual",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Visual. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXVisual *)new_FX_Visual(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXVisual_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Visual_getFlags(_swigobj)  (_swigobj->getFlags())
static PyObject *_wrap_FX_Visual_getFlags(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getFlags",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getFlags. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getFlags(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getDepth(_swigobj)  (_swigobj->getDepth())
static PyObject *_wrap_FX_Visual_getDepth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getDepth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getDepth. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getDepth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getNumColors(_swigobj)  (_swigobj->getNumColors())
static PyObject *_wrap_FX_Visual_getNumColors(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getNumColors",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getNumColors. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getNumColors(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getNumRed(_swigobj)  (_swigobj->getNumRed())
static PyObject *_wrap_FX_Visual_getNumRed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getNumRed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getNumRed. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getNumRed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getNumGreen(_swigobj)  (_swigobj->getNumGreen())
static PyObject *_wrap_FX_Visual_getNumGreen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getNumGreen",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getNumGreen. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getNumGreen(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getNumBlue(_swigobj)  (_swigobj->getNumBlue())
static PyObject *_wrap_FX_Visual_getNumBlue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getNumBlue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getNumBlue. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getNumBlue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getPixel(_swigobj,_swigarg0)  (_swigobj->getPixel(_swigarg0))
static PyObject *_wrap_FX_Visual_getPixel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPixel  _result;
    FXVisual * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Visual_getPixel",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getPixel. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPixel )FX_Visual_getPixel(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Visual_getColor(_swigobj,_swigarg0)  (_swigobj->getColor(_swigarg0))
static PyObject *_wrap_FX_Visual_getColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXVisual * _arg0;
    FXPixel  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pix", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ol:FX_Visual_getColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getColor. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Visual_getColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_setMaxColors(_swigobj,_swigarg0)  (_swigobj->setMaxColors(_swigarg0))
static PyObject *_wrap_FX_Visual_setMaxColors(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisual * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","maxcols", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Visual_setMaxColors",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_setMaxColors. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Visual_setMaxColors(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Visual_getMaxColors(_swigobj)  (_swigobj->getMaxColors())
static PyObject *_wrap_FX_Visual_getMaxColors(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getMaxColors",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getMaxColors. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Visual_getMaxColors(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Visual_getType(_swigobj)  (_swigobj->getType())
static PyObject *_wrap_FX_Visual_getType(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXVisualType * _result;
    FXVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Visual_getType",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Visual_getType. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXVisualType (FX_Visual_getType(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXVisualType_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

static void *SwigFXPyVisualToFXVisual(void *ptr) {
    FXPyVisual *src;
    FXVisual *dest;
    src = (FXPyVisual *) ptr;
    dest = (FXVisual *) src;
    return (void *) dest;
}

static void *SwigFXPyVisualToFXId(void *ptr) {
    FXPyVisual *src;
    FXId *dest;
    src = (FXPyVisual *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyVisualToFXObject(void *ptr) {
    FXPyVisual *src;
    FXObject *dest;
    src = (FXPyVisual *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXVisual(_swigarg0,_swigarg1,_swigarg2) (new FXPyVisual(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FXVisual(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyVisual * _result;
    FXApp * _arg0;
    FXuint  _arg1;
    FXuint  _arg2 = (FXuint ) 32;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "a","flgs","d", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|i:new_FXVisual",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXVisual. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyVisual *)new_FXVisual(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyVisual_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXVisual_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXVisual_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyVisual * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXVisual_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXVisual_onDefault. Expected _FXPyVisual_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXVisual_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXVisual_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXVisual_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXVisual_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXVisual_create. Expected _FXPyVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXVisual_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXVisual_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXVisual_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXVisual_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXVisual_destroy. Expected _FXPyVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXVisual_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXVisual_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXVisual_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyVisual * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXVisual_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXVisual_detach. Expected _FXPyVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXVisual_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXFontToFXId(void *ptr) {
    FXFont *src;
    FXId *dest;
    src = (FXFont *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXFontToFXObject(void *ptr) {
    FXFont *src;
    FXObject *dest;
    src = (FXFont *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Font(_swigarg0,_swigarg1) (new FXFont(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_Font(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXApp * _arg0;
    FXFontDesc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","fontdesc", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:new_FX_Font",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Font. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FX_Font. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)new_FX_Font(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Font_getName(_swigobj)  (_swigobj->getName())
static PyObject *_wrap_FX_Font_getName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getName. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Font_getName(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Font_getSize(_swigobj)  (_swigobj->getSize())
static PyObject *_wrap_FX_Font_getSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getSize. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getWeight(_swigobj)  (_swigobj->getWeight())
static PyObject *_wrap_FX_Font_getWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getWeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getWeight. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getWeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getSlant(_swigobj)  (_swigobj->getSlant())
static PyObject *_wrap_FX_Font_getSlant(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getSlant",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getSlant. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getSlant(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getEncoding(_swigobj)  (_swigobj->getEncoding())
static PyObject *_wrap_FX_Font_getEncoding(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getEncoding",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getEncoding. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getEncoding(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getSetWidth(_swigobj)  (_swigobj->getSetWidth())
static PyObject *_wrap_FX_Font_getSetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getSetWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getSetWidth. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getSetWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getHints(_swigobj)  (_swigobj->getHints())
static PyObject *_wrap_FX_Font_getHints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getHints",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getHints. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Font_getHints(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static FXFontDesc * FXFont_getFontDesc(FXFont *self) {
      FXFontDesc* fontdesc = new FXFontDesc;
      self->getFontDesc(*fontdesc);
      return fontdesc;
    }
static PyObject *_wrap_FX_Font_getFontDesc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFontDesc * _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontDesc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontDesc. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFontDesc *)FXFont_getFontDesc(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXFontDesc_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Font_setFontDesc(_swigobj,_swigarg0)  (_swigobj->setFontDesc(_swigarg0))
static PyObject *_wrap_FX_Font_setFontDesc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _arg0;
    FXFontDesc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fontdesc", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Font_setFontDesc",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_setFontDesc. Expected _FXFont_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Font_setFontDesc. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Font_setFontDesc(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Font_isFontMono(_swigobj)  (_swigobj->isFontMono())
static PyObject *_wrap_FX_Font_isFontMono(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_isFontMono",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_isFontMono. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Font_isFontMono(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Font_hasChar(_swigobj,_swigarg0)  (_swigobj->hasChar(_swigarg0))
static PyObject *_wrap_FX_Font_hasChar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXFont * _arg0;
    FXchar  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ch", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oc:FX_Font_hasChar",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_hasChar. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Font_hasChar(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Font_getMinChar(_swigobj)  (_swigobj->getMinChar())
static PyObject *_wrap_FX_Font_getMinChar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getMinChar",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getMinChar. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getMinChar(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getMaxChar(_swigobj)  (_swigobj->getMaxChar())
static PyObject *_wrap_FX_Font_getMaxChar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getMaxChar",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getMaxChar. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getMaxChar(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_leftBearing(_swigobj,_swigarg0)  (_swigobj->leftBearing(_swigarg0))
static PyObject *_wrap_FX_Font_leftBearing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    FXchar  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ch", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oc:FX_Font_leftBearing",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_leftBearing. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_leftBearing(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_rightBearing(_swigobj,_swigarg0)  (_swigobj->rightBearing(_swigarg0))
static PyObject *_wrap_FX_Font_rightBearing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    FXchar  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ch", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oc:FX_Font_rightBearing",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_rightBearing. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_rightBearing(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontWidth(_swigobj)  (_swigobj->getFontWidth())
static PyObject *_wrap_FX_Font_getFontWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontWidth. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontHeight(_swigobj)  (_swigobj->getFontHeight())
static PyObject *_wrap_FX_Font_getFontHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontHeight. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontAscent(_swigobj)  (_swigobj->getFontAscent())
static PyObject *_wrap_FX_Font_getFontAscent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontAscent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontAscent. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontAscent(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontDescent(_swigobj)  (_swigobj->getFontDescent())
static PyObject *_wrap_FX_Font_getFontDescent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontDescent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontDescent. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontDescent(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontLeading(_swigobj)  (_swigobj->getFontLeading())
static PyObject *_wrap_FX_Font_getFontLeading(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontLeading",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontLeading. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontLeading(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getFontSpacing(_swigobj)  (_swigobj->getFontSpacing())
static PyObject *_wrap_FX_Font_getFontSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Font_getFontSpacing",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getFontSpacing. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getFontSpacing(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getTextWidth(_swigobj,_swigarg0,_swigarg1)  (_swigobj->getTextWidth(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Font_getTextWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    FXchar * _arg1;
    FXuint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","text","n", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Osi:FX_Font_getTextWidth",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getTextWidth. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getTextWidth(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Font_getTextHeight(_swigobj,_swigarg0,_swigarg1)  (_swigobj->getTextHeight(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Font_getTextHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFont * _arg0;
    FXchar * _arg1;
    FXuint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","text","n", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Osi:FX_Font_getTextHeight",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Font_getTextHeight. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Font_getTextHeight(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyFontToFXFont(void *ptr) {
    FXPyFont *src;
    FXFont *dest;
    src = (FXPyFont *) ptr;
    dest = (FXFont *) src;
    return (void *) dest;
}

static void *SwigFXPyFontToFXId(void *ptr) {
    FXPyFont *src;
    FXId *dest;
    src = (FXPyFont *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyFontToFXObject(void *ptr) {
    FXPyFont *src;
    FXObject *dest;
    src = (FXPyFont *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXFont(_swigarg0,_swigarg1) (new FXPyFont(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FXFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _result;
    FXApp * _arg0;
    FXFontDesc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","fontdesc", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:new_FXFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXFont. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFontDesc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXFont. Expected _FXFontDesc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFont *)new_FXFont(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFont_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXFont_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXFont_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyFont * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXFont_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFont_onDefault. Expected _FXPyFont_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXFont_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXFont_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXFont_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFont_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFont_create. Expected _FXPyFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFont_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFont_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXFont_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFont_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFont_destroy. Expected _FXPyFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFont_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFont_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXFont_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFont * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFont_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFont_detach. Expected _FXPyFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFont_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXImageToFXDrawable(void *ptr) {
    FXImage *src;
    FXDrawable *dest;
    src = (FXImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXImageToFXId(void *ptr) {
    FXImage *src;
    FXId *dest;
    src = (FXImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXImageToFXObject(void *ptr) {
    FXImage *src;
    FXObject *dest;
    src = (FXImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Image(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_Image(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_Image",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Image. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXImage *)new_FX_Image(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FX_Image_getData(_swigobj)  (_swigobj->getData())
static PyObject *_wrap_FX_Image_getData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuchar * _result;
    FXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Image_getData",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_getData. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuchar *)FX_Image_getData(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXuchar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Image_getOptions(_swigobj)  (_swigobj->getOptions())
static PyObject *_wrap_FX_Image_getOptions(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Image_getOptions",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_getOptions. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Image_getOptions(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Image_setOptions(_swigobj,_swigarg0)  (_swigobj->setOptions(_swigarg0))
static PyObject *_wrap_FX_Image_setOptions(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","opts", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Image_setOptions",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_setOptions. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_setOptions(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_getChannels(_swigobj)  (_swigobj->getChannels())
static PyObject *_wrap_FX_Image_getChannels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Image_getChannels",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_getChannels. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Image_getChannels(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Image_getPixel(_swigobj,_swigarg0,_swigarg1)  (_swigobj->getPixel(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Image_getPixel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Image_getPixel",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_getPixel. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Image_getPixel(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Image_setPixel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->setPixel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Image_setPixel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXColor  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","color", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiii:FX_Image_setPixel",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_setPixel. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_setPixel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_restore(_swigobj)  (_swigobj->restore())
static PyObject *_wrap_FX_Image_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Image_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_restore. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_render(_swigobj)  (_swigobj->render())
static PyObject *_wrap_FX_Image_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Image_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_render. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Image_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Image_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_scale. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Image_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FX_Image_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_mirror. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_rotate(_swigobj,_swigarg0)  (_swigobj->rotate(_swigarg0))
static PyObject *_wrap_FX_Image_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Image_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_rotate. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Image_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FX_Image_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_crop. Expected _FXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_savePixels(_swigobj,_swigarg0)  (_swigobj->savePixels(_swigarg0))
static PyObject *_wrap_FX_Image_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Image_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_savePixels. Expected _FXImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Image_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Image_loadPixels(_swigobj,_swigarg0)  (_swigobj->loadPixels(_swigarg0))
static PyObject *_wrap_FX_Image_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Image_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Image_loadPixels. Expected _FXImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Image_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Image_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyImageToFXImage(void *ptr) {
    FXPyImage *src;
    FXImage *dest;
    src = (FXPyImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyImageToFXDrawable(void *ptr) {
    FXPyImage *src;
    FXDrawable *dest;
    src = (FXPyImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyImageToFXId(void *ptr) {
    FXPyImage *src;
    FXId *dest;
    src = (FXPyImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyImageToFXObject(void *ptr) {
    FXPyImage *src;
    FXObject *dest;
    src = (FXPyImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyImage *)new_FXImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_onDefault. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_create. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_destroy. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_detach. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_resize. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_restore. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_render. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_scale. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_mirror. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_rotate. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_crop. Expected _FXPyImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_savePixels. Expected _FXPyImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXImage_loadPixels. Expected _FXPyImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXGIFImageToFXImage(void *ptr) {
    FXGIFImage *src;
    FXImage *dest;
    src = (FXGIFImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXGIFImageToFXDrawable(void *ptr) {
    FXGIFImage *src;
    FXDrawable *dest;
    src = (FXGIFImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXGIFImageToFXId(void *ptr) {
    FXGIFImage *src;
    FXId *dest;
    src = (FXGIFImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXGIFImageToFXObject(void *ptr) {
    FXGIFImage *src;
    FXObject *dest;
    src = (FXGIFImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_GIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXGIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_GIFImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXGIFImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_GIFImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_GIFImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXGIFImage *)new_FX_GIFImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXGIFImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyGIFImageToFXGIFImage(void *ptr) {
    FXPyGIFImage *src;
    FXGIFImage *dest;
    src = (FXPyGIFImage *) ptr;
    dest = (FXGIFImage *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFImageToFXImage(void *ptr) {
    FXPyGIFImage *src;
    FXImage *dest;
    src = (FXPyGIFImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFImageToFXDrawable(void *ptr) {
    FXPyGIFImage *src;
    FXDrawable *dest;
    src = (FXPyGIFImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFImageToFXId(void *ptr) {
    FXPyGIFImage *src;
    FXId *dest;
    src = (FXPyGIFImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFImageToFXObject(void *ptr) {
    FXPyGIFImage *src;
    FXObject *dest;
    src = (FXPyGIFImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXGIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyGIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXGIFImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXGIFImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXGIFImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyGIFImage *)new_FXGIFImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyGIFImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXGIFImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXGIFImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyGIFImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXGIFImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_onDefault. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXGIFImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXGIFImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXGIFImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_create. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXGIFImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_destroy. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXGIFImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_detach. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXGIFImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_resize. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXGIFImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_restore. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXGIFImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_render. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXGIFImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_scale. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXGIFImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_mirror. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXGIFImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXGIFImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_rotate. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXGIFImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXGIFImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_crop. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXGIFImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXGIFImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_savePixels. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXGIFImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXGIFImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXGIFImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFImage_loadPixels. Expected _FXPyGIFImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXGIFImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXBMPImageToFXImage(void *ptr) {
    FXBMPImage *src;
    FXImage *dest;
    src = (FXBMPImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXBMPImageToFXDrawable(void *ptr) {
    FXBMPImage *src;
    FXDrawable *dest;
    src = (FXBMPImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXBMPImageToFXId(void *ptr) {
    FXBMPImage *src;
    FXId *dest;
    src = (FXBMPImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXBMPImageToFXObject(void *ptr) {
    FXBMPImage *src;
    FXObject *dest;
    src = (FXBMPImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_BMPImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXBMPImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_BMPImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXBMPImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_BMPImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_BMPImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXBMPImage *)new_FX_BMPImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXBMPImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyBMPImageToFXBMPImage(void *ptr) {
    FXPyBMPImage *src;
    FXBMPImage *dest;
    src = (FXPyBMPImage *) ptr;
    dest = (FXBMPImage *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPImageToFXImage(void *ptr) {
    FXPyBMPImage *src;
    FXImage *dest;
    src = (FXPyBMPImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPImageToFXDrawable(void *ptr) {
    FXPyBMPImage *src;
    FXDrawable *dest;
    src = (FXPyBMPImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPImageToFXId(void *ptr) {
    FXPyBMPImage *src;
    FXId *dest;
    src = (FXPyBMPImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPImageToFXObject(void *ptr) {
    FXPyBMPImage *src;
    FXObject *dest;
    src = (FXPyBMPImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXBMPImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyBMPImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXBMPImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXBMPImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXBMPImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyBMPImage *)new_FXBMPImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyBMPImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXBMPImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXBMPImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyBMPImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXBMPImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_onDefault. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXBMPImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXBMPImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXBMPImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_create. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXBMPImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_destroy. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXBMPImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_detach. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXBMPImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_resize. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXBMPImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_restore. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXBMPImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_render. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXBMPImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_scale. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXBMPImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_mirror. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXBMPImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXBMPImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_rotate. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXBMPImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXBMPImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_crop. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXBMPImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXBMPImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_savePixels. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXBMPImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXBMPImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXBMPImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPImage_loadPixels. Expected _FXPyBMPImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXBMPImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPNGImageToFXImage(void *ptr) {
    FXPNGImage *src;
    FXImage *dest;
    src = (FXPNGImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPNGImageToFXDrawable(void *ptr) {
    FXPNGImage *src;
    FXDrawable *dest;
    src = (FXPNGImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPNGImageToFXId(void *ptr) {
    FXPNGImage *src;
    FXId *dest;
    src = (FXPNGImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPNGImageToFXObject(void *ptr) {
    FXPNGImage *src;
    FXObject *dest;
    src = (FXPNGImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_PNGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPNGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_PNGImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPNGImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_PNGImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_PNGImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPNGImage *)new_FX_PNGImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPNGImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyPNGImageToFXPNGImage(void *ptr) {
    FXPyPNGImage *src;
    FXPNGImage *dest;
    src = (FXPyPNGImage *) ptr;
    dest = (FXPNGImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGImageToFXImage(void *ptr) {
    FXPyPNGImage *src;
    FXImage *dest;
    src = (FXPyPNGImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGImageToFXDrawable(void *ptr) {
    FXPyPNGImage *src;
    FXDrawable *dest;
    src = (FXPyPNGImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGImageToFXId(void *ptr) {
    FXPyPNGImage *src;
    FXId *dest;
    src = (FXPyPNGImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGImageToFXObject(void *ptr) {
    FXPyPNGImage *src;
    FXObject *dest;
    src = (FXPyPNGImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPNGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyPNGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXPNGImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXPNGImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXPNGImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPNGImage *)new_FXPNGImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPNGImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXPNGImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPNGImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPNGImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPNGImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_onDefault. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPNGImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPNGImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPNGImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_create. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPNGImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_destroy. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPNGImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_detach. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPNGImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_resize. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXPNGImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_restore. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXPNGImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_render. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPNGImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_scale. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXPNGImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_mirror. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXPNGImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPNGImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_rotate. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPNGImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPNGImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_crop. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXPNGImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPNGImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_savePixels. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPNGImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXPNGImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPNGImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGImage_loadPixels. Expected _FXPyPNGImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPNGImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXJPGImageToFXImage(void *ptr) {
    FXJPGImage *src;
    FXImage *dest;
    src = (FXJPGImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXJPGImageToFXDrawable(void *ptr) {
    FXJPGImage *src;
    FXDrawable *dest;
    src = (FXJPGImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXJPGImageToFXId(void *ptr) {
    FXJPGImage *src;
    FXId *dest;
    src = (FXJPGImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXJPGImageToFXObject(void *ptr) {
    FXJPGImage *src;
    FXObject *dest;
    src = (FXJPGImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_JPGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXJPGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_JPGImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXJPGImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_JPGImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_JPGImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXJPGImage *)new_FX_JPGImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXJPGImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FX_JPGImage_setQuality(_swigobj,_swigarg0)  (_swigobj->setQuality(_swigarg0))
static PyObject *_wrap_FX_JPGImage_setQuality(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXJPGImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","q", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_JPGImage_setQuality",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_JPGImage_setQuality. Expected _FXJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_JPGImage_setQuality(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_JPGImage_getQuality(_swigobj)  (_swigobj->getQuality())
static PyObject *_wrap_FX_JPGImage_getQuality(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_JPGImage_getQuality",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_JPGImage_getQuality. Expected _FXJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_JPGImage_getQuality(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyJPGImageToFXJPGImage(void *ptr) {
    FXPyJPGImage *src;
    FXJPGImage *dest;
    src = (FXPyJPGImage *) ptr;
    dest = (FXJPGImage *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGImageToFXImage(void *ptr) {
    FXPyJPGImage *src;
    FXImage *dest;
    src = (FXPyJPGImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGImageToFXDrawable(void *ptr) {
    FXPyJPGImage *src;
    FXDrawable *dest;
    src = (FXPyJPGImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGImageToFXId(void *ptr) {
    FXPyJPGImage *src;
    FXId *dest;
    src = (FXPyJPGImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGImageToFXObject(void *ptr) {
    FXPyJPGImage *src;
    FXObject *dest;
    src = (FXPyJPGImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXJPGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyJPGImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXJPGImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXJPGImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXJPGImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyJPGImage *)new_FXJPGImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyJPGImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXJPGImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXJPGImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyJPGImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXJPGImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_onDefault. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXJPGImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXJPGImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXJPGImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_create. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXJPGImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_destroy. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXJPGImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_detach. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXJPGImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_resize. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXJPGImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_restore. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXJPGImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_render. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXJPGImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_scale. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXJPGImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_mirror. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXJPGImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXJPGImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_rotate. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXJPGImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXJPGImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_crop. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXJPGImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXJPGImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_savePixels. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXJPGImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXJPGImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXJPGImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGImage_loadPixels. Expected _FXPyJPGImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXJPGImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXXPMImageToFXImage(void *ptr) {
    FXXPMImage *src;
    FXImage *dest;
    src = (FXXPMImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXXPMImageToFXDrawable(void *ptr) {
    FXXPMImage *src;
    FXDrawable *dest;
    src = (FXXPMImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXXPMImageToFXId(void *ptr) {
    FXXPMImage *src;
    FXId *dest;
    src = (FXXPMImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXXPMImageToFXObject(void *ptr) {
    FXXPMImage *src;
    FXObject *dest;
    src = (FXXPMImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_XPMImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXXPMImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_XPMImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXXPMImage * _result;
    FXApp * _arg0;
    const FXchar ** _arg1 = (const FXchar **) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_XPMImage",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_XPMImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXchar_pp")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FX_XPMImage. Expected _FXchar_pp.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXXPMImage *)new_FX_XPMImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXXPMImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXPyXPMImageToFXXPMImage(void *ptr) {
    FXPyXPMImage *src;
    FXXPMImage *dest;
    src = (FXPyXPMImage *) ptr;
    dest = (FXXPMImage *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMImageToFXImage(void *ptr) {
    FXPyXPMImage *src;
    FXImage *dest;
    src = (FXPyXPMImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMImageToFXDrawable(void *ptr) {
    FXPyXPMImage *src;
    FXDrawable *dest;
    src = (FXPyXPMImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMImageToFXId(void *ptr) {
    FXPyXPMImage *src;
    FXId *dest;
    src = (FXPyXPMImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMImageToFXObject(void *ptr) {
    FXPyXPMImage *src;
    FXObject *dest;
    src = (FXPyXPMImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXXPMImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyXPMImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXXPMImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _result;
    FXApp * _arg0;
    const FXchar ** _arg1 = (const FXchar **) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXXPMImage",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXXPMImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXchar_pp")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXXPMImage. Expected _FXchar_pp.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyXPMImage *)new_FXXPMImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyXPMImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXXPMImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXXPMImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyXPMImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXXPMImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_onDefault. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXXPMImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXXPMImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXXPMImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_create. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXXPMImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_destroy. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXXPMImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_detach. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXXPMImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_resize. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXXPMImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_restore. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXXPMImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_render. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXXPMImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_scale. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXXPMImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_mirror. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXXPMImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXXPMImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_rotate. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXXPMImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXXPMImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_crop. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXXPMImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXXPMImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_savePixels. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXXPMImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXXPMImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXXPMImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMImage_loadPixels. Expected _FXPyXPMImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXXPMImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPCXImageToFXImage(void *ptr) {
    FXPCXImage *src;
    FXImage *dest;
    src = (FXPCXImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPCXImageToFXDrawable(void *ptr) {
    FXPCXImage *src;
    FXDrawable *dest;
    src = (FXPCXImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPCXImageToFXId(void *ptr) {
    FXPCXImage *src;
    FXId *dest;
    src = (FXPCXImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPCXImageToFXObject(void *ptr) {
    FXPCXImage *src;
    FXObject *dest;
    src = (FXPCXImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_PCXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPCXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_PCXImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPCXImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_PCXImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_PCXImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPCXImage *)new_FX_PCXImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPCXImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPCXImage(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_PCXImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_PCXImage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_PCXImage. Expected _FXPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPCXImage(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyPCXImageToFXPCXImage(void *ptr) {
    FXPyPCXImage *src;
    FXPCXImage *dest;
    src = (FXPyPCXImage *) ptr;
    dest = (FXPCXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXImageToFXImage(void *ptr) {
    FXPyPCXImage *src;
    FXImage *dest;
    src = (FXPyPCXImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXImageToFXDrawable(void *ptr) {
    FXPyPCXImage *src;
    FXDrawable *dest;
    src = (FXPyPCXImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXImageToFXId(void *ptr) {
    FXPyPCXImage *src;
    FXId *dest;
    src = (FXPyPCXImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXImageToFXObject(void *ptr) {
    FXPyPCXImage *src;
    FXObject *dest;
    src = (FXPyPCXImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPCXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyPCXImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXPCXImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXPCXImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXPCXImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPCXImage *)new_FXPCXImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPCXImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXPCXImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPCXImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPCXImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPCXImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_onDefault. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPCXImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPCXImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPCXImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_create. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPCXImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_destroy. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPCXImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_detach. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPCXImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_resize. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXPCXImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_restore. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXPCXImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_render. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPCXImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_scale. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXPCXImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_mirror. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXPCXImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPCXImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_rotate. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPCXImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPCXImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_crop. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXPCXImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPCXImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_savePixels. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPCXImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXPCXImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPCXImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXImage_loadPixels. Expected _FXPyPCXImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPCXImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTIFImageToFXImage(void *ptr) {
    FXTIFImage *src;
    FXImage *dest;
    src = (FXTIFImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXTIFImageToFXDrawable(void *ptr) {
    FXTIFImage *src;
    FXDrawable *dest;
    src = (FXTIFImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTIFImageToFXId(void *ptr) {
    FXTIFImage *src;
    FXId *dest;
    src = (FXTIFImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTIFImageToFXObject(void *ptr) {
    FXTIFImage *src;
    FXObject *dest;
    src = (FXTIFImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_TIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXTIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_TIFImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_TIFImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TIFImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTIFImage *)new_FX_TIFImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTIFImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FX_TIFImage_setCodec(_swigobj,_swigarg0)  (_swigobj->setCodec(_swigarg0))
static PyObject *_wrap_FX_TIFImage_setCodec(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFImage * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TIFImage_setCodec",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TIFImage_setCodec. Expected _FXTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TIFImage_setCodec(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TIFImage_getCodec(_swigobj)  (_swigobj->getCodec())
static PyObject *_wrap_FX_TIFImage_getCodec(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TIFImage_getCodec",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TIFImage_getCodec. Expected _FXTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TIFImage_getCodec(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define delete_FXTIFImage(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_TIFImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_TIFImage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_TIFImage. Expected _FXTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXTIFImage(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTIFImageToFXTIFImage(void *ptr) {
    FXPyTIFImage *src;
    FXTIFImage *dest;
    src = (FXPyTIFImage *) ptr;
    dest = (FXTIFImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFImageToFXImage(void *ptr) {
    FXPyTIFImage *src;
    FXImage *dest;
    src = (FXPyTIFImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFImageToFXDrawable(void *ptr) {
    FXPyTIFImage *src;
    FXDrawable *dest;
    src = (FXPyTIFImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFImageToFXId(void *ptr) {
    FXPyTIFImage *src;
    FXId *dest;
    src = (FXPyTIFImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFImageToFXObject(void *ptr) {
    FXPyTIFImage *src;
    FXObject *dest;
    src = (FXPyTIFImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyTIFImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXTIFImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXTIFImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTIFImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTIFImage *)new_FXTIFImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTIFImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXTIFImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTIFImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTIFImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTIFImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_onDefault. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTIFImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTIFImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTIFImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_create. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTIFImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_destroy. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTIFImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_detach. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTIFImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_resize. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXTIFImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_restore. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXTIFImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_render. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTIFImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_scale. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXTIFImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_mirror. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXTIFImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTIFImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_rotate. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTIFImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTIFImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_crop. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXTIFImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTIFImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_savePixels. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTIFImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXTIFImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTIFImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFImage_loadPixels. Expected _FXPyTIFImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTIFImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTGAImageToFXImage(void *ptr) {
    FXTGAImage *src;
    FXImage *dest;
    src = (FXTGAImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXTGAImageToFXDrawable(void *ptr) {
    FXTGAImage *src;
    FXDrawable *dest;
    src = (FXTGAImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTGAImageToFXId(void *ptr) {
    FXTGAImage *src;
    FXId *dest;
    src = (FXTGAImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTGAImageToFXObject(void *ptr) {
    FXTGAImage *src;
    FXObject *dest;
    src = (FXTGAImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_TGAImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXTGAImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_TGAImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTGAImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_TGAImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TGAImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTGAImage *)new_FX_TGAImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTGAImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXTGAImage(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_TGAImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_TGAImage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_TGAImage. Expected _FXTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXTGAImage(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTGAImageToFXTGAImage(void *ptr) {
    FXPyTGAImage *src;
    FXTGAImage *dest;
    src = (FXPyTGAImage *) ptr;
    dest = (FXTGAImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAImageToFXImage(void *ptr) {
    FXPyTGAImage *src;
    FXImage *dest;
    src = (FXPyTGAImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAImageToFXDrawable(void *ptr) {
    FXPyTGAImage *src;
    FXDrawable *dest;
    src = (FXPyTGAImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAImageToFXId(void *ptr) {
    FXPyTGAImage *src;
    FXId *dest;
    src = (FXPyTGAImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAImageToFXObject(void *ptr) {
    FXPyTGAImage *src;
    FXObject *dest;
    src = (FXPyTGAImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTGAImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyTGAImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXTGAImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXTGAImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTGAImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTGAImage *)new_FXTGAImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTGAImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXTGAImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTGAImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTGAImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTGAImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_onDefault. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTGAImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTGAImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTGAImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTGAImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_create. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTGAImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTGAImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_destroy. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTGAImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTGAImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_detach. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTGAImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTGAImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_resize. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXTGAImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTGAImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_restore. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXTGAImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTGAImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_render. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTGAImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTGAImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_scale. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTGAImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXTGAImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_mirror. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXTGAImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTGAImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_rotate. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTGAImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTGAImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_crop. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXTGAImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTGAImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_savePixels. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTGAImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTGAImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXTGAImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTGAImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTGAImage_loadPixels. Expected _FXPyTGAImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTGAImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTGAImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXRGBImageToFXImage(void *ptr) {
    FXRGBImage *src;
    FXImage *dest;
    src = (FXRGBImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXRGBImageToFXDrawable(void *ptr) {
    FXRGBImage *src;
    FXDrawable *dest;
    src = (FXRGBImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXRGBImageToFXId(void *ptr) {
    FXRGBImage *src;
    FXId *dest;
    src = (FXRGBImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXRGBImageToFXObject(void *ptr) {
    FXRGBImage *src;
    FXObject *dest;
    src = (FXRGBImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_RGBImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXRGBImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_RGBImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRGBImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_RGBImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_RGBImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRGBImage *)new_FX_RGBImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRGBImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXRGBImage(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_RGBImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_RGBImage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_RGBImage. Expected _FXRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXRGBImage(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyRGBImageToFXRGBImage(void *ptr) {
    FXPyRGBImage *src;
    FXRGBImage *dest;
    src = (FXPyRGBImage *) ptr;
    dest = (FXRGBImage *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBImageToFXImage(void *ptr) {
    FXPyRGBImage *src;
    FXImage *dest;
    src = (FXPyRGBImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBImageToFXDrawable(void *ptr) {
    FXPyRGBImage *src;
    FXDrawable *dest;
    src = (FXPyRGBImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBImageToFXId(void *ptr) {
    FXPyRGBImage *src;
    FXId *dest;
    src = (FXPyRGBImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBImageToFXObject(void *ptr) {
    FXPyRGBImage *src;
    FXObject *dest;
    src = (FXPyRGBImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXRGBImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyRGBImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXRGBImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXRGBImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXRGBImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRGBImage *)new_FXRGBImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRGBImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXRGBImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXRGBImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyRGBImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXRGBImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_onDefault. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXRGBImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXRGBImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXRGBImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_create. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXRGBImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_destroy. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXRGBImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_detach. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRGBImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_resize. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXRGBImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_restore. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXRGBImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_render. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRGBImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_scale. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXRGBImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_mirror. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXRGBImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRGBImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_rotate. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXRGBImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXRGBImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_crop. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXRGBImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRGBImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_savePixels. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRGBImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXRGBImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRGBImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBImage_loadPixels. Expected _FXPyRGBImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRGBImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXICOImageToFXImage(void *ptr) {
    FXICOImage *src;
    FXImage *dest;
    src = (FXICOImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXICOImageToFXDrawable(void *ptr) {
    FXICOImage *src;
    FXDrawable *dest;
    src = (FXICOImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXICOImageToFXId(void *ptr) {
    FXICOImage *src;
    FXId *dest;
    src = (FXICOImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXICOImageToFXObject(void *ptr) {
    FXICOImage *src;
    FXObject *dest;
    src = (FXICOImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_ICOImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXICOImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FX_ICOImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXICOImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FX_ICOImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ICOImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXICOImage *)new_FX_ICOImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXICOImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXICOImage(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_ICOImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_ICOImage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_ICOImage. Expected _FXICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXICOImage(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyICOImageToFXICOImage(void *ptr) {
    FXPyICOImage *src;
    FXICOImage *dest;
    src = (FXPyICOImage *) ptr;
    dest = (FXICOImage *) src;
    return (void *) dest;
}

static void *SwigFXPyICOImageToFXImage(void *ptr) {
    FXPyICOImage *src;
    FXImage *dest;
    src = (FXPyICOImage *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyICOImageToFXDrawable(void *ptr) {
    FXPyICOImage *src;
    FXDrawable *dest;
    src = (FXPyICOImage *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyICOImageToFXId(void *ptr) {
    FXPyICOImage *src;
    FXId *dest;
    src = (FXPyICOImage *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyICOImageToFXObject(void *ptr) {
    FXPyICOImage *src;
    FXObject *dest;
    src = (FXPyICOImage *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXICOImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4) (new FXPyICOImage(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_new_FXICOImage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXuint  _arg2 = (FXuint ) 0;
    FXint  _arg3 = (FXint ) 1;
    FXint  _arg4 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiii:new_FXICOImage",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXICOImage. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyICOImage *)new_FXICOImage(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyICOImage_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXICOImage_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXICOImage_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyICOImage * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXICOImage_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_onDefault. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXICOImage_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXICOImage_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXICOImage_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOImage_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_create. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXICOImage_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOImage_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_destroy. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXICOImage_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOImage_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_detach. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOImage_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXICOImage_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_resize. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXICOImage_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOImage_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_restore. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXICOImage_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOImage_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_render. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOImage_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXICOImage_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_scale. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOImage_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXICOImage_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_mirror. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXICOImage_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXICOImage_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_rotate. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXICOImage_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXICOImage_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_crop. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXICOImage_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXICOImage_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_savePixels. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXICOImage_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOImage_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXICOImage_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOImage * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXICOImage_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOImage_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOImage_loadPixels. Expected _FXPyICOImage_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXICOImage_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOImage_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXIconToFXImage(void *ptr) {
    FXIcon *src;
    FXImage *dest;
    src = (FXIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXIconToFXDrawable(void *ptr) {
    FXIcon *src;
    FXDrawable *dest;
    src = (FXIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXIconToFXId(void *ptr) {
    FXIcon *src;
    FXId *dest;
    src = (FXIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXIconToFXObject(void *ptr) {
    FXIcon *src;
    FXObject *dest;
    src = (FXIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Icon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_Icon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_Icon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Icon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)new_FX_Icon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyIconToFXIcon(void *ptr) {
    FXPyIcon *src;
    FXIcon *dest;
    src = (FXPyIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyIconToFXImage(void *ptr) {
    FXPyIcon *src;
    FXImage *dest;
    src = (FXPyIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyIconToFXDrawable(void *ptr) {
    FXPyIcon *src;
    FXDrawable *dest;
    src = (FXPyIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyIconToFXId(void *ptr) {
    FXPyIcon *src;
    FXId *dest;
    src = (FXPyIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyIconToFXObject(void *ptr) {
    FXPyIcon *src;
    FXObject *dest;
    src = (FXPyIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyIcon *)new_FXIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_onDefault. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_create. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_destroy. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_detach. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_resize. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_restore. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_render. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_scale. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_mirror. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_rotate. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_crop. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_savePixels. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXIcon_loadPixels. Expected _FXPyIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXGIFIconToFXIcon(void *ptr) {
    FXGIFIcon *src;
    FXIcon *dest;
    src = (FXGIFIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXGIFIconToFXImage(void *ptr) {
    FXGIFIcon *src;
    FXImage *dest;
    src = (FXGIFIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXGIFIconToFXDrawable(void *ptr) {
    FXGIFIcon *src;
    FXDrawable *dest;
    src = (FXGIFIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXGIFIconToFXId(void *ptr) {
    FXGIFIcon *src;
    FXId *dest;
    src = (FXGIFIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXGIFIconToFXObject(void *ptr) {
    FXGIFIcon *src;
    FXObject *dest;
    src = (FXGIFIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_GIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXGIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_GIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXGIFIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_GIFIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_GIFIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXGIFIcon *)new_FX_GIFIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXGIFIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyGIFIconToFXGIFIcon(void *ptr) {
    FXPyGIFIcon *src;
    FXGIFIcon *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXGIFIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFIconToFXIcon(void *ptr) {
    FXPyGIFIcon *src;
    FXIcon *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFIconToFXImage(void *ptr) {
    FXPyGIFIcon *src;
    FXImage *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFIconToFXDrawable(void *ptr) {
    FXPyGIFIcon *src;
    FXDrawable *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFIconToFXId(void *ptr) {
    FXPyGIFIcon *src;
    FXId *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyGIFIconToFXObject(void *ptr) {
    FXPyGIFIcon *src;
    FXObject *dest;
    src = (FXPyGIFIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXGIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyGIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXGIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXGIFIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXGIFIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyGIFIcon *)new_FXGIFIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyGIFIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXGIFIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXGIFIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyGIFIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXGIFIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_onDefault. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXGIFIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXGIFIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXGIFIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_create. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXGIFIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_destroy. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXGIFIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_detach. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXGIFIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_resize. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXGIFIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_restore. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXGIFIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXGIFIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_render. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXGIFIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_scale. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXGIFIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXGIFIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_mirror. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXGIFIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXGIFIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_rotate. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXGIFIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXGIFIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_crop. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXGIFIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXGIFIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_savePixels. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXGIFIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXGIFIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXGIFIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyGIFIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXGIFIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyGIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXGIFIcon_loadPixels. Expected _FXPyGIFIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXGIFIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXGIFIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXBMPIconToFXIcon(void *ptr) {
    FXBMPIcon *src;
    FXIcon *dest;
    src = (FXBMPIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXBMPIconToFXImage(void *ptr) {
    FXBMPIcon *src;
    FXImage *dest;
    src = (FXBMPIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXBMPIconToFXDrawable(void *ptr) {
    FXBMPIcon *src;
    FXDrawable *dest;
    src = (FXBMPIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXBMPIconToFXId(void *ptr) {
    FXBMPIcon *src;
    FXId *dest;
    src = (FXBMPIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXBMPIconToFXObject(void *ptr) {
    FXBMPIcon *src;
    FXObject *dest;
    src = (FXBMPIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_BMPIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXBMPIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_BMPIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXBMPIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_BMPIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_BMPIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXBMPIcon *)new_FX_BMPIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXBMPIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyBMPIconToFXBMPIcon(void *ptr) {
    FXPyBMPIcon *src;
    FXBMPIcon *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXBMPIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPIconToFXIcon(void *ptr) {
    FXPyBMPIcon *src;
    FXIcon *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPIconToFXImage(void *ptr) {
    FXPyBMPIcon *src;
    FXImage *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPIconToFXDrawable(void *ptr) {
    FXPyBMPIcon *src;
    FXDrawable *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPIconToFXId(void *ptr) {
    FXPyBMPIcon *src;
    FXId *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyBMPIconToFXObject(void *ptr) {
    FXPyBMPIcon *src;
    FXObject *dest;
    src = (FXPyBMPIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXBMPIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyBMPIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXBMPIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXBMPIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXBMPIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyBMPIcon *)new_FXBMPIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyBMPIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXBMPIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXBMPIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyBMPIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXBMPIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_onDefault. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXBMPIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXBMPIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXBMPIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_create. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXBMPIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_destroy. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXBMPIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_detach. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXBMPIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_resize. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXBMPIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_restore. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXBMPIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXBMPIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_render. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXBMPIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_scale. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXBMPIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXBMPIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_mirror. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXBMPIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXBMPIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_rotate. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXBMPIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXBMPIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_crop. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXBMPIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXBMPIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_savePixels. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXBMPIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXBMPIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXBMPIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyBMPIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXBMPIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyBMPIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXBMPIcon_loadPixels. Expected _FXPyBMPIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXBMPIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXBMPIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPNGIconToFXIcon(void *ptr) {
    FXPNGIcon *src;
    FXIcon *dest;
    src = (FXPNGIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPNGIconToFXImage(void *ptr) {
    FXPNGIcon *src;
    FXImage *dest;
    src = (FXPNGIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPNGIconToFXDrawable(void *ptr) {
    FXPNGIcon *src;
    FXDrawable *dest;
    src = (FXPNGIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPNGIconToFXId(void *ptr) {
    FXPNGIcon *src;
    FXId *dest;
    src = (FXPNGIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPNGIconToFXObject(void *ptr) {
    FXPNGIcon *src;
    FXObject *dest;
    src = (FXPNGIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_PNGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPNGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_PNGIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPNGIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_PNGIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_PNGIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPNGIcon *)new_FX_PNGIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPNGIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

static void *SwigFXPyPNGIconToFXPNGIcon(void *ptr) {
    FXPyPNGIcon *src;
    FXPNGIcon *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXPNGIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGIconToFXIcon(void *ptr) {
    FXPyPNGIcon *src;
    FXIcon *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGIconToFXImage(void *ptr) {
    FXPyPNGIcon *src;
    FXImage *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGIconToFXDrawable(void *ptr) {
    FXPyPNGIcon *src;
    FXDrawable *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGIconToFXId(void *ptr) {
    FXPyPNGIcon *src;
    FXId *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPNGIconToFXObject(void *ptr) {
    FXPyPNGIcon *src;
    FXObject *dest;
    src = (FXPyPNGIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPNGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyPNGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXPNGIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXPNGIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXPNGIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPNGIcon *)new_FXPNGIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPNGIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXPNGIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPNGIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPNGIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPNGIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_onDefault. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPNGIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPNGIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPNGIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_create. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPNGIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_destroy. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPNGIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_detach. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPNGIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_resize. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXPNGIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_restore. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXPNGIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPNGIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_render. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPNGIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_scale. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPNGIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXPNGIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_mirror. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXPNGIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPNGIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_rotate. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPNGIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPNGIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_crop. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXPNGIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPNGIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_savePixels. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPNGIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPNGIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXPNGIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPNGIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPNGIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPNGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPNGIcon_loadPixels. Expected _FXPyPNGIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPNGIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPNGIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXJPGIconToFXIcon(void *ptr) {
    FXJPGIcon *src;
    FXIcon *dest;
    src = (FXJPGIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXJPGIconToFXImage(void *ptr) {
    FXJPGIcon *src;
    FXImage *dest;
    src = (FXJPGIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXJPGIconToFXDrawable(void *ptr) {
    FXJPGIcon *src;
    FXDrawable *dest;
    src = (FXJPGIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXJPGIconToFXId(void *ptr) {
    FXJPGIcon *src;
    FXId *dest;
    src = (FXJPGIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXJPGIconToFXObject(void *ptr) {
    FXJPGIcon *src;
    FXObject *dest;
    src = (FXJPGIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_JPGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXJPGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_JPGIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXJPGIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_JPGIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_JPGIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXJPGIcon *)new_FX_JPGIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXJPGIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FX_JPGIcon_setQuality(_swigobj,_swigarg0)  (_swigobj->setQuality(_swigarg0))
static PyObject *_wrap_FX_JPGIcon_setQuality(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXJPGIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","q", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_JPGIcon_setQuality",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_JPGIcon_setQuality. Expected _FXJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_JPGIcon_setQuality(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_JPGIcon_getQuality(_swigobj)  (_swigobj->getQuality())
static PyObject *_wrap_FX_JPGIcon_getQuality(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_JPGIcon_getQuality",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_JPGIcon_getQuality. Expected _FXJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_JPGIcon_getQuality(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyJPGIconToFXJPGIcon(void *ptr) {
    FXPyJPGIcon *src;
    FXJPGIcon *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXJPGIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGIconToFXIcon(void *ptr) {
    FXPyJPGIcon *src;
    FXIcon *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGIconToFXImage(void *ptr) {
    FXPyJPGIcon *src;
    FXImage *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGIconToFXDrawable(void *ptr) {
    FXPyJPGIcon *src;
    FXDrawable *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGIconToFXId(void *ptr) {
    FXPyJPGIcon *src;
    FXId *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyJPGIconToFXObject(void *ptr) {
    FXPyJPGIcon *src;
    FXObject *dest;
    src = (FXPyJPGIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXJPGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyJPGIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXJPGIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXJPGIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXJPGIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyJPGIcon *)new_FXJPGIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyJPGIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FXJPGIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXJPGIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyJPGIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXJPGIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_onDefault. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXJPGIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXJPGIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXJPGIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_create. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXJPGIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_destroy. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXJPGIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_detach. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXJPGIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_resize. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXJPGIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_restore. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXJPGIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXJPGIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_render. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXJPGIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_scale. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXJPGIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXJPGIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_mirror. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXJPGIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXJPGIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_rotate. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXJPGIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXJPGIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_crop. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXJPGIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXJPGIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_savePixels. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXJPGIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXJPGIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXJPGIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyJPGIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXJPGIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyJPGIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXJPGIcon_loadPixels. Expected _FXPyJPGIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXJPGIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXJPGIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXXPMIconToFXIcon(void *ptr) {
    FXXPMIcon *src;
    FXIcon *dest;
    src = (FXXPMIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXXPMIconToFXImage(void *ptr) {
    FXXPMIcon *src;
    FXImage *dest;
    src = (FXXPMIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXXPMIconToFXDrawable(void *ptr) {
    FXXPMIcon *src;
    FXDrawable *dest;
    src = (FXXPMIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXXPMIconToFXId(void *ptr) {
    FXXPMIcon *src;
    FXId *dest;
    src = (FXXPMIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXXPMIconToFXObject(void *ptr) {
    FXXPMIcon *src;
    FXObject *dest;
    src = (FXXPMIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_XPMIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXXPMIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_XPMIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXXPMIcon * _result;
    FXApp * _arg0;
    const FXchar ** _arg1 = (const FXchar **) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_XPMIcon",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_XPMIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXchar_pp")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FX_XPMIcon. Expected _FXchar_pp.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXXPMIcon *)new_FX_XPMIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXXPMIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXPyXPMIconToFXXPMIcon(void *ptr) {
    FXPyXPMIcon *src;
    FXXPMIcon *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXXPMIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMIconToFXIcon(void *ptr) {
    FXPyXPMIcon *src;
    FXIcon *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMIconToFXImage(void *ptr) {
    FXPyXPMIcon *src;
    FXImage *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMIconToFXDrawable(void *ptr) {
    FXPyXPMIcon *src;
    FXDrawable *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMIconToFXId(void *ptr) {
    FXPyXPMIcon *src;
    FXId *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyXPMIconToFXObject(void *ptr) {
    FXPyXPMIcon *src;
    FXObject *dest;
    src = (FXPyXPMIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXXPMIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyXPMIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXXPMIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _result;
    FXApp * _arg0;
    const FXchar ** _arg1 = (const FXchar **) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXXPMIcon",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXXPMIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXchar_pp")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXXPMIcon. Expected _FXchar_pp.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyXPMIcon *)new_FXXPMIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyXPMIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXXPMIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXXPMIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyXPMIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXXPMIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_onDefault. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXXPMIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXXPMIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXXPMIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_create. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXXPMIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_destroy. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXXPMIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_detach. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXXPMIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_resize. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXXPMIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_restore. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXXPMIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXXPMIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_render. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXXPMIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_scale. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXXPMIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXXPMIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_mirror. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXXPMIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXXPMIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_rotate. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXXPMIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXXPMIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_crop. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXXPMIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXXPMIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_savePixels. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXXPMIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXXPMIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXXPMIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyXPMIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXXPMIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyXPMIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXXPMIcon_loadPixels. Expected _FXPyXPMIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXXPMIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXXPMIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPCXIconToFXIcon(void *ptr) {
    FXPCXIcon *src;
    FXIcon *dest;
    src = (FXPCXIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPCXIconToFXImage(void *ptr) {
    FXPCXIcon *src;
    FXImage *dest;
    src = (FXPCXIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPCXIconToFXDrawable(void *ptr) {
    FXPCXIcon *src;
    FXDrawable *dest;
    src = (FXPCXIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPCXIconToFXId(void *ptr) {
    FXPCXIcon *src;
    FXId *dest;
    src = (FXPCXIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPCXIconToFXObject(void *ptr) {
    FXPCXIcon *src;
    FXObject *dest;
    src = (FXPCXIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_PCXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPCXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_PCXIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPCXIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_PCXIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_PCXIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPCXIcon *)new_FX_PCXIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPCXIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPCXIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_PCXIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_PCXIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_PCXIcon. Expected _FXPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPCXIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyPCXIconToFXPCXIcon(void *ptr) {
    FXPyPCXIcon *src;
    FXPCXIcon *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXPCXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXIconToFXIcon(void *ptr) {
    FXPyPCXIcon *src;
    FXIcon *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXIconToFXImage(void *ptr) {
    FXPyPCXIcon *src;
    FXImage *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXIconToFXDrawable(void *ptr) {
    FXPyPCXIcon *src;
    FXDrawable *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXIconToFXId(void *ptr) {
    FXPyPCXIcon *src;
    FXId *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPCXIconToFXObject(void *ptr) {
    FXPyPCXIcon *src;
    FXObject *dest;
    src = (FXPyPCXIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPCXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyPCXIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXPCXIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXPCXIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXPCXIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPCXIcon *)new_FXPCXIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPCXIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPyPCXIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FXPCXIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FXPCXIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FXPCXIcon. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPyPCXIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPCXIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPCXIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPCXIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_onDefault. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPCXIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPCXIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPCXIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_create. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPCXIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_destroy. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPCXIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_detach. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPCXIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_resize. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXPCXIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_restore. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXPCXIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPCXIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_render. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPCXIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_scale. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPCXIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXPCXIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_mirror. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXPCXIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPCXIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_rotate. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPCXIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPCXIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_crop. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXPCXIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPCXIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_savePixels. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPCXIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPCXIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXPCXIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPCXIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPCXIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPCXIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPCXIcon_loadPixels. Expected _FXPyPCXIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPCXIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPCXIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTIFIconToFXIcon(void *ptr) {
    FXTIFIcon *src;
    FXIcon *dest;
    src = (FXTIFIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXTIFIconToFXImage(void *ptr) {
    FXTIFIcon *src;
    FXImage *dest;
    src = (FXTIFIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXTIFIconToFXDrawable(void *ptr) {
    FXTIFIcon *src;
    FXDrawable *dest;
    src = (FXTIFIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTIFIconToFXId(void *ptr) {
    FXTIFIcon *src;
    FXId *dest;
    src = (FXTIFIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTIFIconToFXObject(void *ptr) {
    FXTIFIcon *src;
    FXObject *dest;
    src = (FXTIFIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_TIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXTIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_TIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_TIFIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TIFIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTIFIcon *)new_FX_TIFIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTIFIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define FX_TIFIcon_setCodec(_swigobj,_swigarg0)  (_swigobj->setCodec(_swigarg0))
static PyObject *_wrap_FX_TIFIcon_setCodec(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFIcon * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TIFIcon_setCodec",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TIFIcon_setCodec. Expected _FXTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TIFIcon_setCodec(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TIFIcon_getCodec(_swigobj)  (_swigobj->getCodec())
static PyObject *_wrap_FX_TIFIcon_getCodec(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TIFIcon_getCodec",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TIFIcon_getCodec. Expected _FXTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TIFIcon_getCodec(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define delete_FXTIFIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_TIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_TIFIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_TIFIcon. Expected _FXTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXTIFIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTIFIconToFXTIFIcon(void *ptr) {
    FXPyTIFIcon *src;
    FXTIFIcon *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXTIFIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFIconToFXIcon(void *ptr) {
    FXPyTIFIcon *src;
    FXIcon *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFIconToFXImage(void *ptr) {
    FXPyTIFIcon *src;
    FXImage *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFIconToFXDrawable(void *ptr) {
    FXPyTIFIcon *src;
    FXDrawable *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFIconToFXId(void *ptr) {
    FXPyTIFIcon *src;
    FXId *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTIFIconToFXObject(void *ptr) {
    FXPyTIFIcon *src;
    FXObject *dest;
    src = (FXPyTIFIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyTIFIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXTIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXTIFIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTIFIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTIFIcon *)new_FXTIFIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTIFIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPyTIFIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FXTIFIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FXTIFIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FXTIFIcon. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPyTIFIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTIFIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTIFIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTIFIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_onDefault. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTIFIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTIFIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTIFIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_create. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTIFIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_destroy. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTIFIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_detach. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTIFIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_resize. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXTIFIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_restore. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXTIFIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTIFIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_render. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTIFIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_scale. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTIFIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXTIFIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_mirror. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXTIFIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTIFIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_rotate. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTIFIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTIFIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_crop. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXTIFIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTIFIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_savePixels. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTIFIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTIFIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXTIFIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTIFIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTIFIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTIFIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTIFIcon_loadPixels. Expected _FXPyTIFIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTIFIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTIFIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTGAIconToFXIcon(void *ptr) {
    FXTGAIcon *src;
    FXIcon *dest;
    src = (FXTGAIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXTGAIconToFXImage(void *ptr) {
    FXTGAIcon *src;
    FXImage *dest;
    src = (FXTGAIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXTGAIconToFXDrawable(void *ptr) {
    FXTGAIcon *src;
    FXDrawable *dest;
    src = (FXTGAIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTGAIconToFXId(void *ptr) {
    FXTGAIcon *src;
    FXId *dest;
    src = (FXTGAIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTGAIconToFXObject(void *ptr) {
    FXTGAIcon *src;
    FXObject *dest;
    src = (FXTGAIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_TGAIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXTGAIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_TGAIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTGAIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_TGAIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TGAIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTGAIcon *)new_FX_TGAIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTGAIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXTGAIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_TGAIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTGAIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_TGAIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTGAIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_TGAIcon. Expected _FXTGAIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXTGAIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTGAIconToFXTGAIcon(void *ptr) {
    FXPyTGAIcon *src;
    FXTGAIcon *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXTGAIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAIconToFXIcon(void *ptr) {
    FXPyTGAIcon *src;
    FXIcon *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAIconToFXImage(void *ptr) {
    FXPyTGAIcon *src;
    FXImage *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAIconToFXDrawable(void *ptr) {
    FXPyTGAIcon *src;
    FXDrawable *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAIconToFXId(void *ptr) {
    FXPyTGAIcon *src;
    FXId *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTGAIconToFXObject(void *ptr) {
    FXPyTGAIcon *src;
    FXObject *dest;
    src = (FXPyTGAIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTGAIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyTGAIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXTGAIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXTGAIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTGAIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTGAIcon *)new_FXTGAIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTGAIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPyTGAIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FXTGAIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTGAIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FXTGAIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTGAIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FXTGAIcon. Expected _FXPyTGAIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPyTGAIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXRGBIconToFXIcon(void *ptr) {
    FXRGBIcon *src;
    FXIcon *dest;
    src = (FXRGBIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXRGBIconToFXImage(void *ptr) {
    FXRGBIcon *src;
    FXImage *dest;
    src = (FXRGBIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXRGBIconToFXDrawable(void *ptr) {
    FXRGBIcon *src;
    FXDrawable *dest;
    src = (FXRGBIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXRGBIconToFXId(void *ptr) {
    FXRGBIcon *src;
    FXId *dest;
    src = (FXRGBIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXRGBIconToFXObject(void *ptr) {
    FXRGBIcon *src;
    FXObject *dest;
    src = (FXRGBIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_RGBIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXRGBIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_RGBIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRGBIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_RGBIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_RGBIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRGBIcon *)new_FX_RGBIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRGBIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXRGBIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_RGBIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_RGBIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_RGBIcon. Expected _FXRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXRGBIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyRGBIconToFXRGBIcon(void *ptr) {
    FXPyRGBIcon *src;
    FXRGBIcon *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXRGBIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBIconToFXIcon(void *ptr) {
    FXPyRGBIcon *src;
    FXIcon *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBIconToFXImage(void *ptr) {
    FXPyRGBIcon *src;
    FXImage *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBIconToFXDrawable(void *ptr) {
    FXPyRGBIcon *src;
    FXDrawable *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBIconToFXId(void *ptr) {
    FXPyRGBIcon *src;
    FXId *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyRGBIconToFXObject(void *ptr) {
    FXPyRGBIcon *src;
    FXObject *dest;
    src = (FXPyRGBIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXRGBIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyRGBIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXRGBIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXRGBIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXRGBIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRGBIcon *)new_FXRGBIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRGBIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPyRGBIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FXRGBIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FXRGBIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FXRGBIcon. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPyRGBIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXRGBIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyRGBIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXRGBIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_onDefault. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXRGBIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXRGBIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXRGBIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_create. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXRGBIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_destroy. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXRGBIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_detach. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRGBIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_resize. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXRGBIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_restore. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXRGBIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRGBIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_render. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRGBIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_scale. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRGBIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXRGBIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_mirror. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXRGBIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRGBIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_rotate. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXRGBIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXRGBIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_crop. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXRGBIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRGBIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_savePixels. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRGBIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRGBIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXRGBIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRGBIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRGBIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRGBIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRGBIcon_loadPixels. Expected _FXPyRGBIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRGBIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRGBIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXICOIconToFXIcon(void *ptr) {
    FXICOIcon *src;
    FXIcon *dest;
    src = (FXICOIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXICOIconToFXImage(void *ptr) {
    FXICOIcon *src;
    FXImage *dest;
    src = (FXICOIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXICOIconToFXDrawable(void *ptr) {
    FXICOIcon *src;
    FXDrawable *dest;
    src = (FXICOIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXICOIconToFXId(void *ptr) {
    FXICOIcon *src;
    FXId *dest;
    src = (FXICOIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXICOIconToFXObject(void *ptr) {
    FXICOIcon *src;
    FXObject *dest;
    src = (FXICOIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_ICOIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXICOIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_ICOIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXICOIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FX_ICOIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ICOIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXICOIcon *)new_FX_ICOIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXICOIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXICOIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_ICOIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_ICOIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_ICOIcon. Expected _FXICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXICOIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyICOIconToFXICOIcon(void *ptr) {
    FXPyICOIcon *src;
    FXICOIcon *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXICOIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyICOIconToFXIcon(void *ptr) {
    FXPyICOIcon *src;
    FXIcon *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXIcon *) src;
    return (void *) dest;
}

static void *SwigFXPyICOIconToFXImage(void *ptr) {
    FXPyICOIcon *src;
    FXImage *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXImage *) src;
    return (void *) dest;
}

static void *SwigFXPyICOIconToFXDrawable(void *ptr) {
    FXPyICOIcon *src;
    FXDrawable *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyICOIconToFXId(void *ptr) {
    FXPyICOIcon *src;
    FXId *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyICOIconToFXObject(void *ptr) {
    FXPyICOIcon *src;
    FXObject *dest;
    src = (FXPyICOIcon *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXICOIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyICOIcon(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXICOIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _result;
    FXApp * _arg0;
    void * _arg1 = (void *) NULL;
    FXColor  _arg2 = (FXColor ) 0;
    FXuint  _arg3 = (FXuint ) 0;
    FXint  _arg4 = (FXint ) 1;
    FXint  _arg5 = (FXint ) 1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","pix","clr","opts","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiii:new_FXICOIcon",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXICOIcon. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_obj1)
{
  if(_obj1==Py_None){
    _arg1=NULL;
    }
  else if (PyString_Check(_obj1)){
    int size = PyString_Size(_obj1);
    if(!FXMALLOC(&_arg1,FXuchar,size)){
      PyErr_SetString(PyExc_MemoryError,"out of memory");
      return NULL;
      }
    FXuchar *bytes=(FXuchar*)_arg1;
    char *str=PyString_AsString(_obj1);
    for (int i=0; i<size; i++)
      bytes[i]=(FXuchar)str[i];
    }
  else{
    PyErr_SetString(PyExc_TypeError,"expected a string");
    return NULL;
    }
  }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyICOIcon *)new_FXICOIcon(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyICOIcon_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
  if(_arg1)
    FXFREE(&_arg1);
  }
    return _resultobj;
}

#define delete_FXPyICOIcon(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FXICOIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FXICOIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FXICOIcon. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXPyICOIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXICOIcon_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyICOIcon * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXICOIcon_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_onDefault. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXICOIcon_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXICOIcon_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXICOIcon_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOIcon_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_create. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXICOIcon_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOIcon_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_destroy. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXICOIcon_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOIcon_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_detach. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOIcon_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXICOIcon_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_resize. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_restore(_swigobj)  (_swigobj->_restore())
static PyObject *_wrap_FXICOIcon_restore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOIcon_restore",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_restore. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_restore(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_render(_swigobj)  (_swigobj->_render())
static PyObject *_wrap_FXICOIcon_render(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXICOIcon_render",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_render. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_render(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_scale(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_scale(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOIcon_scale(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXICOIcon_scale",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_scale. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_scale(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_mirror(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_mirror(_swigarg0,_swigarg1))
static PyObject *_wrap_FXICOIcon_mirror(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXbool  _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","horizontal","vertical", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Obb:FXICOIcon_mirror",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_mirror. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_mirror(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_rotate(_swigobj,_swigarg0)  (_swigobj->_rotate(_swigarg0))
static PyObject *_wrap_FXICOIcon_rotate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","degrees", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXICOIcon_rotate",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_rotate. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_rotate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_crop(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_crop(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXICOIcon_crop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXICOIcon_crop",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_crop. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_crop(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_savePixels(_swigobj,_swigarg0)  (_swigobj->_savePixels(_swigarg0))
static PyObject *_wrap_FXICOIcon_savePixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXICOIcon_savePixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_savePixels. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXICOIcon_savePixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_savePixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXICOIcon_loadPixels(_swigobj,_swigarg0)  (_swigobj->_loadPixels(_swigarg0))
static PyObject *_wrap_FXICOIcon_loadPixels(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyICOIcon * _arg0;
    FXStream * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","store", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXICOIcon_loadPixels",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyICOIcon_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXICOIcon_loadPixels. Expected _FXPyICOIcon_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXICOIcon_loadPixels. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXICOIcon_loadPixels(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXAccelTableToFXObject(void *ptr) {
    FXAccelTable *src;
    FXObject *dest;
    src = (FXAccelTable *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_AccelTable_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_AccelTable_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXAccelTable * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_AccelTable_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_onKeyPress. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_AccelTable_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_AccelTable_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_AccelTable_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_AccelTable_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXAccelTable * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_AccelTable_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_onKeyRelease. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_AccelTable_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_AccelTable_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_AccelTable() (new FXAccelTable())
static PyObject *_wrap_new_FX_AccelTable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXAccelTable * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_AccelTable",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXAccelTable *)new_FX_AccelTable();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXAccelTable_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_AccelTable_addAccel(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->addAccel(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_AccelTable_addAccel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXAccelTable * _arg0;
    FXHotKey  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXSelector  _arg4 = (FXSelector ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","hotkey","target","seldn","selup", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oii:FX_AccelTable_addAccel",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_addAccel. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_AccelTable_addAccel(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_AccelTable_hasAccel(_swigobj,_swigarg0)  (_swigobj->hasAccel(_swigarg0))
static PyObject *_wrap_FX_AccelTable_hasAccel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXAccelTable * _arg0;
    FXHotKey  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hotkey", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_AccelTable_hasAccel",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_hasAccel. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_AccelTable_hasAccel(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_AccelTable_targetOfAccel(_swigobj,_swigarg0)  (_swigobj->targetOfAccel(_swigarg0))
static PyObject *_wrap_FX_AccelTable_targetOfAccel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXAccelTable * _arg0;
    FXHotKey  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hotkey", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_AccelTable_targetOfAccel",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_targetOfAccel. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_AccelTable_targetOfAccel(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_AccelTable_removeAccel(_swigobj,_swigarg0)  (_swigobj->removeAccel(_swigarg0))
static PyObject *_wrap_FX_AccelTable_removeAccel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXAccelTable * _arg0;
    FXHotKey  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hotkey", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_AccelTable_removeAccel",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_AccelTable_removeAccel. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_AccelTable_removeAccel(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyAccelTableToFXAccelTable(void *ptr) {
    FXPyAccelTable *src;
    FXAccelTable *dest;
    src = (FXPyAccelTable *) ptr;
    dest = (FXAccelTable *) src;
    return (void *) dest;
}

static void *SwigFXPyAccelTableToFXObject(void *ptr) {
    FXPyAccelTable *src;
    FXObject *dest;
    src = (FXPyAccelTable *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXAccelTable() (new FXPyAccelTable())
static PyObject *_wrap_new_FXAccelTable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyAccelTable * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXAccelTable",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyAccelTable *)new_FXAccelTable();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyAccelTable_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXAccelTable_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXAccelTable_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyAccelTable * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXAccelTable_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXAccelTable_onDefault. Expected _FXPyAccelTable_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXAccelTable_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXRecentFilesToFXObject(void *ptr) {
    FXRecentFiles *src;
    FXObject *dest;
    src = (FXRecentFiles *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_RecentFiles_onCmdClear(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdClear(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RecentFiles_onCmdClear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRecentFiles * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RecentFiles_onCmdClear",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_onCmdClear. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RecentFiles_onCmdClear. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RecentFiles_onCmdClear(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RecentFiles_onCmdFile(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdFile(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RecentFiles_onCmdFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRecentFiles * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RecentFiles_onCmdFile",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_onCmdFile. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RecentFiles_onCmdFile. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RecentFiles_onCmdFile(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RecentFiles_onUpdFile(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdFile(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RecentFiles_onUpdFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRecentFiles * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RecentFiles_onUpdFile",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_onUpdFile. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RecentFiles_onUpdFile. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RecentFiles_onUpdFile(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RecentFiles_onUpdAnyFiles(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdAnyFiles(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RecentFiles_onUpdAnyFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRecentFiles * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RecentFiles_onUpdAnyFiles",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_onUpdAnyFiles. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RecentFiles_onUpdAnyFiles. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RecentFiles_onUpdAnyFiles(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_RecentFiles() (new FXRecentFiles())
static PyObject *_wrap_new_FX_RecentFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_RecentFiles",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRecentFiles *)new_FX_RecentFiles();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRecentFiles_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_RecentFiles_setMaxFiles(_swigobj,_swigarg0)  (_swigobj->setMaxFiles(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_setMaxFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mx", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_RecentFiles_setMaxFiles",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_setMaxFiles. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_setMaxFiles(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_RecentFiles_getMaxFiles(_swigobj)  (_swigobj->getMaxFiles())
static PyObject *_wrap_FX_RecentFiles_getMaxFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RecentFiles_getMaxFiles",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_getMaxFiles. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_RecentFiles_getMaxFiles(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_RecentFiles_setGroupName(_swigobj,_swigarg0)  (_swigobj->setGroupName(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_setGroupName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","name", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_RecentFiles_setGroupName",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_setGroupName. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_setGroupName(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_RecentFiles_getGroupName(_swigobj)  (_swigobj->getGroupName())
static PyObject *_wrap_FX_RecentFiles_getGroupName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RecentFiles_getGroupName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_getGroupName. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_RecentFiles_getGroupName(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_RecentFiles_setTarget(_swigobj,_swigarg0)  (_swigobj->setTarget(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_setTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","t", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_RecentFiles_setTarget",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_setTarget. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_setTarget(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_RecentFiles_getTarget(_swigobj)  (_swigobj->getTarget())
static PyObject *_wrap_FX_RecentFiles_getTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RecentFiles_getTarget",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_getTarget. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_RecentFiles_getTarget(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_RecentFiles_setSelector(_swigobj,_swigarg0)  (_swigobj->setSelector(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_setSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXSelector  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","sel", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_RecentFiles_setSelector",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_setSelector. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_setSelector(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_RecentFiles_getSelector(_swigobj)  (_swigobj->getSelector())
static PyObject *_wrap_FX_RecentFiles_getSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSelector  _result;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RecentFiles_getSelector",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_getSelector. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSelector )FX_RecentFiles_getSelector(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_RecentFiles_appendFile(_swigobj,_swigarg0)  (_swigobj->appendFile(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_appendFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","filename", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_RecentFiles_appendFile",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_appendFile. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_appendFile(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_RecentFiles_removeFile(_swigobj,_swigarg0)  (_swigobj->removeFile(_swigarg0))
static PyObject *_wrap_FX_RecentFiles_removeFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","filename", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_RecentFiles_removeFile",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_removeFile. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_removeFile(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_RecentFiles_clear(_swigobj)  (_swigobj->clear())
static PyObject *_wrap_FX_RecentFiles_clear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RecentFiles_clear",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RecentFiles_clear. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RecentFiles_clear(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define delete_FXRecentFiles(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_RecentFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRecentFiles * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_RecentFiles",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_RecentFiles. Expected _FXRecentFiles_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXRecentFiles(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyRecentFilesToFXRecentFiles(void *ptr) {
    FXPyRecentFiles *src;
    FXRecentFiles *dest;
    src = (FXPyRecentFiles *) ptr;
    dest = (FXRecentFiles *) src;
    return (void *) dest;
}

static void *SwigFXPyRecentFilesToFXObject(void *ptr) {
    FXPyRecentFiles *src;
    FXObject *dest;
    src = (FXPyRecentFiles *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXRecentFiles() (new FXPyRecentFiles())
static PyObject *_wrap_new_FXRecentFiles(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRecentFiles * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXRecentFiles",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRecentFiles *)new_FXRecentFiles();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRecentFiles_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXRecentFiles_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXRecentFiles_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyRecentFiles * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXRecentFiles_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRecentFiles_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRecentFiles_onDefault. Expected _FXPyRecentFiles_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXRecentFiles_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Settings() (new FXSettings())
static PyObject *_wrap_new_FX_Settings(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSettings * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_Settings",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSettings *)new_FX_Settings();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSettings_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Settings_parseFile(_swigobj,_swigarg0,_swigarg1)  (_swigobj->parseFile(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Settings_parseFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXString * _arg1;
    FXbool  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","filename","mark", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOb:FX_Settings_parseFile",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_parseFile. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_parseFile(_arg0,*_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Settings_unparseFile(_swigobj,_swigarg0)  (_swigobj->unparseFile(_swigarg0))
static PyObject *_wrap_FX_Settings_unparseFile(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","filename", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Settings_unparseFile",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_unparseFile. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_unparseFile(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Settings_data(_swigobj,_swigarg0)  (_swigobj->data(_swigarg0))
static PyObject *_wrap_FX_Settings_data(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStringDict * _result;
    FXSettings * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Settings_data",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_data. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStringDict *)FX_Settings_data(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXStringDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Settings_find(_swigobj,_swigarg0)  (_swigobj->find(_swigarg0))
static PyObject *_wrap_FX_Settings_find(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStringDict * _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_Settings_find",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_find. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStringDict *)FX_Settings_find(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXStringDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Settings_readStringEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->readStringEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_readStringEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXchar * _arg3 = (FXchar *) NULL;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","def", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|s:FX_Settings_readStringEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_readStringEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_Settings_readStringEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_Settings_readIntEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->readIntEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_readIntEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXint  _arg3 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","def", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|i:FX_Settings_readIntEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_readIntEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Settings_readIntEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Settings_readUnsignedEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->readUnsignedEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_readUnsignedEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXuint  _arg3 = (FXuint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","def", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|i:FX_Settings_readUnsignedEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_readUnsignedEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Settings_readUnsignedEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Settings_readRealEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->readRealEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_readRealEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXdouble  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXdouble  _arg3 = (FXdouble ) 0.0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","def", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|d:FX_Settings_readRealEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_readRealEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXdouble )FX_Settings_readRealEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("d",_result);
    return _resultobj;
}

#define FX_Settings_readColorEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->readColorEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_readColorEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXColor  _arg3 = (FXColor ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","def", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|i:FX_Settings_readColorEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_readColorEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Settings_readColorEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Settings_writeStringEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->writeStringEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_writeStringEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXchar * _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","val", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Osss:FX_Settings_writeStringEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_writeStringEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_writeStringEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_writeIntEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->writeIntEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_writeIntEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXint  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","val", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ossi:FX_Settings_writeIntEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_writeIntEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_writeIntEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_writeUnsignedEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->writeUnsignedEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_writeUnsignedEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXuint  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","val", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ossi:FX_Settings_writeUnsignedEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_writeUnsignedEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_writeUnsignedEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_writeRealEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->writeRealEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_writeRealEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXdouble  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","val", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ossd:FX_Settings_writeRealEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_writeRealEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_writeRealEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_writeColorEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->writeColorEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Settings_writeColorEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXColor  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key","val", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ossi:FX_Settings_writeColorEntry",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_writeColorEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_writeColorEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_deleteEntry(_swigobj,_swigarg0,_swigarg1)  (_swigobj->deleteEntry(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Settings_deleteEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss:FX_Settings_deleteEntry",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_deleteEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_deleteEntry(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_deleteSection(_swigobj,_swigarg0)  (_swigobj->deleteSection(_swigarg0))
static PyObject *_wrap_FX_Settings_deleteSection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_Settings_deleteSection",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_deleteSection. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_deleteSection(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_existingSection(_swigobj,_swigarg0)  (_swigobj->existingSection(_swigarg0))
static PyObject *_wrap_FX_Settings_existingSection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_Settings_existingSection",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_existingSection. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_existingSection(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_existingEntry(_swigobj,_swigarg0,_swigarg1)  (_swigobj->existingEntry(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Settings_existingEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","section","key", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss:FX_Settings_existingEntry",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_existingEntry. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_existingEntry(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_clear(_swigobj)  (_swigobj->clear())
static PyObject *_wrap_FX_Settings_clear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Settings_clear",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_clear. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_clear(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Settings_setModified(_swigobj,_swigarg0)  (_swigobj->setModified(_swigarg0))
static PyObject *_wrap_FX_Settings_setModified(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSettings * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mdfy", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Settings_setModified",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_setModified. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Settings_setModified(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Settings_isModified(_swigobj)  (_swigobj->isModified())
static PyObject *_wrap_FX_Settings_isModified(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSettings * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Settings_isModified",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSettings_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Settings_isModified. Expected _FXSettings_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Settings_isModified(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static void *SwigFXRegistryToFXSettings(void *ptr) {
    FXRegistry *src;
    FXSettings *dest;
    src = (FXRegistry *) ptr;
    dest = (FXSettings *) src;
    return (void *) dest;
}

#define new_FX_Registry(_swigarg0,_swigarg1) (new FXRegistry(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_Registry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegistry * _result;
    FXString * _arg0 = (FXString *) &FXString::null;
    FXString * _arg1 = (FXString *) &FXString::null;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "akey","vkey", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|OO:new_FX_Registry",_kwnames,&_obj0,&_obj1)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRegistry *)new_FX_Registry(*_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRegistry_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg0;
}
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Registry_read(_swigobj)  (_swigobj->read())
static PyObject *_wrap_FX_Registry_read(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegistry * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Registry_read",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_read. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Registry_read(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Registry_write(_swigobj)  (_swigobj->write())
static PyObject *_wrap_FX_Registry_write(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegistry * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Registry_write",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_write. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Registry_write(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Registry_getAppKey(_swigobj)  (_swigobj->getAppKey())
static PyObject *_wrap_FX_Registry_getAppKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXRegistry * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Registry_getAppKey",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_getAppKey. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        const FXString & _result_ref = FX_Registry_getAppKey(_arg0);
    _result = (FXString *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FX_Registry_getVendorKey(_swigobj)  (_swigobj->getVendorKey())
static PyObject *_wrap_FX_Registry_getVendorKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXRegistry * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Registry_getVendorKey",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_getVendorKey. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        const FXString & _result_ref = FX_Registry_getVendorKey(_arg0);
    _result = (FXString *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
    return _resultobj;
}

#define FX_Registry_setAsciiMode(_swigobj,_swigarg0)  (_swigobj->setAsciiMode(_swigarg0))
static PyObject *_wrap_FX_Registry_setAsciiMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegistry * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","asciiMode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_Registry_setAsciiMode",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_setAsciiMode. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Registry_setAsciiMode(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Registry_getAsciiMode(_swigobj)  (_swigobj->getAsciiMode())
static PyObject *_wrap_FX_Registry_getAsciiMode(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegistry * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Registry_getAsciiMode",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegistry_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Registry_getAsciiMode. Expected _FXRegistry_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Registry_getAsciiMode(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define new_FX_Stream(_swigarg0) (new FXStream(_swigarg0))
static PyObject *_wrap_new_FX_Stream(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStream * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "container", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FX_Stream",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStream *)new_FX_Stream(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXStream_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Stream_open(_swigobj,_swigarg0)  (_swigobj->open(_swigarg0))
static PyObject *_wrap_FX_Stream_open(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXStream * _arg0;
    FXStreamDirection  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","save_or_load", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Stream_open",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_open. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Stream_open(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Stream_close(_swigobj)  (_swigobj->close())
static PyObject *_wrap_FX_Stream_close(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_close",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_close. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Stream_close(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Stream_status(_swigobj)  (_swigobj->status())
static PyObject *_wrap_FX_Stream_status(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStreamStatus  _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_status",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_status. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStreamStatus )FX_Stream_status(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Stream_setError(_swigobj,_swigarg0)  (_swigobj->setError(_swigarg0))
static PyObject *_wrap_FX_Stream_setError(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStream * _arg0;
    FXStreamStatus  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","err", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Stream_setError",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_setError. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Stream_setError(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Stream_direction(_swigobj)  (_swigobj->direction())
static PyObject *_wrap_FX_Stream_direction(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStreamDirection  _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_direction",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_direction. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStreamDirection )FX_Stream_direction(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Stream_container(_swigobj)  (_swigobj->container())
static PyObject *_wrap_FX_Stream_container(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_container",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_container. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_Stream_container(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Stream_getPosition(_swigobj)  (_swigobj->position())
static PyObject *_wrap_FX_Stream_getPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    unsigned long  _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_getPosition",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_getPosition. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (unsigned long )FX_Stream_getPosition(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Stream_setPosition(_swigobj,_swigarg0)  (_swigobj->position(_swigarg0))
static PyObject *_wrap_FX_Stream_setPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXStream * _arg0;
    unsigned long  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","p", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ol:FX_Stream_setPosition",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_setPosition. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Stream_setPosition(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Stream_swapBytes(_swigobj,_swigarg0)  (_swigobj->swapBytes(_swigarg0))
static PyObject *_wrap_FX_Stream_swapBytes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStream * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_Stream_swapBytes",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_swapBytes. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Stream_swapBytes(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Stream_bytesSwapped(_swigobj)  (_swigobj->swapBytes())
static PyObject *_wrap_FX_Stream_bytesSwapped(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXStream * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Stream_bytesSwapped",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Stream_bytesSwapped. Expected _FXStream_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Stream_bytesSwapped(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject *_wrap_FX_Stream_isLittleEndian(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    char *_kwnames[] = {  NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":FX_Stream_isLittleEndian",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStream::isLittleEndian();

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static void *SwigFXPyStreamToFXStream(void *ptr) {
    FXPyStream *src;
    FXStream *dest;
    src = (FXPyStream *) ptr;
    dest = (FXStream *) src;
    return (void *) dest;
}

#define new_FXStream(_swigarg0) (new FXPyStream(_swigarg0))
static PyObject *_wrap_new_FXStream(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStream * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "container", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FXStream",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyStream *)new_FXStream(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyStream_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXFileStreamToFXStream(void *ptr) {
    FXFileStream *src;
    FXStream *dest;
    src = (FXFileStream *) ptr;
    dest = (FXStream *) src;
    return (void *) dest;
}

#define new_FX_FileStream(_swigarg0) (new FXFileStream(_swigarg0))
static PyObject *_wrap_new_FX_FileStream(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFileStream * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "container", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FX_FileStream",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFileStream *)new_FX_FileStream(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXFileStream_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_FileStream_open(_swigobj,_swigarg0,_swigarg1)  (_swigobj->open(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_FileStream_open(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXFileStream * _arg0;
    FXString * _arg1;
    FXStreamDirection  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","filename","save_or_load", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:FX_FileStream_open",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFileStream_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_FileStream_open. Expected _FXFileStream_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_FileStream_open(_arg0,*_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
{
    delete _arg1;
}
    return _resultobj;
}

static void *SwigFXPyFileStreamToFXFileStream(void *ptr) {
    FXPyFileStream *src;
    FXFileStream *dest;
    src = (FXPyFileStream *) ptr;
    dest = (FXFileStream *) src;
    return (void *) dest;
}

static void *SwigFXPyFileStreamToFXStream(void *ptr) {
    FXPyFileStream *src;
    FXStream *dest;
    src = (FXPyFileStream *) ptr;
    dest = (FXStream *) src;
    return (void *) dest;
}

#define new_FXFileStream(_swigarg0) (new FXPyFileStream(_swigarg0))
static PyObject *_wrap_new_FXFileStream(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFileStream * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "container", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FXFileStream",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFileStream *)new_FXFileStream(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFileStream_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXDictToFXObject(void *ptr) {
    FXDict *src;
    FXObject *dest;
    src = (FXDict *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Dict() (new FXDict())
static PyObject *_wrap_new_FX_Dict(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDict * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_Dict",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDict *)new_FX_Dict();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_getSize(_swigobj)  (_swigobj->size())
static PyObject *_wrap_FX_Dict_getSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dict_getSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_getSize. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_getSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_setSize(_swigobj,_swigarg0)  (_swigobj->size(_swigarg0))
static PyObject *_wrap_FX_Dict_setSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDict * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","m", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_setSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_setSize. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dict_setSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dict_no(_swigobj)  (_swigobj->no())
static PyObject *_wrap_FX_Dict_no(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dict_no",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_no. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_no(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_insert(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->insert(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dict_insert(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXDict * _arg0;
    FXchar * _arg1;
    void * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","ky","ptr","mrk", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OsO|b:FX_Dict_insert",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_insert. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Dict_insert(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_replace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->replace(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dict_replace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXDict * _arg0;
    FXchar * _arg1;
    void * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","ky","ptr","mark", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OsO|b:FX_Dict_replace",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_replace. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Dict_replace(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_remove(_swigobj,_swigarg0)  (_swigobj->remove(_swigarg0))
static PyObject *_wrap_FX_Dict_remove(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXDict * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_Dict_remove",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_remove. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Dict_remove(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_find(_swigobj,_swigarg0)  (_swigobj->find(_swigarg0))
static PyObject *_wrap_FX_Dict_find(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXDict * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_Dict_find",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_find. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Dict_find(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_key(_swigobj,_swigarg0)  (_swigobj->key(_swigarg0))
static PyObject *_wrap_FX_Dict_key(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXDict * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_key",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_key. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_Dict_key(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_Dict_data(_swigobj,_swigarg0)  (_swigobj->data(_swigarg0))
static PyObject *_wrap_FX_Dict_data(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXDict * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_data",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_data. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Dict_data(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dict_mark(_swigobj,_swigarg0)  (_swigobj->mark(_swigarg0))
static PyObject *_wrap_FX_Dict_mark(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXDict * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_mark",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_mark. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Dict_mark(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Dict_first(_swigobj)  (_swigobj->first())
static PyObject *_wrap_FX_Dict_first(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dict_first",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_first. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_first(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_last(_swigobj)  (_swigobj->last())
static PyObject *_wrap_FX_Dict_last(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dict_last",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_last. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_last(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_next(_swigobj,_swigarg0)  (_swigobj->next(_swigarg0))
static PyObject *_wrap_FX_Dict_next(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_next",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_next. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_next(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_prev(_swigobj,_swigarg0)  (_swigobj->prev(_swigarg0))
static PyObject *_wrap_FX_Dict_prev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDict * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dict_prev",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_prev. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dict_prev(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dict_clear(_swigobj)  (_swigobj->clear())
static PyObject *_wrap_FX_Dict_clear(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDict * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dict_clear",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dict_clear. Expected _FXDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dict_clear(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyDictToFXDict(void *ptr) {
    FXPyDict *src;
    FXDict *dest;
    src = (FXPyDict *) ptr;
    dest = (FXDict *) src;
    return (void *) dest;
}

static void *SwigFXPyDictToFXObject(void *ptr) {
    FXPyDict *src;
    FXObject *dest;
    src = (FXPyDict *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDict() (new FXPyDict())
static PyObject *_wrap_new_FXDict(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDict * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXDict",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDict *)new_FXDict();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDict_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDict_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDict * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDict_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDict_onDefault. Expected _FXPyDict_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDict_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXStringDictToFXDict(void *ptr) {
    FXStringDict *src;
    FXDict *dest;
    src = (FXStringDict *) ptr;
    dest = (FXDict *) src;
    return (void *) dest;
}

static void *SwigFXStringDictToFXObject(void *ptr) {
    FXStringDict *src;
    FXObject *dest;
    src = (FXStringDict *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_StringDict() (new FXStringDict())
static PyObject *_wrap_new_FX_StringDict(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStringDict * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_StringDict",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStringDict *)new_FX_StringDict();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXStringDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_StringDict_insert(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->insert(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_StringDict_insert(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXStringDict * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky","str","mrk", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|b:FX_StringDict_insert",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_StringDict_insert. Expected _FXStringDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_StringDict_insert(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_StringDict_replace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->replace(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_StringDict_replace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXStringDict * _arg0;
    FXchar * _arg1;
    FXchar * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky","str","mrk", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oss|b:FX_StringDict_replace",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_StringDict_replace. Expected _FXStringDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_StringDict_replace(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_StringDict_remove(_swigobj,_swigarg0)  (_swigobj->remove(_swigarg0))
static PyObject *_wrap_FX_StringDict_remove(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXStringDict * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_StringDict_remove",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_StringDict_remove. Expected _FXStringDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_StringDict_remove(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_StringDict_find(_swigobj,_swigarg0)  (_swigobj->find(_swigarg0))
static PyObject *_wrap_FX_StringDict_find(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXStringDict * _arg0;
    FXchar * _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ky", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Os:FX_StringDict_find",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_StringDict_find. Expected _FXStringDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_StringDict_find(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

#define FX_StringDict_data(_swigobj,_swigarg0)  (_swigobj->data(_swigarg0))
static PyObject *_wrap_FX_StringDict_data(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXchar * _result;
    FXStringDict * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_StringDict_data",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_StringDict_data. Expected _FXStringDict_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXchar *)FX_StringDict_data(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("s", _result);
    return _resultobj;
}

static void *SwigFXPyStringDictToFXStringDict(void *ptr) {
    FXPyStringDict *src;
    FXStringDict *dest;
    src = (FXPyStringDict *) ptr;
    dest = (FXStringDict *) src;
    return (void *) dest;
}

static void *SwigFXPyStringDictToFXDict(void *ptr) {
    FXPyStringDict *src;
    FXDict *dest;
    src = (FXPyStringDict *) ptr;
    dest = (FXDict *) src;
    return (void *) dest;
}

static void *SwigFXPyStringDictToFXObject(void *ptr) {
    FXPyStringDict *src;
    FXObject *dest;
    src = (FXPyStringDict *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXStringDict() (new FXPyStringDict())
static PyObject *_wrap_new_FXStringDict(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStringDict * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXStringDict",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyStringDict *)new_FXStringDict();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyStringDict_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXStringDict_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXStringDict_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyStringDict * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXStringDict_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStringDict_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStringDict_onDefault. Expected _FXPyStringDict_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXStringDict_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Region(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new FXRegion(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_FX_Region(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegion * _result;
    FXint  _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    char *_kwnames[] = { "x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"iiii:new_FX_Region",_kwnames,&_arg0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRegion *)new_FX_Region(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRegion_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Region_empty(_swigobj)  (_swigobj->empty())
static PyObject *_wrap_FX_Region_empty(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegion * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Region_empty",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Region_empty. Expected _FXRegion_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Region_empty(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Region_containsPoint(_swigobj,_swigarg0,_swigarg1)  (_swigobj->contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Region_containsPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegion * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Region_containsPoint",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Region_containsPoint. Expected _FXRegion_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Region_containsPoint(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Region_containsRectangle(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->contains(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Region_containsRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRegion * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FX_Region_containsRectangle",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Region_containsRectangle. Expected _FXRegion_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Region_containsRectangle(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Region_bounds(_swigobj,_swigarg0)  (_swigobj->bounds(_swigarg0))
static PyObject *_wrap_FX_Region_bounds(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegion * _arg0;
    FXRectangle * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","r", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Region_bounds",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Region_bounds. Expected _FXRegion_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXRectangle_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Region_bounds. Expected _FXRectangle_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Region_bounds(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Region_offset(_swigobj,_swigarg0,_swigarg1)  (_swigobj->offset(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Region_offset(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegion * _result;
    FXRegion * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dx","dy", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Region_offset",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Region_offset. Expected _FXRegion_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRegion & _result_ref = FX_Region_offset(_arg0,_arg1,_arg2);
    _result = (FXRegion *) &_result_ref;

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRegion_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define delete_FXRegion(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_Region(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRegion * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_Region",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRegion_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_Region. Expected _FXRegion_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXRegion(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXDelegatorToFXObject(void *ptr) {
    FXDelegator *src;
    FXObject *dest;
    src = (FXDelegator *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Delegator(_swigarg0) (new FXDelegator(_swigarg0))
static PyObject *_wrap_new_FX_Delegator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDelegator * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "target", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FX_Delegator",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDelegator *)new_FX_Delegator(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDelegator_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Delegator_getDelegate(_swigobj)  (_swigobj->getDelegate())
static PyObject *_wrap_FX_Delegator_getDelegate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXDelegator * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Delegator_getDelegate",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDelegator_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Delegator_getDelegate. Expected _FXDelegator_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_Delegator_getDelegate(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Delegator_setDelegate(_swigobj,_swigarg0)  (_swigobj->setDelegate(_swigarg0))
static PyObject *_wrap_FX_Delegator_setDelegate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDelegator * _arg0;
    FXObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","target", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Delegator_setDelegate",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDelegator_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Delegator_setDelegate. Expected _FXDelegator_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Delegator_setDelegate(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Delegator_handle(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->handle(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Delegator_handle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDelegator * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","sender","key","data", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Delegator_handle",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDelegator_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Delegator_handle. Expected _FXDelegator_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Delegator_handle. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Delegator_handle(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXPyDelegatorToFXDelegator(void *ptr) {
    FXPyDelegator *src;
    FXDelegator *dest;
    src = (FXPyDelegator *) ptr;
    dest = (FXDelegator *) src;
    return (void *) dest;
}

static void *SwigFXPyDelegatorToFXObject(void *ptr) {
    FXPyDelegator *src;
    FXObject *dest;
    src = (FXPyDelegator *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDelegator(_swigarg0) (new FXPyDelegator(_swigarg0))
static PyObject *_wrap_new_FXDelegator(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDelegator * _result;
    FXObject * _arg0 = (FXObject *) NULL;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "target", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|O:new_FXDelegator",_kwnames,&_obj0)) 
        return NULL;
    if (_obj0)
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDelegator *)new_FXDelegator(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDelegator_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDelegator_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDelegator_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDelegator * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDelegator_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDelegator_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDelegator_onDefault. Expected _FXPyDelegator_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDelegator_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXDataTargetToFXObject(void *ptr) {
    FXDataTarget *src;
    FXObject *dest;
    src = (FXDataTarget *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_DataTarget_onCmdValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DataTarget_onCmdValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDataTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DataTarget_onCmdValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_onCmdValue. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DataTarget_onCmdValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DataTarget_onCmdValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DataTarget_onUpdValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DataTarget_onUpdValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDataTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DataTarget_onUpdValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_onUpdValue. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DataTarget_onUpdValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DataTarget_onUpdValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DataTarget_onCmdOption(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdOption(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DataTarget_onCmdOption(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDataTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DataTarget_onCmdOption",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_onCmdOption. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DataTarget_onCmdOption. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DataTarget_onCmdOption(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DataTarget_onUpdOption(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdOption(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DataTarget_onUpdOption(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDataTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DataTarget_onUpdOption",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_onUpdOption. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DataTarget_onUpdOption. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DataTarget_onUpdOption(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_DataTarget() (new FXDataTarget())
static PyObject *_wrap_new_FX_DataTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDataTarget * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_DataTarget",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDataTarget *)new_FX_DataTarget();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDataTarget_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_DataTarget_setTarget(_swigobj,_swigarg0)  (_swigobj->setTarget(_swigarg0))
static PyObject *_wrap_FX_DataTarget_setTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDataTarget * _arg0;
    FXObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","t", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_DataTarget_setTarget",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_setTarget. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_DataTarget_setTarget(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_DataTarget_getTarget(_swigobj)  (_swigobj->getTarget())
static PyObject *_wrap_FX_DataTarget_getTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXDataTarget * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DataTarget_getTarget",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_getTarget. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_DataTarget_getTarget(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_DataTarget_setSelector(_swigobj,_swigarg0)  (_swigobj->setSelector(_swigarg0))
static PyObject *_wrap_FX_DataTarget_setSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDataTarget * _arg0;
    FXSelector  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","sel", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_DataTarget_setSelector",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_setSelector. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_DataTarget_setSelector(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_DataTarget_getSelector(_swigobj)  (_swigobj->getSelector())
static PyObject *_wrap_FX_DataTarget_getSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSelector  _result;
    FXDataTarget * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DataTarget_getSelector",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_getSelector. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSelector )FX_DataTarget_getSelector(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_DataTarget_getType(_swigobj)  (_swigobj->getType())
static PyObject *_wrap_FX_DataTarget_getType(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXDataTarget * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DataTarget_getType",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DataTarget_getType. Expected _FXDataTarget_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_DataTarget_getType(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyDataTargetToFXDataTarget(void *ptr) {
    FXPyDataTarget *src;
    FXDataTarget *dest;
    src = (FXPyDataTarget *) ptr;
    dest = (FXDataTarget *) src;
    return (void *) dest;
}

static void *SwigFXPyDataTargetToFXObject(void *ptr) {
    FXPyDataTarget *src;
    FXObject *dest;
    src = (FXPyDataTarget *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDataTarget(_swigarg0,_swigarg1,_swigarg2) (new FXPyDataTarget(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FXDataTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDataTarget * _result;
    PyObject * _arg0 = (PyObject *) NULL;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "value","tgt","sel", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"|OOi:new_FXDataTarget",_kwnames,&_obj0,&_obj1,&_arg2)) 
        return NULL;
    if (_obj0)
{
  _arg0 = _obj0;
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDataTarget *)new_FXDataTarget(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDataTarget_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDataTarget_setValue(_swigobj,_swigarg0)  (_swigobj->setValue(_swigarg0))
static PyObject *_wrap_FXDataTarget_setValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDataTarget * _arg0;
    PyObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXDataTarget_setValue",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDataTarget_setValue. Expected _FXPyDataTarget_p.");
        return NULL;
        }
    }
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDataTarget_setValue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDataTarget_getValue(_swigobj)  (_swigobj->getValue())
static PyObject *_wrap_FXDataTarget_getValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXPyDataTarget * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDataTarget_getValue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDataTarget_getValue. Expected _FXPyDataTarget_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXDataTarget_getValue(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FXDataTarget_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDataTarget_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDataTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDataTarget_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDataTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDataTarget_onDefault. Expected _FXPyDataTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDataTarget_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static void *SwigFXDebugTargetToFXObject(void *ptr) {
    FXDebugTarget *src;
    FXObject *dest;
    src = (FXDebugTarget *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_DebugTarget_onMessage(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMessage(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DebugTarget_onMessage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDebugTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DebugTarget_onMessage",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDebugTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DebugTarget_onMessage. Expected _FXDebugTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DebugTarget_onMessage. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DebugTarget_onMessage(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_DebugTarget() (new FXDebugTarget())
static PyObject *_wrap_new_FX_DebugTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDebugTarget * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FX_DebugTarget",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDebugTarget *)new_FX_DebugTarget();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDebugTarget_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXPyDebugTargetToFXDataTarget(void *ptr) {
    FXPyDebugTarget *src;
    FXDataTarget *dest;
    src = (FXPyDebugTarget *) ptr;
    dest = (FXDataTarget *) src;
    return (void *) dest;
}

static void *SwigFXPyDebugTargetToFXObject(void *ptr) {
    FXPyDebugTarget *src;
    FXObject *dest;
    src = (FXPyDebugTarget *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDebugTarget() (new FXPyDebugTarget())
static PyObject *_wrap_new_FXDebugTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDebugTarget * _result;
    char *_kwnames[] = {  NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,":new_FXDebugTarget",_kwnames)) 
        return NULL;
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDebugTarget *)new_FXDebugTarget();

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDebugTarget_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDebugTarget_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDebugTarget_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDebugTarget * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDebugTarget_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDebugTarget_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDebugTarget_onDefault. Expected _FXPyDebugTarget_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDebugTarget_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Command_undo(_swigobj)  (_swigobj->undo())
static PyObject *_wrap_FX_Command_undo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Command_undo",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Command_undo. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Command_undo(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Command_redo(_swigobj)  (_swigobj->redo())
static PyObject *_wrap_FX_Command_redo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Command_redo",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Command_redo. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Command_redo(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Command_size(_swigobj)  (_swigobj->size())
static PyObject *_wrap_FX_Command_size(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Command_size",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Command_size. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Command_size(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Command_undoName(_swigobj)  (_swigobj->undoName())
static PyObject *_wrap_FX_Command_undoName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Command_undoName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Command_undoName. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Command_undoName(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Command_redoName(_swigobj)  (_swigobj->redoName())
static PyObject *_wrap_FX_Command_redoName(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Command_redoName",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Command_redoName. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Command_redoName(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define delete_FXCommand(_swigobj) (delete _swigobj)
static PyObject *_wrap_delete_FX_Command(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCommand * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:delete_FX_Command",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCommand_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of delete_FX_Command. Expected _FXCommand_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        delete_FXCommand(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyCommandToFXCommand(void *ptr) {
    FXPyCommand *src;
    FXCommand *dest;
    src = (FXPyCommand *) ptr;
    dest = (FXCommand *) src;
    return (void *) dest;
}

static PyMethodDef misccMethods[] = {
	 { "delete_FX_Command", (PyCFunction) _wrap_delete_FX_Command, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Command_redoName", (PyCFunction) _wrap_FX_Command_redoName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Command_undoName", (PyCFunction) _wrap_FX_Command_undoName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Command_size", (PyCFunction) _wrap_FX_Command_size, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Command_redo", (PyCFunction) _wrap_FX_Command_redo, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Command_undo", (PyCFunction) _wrap_FX_Command_undo, METH_VARARGS | METH_KEYWORDS },
	 { "FXDebugTarget_onDefault", (PyCFunction) _wrap_FXDebugTarget_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDebugTarget", (PyCFunction) _wrap_new_FXDebugTarget, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_DebugTarget", (PyCFunction) _wrap_new_FX_DebugTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DebugTarget_onMessage", (PyCFunction) _wrap_FX_DebugTarget_onMessage, METH_VARARGS | METH_KEYWORDS },
	 { "FXDataTarget_onDefault", (PyCFunction) _wrap_FXDataTarget_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXDataTarget_getValue", (PyCFunction) _wrap_FXDataTarget_getValue, METH_VARARGS | METH_KEYWORDS },
	 { "FXDataTarget_setValue", (PyCFunction) _wrap_FXDataTarget_setValue, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDataTarget", (PyCFunction) _wrap_new_FXDataTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_getType", (PyCFunction) _wrap_FX_DataTarget_getType, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_getSelector", (PyCFunction) _wrap_FX_DataTarget_getSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_setSelector", (PyCFunction) _wrap_FX_DataTarget_setSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_getTarget", (PyCFunction) _wrap_FX_DataTarget_getTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_setTarget", (PyCFunction) _wrap_FX_DataTarget_setTarget, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_DataTarget", (PyCFunction) _wrap_new_FX_DataTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_onUpdOption", (PyCFunction) _wrap_FX_DataTarget_onUpdOption, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_onCmdOption", (PyCFunction) _wrap_FX_DataTarget_onCmdOption, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_onUpdValue", (PyCFunction) _wrap_FX_DataTarget_onUpdValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DataTarget_onCmdValue", (PyCFunction) _wrap_FX_DataTarget_onCmdValue, METH_VARARGS | METH_KEYWORDS },
	 { "FXDelegator_onDefault", (PyCFunction) _wrap_FXDelegator_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDelegator", (PyCFunction) _wrap_new_FXDelegator, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Delegator_handle", (PyCFunction) _wrap_FX_Delegator_handle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Delegator_setDelegate", (PyCFunction) _wrap_FX_Delegator_setDelegate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Delegator_getDelegate", (PyCFunction) _wrap_FX_Delegator_getDelegate, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Delegator", (PyCFunction) _wrap_new_FX_Delegator, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_Region", (PyCFunction) _wrap_delete_FX_Region, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Region_offset", (PyCFunction) _wrap_FX_Region_offset, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Region_bounds", (PyCFunction) _wrap_FX_Region_bounds, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Region_containsRectangle", (PyCFunction) _wrap_FX_Region_containsRectangle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Region_containsPoint", (PyCFunction) _wrap_FX_Region_containsPoint, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Region_empty", (PyCFunction) _wrap_FX_Region_empty, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Region", (PyCFunction) _wrap_new_FX_Region, METH_VARARGS | METH_KEYWORDS },
	 { "FXStringDict_onDefault", (PyCFunction) _wrap_FXStringDict_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXStringDict", (PyCFunction) _wrap_new_FXStringDict, METH_VARARGS | METH_KEYWORDS },
	 { "FX_StringDict_data", (PyCFunction) _wrap_FX_StringDict_data, METH_VARARGS | METH_KEYWORDS },
	 { "FX_StringDict_find", (PyCFunction) _wrap_FX_StringDict_find, METH_VARARGS | METH_KEYWORDS },
	 { "FX_StringDict_remove", (PyCFunction) _wrap_FX_StringDict_remove, METH_VARARGS | METH_KEYWORDS },
	 { "FX_StringDict_replace", (PyCFunction) _wrap_FX_StringDict_replace, METH_VARARGS | METH_KEYWORDS },
	 { "FX_StringDict_insert", (PyCFunction) _wrap_FX_StringDict_insert, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_StringDict", (PyCFunction) _wrap_new_FX_StringDict, METH_VARARGS | METH_KEYWORDS },
	 { "FXDict_onDefault", (PyCFunction) _wrap_FXDict_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDict", (PyCFunction) _wrap_new_FXDict, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_clear", (PyCFunction) _wrap_FX_Dict_clear, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_prev", (PyCFunction) _wrap_FX_Dict_prev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_next", (PyCFunction) _wrap_FX_Dict_next, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_last", (PyCFunction) _wrap_FX_Dict_last, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_first", (PyCFunction) _wrap_FX_Dict_first, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_mark", (PyCFunction) _wrap_FX_Dict_mark, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_data", (PyCFunction) _wrap_FX_Dict_data, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_key", (PyCFunction) _wrap_FX_Dict_key, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_find", (PyCFunction) _wrap_FX_Dict_find, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_remove", (PyCFunction) _wrap_FX_Dict_remove, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_replace", (PyCFunction) _wrap_FX_Dict_replace, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_insert", (PyCFunction) _wrap_FX_Dict_insert, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_no", (PyCFunction) _wrap_FX_Dict_no, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_setSize", (PyCFunction) _wrap_FX_Dict_setSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dict_getSize", (PyCFunction) _wrap_FX_Dict_getSize, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Dict", (PyCFunction) _wrap_new_FX_Dict, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXFileStream", (PyCFunction) _wrap_new_FXFileStream, METH_VARARGS | METH_KEYWORDS },
	 { "FX_FileStream_open", (PyCFunction) _wrap_FX_FileStream_open, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_FileStream", (PyCFunction) _wrap_new_FX_FileStream, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXStream", (PyCFunction) _wrap_new_FXStream, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_isLittleEndian", (PyCFunction) _wrap_FX_Stream_isLittleEndian, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_bytesSwapped", (PyCFunction) _wrap_FX_Stream_bytesSwapped, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_swapBytes", (PyCFunction) _wrap_FX_Stream_swapBytes, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_setPosition", (PyCFunction) _wrap_FX_Stream_setPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_getPosition", (PyCFunction) _wrap_FX_Stream_getPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_container", (PyCFunction) _wrap_FX_Stream_container, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_direction", (PyCFunction) _wrap_FX_Stream_direction, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_setError", (PyCFunction) _wrap_FX_Stream_setError, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_status", (PyCFunction) _wrap_FX_Stream_status, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_close", (PyCFunction) _wrap_FX_Stream_close, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Stream_open", (PyCFunction) _wrap_FX_Stream_open, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Stream", (PyCFunction) _wrap_new_FX_Stream, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_getAsciiMode", (PyCFunction) _wrap_FX_Registry_getAsciiMode, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_setAsciiMode", (PyCFunction) _wrap_FX_Registry_setAsciiMode, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_getVendorKey", (PyCFunction) _wrap_FX_Registry_getVendorKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_getAppKey", (PyCFunction) _wrap_FX_Registry_getAppKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_write", (PyCFunction) _wrap_FX_Registry_write, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Registry_read", (PyCFunction) _wrap_FX_Registry_read, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Registry", (PyCFunction) _wrap_new_FX_Registry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_isModified", (PyCFunction) _wrap_FX_Settings_isModified, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_setModified", (PyCFunction) _wrap_FX_Settings_setModified, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_clear", (PyCFunction) _wrap_FX_Settings_clear, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_existingEntry", (PyCFunction) _wrap_FX_Settings_existingEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_existingSection", (PyCFunction) _wrap_FX_Settings_existingSection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_deleteSection", (PyCFunction) _wrap_FX_Settings_deleteSection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_deleteEntry", (PyCFunction) _wrap_FX_Settings_deleteEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_writeColorEntry", (PyCFunction) _wrap_FX_Settings_writeColorEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_writeRealEntry", (PyCFunction) _wrap_FX_Settings_writeRealEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_writeUnsignedEntry", (PyCFunction) _wrap_FX_Settings_writeUnsignedEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_writeIntEntry", (PyCFunction) _wrap_FX_Settings_writeIntEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_writeStringEntry", (PyCFunction) _wrap_FX_Settings_writeStringEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_readColorEntry", (PyCFunction) _wrap_FX_Settings_readColorEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_readRealEntry", (PyCFunction) _wrap_FX_Settings_readRealEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_readUnsignedEntry", (PyCFunction) _wrap_FX_Settings_readUnsignedEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_readIntEntry", (PyCFunction) _wrap_FX_Settings_readIntEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_readStringEntry", (PyCFunction) _wrap_FX_Settings_readStringEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_find", (PyCFunction) _wrap_FX_Settings_find, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_data", (PyCFunction) _wrap_FX_Settings_data, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_unparseFile", (PyCFunction) _wrap_FX_Settings_unparseFile, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Settings_parseFile", (PyCFunction) _wrap_FX_Settings_parseFile, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Settings", (PyCFunction) _wrap_new_FX_Settings, METH_VARARGS | METH_KEYWORDS },
	 { "FXRecentFiles_onDefault", (PyCFunction) _wrap_FXRecentFiles_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXRecentFiles", (PyCFunction) _wrap_new_FXRecentFiles, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_RecentFiles", (PyCFunction) _wrap_delete_FX_RecentFiles, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_clear", (PyCFunction) _wrap_FX_RecentFiles_clear, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_removeFile", (PyCFunction) _wrap_FX_RecentFiles_removeFile, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_appendFile", (PyCFunction) _wrap_FX_RecentFiles_appendFile, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_getSelector", (PyCFunction) _wrap_FX_RecentFiles_getSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_setSelector", (PyCFunction) _wrap_FX_RecentFiles_setSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_getTarget", (PyCFunction) _wrap_FX_RecentFiles_getTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_setTarget", (PyCFunction) _wrap_FX_RecentFiles_setTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_getGroupName", (PyCFunction) _wrap_FX_RecentFiles_getGroupName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_setGroupName", (PyCFunction) _wrap_FX_RecentFiles_setGroupName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_getMaxFiles", (PyCFunction) _wrap_FX_RecentFiles_getMaxFiles, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_setMaxFiles", (PyCFunction) _wrap_FX_RecentFiles_setMaxFiles, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_RecentFiles", (PyCFunction) _wrap_new_FX_RecentFiles, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_onUpdAnyFiles", (PyCFunction) _wrap_FX_RecentFiles_onUpdAnyFiles, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_onUpdFile", (PyCFunction) _wrap_FX_RecentFiles_onUpdFile, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_onCmdFile", (PyCFunction) _wrap_FX_RecentFiles_onCmdFile, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RecentFiles_onCmdClear", (PyCFunction) _wrap_FX_RecentFiles_onCmdClear, METH_VARARGS | METH_KEYWORDS },
	 { "FXAccelTable_onDefault", (PyCFunction) _wrap_FXAccelTable_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXAccelTable", (PyCFunction) _wrap_new_FXAccelTable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_removeAccel", (PyCFunction) _wrap_FX_AccelTable_removeAccel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_targetOfAccel", (PyCFunction) _wrap_FX_AccelTable_targetOfAccel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_hasAccel", (PyCFunction) _wrap_FX_AccelTable_hasAccel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_addAccel", (PyCFunction) _wrap_FX_AccelTable_addAccel, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_AccelTable", (PyCFunction) _wrap_new_FX_AccelTable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_onKeyRelease", (PyCFunction) _wrap_FX_AccelTable_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_AccelTable_onKeyPress", (PyCFunction) _wrap_FX_AccelTable_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_loadPixels", (PyCFunction) _wrap_FXICOIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_savePixels", (PyCFunction) _wrap_FXICOIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_crop", (PyCFunction) _wrap_FXICOIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_rotate", (PyCFunction) _wrap_FXICOIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_mirror", (PyCFunction) _wrap_FXICOIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_scale", (PyCFunction) _wrap_FXICOIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_render", (PyCFunction) _wrap_FXICOIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_restore", (PyCFunction) _wrap_FXICOIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_resize", (PyCFunction) _wrap_FXICOIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_detach", (PyCFunction) _wrap_FXICOIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_destroy", (PyCFunction) _wrap_FXICOIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_create", (PyCFunction) _wrap_FXICOIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOIcon_onDefault", (PyCFunction) _wrap_FXICOIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FXICOIcon", (PyCFunction) _wrap_delete_FXICOIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXICOIcon", (PyCFunction) _wrap_new_FXICOIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_ICOIcon", (PyCFunction) _wrap_delete_FX_ICOIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ICOIcon", (PyCFunction) _wrap_new_FX_ICOIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_loadPixels", (PyCFunction) _wrap_FXRGBIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_savePixels", (PyCFunction) _wrap_FXRGBIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_crop", (PyCFunction) _wrap_FXRGBIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_rotate", (PyCFunction) _wrap_FXRGBIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_mirror", (PyCFunction) _wrap_FXRGBIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_scale", (PyCFunction) _wrap_FXRGBIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_render", (PyCFunction) _wrap_FXRGBIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_restore", (PyCFunction) _wrap_FXRGBIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_resize", (PyCFunction) _wrap_FXRGBIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_detach", (PyCFunction) _wrap_FXRGBIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_destroy", (PyCFunction) _wrap_FXRGBIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_create", (PyCFunction) _wrap_FXRGBIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBIcon_onDefault", (PyCFunction) _wrap_FXRGBIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FXRGBIcon", (PyCFunction) _wrap_delete_FXRGBIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXRGBIcon", (PyCFunction) _wrap_new_FXRGBIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_RGBIcon", (PyCFunction) _wrap_delete_FX_RGBIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_RGBIcon", (PyCFunction) _wrap_new_FX_RGBIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FXTGAIcon", (PyCFunction) _wrap_delete_FXTGAIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTGAIcon", (PyCFunction) _wrap_new_FXTGAIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_TGAIcon", (PyCFunction) _wrap_delete_FX_TGAIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TGAIcon", (PyCFunction) _wrap_new_FX_TGAIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_loadPixels", (PyCFunction) _wrap_FXTIFIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_savePixels", (PyCFunction) _wrap_FXTIFIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_crop", (PyCFunction) _wrap_FXTIFIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_rotate", (PyCFunction) _wrap_FXTIFIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_mirror", (PyCFunction) _wrap_FXTIFIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_scale", (PyCFunction) _wrap_FXTIFIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_render", (PyCFunction) _wrap_FXTIFIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_restore", (PyCFunction) _wrap_FXTIFIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_resize", (PyCFunction) _wrap_FXTIFIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_detach", (PyCFunction) _wrap_FXTIFIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_destroy", (PyCFunction) _wrap_FXTIFIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_create", (PyCFunction) _wrap_FXTIFIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFIcon_onDefault", (PyCFunction) _wrap_FXTIFIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FXTIFIcon", (PyCFunction) _wrap_delete_FXTIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTIFIcon", (PyCFunction) _wrap_new_FXTIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_TIFIcon", (PyCFunction) _wrap_delete_FX_TIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TIFIcon_getCodec", (PyCFunction) _wrap_FX_TIFIcon_getCodec, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TIFIcon_setCodec", (PyCFunction) _wrap_FX_TIFIcon_setCodec, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TIFIcon", (PyCFunction) _wrap_new_FX_TIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_loadPixels", (PyCFunction) _wrap_FXPCXIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_savePixels", (PyCFunction) _wrap_FXPCXIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_crop", (PyCFunction) _wrap_FXPCXIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_rotate", (PyCFunction) _wrap_FXPCXIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_mirror", (PyCFunction) _wrap_FXPCXIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_scale", (PyCFunction) _wrap_FXPCXIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_render", (PyCFunction) _wrap_FXPCXIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_restore", (PyCFunction) _wrap_FXPCXIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_resize", (PyCFunction) _wrap_FXPCXIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_detach", (PyCFunction) _wrap_FXPCXIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_destroy", (PyCFunction) _wrap_FXPCXIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_create", (PyCFunction) _wrap_FXPCXIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXIcon_onDefault", (PyCFunction) _wrap_FXPCXIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FXPCXIcon", (PyCFunction) _wrap_delete_FXPCXIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPCXIcon", (PyCFunction) _wrap_new_FXPCXIcon, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_PCXIcon", (PyCFunction) _wrap_delete_FX_PCXIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_PCXIcon", (PyCFunction) _wrap_new_FX_PCXIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_loadPixels", (PyCFunction) _wrap_FXXPMIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_savePixels", (PyCFunction) _wrap_FXXPMIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_crop", (PyCFunction) _wrap_FXXPMIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_rotate", (PyCFunction) _wrap_FXXPMIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_mirror", (PyCFunction) _wrap_FXXPMIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_scale", (PyCFunction) _wrap_FXXPMIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_render", (PyCFunction) _wrap_FXXPMIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_restore", (PyCFunction) _wrap_FXXPMIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_resize", (PyCFunction) _wrap_FXXPMIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_detach", (PyCFunction) _wrap_FXXPMIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_destroy", (PyCFunction) _wrap_FXXPMIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_create", (PyCFunction) _wrap_FXXPMIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMIcon_onDefault", (PyCFunction) _wrap_FXXPMIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXXPMIcon", (PyCFunction) _wrap_new_FXXPMIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_XPMIcon", (PyCFunction) _wrap_new_FX_XPMIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_loadPixels", (PyCFunction) _wrap_FXJPGIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_savePixels", (PyCFunction) _wrap_FXJPGIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_crop", (PyCFunction) _wrap_FXJPGIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_rotate", (PyCFunction) _wrap_FXJPGIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_mirror", (PyCFunction) _wrap_FXJPGIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_scale", (PyCFunction) _wrap_FXJPGIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_render", (PyCFunction) _wrap_FXJPGIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_restore", (PyCFunction) _wrap_FXJPGIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_resize", (PyCFunction) _wrap_FXJPGIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_detach", (PyCFunction) _wrap_FXJPGIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_destroy", (PyCFunction) _wrap_FXJPGIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_create", (PyCFunction) _wrap_FXJPGIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGIcon_onDefault", (PyCFunction) _wrap_FXJPGIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXJPGIcon", (PyCFunction) _wrap_new_FXJPGIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_JPGIcon_getQuality", (PyCFunction) _wrap_FX_JPGIcon_getQuality, METH_VARARGS | METH_KEYWORDS },
	 { "FX_JPGIcon_setQuality", (PyCFunction) _wrap_FX_JPGIcon_setQuality, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_JPGIcon", (PyCFunction) _wrap_new_FX_JPGIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_loadPixels", (PyCFunction) _wrap_FXPNGIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_savePixels", (PyCFunction) _wrap_FXPNGIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_crop", (PyCFunction) _wrap_FXPNGIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_rotate", (PyCFunction) _wrap_FXPNGIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_mirror", (PyCFunction) _wrap_FXPNGIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_scale", (PyCFunction) _wrap_FXPNGIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_render", (PyCFunction) _wrap_FXPNGIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_restore", (PyCFunction) _wrap_FXPNGIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_resize", (PyCFunction) _wrap_FXPNGIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_detach", (PyCFunction) _wrap_FXPNGIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_destroy", (PyCFunction) _wrap_FXPNGIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_create", (PyCFunction) _wrap_FXPNGIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGIcon_onDefault", (PyCFunction) _wrap_FXPNGIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPNGIcon", (PyCFunction) _wrap_new_FXPNGIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_PNGIcon", (PyCFunction) _wrap_new_FX_PNGIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_loadPixels", (PyCFunction) _wrap_FXBMPIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_savePixels", (PyCFunction) _wrap_FXBMPIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_crop", (PyCFunction) _wrap_FXBMPIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_rotate", (PyCFunction) _wrap_FXBMPIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_mirror", (PyCFunction) _wrap_FXBMPIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_scale", (PyCFunction) _wrap_FXBMPIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_render", (PyCFunction) _wrap_FXBMPIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_restore", (PyCFunction) _wrap_FXBMPIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_resize", (PyCFunction) _wrap_FXBMPIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_detach", (PyCFunction) _wrap_FXBMPIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_destroy", (PyCFunction) _wrap_FXBMPIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_create", (PyCFunction) _wrap_FXBMPIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPIcon_onDefault", (PyCFunction) _wrap_FXBMPIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXBMPIcon", (PyCFunction) _wrap_new_FXBMPIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_BMPIcon", (PyCFunction) _wrap_new_FX_BMPIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_loadPixels", (PyCFunction) _wrap_FXGIFIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_savePixels", (PyCFunction) _wrap_FXGIFIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_crop", (PyCFunction) _wrap_FXGIFIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_rotate", (PyCFunction) _wrap_FXGIFIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_mirror", (PyCFunction) _wrap_FXGIFIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_scale", (PyCFunction) _wrap_FXGIFIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_render", (PyCFunction) _wrap_FXGIFIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_restore", (PyCFunction) _wrap_FXGIFIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_resize", (PyCFunction) _wrap_FXGIFIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_detach", (PyCFunction) _wrap_FXGIFIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_destroy", (PyCFunction) _wrap_FXGIFIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_create", (PyCFunction) _wrap_FXGIFIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFIcon_onDefault", (PyCFunction) _wrap_FXGIFIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXGIFIcon", (PyCFunction) _wrap_new_FXGIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_GIFIcon", (PyCFunction) _wrap_new_FX_GIFIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_loadPixels", (PyCFunction) _wrap_FXIcon_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_savePixels", (PyCFunction) _wrap_FXIcon_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_crop", (PyCFunction) _wrap_FXIcon_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_rotate", (PyCFunction) _wrap_FXIcon_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_mirror", (PyCFunction) _wrap_FXIcon_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_scale", (PyCFunction) _wrap_FXIcon_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_render", (PyCFunction) _wrap_FXIcon_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_restore", (PyCFunction) _wrap_FXIcon_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_resize", (PyCFunction) _wrap_FXIcon_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_detach", (PyCFunction) _wrap_FXIcon_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_destroy", (PyCFunction) _wrap_FXIcon_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_create", (PyCFunction) _wrap_FXIcon_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXIcon_onDefault", (PyCFunction) _wrap_FXIcon_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXIcon", (PyCFunction) _wrap_new_FXIcon, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Icon", (PyCFunction) _wrap_new_FX_Icon, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_loadPixels", (PyCFunction) _wrap_FXICOImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_savePixels", (PyCFunction) _wrap_FXICOImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_crop", (PyCFunction) _wrap_FXICOImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_rotate", (PyCFunction) _wrap_FXICOImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_mirror", (PyCFunction) _wrap_FXICOImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_scale", (PyCFunction) _wrap_FXICOImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_render", (PyCFunction) _wrap_FXICOImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_restore", (PyCFunction) _wrap_FXICOImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_resize", (PyCFunction) _wrap_FXICOImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_detach", (PyCFunction) _wrap_FXICOImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_destroy", (PyCFunction) _wrap_FXICOImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_create", (PyCFunction) _wrap_FXICOImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXICOImage_onDefault", (PyCFunction) _wrap_FXICOImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXICOImage", (PyCFunction) _wrap_new_FXICOImage, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_ICOImage", (PyCFunction) _wrap_delete_FX_ICOImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ICOImage", (PyCFunction) _wrap_new_FX_ICOImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_loadPixels", (PyCFunction) _wrap_FXRGBImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_savePixels", (PyCFunction) _wrap_FXRGBImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_crop", (PyCFunction) _wrap_FXRGBImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_rotate", (PyCFunction) _wrap_FXRGBImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_mirror", (PyCFunction) _wrap_FXRGBImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_scale", (PyCFunction) _wrap_FXRGBImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_render", (PyCFunction) _wrap_FXRGBImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_restore", (PyCFunction) _wrap_FXRGBImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_resize", (PyCFunction) _wrap_FXRGBImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_detach", (PyCFunction) _wrap_FXRGBImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_destroy", (PyCFunction) _wrap_FXRGBImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_create", (PyCFunction) _wrap_FXRGBImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXRGBImage_onDefault", (PyCFunction) _wrap_FXRGBImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXRGBImage", (PyCFunction) _wrap_new_FXRGBImage, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_RGBImage", (PyCFunction) _wrap_delete_FX_RGBImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_RGBImage", (PyCFunction) _wrap_new_FX_RGBImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_loadPixels", (PyCFunction) _wrap_FXTGAImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_savePixels", (PyCFunction) _wrap_FXTGAImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_crop", (PyCFunction) _wrap_FXTGAImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_rotate", (PyCFunction) _wrap_FXTGAImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_mirror", (PyCFunction) _wrap_FXTGAImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_scale", (PyCFunction) _wrap_FXTGAImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_render", (PyCFunction) _wrap_FXTGAImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_restore", (PyCFunction) _wrap_FXTGAImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_resize", (PyCFunction) _wrap_FXTGAImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_detach", (PyCFunction) _wrap_FXTGAImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_destroy", (PyCFunction) _wrap_FXTGAImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_create", (PyCFunction) _wrap_FXTGAImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTGAImage_onDefault", (PyCFunction) _wrap_FXTGAImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTGAImage", (PyCFunction) _wrap_new_FXTGAImage, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_TGAImage", (PyCFunction) _wrap_delete_FX_TGAImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TGAImage", (PyCFunction) _wrap_new_FX_TGAImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_loadPixels", (PyCFunction) _wrap_FXTIFImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_savePixels", (PyCFunction) _wrap_FXTIFImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_crop", (PyCFunction) _wrap_FXTIFImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_rotate", (PyCFunction) _wrap_FXTIFImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_mirror", (PyCFunction) _wrap_FXTIFImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_scale", (PyCFunction) _wrap_FXTIFImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_render", (PyCFunction) _wrap_FXTIFImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_restore", (PyCFunction) _wrap_FXTIFImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_resize", (PyCFunction) _wrap_FXTIFImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_detach", (PyCFunction) _wrap_FXTIFImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_destroy", (PyCFunction) _wrap_FXTIFImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_create", (PyCFunction) _wrap_FXTIFImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTIFImage_onDefault", (PyCFunction) _wrap_FXTIFImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTIFImage", (PyCFunction) _wrap_new_FXTIFImage, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_TIFImage", (PyCFunction) _wrap_delete_FX_TIFImage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TIFImage_getCodec", (PyCFunction) _wrap_FX_TIFImage_getCodec, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TIFImage_setCodec", (PyCFunction) _wrap_FX_TIFImage_setCodec, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TIFImage", (PyCFunction) _wrap_new_FX_TIFImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_loadPixels", (PyCFunction) _wrap_FXPCXImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_savePixels", (PyCFunction) _wrap_FXPCXImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_crop", (PyCFunction) _wrap_FXPCXImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_rotate", (PyCFunction) _wrap_FXPCXImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_mirror", (PyCFunction) _wrap_FXPCXImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_scale", (PyCFunction) _wrap_FXPCXImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_render", (PyCFunction) _wrap_FXPCXImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_restore", (PyCFunction) _wrap_FXPCXImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_resize", (PyCFunction) _wrap_FXPCXImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_detach", (PyCFunction) _wrap_FXPCXImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_destroy", (PyCFunction) _wrap_FXPCXImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_create", (PyCFunction) _wrap_FXPCXImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPCXImage_onDefault", (PyCFunction) _wrap_FXPCXImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPCXImage", (PyCFunction) _wrap_new_FXPCXImage, METH_VARARGS | METH_KEYWORDS },
	 { "delete_FX_PCXImage", (PyCFunction) _wrap_delete_FX_PCXImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_PCXImage", (PyCFunction) _wrap_new_FX_PCXImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_loadPixels", (PyCFunction) _wrap_FXXPMImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_savePixels", (PyCFunction) _wrap_FXXPMImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_crop", (PyCFunction) _wrap_FXXPMImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_rotate", (PyCFunction) _wrap_FXXPMImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_mirror", (PyCFunction) _wrap_FXXPMImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_scale", (PyCFunction) _wrap_FXXPMImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_render", (PyCFunction) _wrap_FXXPMImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_restore", (PyCFunction) _wrap_FXXPMImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_resize", (PyCFunction) _wrap_FXXPMImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_detach", (PyCFunction) _wrap_FXXPMImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_destroy", (PyCFunction) _wrap_FXXPMImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_create", (PyCFunction) _wrap_FXXPMImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXXPMImage_onDefault", (PyCFunction) _wrap_FXXPMImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXXPMImage", (PyCFunction) _wrap_new_FXXPMImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_XPMImage", (PyCFunction) _wrap_new_FX_XPMImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_loadPixels", (PyCFunction) _wrap_FXJPGImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_savePixels", (PyCFunction) _wrap_FXJPGImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_crop", (PyCFunction) _wrap_FXJPGImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_rotate", (PyCFunction) _wrap_FXJPGImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_mirror", (PyCFunction) _wrap_FXJPGImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_scale", (PyCFunction) _wrap_FXJPGImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_render", (PyCFunction) _wrap_FXJPGImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_restore", (PyCFunction) _wrap_FXJPGImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_resize", (PyCFunction) _wrap_FXJPGImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_detach", (PyCFunction) _wrap_FXJPGImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_destroy", (PyCFunction) _wrap_FXJPGImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_create", (PyCFunction) _wrap_FXJPGImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXJPGImage_onDefault", (PyCFunction) _wrap_FXJPGImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXJPGImage", (PyCFunction) _wrap_new_FXJPGImage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_JPGImage_getQuality", (PyCFunction) _wrap_FX_JPGImage_getQuality, METH_VARARGS | METH_KEYWORDS },
	 { "FX_JPGImage_setQuality", (PyCFunction) _wrap_FX_JPGImage_setQuality, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_JPGImage", (PyCFunction) _wrap_new_FX_JPGImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_loadPixels", (PyCFunction) _wrap_FXPNGImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_savePixels", (PyCFunction) _wrap_FXPNGImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_crop", (PyCFunction) _wrap_FXPNGImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_rotate", (PyCFunction) _wrap_FXPNGImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_mirror", (PyCFunction) _wrap_FXPNGImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_scale", (PyCFunction) _wrap_FXPNGImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_render", (PyCFunction) _wrap_FXPNGImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_restore", (PyCFunction) _wrap_FXPNGImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_resize", (PyCFunction) _wrap_FXPNGImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_detach", (PyCFunction) _wrap_FXPNGImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_destroy", (PyCFunction) _wrap_FXPNGImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_create", (PyCFunction) _wrap_FXPNGImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPNGImage_onDefault", (PyCFunction) _wrap_FXPNGImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPNGImage", (PyCFunction) _wrap_new_FXPNGImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_PNGImage", (PyCFunction) _wrap_new_FX_PNGImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_loadPixels", (PyCFunction) _wrap_FXBMPImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_savePixels", (PyCFunction) _wrap_FXBMPImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_crop", (PyCFunction) _wrap_FXBMPImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_rotate", (PyCFunction) _wrap_FXBMPImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_mirror", (PyCFunction) _wrap_FXBMPImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_scale", (PyCFunction) _wrap_FXBMPImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_render", (PyCFunction) _wrap_FXBMPImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_restore", (PyCFunction) _wrap_FXBMPImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_resize", (PyCFunction) _wrap_FXBMPImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_detach", (PyCFunction) _wrap_FXBMPImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_destroy", (PyCFunction) _wrap_FXBMPImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_create", (PyCFunction) _wrap_FXBMPImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXBMPImage_onDefault", (PyCFunction) _wrap_FXBMPImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXBMPImage", (PyCFunction) _wrap_new_FXBMPImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_BMPImage", (PyCFunction) _wrap_new_FX_BMPImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_loadPixels", (PyCFunction) _wrap_FXGIFImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_savePixels", (PyCFunction) _wrap_FXGIFImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_crop", (PyCFunction) _wrap_FXGIFImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_rotate", (PyCFunction) _wrap_FXGIFImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_mirror", (PyCFunction) _wrap_FXGIFImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_scale", (PyCFunction) _wrap_FXGIFImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_render", (PyCFunction) _wrap_FXGIFImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_restore", (PyCFunction) _wrap_FXGIFImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_resize", (PyCFunction) _wrap_FXGIFImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_detach", (PyCFunction) _wrap_FXGIFImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_destroy", (PyCFunction) _wrap_FXGIFImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_create", (PyCFunction) _wrap_FXGIFImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXGIFImage_onDefault", (PyCFunction) _wrap_FXGIFImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXGIFImage", (PyCFunction) _wrap_new_FXGIFImage, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_GIFImage", (PyCFunction) _wrap_new_FX_GIFImage, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_loadPixels", (PyCFunction) _wrap_FXImage_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_savePixels", (PyCFunction) _wrap_FXImage_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_crop", (PyCFunction) _wrap_FXImage_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_rotate", (PyCFunction) _wrap_FXImage_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_mirror", (PyCFunction) _wrap_FXImage_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_scale", (PyCFunction) _wrap_FXImage_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_render", (PyCFunction) _wrap_FXImage_render, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_restore", (PyCFunction) _wrap_FXImage_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_resize", (PyCFunction) _wrap_FXImage_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_detach", (PyCFunction) _wrap_FXImage_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_destroy", (PyCFunction) _wrap_FXImage_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_create", (PyCFunction) _wrap_FXImage_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXImage_onDefault", (PyCFunction) _wrap_FXImage_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXImage", (PyCFunction) _wrap_new_FXImage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_loadPixels", (PyCFunction) _wrap_FX_Image_loadPixels, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_savePixels", (PyCFunction) _wrap_FX_Image_savePixels, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_crop", (PyCFunction) _wrap_FX_Image_crop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_rotate", (PyCFunction) _wrap_FX_Image_rotate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_mirror", (PyCFunction) _wrap_FX_Image_mirror, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_scale", (PyCFunction) _wrap_FX_Image_scale, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_render", (PyCFunction) _wrap_FX_Image_render, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_restore", (PyCFunction) _wrap_FX_Image_restore, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_setPixel", (PyCFunction) _wrap_FX_Image_setPixel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_getPixel", (PyCFunction) _wrap_FX_Image_getPixel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_getChannels", (PyCFunction) _wrap_FX_Image_getChannels, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_setOptions", (PyCFunction) _wrap_FX_Image_setOptions, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_getOptions", (PyCFunction) _wrap_FX_Image_getOptions, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Image_getData", (PyCFunction) _wrap_FX_Image_getData, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Image", (PyCFunction) _wrap_new_FX_Image, METH_VARARGS | METH_KEYWORDS },
	 { "FXFont_detach", (PyCFunction) _wrap_FXFont_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXFont_destroy", (PyCFunction) _wrap_FXFont_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXFont_create", (PyCFunction) _wrap_FXFont_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXFont_onDefault", (PyCFunction) _wrap_FXFont_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXFont", (PyCFunction) _wrap_new_FXFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getTextHeight", (PyCFunction) _wrap_FX_Font_getTextHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getTextWidth", (PyCFunction) _wrap_FX_Font_getTextWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontSpacing", (PyCFunction) _wrap_FX_Font_getFontSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontLeading", (PyCFunction) _wrap_FX_Font_getFontLeading, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontDescent", (PyCFunction) _wrap_FX_Font_getFontDescent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontAscent", (PyCFunction) _wrap_FX_Font_getFontAscent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontHeight", (PyCFunction) _wrap_FX_Font_getFontHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontWidth", (PyCFunction) _wrap_FX_Font_getFontWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_rightBearing", (PyCFunction) _wrap_FX_Font_rightBearing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_leftBearing", (PyCFunction) _wrap_FX_Font_leftBearing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getMaxChar", (PyCFunction) _wrap_FX_Font_getMaxChar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getMinChar", (PyCFunction) _wrap_FX_Font_getMinChar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_hasChar", (PyCFunction) _wrap_FX_Font_hasChar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_isFontMono", (PyCFunction) _wrap_FX_Font_isFontMono, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_setFontDesc", (PyCFunction) _wrap_FX_Font_setFontDesc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getFontDesc", (PyCFunction) _wrap_FX_Font_getFontDesc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getHints", (PyCFunction) _wrap_FX_Font_getHints, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getSetWidth", (PyCFunction) _wrap_FX_Font_getSetWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getEncoding", (PyCFunction) _wrap_FX_Font_getEncoding, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getSlant", (PyCFunction) _wrap_FX_Font_getSlant, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getWeight", (PyCFunction) _wrap_FX_Font_getWeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getSize", (PyCFunction) _wrap_FX_Font_getSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Font_getName", (PyCFunction) _wrap_FX_Font_getName, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Font", (PyCFunction) _wrap_new_FX_Font, METH_VARARGS | METH_KEYWORDS },
	 { "FXVisual_detach", (PyCFunction) _wrap_FXVisual_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXVisual_destroy", (PyCFunction) _wrap_FXVisual_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXVisual_create", (PyCFunction) _wrap_FXVisual_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXVisual_onDefault", (PyCFunction) _wrap_FXVisual_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXVisual", (PyCFunction) _wrap_new_FXVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getType", (PyCFunction) _wrap_FX_Visual_getType, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getMaxColors", (PyCFunction) _wrap_FX_Visual_getMaxColors, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_setMaxColors", (PyCFunction) _wrap_FX_Visual_setMaxColors, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getColor", (PyCFunction) _wrap_FX_Visual_getColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getPixel", (PyCFunction) _wrap_FX_Visual_getPixel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getNumBlue", (PyCFunction) _wrap_FX_Visual_getNumBlue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getNumGreen", (PyCFunction) _wrap_FX_Visual_getNumGreen, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getNumRed", (PyCFunction) _wrap_FX_Visual_getNumRed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getNumColors", (PyCFunction) _wrap_FX_Visual_getNumColors, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getDepth", (PyCFunction) _wrap_FX_Visual_getDepth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Visual_getFlags", (PyCFunction) _wrap_FX_Visual_getFlags, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Visual", (PyCFunction) _wrap_new_FX_Visual, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_detach", (PyCFunction) _wrap_FXApp_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_destroy", (PyCFunction) _wrap_FXApp_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_create", (PyCFunction) _wrap_FXApp_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_onDefault", (PyCFunction) _wrap_FXApp_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_run", (PyCFunction) _wrap_FXApp_run, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_disableEventHook", (PyCFunction) _wrap_FXApp_disableEventHook, METH_VARARGS | METH_KEYWORDS },
	 { "FXApp_enableEventHook", (PyCFunction) _wrap_FXApp_enableEventHook, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXApp", (PyCFunction) _wrap_new_FXApp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_init", (PyCFunction) _wrap_FX_App_init, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_dumpWidgets", (PyCFunction) _wrap_FX_App_dumpWidgets, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setTipbackColor", (PyCFunction) _wrap_FX_App_setTipbackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setTipforeColor", (PyCFunction) _wrap_FX_App_setTipforeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setSelbackColor", (PyCFunction) _wrap_FX_App_setSelbackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setSelforeColor", (PyCFunction) _wrap_FX_App_setSelforeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setForeColor", (PyCFunction) _wrap_FX_App_setForeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setBackColor", (PyCFunction) _wrap_FX_App_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setShadowColor", (PyCFunction) _wrap_FX_App_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setHiliteColor", (PyCFunction) _wrap_FX_App_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setBaseColor", (PyCFunction) _wrap_FX_App_setBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setBorderColor", (PyCFunction) _wrap_FX_App_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getTipbackColor", (PyCFunction) _wrap_FX_App_getTipbackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getTipforeColor", (PyCFunction) _wrap_FX_App_getTipforeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getSelbackColor", (PyCFunction) _wrap_FX_App_getSelbackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getSelforeColor", (PyCFunction) _wrap_FX_App_getSelforeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getForeColor", (PyCFunction) _wrap_FX_App_getForeColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getBackColor", (PyCFunction) _wrap_FX_App_getBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getShadowColor", (PyCFunction) _wrap_FX_App_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getHiliteColor", (PyCFunction) _wrap_FX_App_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getBaseColor", (PyCFunction) _wrap_FX_App_getBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getBorderColor", (PyCFunction) _wrap_FX_App_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setWheelLines", (PyCFunction) _wrap_FX_App_setWheelLines, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setDragDelta", (PyCFunction) _wrap_FX_App_setDragDelta, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setTooltipTime", (PyCFunction) _wrap_FX_App_setTooltipTime, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setTooltipPause", (PyCFunction) _wrap_FX_App_setTooltipPause, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setMenuPause", (PyCFunction) _wrap_FX_App_setMenuPause, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setAnimSpeed", (PyCFunction) _wrap_FX_App_setAnimSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setBlinkSpeed", (PyCFunction) _wrap_FX_App_setBlinkSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setScrollDelay", (PyCFunction) _wrap_FX_App_setScrollDelay, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setScrollSpeed", (PyCFunction) _wrap_FX_App_setScrollSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setClickSpeed", (PyCFunction) _wrap_FX_App_setClickSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setTypingSpeed", (PyCFunction) _wrap_FX_App_setTypingSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getWheelLines", (PyCFunction) _wrap_FX_App_getWheelLines, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getDragDelta", (PyCFunction) _wrap_FX_App_getDragDelta, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getTooltipTime", (PyCFunction) _wrap_FX_App_getTooltipTime, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getTooltipPause", (PyCFunction) _wrap_FX_App_getTooltipPause, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getMenuPause", (PyCFunction) _wrap_FX_App_getMenuPause, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getAnimSpeed", (PyCFunction) _wrap_FX_App_getAnimSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getBlinkSpeed", (PyCFunction) _wrap_FX_App_getBlinkSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getScrollDelay", (PyCFunction) _wrap_FX_App_getScrollDelay, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getScrollSpeed", (PyCFunction) _wrap_FX_App_getScrollSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getClickSpeed", (PyCFunction) _wrap_FX_App_getClickSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getTypingSpeed", (PyCFunction) _wrap_FX_App_getTypingSpeed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setDefaultCursor", (PyCFunction) _wrap_FX_App_setDefaultCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getDefaultCursor", (PyCFunction) _wrap_FX_App_getDefaultCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getWaitCursor", (PyCFunction) _wrap_FX_App_getWaitCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setWaitCursor", (PyCFunction) _wrap_FX_App_setWaitCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_endWaitCursor", (PyCFunction) _wrap_FX_App_endWaitCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_beginWaitCursor", (PyCFunction) _wrap_FX_App_beginWaitCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getNormalFont", (PyCFunction) _wrap_FX_App_getNormalFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setNormalFont", (PyCFunction) _wrap_FX_App_setNormalFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_instance", (PyCFunction) _wrap_FX_App_instance, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_beep", (PyCFunction) _wrap_FX_App_beep, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getDragTypeName", (PyCFunction) _wrap_FX_App_getDragTypeName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_registerDragType", (PyCFunction) _wrap_FX_App_registerDragType, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_reg", (PyCFunction) _wrap_FX_App_reg, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_exit", (PyCFunction) _wrap_FX_App_exit, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_repaint", (PyCFunction) _wrap_FX_App_repaint, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_flush", (PyCFunction) _wrap_FX_App_flush, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_refresh", (PyCFunction) _wrap_FX_App_refresh, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_forceRefresh", (PyCFunction) _wrap_FX_App_forceRefresh, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_stopModal2", (PyCFunction) _wrap_FX_App_stopModal2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_stopModal", (PyCFunction) _wrap_FX_App_stopModal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_stop", (PyCFunction) _wrap_FX_App_stop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_modalModality", (PyCFunction) _wrap_FX_App_modalModality, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_modalWindow", (PyCFunction) _wrap_FX_App_modalWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_isModal", (PyCFunction) _wrap_FX_App_isModal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runPopup", (PyCFunction) _wrap_FX_App_runPopup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runModalWhileShown", (PyCFunction) _wrap_FX_App_runModalWhileShown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runModalFor", (PyCFunction) _wrap_FX_App_runModalFor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runModal", (PyCFunction) _wrap_FX_App_runModal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runWhileEvents", (PyCFunction) _wrap_FX_App_runWhileEvents, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runUntil", (PyCFunction) _wrap_FX_App_runUntil, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_runOneEvent", (PyCFunction) _wrap_FX_App_runOneEvent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_peekEvent", (PyCFunction) _wrap_FX_App_peekEvent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_detach", (PyCFunction) _wrap_FX_App_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_destroy", (PyCFunction) _wrap_FX_App_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_create", (PyCFunction) _wrap_FX_App_create, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_removeInput", (PyCFunction) _wrap_FX_App_removeInput, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_addInput", (PyCFunction) _wrap_FX_App_addInput, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_removeSignal", (PyCFunction) _wrap_FX_App_removeSignal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_addSignal", (PyCFunction) _wrap_FX_App_addSignal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_removeChore", (PyCFunction) _wrap_FX_App_removeChore, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_addChore", (PyCFunction) _wrap_FX_App_addChore, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_removeTimeout", (PyCFunction) _wrap_FX_App_removeTimeout, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_addTimeout", (PyCFunction) _wrap_FX_App_addTimeout, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_findWindowAt", (PyCFunction) _wrap_FX_App_findWindowAt, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_findWindowWithId", (PyCFunction) _wrap_FX_App_findWindowWithId, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getMainWindow", (PyCFunction) _wrap_FX_App_getMainWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getFocusWindow", (PyCFunction) _wrap_FX_App_getFocusWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getCursorWindow", (PyCFunction) _wrap_FX_App_getCursorWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getRoot", (PyCFunction) _wrap_FX_App_getRoot, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getMonoVisual", (PyCFunction) _wrap_FX_App_getMonoVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_setDefaultVisual", (PyCFunction) _wrap_FX_App_setDefaultVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getDefaultVisual", (PyCFunction) _wrap_FX_App_getDefaultVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_closeDisplay", (PyCFunction) _wrap_FX_App_closeDisplay, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_openDisplay", (PyCFunction) _wrap_FX_App_openDisplay, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getVendorName", (PyCFunction) _wrap_FX_App_getVendorName, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_getAppName", (PyCFunction) _wrap_FX_App_getAppName, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_App", (PyCFunction) _wrap_new_FX_App, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_copyright", (PyCFunction) _wrap_FX_App_copyright, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_onCmdDump", (PyCFunction) _wrap_FX_App_onCmdDump, METH_VARARGS | METH_KEYWORDS },
	 { "FX_App_onCmdQuit", (PyCFunction) _wrap_FX_App_onCmdQuit, METH_VARARGS | METH_KEYWORDS },
	 { "FXDrawable_resize", (PyCFunction) _wrap_FXDrawable_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXDrawable_detach", (PyCFunction) _wrap_FXDrawable_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXDrawable_destroy", (PyCFunction) _wrap_FXDrawable_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXDrawable_create", (PyCFunction) _wrap_FXDrawable_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXDrawable_onDefault", (PyCFunction) _wrap_FXDrawable_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Drawable_resize", (PyCFunction) _wrap_FX_Drawable_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Drawable_setVisual", (PyCFunction) _wrap_FX_Drawable_setVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Drawable_getVisual", (PyCFunction) _wrap_FX_Drawable_getVisual, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Drawable_getHeight", (PyCFunction) _wrap_FX_Drawable_getHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Drawable_getWidth", (PyCFunction) _wrap_FX_Drawable_getWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXId_detach", (PyCFunction) _wrap_FXId_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXId_destroy", (PyCFunction) _wrap_FXId_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXId_create", (PyCFunction) _wrap_FXId_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXId_onDefault", (PyCFunction) _wrap_FXId_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_getUserData", (PyCFunction) _wrap_FX_Id_getUserData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_setUserData", (PyCFunction) _wrap_FX_Id_setUserData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_destroy", (PyCFunction) _wrap_FX_Id_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_detach", (PyCFunction) _wrap_FX_Id_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_create", (PyCFunction) _wrap_FX_Id_create, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_id", (PyCFunction) _wrap_FX_Id_id, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Id_getApp", (PyCFunction) _wrap_FX_Id_getApp, METH_VARARGS | METH_KEYWORDS },
	 { "FXObject_onDefault", (PyCFunction) _wrap_FXObject_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXObject", (PyCFunction) _wrap_new_FXObject, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Object_onDefault", (PyCFunction) _wrap_FX_Object_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Object_handle", (PyCFunction) _wrap_FX_Object_handle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Object_load", (PyCFunction) _wrap_FX_Object_load, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Object_save", (PyCFunction) _wrap_FX_Object_save, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Object_getClassName", (PyCFunction) _wrap_FX_Object_getClassName, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_target_get", (PyCFunction) _wrap_FXEvent_target_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_target_set", (PyCFunction) _wrap_FXEvent_target_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_synthetic_get", (PyCFunction) _wrap_FXEvent_synthetic_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_synthetic_set", (PyCFunction) _wrap_FXEvent_synthetic_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_rect_get", (PyCFunction) _wrap_FXEvent_rect_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_rect_set", (PyCFunction) _wrap_FXEvent_rect_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_moved_get", (PyCFunction) _wrap_FXEvent_moved_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_moved_set", (PyCFunction) _wrap_FXEvent_moved_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_count_get", (PyCFunction) _wrap_FXEvent_click_count_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_count_set", (PyCFunction) _wrap_FXEvent_click_count_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_button_get", (PyCFunction) _wrap_FXEvent_click_button_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_button_set", (PyCFunction) _wrap_FXEvent_click_button_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_time_get", (PyCFunction) _wrap_FXEvent_click_time_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_time_set", (PyCFunction) _wrap_FXEvent_click_time_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_y_get", (PyCFunction) _wrap_FXEvent_click_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_y_set", (PyCFunction) _wrap_FXEvent_click_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_x_get", (PyCFunction) _wrap_FXEvent_click_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_click_x_set", (PyCFunction) _wrap_FXEvent_click_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_last_y_get", (PyCFunction) _wrap_FXEvent_last_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_last_y_set", (PyCFunction) _wrap_FXEvent_last_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_last_x_get", (PyCFunction) _wrap_FXEvent_last_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_last_x_set", (PyCFunction) _wrap_FXEvent_last_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_text_get", (PyCFunction) _wrap_FXEvent_text_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_text_set", (PyCFunction) _wrap_FXEvent_text_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_code_get", (PyCFunction) _wrap_FXEvent_code_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_code_set", (PyCFunction) _wrap_FXEvent_code_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_state_get", (PyCFunction) _wrap_FXEvent_state_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_state_set", (PyCFunction) _wrap_FXEvent_state_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_root_y_get", (PyCFunction) _wrap_FXEvent_root_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_root_y_set", (PyCFunction) _wrap_FXEvent_root_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_root_x_get", (PyCFunction) _wrap_FXEvent_root_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_root_x_set", (PyCFunction) _wrap_FXEvent_root_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_win_y_get", (PyCFunction) _wrap_FXEvent_win_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_win_y_set", (PyCFunction) _wrap_FXEvent_win_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_win_x_get", (PyCFunction) _wrap_FXEvent_win_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_win_x_set", (PyCFunction) _wrap_FXEvent_win_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_time_get", (PyCFunction) _wrap_FXEvent_time_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_time_set", (PyCFunction) _wrap_FXEvent_time_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_type_get", (PyCFunction) _wrap_FXEvent_type_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXEvent_type_set", (PyCFunction) _wrap_FXEvent_type_set, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXEvent", (PyCFunction) _wrap_new_FXEvent, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_ymax_get", (PyCFunction) _wrap_FXPSBounds_ymax_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_ymax_set", (PyCFunction) _wrap_FXPSBounds_ymax_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_ymin_get", (PyCFunction) _wrap_FXPSBounds_ymin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_ymin_set", (PyCFunction) _wrap_FXPSBounds_ymin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_xmax_get", (PyCFunction) _wrap_FXPSBounds_xmax_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_xmax_set", (PyCFunction) _wrap_FXPSBounds_xmax_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_xmin_get", (PyCFunction) _wrap_FXPSBounds_xmin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPSBounds_xmin_set", (PyCFunction) _wrap_FXPSBounds_xmin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_flags_get", (PyCFunction) _wrap_FXPrinter_flags_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_flags_set", (PyCFunction) _wrap_FXPrinter_flags_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_numcopies_get", (PyCFunction) _wrap_FXPrinter_numcopies_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_numcopies_set", (PyCFunction) _wrap_FXPrinter_numcopies_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_bottommargin_get", (PyCFunction) _wrap_FXPrinter_bottommargin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_bottommargin_set", (PyCFunction) _wrap_FXPrinter_bottommargin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_topmargin_get", (PyCFunction) _wrap_FXPrinter_topmargin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_topmargin_set", (PyCFunction) _wrap_FXPrinter_topmargin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_rightmargin_get", (PyCFunction) _wrap_FXPrinter_rightmargin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_rightmargin_set", (PyCFunction) _wrap_FXPrinter_rightmargin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_leftmargin_get", (PyCFunction) _wrap_FXPrinter_leftmargin_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_leftmargin_set", (PyCFunction) _wrap_FXPrinter_leftmargin_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediaheight_get", (PyCFunction) _wrap_FXPrinter_mediaheight_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediaheight_set", (PyCFunction) _wrap_FXPrinter_mediaheight_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediawidth_get", (PyCFunction) _wrap_FXPrinter_mediawidth_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediawidth_set", (PyCFunction) _wrap_FXPrinter_mediawidth_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediasize_get", (PyCFunction) _wrap_FXPrinter_mediasize_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_mediasize_set", (PyCFunction) _wrap_FXPrinter_mediasize_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_topage_get", (PyCFunction) _wrap_FXPrinter_topage_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_topage_set", (PyCFunction) _wrap_FXPrinter_topage_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_frompage_get", (PyCFunction) _wrap_FXPrinter_frompage_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_frompage_set", (PyCFunction) _wrap_FXPrinter_frompage_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_currentpage_get", (PyCFunction) _wrap_FXPrinter_currentpage_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_currentpage_set", (PyCFunction) _wrap_FXPrinter_currentpage_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_lastpage_get", (PyCFunction) _wrap_FXPrinter_lastpage_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_lastpage_set", (PyCFunction) _wrap_FXPrinter_lastpage_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_firstpage_get", (PyCFunction) _wrap_FXPrinter_firstpage_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_firstpage_set", (PyCFunction) _wrap_FXPrinter_firstpage_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_name_get", (PyCFunction) _wrap_FXPrinter_name_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXPrinter_name_set", (PyCFunction) _wrap_FXPrinter_name_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_flags_get", (PyCFunction) _wrap_FXFontDesc_flags_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_flags_set", (PyCFunction) _wrap_FXFontDesc_flags_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_setwidth_get", (PyCFunction) _wrap_FXFontDesc_setwidth_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_setwidth_set", (PyCFunction) _wrap_FXFontDesc_setwidth_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_encoding_get", (PyCFunction) _wrap_FXFontDesc_encoding_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_encoding_set", (PyCFunction) _wrap_FXFontDesc_encoding_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_slant_get", (PyCFunction) _wrap_FXFontDesc_slant_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_slant_set", (PyCFunction) _wrap_FXFontDesc_slant_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_weight_get", (PyCFunction) _wrap_FXFontDesc_weight_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_weight_set", (PyCFunction) _wrap_FXFontDesc_weight_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_size_get", (PyCFunction) _wrap_FXFontDesc_size_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_size_set", (PyCFunction) _wrap_FXFontDesc_size_set, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_face_get", (PyCFunction) _wrap_FXFontDesc_face_get, METH_VARARGS | METH_KEYWORDS },
	 { "FXFontDesc_face_set", (PyCFunction) _wrap_FXFontDesc_face_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___neg__", (PyCFunction) _wrap_FX_Point___neg__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___idiv__", (PyCFunction) _wrap_FX_Point___idiv__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___imul__", (PyCFunction) _wrap_FX_Point___imul__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___isub__", (PyCFunction) _wrap_FX_Point___isub__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___iadd__", (PyCFunction) _wrap_FX_Point___iadd__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___div__", (PyCFunction) _wrap_FX_Point___div__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___mul__", (PyCFunction) _wrap_FX_Point___mul__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___sub__", (PyCFunction) _wrap_FX_Point___sub__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___add__", (PyCFunction) _wrap_FX_Point___add__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___ne__", (PyCFunction) _wrap_FX_Point___ne__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point___eq__", (PyCFunction) _wrap_FX_Point___eq__, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Point", (PyCFunction) _wrap_new_FX_Point, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point_y_get", (PyCFunction) _wrap_FX_Point_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point_y_set", (PyCFunction) _wrap_FX_Point_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point_x_get", (PyCFunction) _wrap_FX_Point_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Point_x_set", (PyCFunction) _wrap_FX_Point_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___neg__", (PyCFunction) _wrap_FX_Size___neg__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___idiv__", (PyCFunction) _wrap_FX_Size___idiv__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___imul__", (PyCFunction) _wrap_FX_Size___imul__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___isub__", (PyCFunction) _wrap_FX_Size___isub__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___iadd__", (PyCFunction) _wrap_FX_Size___iadd__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___div__", (PyCFunction) _wrap_FX_Size___div__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___mul__", (PyCFunction) _wrap_FX_Size___mul__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___sub__", (PyCFunction) _wrap_FX_Size___sub__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___add__", (PyCFunction) _wrap_FX_Size___add__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___ne__", (PyCFunction) _wrap_FX_Size___ne__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size___eq__", (PyCFunction) _wrap_FX_Size___eq__, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Size", (PyCFunction) _wrap_new_FX_Size, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size_h_get", (PyCFunction) _wrap_FX_Size_h_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size_h_set", (PyCFunction) _wrap_FX_Size_h_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size_w_get", (PyCFunction) _wrap_FX_Size_w_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Size_w_set", (PyCFunction) _wrap_FX_Size_w_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_br", (PyCFunction) _wrap_FX_Rectangle_br, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_bl", (PyCFunction) _wrap_FX_Rectangle_bl, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_tr", (PyCFunction) _wrap_FX_Rectangle_tr, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_tl", (PyCFunction) _wrap_FX_Rectangle_tl, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_shrink4", (PyCFunction) _wrap_FX_Rectangle_shrink4, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_shrink2", (PyCFunction) _wrap_FX_Rectangle_shrink2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_shrink", (PyCFunction) _wrap_FX_Rectangle_shrink, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_grow4", (PyCFunction) _wrap_FX_Rectangle_grow4, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_grow2", (PyCFunction) _wrap_FX_Rectangle_grow2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_grow", (PyCFunction) _wrap_FX_Rectangle_grow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_move", (PyCFunction) _wrap_FX_Rectangle_move, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_overlaps", (PyCFunction) _wrap_FX_Rectangle_overlaps, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_containsRectangle", (PyCFunction) _wrap_FX_Rectangle_containsRectangle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_containsXY", (PyCFunction) _wrap_FX_Rectangle_containsXY, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_containsPoint", (PyCFunction) _wrap_FX_Rectangle_containsPoint, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle___ne__", (PyCFunction) _wrap_FX_Rectangle___ne__, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle___eq__", (PyCFunction) _wrap_FX_Rectangle___eq__, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Rectangle", (PyCFunction) _wrap_new_FX_Rectangle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_h_get", (PyCFunction) _wrap_FX_Rectangle_h_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_h_set", (PyCFunction) _wrap_FX_Rectangle_h_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_w_get", (PyCFunction) _wrap_FX_Rectangle_w_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_w_set", (PyCFunction) _wrap_FX_Rectangle_w_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_y_get", (PyCFunction) _wrap_FX_Rectangle_y_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_y_set", (PyCFunction) _wrap_FX_Rectangle_y_set, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_x_get", (PyCFunction) _wrap_FX_Rectangle_x_get, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Rectangle_x_set", (PyCFunction) _wrap_FX_Rectangle_x_set, METH_VARARGS | METH_KEYWORDS },
	 { "CreateRecentFiles2", (PyCFunction) _wrap_CreateRecentFiles2, METH_VARARGS | METH_KEYWORDS },
	 { "CreateRecentFiles1", (PyCFunction) _wrap_CreateRecentFiles1, METH_VARARGS | METH_KEYWORDS },
	 { "CreateFont3", (PyCFunction) _wrap_CreateFont3, METH_VARARGS | METH_KEYWORDS },
	 { "CreateFont2", (PyCFunction) _wrap_CreateFont2, METH_VARARGS | METH_KEYWORDS },
	 { "CreateFont1", (PyCFunction) _wrap_CreateFont1, METH_VARARGS | METH_KEYWORDS },
	 { "FXPyRegister", (PyCFunction) _wrap_FXPyRegister, METH_VARARGS | METH_KEYWORDS },
	 { NULL, NULL }
};
#ifdef __cplusplus
}
#endif
/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "_class_FXPyBMPImage","_FXPyBMPImage",0},
    { "_class_FXPyICOImage","_FXPyICOImage",0},
    { "_FXPyDelegator","_class_FXPyDelegator",0},
    { "_signed_long","_FXTime",0},
    { "_signed_long","_long",0},
    { "_class_FXPyPCXImage","_FXPyPCXImage",0},
    { "_class_FXTIFIcon","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXTIFIcon},
    { "_class_FXTIFIcon","_FXPyTIFIcon",SwigFXPyTIFIconToFXTIFIcon},
    { "_class_FXTIFIcon","_FXTIFIcon",0},
    { "_double","_FXdouble",0},
    { "_FXPyObject","_class_FXPyObject",0},
    { "_FXPyGIFIcon","_class_FXPyGIFIcon",0},
    { "_FXBMPIcon","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXBMPIcon},
    { "_FXBMPIcon","_FXPyBMPIcon",SwigFXPyBMPIconToFXBMPIcon},
    { "_FXBMPIcon","_class_FXBMPIcon",0},
    { "_FXICOIcon","_class_FXPyICOIcon",SwigFXPyICOIconToFXICOIcon},
    { "_FXICOIcon","_FXPyICOIcon",SwigFXPyICOIconToFXICOIcon},
    { "_FXICOIcon","_class_FXICOIcon",0},
    { "_class_FXSettings","_class_FXRegistry",SwigFXRegistryToFXSettings},
    { "_class_FXSettings","_FXRegistry",SwigFXRegistryToFXSettings},
    { "_class_FXSettings","_FXSettings",0},
    { "_class_FXRegistry","_FXRegistry",0},
    { "_class_FXVisual","_class_FXPyVisual",SwigFXPyVisualToFXVisual},
    { "_class_FXVisual","_FXPyVisual",SwigFXPyVisualToFXVisual},
    { "_class_FXVisual","_FXVisual",0},
    { "_FXIcon","_class_FXPyICOIcon",SwigFXPyICOIconToFXIcon},
    { "_FXIcon","_FXPyICOIcon",SwigFXPyICOIconToFXIcon},
    { "_FXIcon","_class_FXICOIcon",SwigFXICOIconToFXIcon},
    { "_FXIcon","_FXICOIcon",SwigFXICOIconToFXIcon},
    { "_FXIcon","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXIcon},
    { "_FXIcon","_FXPyRGBIcon",SwigFXPyRGBIconToFXIcon},
    { "_FXIcon","_class_FXRGBIcon",SwigFXRGBIconToFXIcon},
    { "_FXIcon","_FXRGBIcon",SwigFXRGBIconToFXIcon},
    { "_FXIcon","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXIcon},
    { "_FXIcon","_FXPyTGAIcon",SwigFXPyTGAIconToFXIcon},
    { "_FXIcon","_class_FXTGAIcon",SwigFXTGAIconToFXIcon},
    { "_FXIcon","_FXTGAIcon",SwigFXTGAIconToFXIcon},
    { "_FXIcon","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXIcon},
    { "_FXIcon","_FXPyTIFIcon",SwigFXPyTIFIconToFXIcon},
    { "_FXIcon","_class_FXTIFIcon",SwigFXTIFIconToFXIcon},
    { "_FXIcon","_FXTIFIcon",SwigFXTIFIconToFXIcon},
    { "_FXIcon","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXIcon},
    { "_FXIcon","_FXPyPCXIcon",SwigFXPyPCXIconToFXIcon},
    { "_FXIcon","_class_FXPCXIcon",SwigFXPCXIconToFXIcon},
    { "_FXIcon","_FXPCXIcon",SwigFXPCXIconToFXIcon},
    { "_FXIcon","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXIcon},
    { "_FXIcon","_FXPyXPMIcon",SwigFXPyXPMIconToFXIcon},
    { "_FXIcon","_class_FXXPMIcon",SwigFXXPMIconToFXIcon},
    { "_FXIcon","_FXXPMIcon",SwigFXXPMIconToFXIcon},
    { "_FXIcon","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXIcon},
    { "_FXIcon","_FXPyJPGIcon",SwigFXPyJPGIconToFXIcon},
    { "_FXIcon","_class_FXJPGIcon",SwigFXJPGIconToFXIcon},
    { "_FXIcon","_FXJPGIcon",SwigFXJPGIconToFXIcon},
    { "_FXIcon","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXIcon},
    { "_FXIcon","_FXPyPNGIcon",SwigFXPyPNGIconToFXIcon},
    { "_FXIcon","_class_FXPNGIcon",SwigFXPNGIconToFXIcon},
    { "_FXIcon","_FXPNGIcon",SwigFXPNGIconToFXIcon},
    { "_FXIcon","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXIcon},
    { "_FXIcon","_FXPyBMPIcon",SwigFXPyBMPIconToFXIcon},
    { "_FXIcon","_class_FXBMPIcon",SwigFXBMPIconToFXIcon},
    { "_FXIcon","_FXBMPIcon",SwigFXBMPIconToFXIcon},
    { "_FXIcon","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXIcon},
    { "_FXIcon","_FXPyGIFIcon",SwigFXPyGIFIconToFXIcon},
    { "_FXIcon","_class_FXGIFIcon",SwigFXGIFIconToFXIcon},
    { "_FXIcon","_FXGIFIcon",SwigFXGIFIconToFXIcon},
    { "_FXIcon","_class_FXPyIcon",SwigFXPyIconToFXIcon},
    { "_FXIcon","_FXPyIcon",SwigFXPyIconToFXIcon},
    { "_FXIcon","_class_FXIcon",0},
    { "_FXTGAImage","_class_FXPyTGAImage",SwigFXPyTGAImageToFXTGAImage},
    { "_FXTGAImage","_FXPyTGAImage",SwigFXPyTGAImageToFXTGAImage},
    { "_FXTGAImage","_class_FXTGAImage",0},
    { "_class_FXPyTGAIcon","_FXPyTGAIcon",0},
    { "_FXPyStream","_class_FXPyStream",0},
    { "_class_FXPyDict","_FXPyDict",0},
    { "_class_FXRegion","_FXRegion",0},
    { "_FXPyPNGImage","_class_FXPyPNGImage",0},
    { "_class_FXAccelTable","_class_FXPyAccelTable",SwigFXPyAccelTableToFXAccelTable},
    { "_class_FXAccelTable","_FXPyAccelTable",SwigFXPyAccelTableToFXAccelTable},
    { "_class_FXAccelTable","_FXAccelTable",0},
    { "_FXPyApp","_class_FXPyApp",0},
    { "_class_FXPyId","_FXPyId",0},
    { "_FXApp","_class_FXPyApp",SwigFXPyAppToFXApp},
    { "_FXApp","_FXPyApp",SwigFXPyAppToFXApp},
    { "_FXApp","_class_FXApp",0},
    { "_class_FXPyRecentFiles","_FXPyRecentFiles",0},
    { "_class_FXPyDebugTarget","_FXPyDebugTarget",0},
    { "_class_FXCommand","_class_FXPyCommand",SwigFXPyCommandToFXCommand},
    { "_class_FXCommand","_FXPyCommand",SwigFXPyCommandToFXCommand},
    { "_class_FXCommand","_FXCommand",0},
    { "_long","_FXPixel",0},
    { "_long","_FXTime",0},
    { "_long","_unsigned_long",0},
    { "_long","_signed_long",0},
    { "_FXRGBIcon","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXRGBIcon},
    { "_FXRGBIcon","_FXPyRGBIcon",SwigFXPyRGBIconToFXRGBIcon},
    { "_FXRGBIcon","_class_FXRGBIcon",0},
    { "_FXPrinter","_struct_FXPrinter",0},
    { "_class_FXId","_class_FXPyICOIcon",SwigFXPyICOIconToFXId},
    { "_class_FXId","_FXPyICOIcon",SwigFXPyICOIconToFXId},
    { "_class_FXId","_class_FXICOIcon",SwigFXICOIconToFXId},
    { "_class_FXId","_FXICOIcon",SwigFXICOIconToFXId},
    { "_class_FXId","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXId},
    { "_class_FXId","_FXPyRGBIcon",SwigFXPyRGBIconToFXId},
    { "_class_FXId","_class_FXRGBIcon",SwigFXRGBIconToFXId},
    { "_class_FXId","_FXRGBIcon",SwigFXRGBIconToFXId},
    { "_class_FXId","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXId},
    { "_class_FXId","_FXPyTGAIcon",SwigFXPyTGAIconToFXId},
    { "_class_FXId","_class_FXTGAIcon",SwigFXTGAIconToFXId},
    { "_class_FXId","_FXTGAIcon",SwigFXTGAIconToFXId},
    { "_class_FXId","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXId},
    { "_class_FXId","_FXPyTIFIcon",SwigFXPyTIFIconToFXId},
    { "_class_FXId","_class_FXTIFIcon",SwigFXTIFIconToFXId},
    { "_class_FXId","_FXTIFIcon",SwigFXTIFIconToFXId},
    { "_class_FXId","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXId},
    { "_class_FXId","_FXPyPCXIcon",SwigFXPyPCXIconToFXId},
    { "_class_FXId","_class_FXPCXIcon",SwigFXPCXIconToFXId},
    { "_class_FXId","_FXPCXIcon",SwigFXPCXIconToFXId},
    { "_class_FXId","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXId},
    { "_class_FXId","_FXPyXPMIcon",SwigFXPyXPMIconToFXId},
    { "_class_FXId","_class_FXXPMIcon",SwigFXXPMIconToFXId},
    { "_class_FXId","_FXXPMIcon",SwigFXXPMIconToFXId},
    { "_class_FXId","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXId},
    { "_class_FXId","_FXPyJPGIcon",SwigFXPyJPGIconToFXId},
    { "_class_FXId","_class_FXJPGIcon",SwigFXJPGIconToFXId},
    { "_class_FXId","_FXJPGIcon",SwigFXJPGIconToFXId},
    { "_class_FXId","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXId},
    { "_class_FXId","_FXPyPNGIcon",SwigFXPyPNGIconToFXId},
    { "_class_FXId","_class_FXPNGIcon",SwigFXPNGIconToFXId},
    { "_class_FXId","_FXPNGIcon",SwigFXPNGIconToFXId},
    { "_class_FXId","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXId},
    { "_class_FXId","_FXPyBMPIcon",SwigFXPyBMPIconToFXId},
    { "_class_FXId","_class_FXBMPIcon",SwigFXBMPIconToFXId},
    { "_class_FXId","_FXBMPIcon",SwigFXBMPIconToFXId},
    { "_class_FXId","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXId},
    { "_class_FXId","_FXPyGIFIcon",SwigFXPyGIFIconToFXId},
    { "_class_FXId","_class_FXGIFIcon",SwigFXGIFIconToFXId},
    { "_class_FXId","_FXGIFIcon",SwigFXGIFIconToFXId},
    { "_class_FXId","_class_FXPyIcon",SwigFXPyIconToFXId},
    { "_class_FXId","_FXPyIcon",SwigFXPyIconToFXId},
    { "_class_FXId","_class_FXIcon",SwigFXIconToFXId},
    { "_class_FXId","_FXIcon",SwigFXIconToFXId},
    { "_class_FXId","_class_FXPyICOImage",SwigFXPyICOImageToFXId},
    { "_class_FXId","_FXPyICOImage",SwigFXPyICOImageToFXId},
    { "_class_FXId","_class_FXICOImage",SwigFXICOImageToFXId},
    { "_class_FXId","_FXICOImage",SwigFXICOImageToFXId},
    { "_class_FXId","_class_FXPyRGBImage",SwigFXPyRGBImageToFXId},
    { "_class_FXId","_FXPyRGBImage",SwigFXPyRGBImageToFXId},
    { "_class_FXId","_class_FXRGBImage",SwigFXRGBImageToFXId},
    { "_class_FXId","_FXRGBImage",SwigFXRGBImageToFXId},
    { "_class_FXId","_class_FXPyTGAImage",SwigFXPyTGAImageToFXId},
    { "_class_FXId","_FXPyTGAImage",SwigFXPyTGAImageToFXId},
    { "_class_FXId","_class_FXTGAImage",SwigFXTGAImageToFXId},
    { "_class_FXId","_FXTGAImage",SwigFXTGAImageToFXId},
    { "_class_FXId","_class_FXPyTIFImage",SwigFXPyTIFImageToFXId},
    { "_class_FXId","_FXPyTIFImage",SwigFXPyTIFImageToFXId},
    { "_class_FXId","_class_FXTIFImage",SwigFXTIFImageToFXId},
    { "_class_FXId","_FXTIFImage",SwigFXTIFImageToFXId},
    { "_class_FXId","_class_FXPyPCXImage",SwigFXPyPCXImageToFXId},
    { "_class_FXId","_FXPyPCXImage",SwigFXPyPCXImageToFXId},
    { "_class_FXId","_class_FXPCXImage",SwigFXPCXImageToFXId},
    { "_class_FXId","_FXPCXImage",SwigFXPCXImageToFXId},
    { "_class_FXId","_class_FXPyXPMImage",SwigFXPyXPMImageToFXId},
    { "_class_FXId","_FXPyXPMImage",SwigFXPyXPMImageToFXId},
    { "_class_FXId","_class_FXXPMImage",SwigFXXPMImageToFXId},
    { "_class_FXId","_FXXPMImage",SwigFXXPMImageToFXId},
    { "_class_FXId","_class_FXPyJPGImage",SwigFXPyJPGImageToFXId},
    { "_class_FXId","_FXPyJPGImage",SwigFXPyJPGImageToFXId},
    { "_class_FXId","_class_FXJPGImage",SwigFXJPGImageToFXId},
    { "_class_FXId","_FXJPGImage",SwigFXJPGImageToFXId},
    { "_class_FXId","_class_FXPyPNGImage",SwigFXPyPNGImageToFXId},
    { "_class_FXId","_FXPyPNGImage",SwigFXPyPNGImageToFXId},
    { "_class_FXId","_class_FXPNGImage",SwigFXPNGImageToFXId},
    { "_class_FXId","_FXPNGImage",SwigFXPNGImageToFXId},
    { "_class_FXId","_class_FXPyBMPImage",SwigFXPyBMPImageToFXId},
    { "_class_FXId","_FXPyBMPImage",SwigFXPyBMPImageToFXId},
    { "_class_FXId","_class_FXBMPImage",SwigFXBMPImageToFXId},
    { "_class_FXId","_FXBMPImage",SwigFXBMPImageToFXId},
    { "_class_FXId","_class_FXPyGIFImage",SwigFXPyGIFImageToFXId},
    { "_class_FXId","_FXPyGIFImage",SwigFXPyGIFImageToFXId},
    { "_class_FXId","_class_FXGIFImage",SwigFXGIFImageToFXId},
    { "_class_FXId","_FXGIFImage",SwigFXGIFImageToFXId},
    { "_class_FXId","_class_FXPyImage",SwigFXPyImageToFXId},
    { "_class_FXId","_FXPyImage",SwigFXPyImageToFXId},
    { "_class_FXId","_class_FXImage",SwigFXImageToFXId},
    { "_class_FXId","_FXImage",SwigFXImageToFXId},
    { "_class_FXId","_class_FXPyFont",SwigFXPyFontToFXId},
    { "_class_FXId","_FXPyFont",SwigFXPyFontToFXId},
    { "_class_FXId","_class_FXFont",SwigFXFontToFXId},
    { "_class_FXId","_FXFont",SwigFXFontToFXId},
    { "_class_FXId","_class_FXPyVisual",SwigFXPyVisualToFXId},
    { "_class_FXId","_FXPyVisual",SwigFXPyVisualToFXId},
    { "_class_FXId","_class_FXVisual",SwigFXVisualToFXId},
    { "_class_FXId","_FXVisual",SwigFXVisualToFXId},
    { "_class_FXId","_class_FXPyDrawable",SwigFXPyDrawableToFXId},
    { "_class_FXId","_FXPyDrawable",SwigFXPyDrawableToFXId},
    { "_class_FXId","_class_FXDrawable",SwigFXDrawableToFXId},
    { "_class_FXId","_FXDrawable",SwigFXDrawableToFXId},
    { "_class_FXId","_class_FXPyId",SwigFXPyIdToFXId},
    { "_class_FXId","_FXPyId",SwigFXPyIdToFXId},
    { "_class_FXId","_FXId",0},
    { "_float","_FXfloat",0},
    { "_FXPyDrawable","_class_FXPyDrawable",0},
    { "_class_FXPyXPMIcon","_FXPyXPMIcon",0},
    { "_FXshort","_short",0},
    { "_FXshort","_signed_short",0},
    { "_FXshort","_unsigned_short",0},
    { "_FXshort","_FXushort",0},
    { "_FXFontDesc","_struct_FXFontDesc",0},
    { "_FXSize","_class_FXSize",0},
    { "_class_FXBMPIcon","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXBMPIcon},
    { "_class_FXBMPIcon","_FXPyBMPIcon",SwigFXPyBMPIconToFXBMPIcon},
    { "_class_FXBMPIcon","_FXBMPIcon",0},
    { "_class_FXICOIcon","_class_FXPyICOIcon",SwigFXPyICOIconToFXICOIcon},
    { "_class_FXICOIcon","_FXPyICOIcon",SwigFXPyICOIconToFXICOIcon},
    { "_class_FXICOIcon","_FXICOIcon",0},
    { "_class_FXPyTIFIcon","_FXPyTIFIcon",0},
    { "_FXJPGImage","_class_FXPyJPGImage",SwigFXPyJPGImageToFXJPGImage},
    { "_FXJPGImage","_FXPyJPGImage",SwigFXPyJPGImageToFXJPGImage},
    { "_FXJPGImage","_class_FXJPGImage",0},
    { "_class_FXTIFImage","_class_FXPyTIFImage",SwigFXPyTIFImageToFXTIFImage},
    { "_class_FXTIFImage","_FXPyTIFImage",SwigFXPyTIFImageToFXTIFImage},
    { "_class_FXTIFImage","_FXTIFImage",0},
    { "_FXPyPCXIcon","_class_FXPyPCXIcon",0},
    { "_class_FXIcon","_class_FXPyICOIcon",SwigFXPyICOIconToFXIcon},
    { "_class_FXIcon","_FXPyICOIcon",SwigFXPyICOIconToFXIcon},
    { "_class_FXIcon","_class_FXICOIcon",SwigFXICOIconToFXIcon},
    { "_class_FXIcon","_FXICOIcon",SwigFXICOIconToFXIcon},
    { "_class_FXIcon","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXIcon},
    { "_class_FXIcon","_FXPyRGBIcon",SwigFXPyRGBIconToFXIcon},
    { "_class_FXIcon","_class_FXRGBIcon",SwigFXRGBIconToFXIcon},
    { "_class_FXIcon","_FXRGBIcon",SwigFXRGBIconToFXIcon},
    { "_class_FXIcon","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXIcon},
    { "_class_FXIcon","_FXPyTGAIcon",SwigFXPyTGAIconToFXIcon},
    { "_class_FXIcon","_class_FXTGAIcon",SwigFXTGAIconToFXIcon},
    { "_class_FXIcon","_FXTGAIcon",SwigFXTGAIconToFXIcon},
    { "_class_FXIcon","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXIcon},
    { "_class_FXIcon","_FXPyTIFIcon",SwigFXPyTIFIconToFXIcon},
    { "_class_FXIcon","_class_FXTIFIcon",SwigFXTIFIconToFXIcon},
    { "_class_FXIcon","_FXTIFIcon",SwigFXTIFIconToFXIcon},
    { "_class_FXIcon","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXIcon},
    { "_class_FXIcon","_FXPyPCXIcon",SwigFXPyPCXIconToFXIcon},
    { "_class_FXIcon","_class_FXPCXIcon",SwigFXPCXIconToFXIcon},
    { "_class_FXIcon","_FXPCXIcon",SwigFXPCXIconToFXIcon},
    { "_class_FXIcon","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXIcon},
    { "_class_FXIcon","_FXPyXPMIcon",SwigFXPyXPMIconToFXIcon},
    { "_class_FXIcon","_class_FXXPMIcon",SwigFXXPMIconToFXIcon},
    { "_class_FXIcon","_FXXPMIcon",SwigFXXPMIconToFXIcon},
    { "_class_FXIcon","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXIcon},
    { "_class_FXIcon","_FXPyJPGIcon",SwigFXPyJPGIconToFXIcon},
    { "_class_FXIcon","_class_FXJPGIcon",SwigFXJPGIconToFXIcon},
    { "_class_FXIcon","_FXJPGIcon",SwigFXJPGIconToFXIcon},
    { "_class_FXIcon","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXIcon},
    { "_class_FXIcon","_FXPyPNGIcon",SwigFXPyPNGIconToFXIcon},
    { "_class_FXIcon","_class_FXPNGIcon",SwigFXPNGIconToFXIcon},
    { "_class_FXIcon","_FXPNGIcon",SwigFXPNGIconToFXIcon},
    { "_class_FXIcon","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXIcon},
    { "_class_FXIcon","_FXPyBMPIcon",SwigFXPyBMPIconToFXIcon},
    { "_class_FXIcon","_class_FXBMPIcon",SwigFXBMPIconToFXIcon},
    { "_class_FXIcon","_FXBMPIcon",SwigFXBMPIconToFXIcon},
    { "_class_FXIcon","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXIcon},
    { "_class_FXIcon","_FXPyGIFIcon",SwigFXPyGIFIconToFXIcon},
    { "_class_FXIcon","_class_FXGIFIcon",SwigFXGIFIconToFXIcon},
    { "_class_FXIcon","_FXGIFIcon",SwigFXGIFIconToFXIcon},
    { "_class_FXIcon","_class_FXPyIcon",SwigFXPyIconToFXIcon},
    { "_class_FXIcon","_FXPyIcon",SwigFXPyIconToFXIcon},
    { "_class_FXIcon","_FXIcon",0},
    { "_FXint","_FXInputHandle",0},
    { "_FXint","_FXDragType",0},
    { "_FXint","_FXHotKey",0},
    { "_FXint","_FXColor",0},
    { "_FXint","_FXID",0},
    { "_FXint","_FXSelector",0},
    { "_FXint","_int",0},
    { "_FXint","_signed_int",0},
    { "_FXint","_unsigned_int",0},
    { "_FXint","_FXuint",0},
    { "_FXPyPNGIcon","_class_FXPyPNGIcon",0},
    { "_FXushort","_FXshort",0},
    { "_FXushort","_unsigned_short",0},
    { "_FXushort","_short",0},
    { "_class_FXPoint","_FXPoint",0},
    { "_class_FXPyPNGImage","_FXPyPNGImage",0},
    { "_FXPyVisual","_class_FXPyVisual",0},
    { "_class_FXRectangle","_FXRectangle",0},
    { "_class_FXPyFont","_FXPyFont",0},
    { "_FXPyFileStream","_class_FXPyFileStream",0},
    { "_FXRGBImage","_class_FXPyRGBImage",SwigFXPyRGBImageToFXRGBImage},
    { "_FXRGBImage","_FXPyRGBImage",SwigFXPyRGBImageToFXRGBImage},
    { "_FXRGBImage","_class_FXRGBImage",0},
    { "_FXPyXPMImage","_class_FXPyXPMImage",0},
    { "_FXPyDataTarget","_class_FXPyDataTarget",0},
    { "_FXObject","_class_FXPyDebugTarget",SwigFXPyDebugTargetToFXObject},
    { "_FXObject","_FXPyDebugTarget",SwigFXPyDebugTargetToFXObject},
    { "_FXObject","_class_FXDebugTarget",SwigFXDebugTargetToFXObject},
    { "_FXObject","_FXDebugTarget",SwigFXDebugTargetToFXObject},
    { "_FXObject","_class_FXPyDataTarget",SwigFXPyDataTargetToFXObject},
    { "_FXObject","_FXPyDataTarget",SwigFXPyDataTargetToFXObject},
    { "_FXObject","_class_FXDataTarget",SwigFXDataTargetToFXObject},
    { "_FXObject","_FXDataTarget",SwigFXDataTargetToFXObject},
    { "_FXObject","_class_FXPyDelegator",SwigFXPyDelegatorToFXObject},
    { "_FXObject","_FXPyDelegator",SwigFXPyDelegatorToFXObject},
    { "_FXObject","_class_FXDelegator",SwigFXDelegatorToFXObject},
    { "_FXObject","_FXDelegator",SwigFXDelegatorToFXObject},
    { "_FXObject","_class_FXPyStringDict",SwigFXPyStringDictToFXObject},
    { "_FXObject","_FXPyStringDict",SwigFXPyStringDictToFXObject},
    { "_FXObject","_class_FXStringDict",SwigFXStringDictToFXObject},
    { "_FXObject","_FXStringDict",SwigFXStringDictToFXObject},
    { "_FXObject","_class_FXPyDict",SwigFXPyDictToFXObject},
    { "_FXObject","_FXPyDict",SwigFXPyDictToFXObject},
    { "_FXObject","_class_FXDict",SwigFXDictToFXObject},
    { "_FXObject","_FXDict",SwigFXDictToFXObject},
    { "_FXObject","_class_FXPyRecentFiles",SwigFXPyRecentFilesToFXObject},
    { "_FXObject","_FXPyRecentFiles",SwigFXPyRecentFilesToFXObject},
    { "_FXObject","_class_FXRecentFiles",SwigFXRecentFilesToFXObject},
    { "_FXObject","_FXRecentFiles",SwigFXRecentFilesToFXObject},
    { "_FXObject","_class_FXPyAccelTable",SwigFXPyAccelTableToFXObject},
    { "_FXObject","_FXPyAccelTable",SwigFXPyAccelTableToFXObject},
    { "_FXObject","_class_FXAccelTable",SwigFXAccelTableToFXObject},
    { "_FXObject","_FXAccelTable",SwigFXAccelTableToFXObject},
    { "_FXObject","_class_FXPyICOIcon",SwigFXPyICOIconToFXObject},
    { "_FXObject","_FXPyICOIcon",SwigFXPyICOIconToFXObject},
    { "_FXObject","_class_FXICOIcon",SwigFXICOIconToFXObject},
    { "_FXObject","_FXICOIcon",SwigFXICOIconToFXObject},
    { "_FXObject","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXObject},
    { "_FXObject","_FXPyRGBIcon",SwigFXPyRGBIconToFXObject},
    { "_FXObject","_class_FXRGBIcon",SwigFXRGBIconToFXObject},
    { "_FXObject","_FXRGBIcon",SwigFXRGBIconToFXObject},
    { "_FXObject","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXObject},
    { "_FXObject","_FXPyTGAIcon",SwigFXPyTGAIconToFXObject},
    { "_FXObject","_class_FXTGAIcon",SwigFXTGAIconToFXObject},
    { "_FXObject","_FXTGAIcon",SwigFXTGAIconToFXObject},
    { "_FXObject","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXObject},
    { "_FXObject","_FXPyTIFIcon",SwigFXPyTIFIconToFXObject},
    { "_FXObject","_class_FXTIFIcon",SwigFXTIFIconToFXObject},
    { "_FXObject","_FXTIFIcon",SwigFXTIFIconToFXObject},
    { "_FXObject","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXObject},
    { "_FXObject","_FXPyPCXIcon",SwigFXPyPCXIconToFXObject},
    { "_FXObject","_class_FXPCXIcon",SwigFXPCXIconToFXObject},
    { "_FXObject","_FXPCXIcon",SwigFXPCXIconToFXObject},
    { "_FXObject","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXObject},
    { "_FXObject","_FXPyXPMIcon",SwigFXPyXPMIconToFXObject},
    { "_FXObject","_class_FXXPMIcon",SwigFXXPMIconToFXObject},
    { "_FXObject","_FXXPMIcon",SwigFXXPMIconToFXObject},
    { "_FXObject","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXObject},
    { "_FXObject","_FXPyJPGIcon",SwigFXPyJPGIconToFXObject},
    { "_FXObject","_class_FXJPGIcon",SwigFXJPGIconToFXObject},
    { "_FXObject","_FXJPGIcon",SwigFXJPGIconToFXObject},
    { "_FXObject","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXObject},
    { "_FXObject","_FXPyPNGIcon",SwigFXPyPNGIconToFXObject},
    { "_FXObject","_class_FXPNGIcon",SwigFXPNGIconToFXObject},
    { "_FXObject","_FXPNGIcon",SwigFXPNGIconToFXObject},
    { "_FXObject","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXObject},
    { "_FXObject","_FXPyBMPIcon",SwigFXPyBMPIconToFXObject},
    { "_FXObject","_class_FXBMPIcon",SwigFXBMPIconToFXObject},
    { "_FXObject","_FXBMPIcon",SwigFXBMPIconToFXObject},
    { "_FXObject","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXObject},
    { "_FXObject","_FXPyGIFIcon",SwigFXPyGIFIconToFXObject},
    { "_FXObject","_class_FXGIFIcon",SwigFXGIFIconToFXObject},
    { "_FXObject","_FXGIFIcon",SwigFXGIFIconToFXObject},
    { "_FXObject","_class_FXPyIcon",SwigFXPyIconToFXObject},
    { "_FXObject","_FXPyIcon",SwigFXPyIconToFXObject},
    { "_FXObject","_class_FXIcon",SwigFXIconToFXObject},
    { "_FXObject","_FXIcon",SwigFXIconToFXObject},
    { "_FXObject","_class_FXPyICOImage",SwigFXPyICOImageToFXObject},
    { "_FXObject","_FXPyICOImage",SwigFXPyICOImageToFXObject},
    { "_FXObject","_class_FXICOImage",SwigFXICOImageToFXObject},
    { "_FXObject","_FXICOImage",SwigFXICOImageToFXObject},
    { "_FXObject","_class_FXPyRGBImage",SwigFXPyRGBImageToFXObject},
    { "_FXObject","_FXPyRGBImage",SwigFXPyRGBImageToFXObject},
    { "_FXObject","_class_FXRGBImage",SwigFXRGBImageToFXObject},
    { "_FXObject","_FXRGBImage",SwigFXRGBImageToFXObject},
    { "_FXObject","_class_FXPyTGAImage",SwigFXPyTGAImageToFXObject},
    { "_FXObject","_FXPyTGAImage",SwigFXPyTGAImageToFXObject},
    { "_FXObject","_class_FXTGAImage",SwigFXTGAImageToFXObject},
    { "_FXObject","_FXTGAImage",SwigFXTGAImageToFXObject},
    { "_FXObject","_class_FXPyTIFImage",SwigFXPyTIFImageToFXObject},
    { "_FXObject","_FXPyTIFImage",SwigFXPyTIFImageToFXObject},
    { "_FXObject","_class_FXTIFImage",SwigFXTIFImageToFXObject},
    { "_FXObject","_FXTIFImage",SwigFXTIFImageToFXObject},
    { "_FXObject","_class_FXPyPCXImage",SwigFXPyPCXImageToFXObject},
    { "_FXObject","_FXPyPCXImage",SwigFXPyPCXImageToFXObject},
    { "_FXObject","_class_FXPCXImage",SwigFXPCXImageToFXObject},
    { "_FXObject","_FXPCXImage",SwigFXPCXImageToFXObject},
    { "_FXObject","_class_FXPyXPMImage",SwigFXPyXPMImageToFXObject},
    { "_FXObject","_FXPyXPMImage",SwigFXPyXPMImageToFXObject},
    { "_FXObject","_class_FXXPMImage",SwigFXXPMImageToFXObject},
    { "_FXObject","_FXXPMImage",SwigFXXPMImageToFXObject},
    { "_FXObject","_class_FXPyJPGImage",SwigFXPyJPGImageToFXObject},
    { "_FXObject","_FXPyJPGImage",SwigFXPyJPGImageToFXObject},
    { "_FXObject","_class_FXJPGImage",SwigFXJPGImageToFXObject},
    { "_FXObject","_FXJPGImage",SwigFXJPGImageToFXObject},
    { "_FXObject","_class_FXPyPNGImage",SwigFXPyPNGImageToFXObject},
    { "_FXObject","_FXPyPNGImage",SwigFXPyPNGImageToFXObject},
    { "_FXObject","_class_FXPNGImage",SwigFXPNGImageToFXObject},
    { "_FXObject","_FXPNGImage",SwigFXPNGImageToFXObject},
    { "_FXObject","_class_FXPyBMPImage",SwigFXPyBMPImageToFXObject},
    { "_FXObject","_FXPyBMPImage",SwigFXPyBMPImageToFXObject},
    { "_FXObject","_class_FXBMPImage",SwigFXBMPImageToFXObject},
    { "_FXObject","_FXBMPImage",SwigFXBMPImageToFXObject},
    { "_FXObject","_class_FXPyGIFImage",SwigFXPyGIFImageToFXObject},
    { "_FXObject","_FXPyGIFImage",SwigFXPyGIFImageToFXObject},
    { "_FXObject","_class_FXGIFImage",SwigFXGIFImageToFXObject},
    { "_FXObject","_FXGIFImage",SwigFXGIFImageToFXObject},
    { "_FXObject","_class_FXPyImage",SwigFXPyImageToFXObject},
    { "_FXObject","_FXPyImage",SwigFXPyImageToFXObject},
    { "_FXObject","_class_FXImage",SwigFXImageToFXObject},
    { "_FXObject","_FXImage",SwigFXImageToFXObject},
    { "_FXObject","_class_FXPyFont",SwigFXPyFontToFXObject},
    { "_FXObject","_FXPyFont",SwigFXPyFontToFXObject},
    { "_FXObject","_class_FXFont",SwigFXFontToFXObject},
    { "_FXObject","_FXFont",SwigFXFontToFXObject},
    { "_FXObject","_class_FXPyVisual",SwigFXPyVisualToFXObject},
    { "_FXObject","_FXPyVisual",SwigFXPyVisualToFXObject},
    { "_FXObject","_class_FXVisual",SwigFXVisualToFXObject},
    { "_FXObject","_FXVisual",SwigFXVisualToFXObject},
    { "_FXObject","_class_FXPyApp",SwigFXPyAppToFXObject},
    { "_FXObject","_FXPyApp",SwigFXPyAppToFXObject},
    { "_FXObject","_class_FXApp",SwigFXAppToFXObject},
    { "_FXObject","_FXApp",SwigFXAppToFXObject},
    { "_FXObject","_class_FXPyDrawable",SwigFXPyDrawableToFXObject},
    { "_FXObject","_FXPyDrawable",SwigFXPyDrawableToFXObject},
    { "_FXObject","_class_FXDrawable",SwigFXDrawableToFXObject},
    { "_FXObject","_FXDrawable",SwigFXDrawableToFXObject},
    { "_FXObject","_class_FXPyId",SwigFXPyIdToFXObject},
    { "_FXObject","_FXPyId",SwigFXPyIdToFXObject},
    { "_FXObject","_class_FXId",SwigFXIdToFXObject},
    { "_FXObject","_FXId",SwigFXIdToFXObject},
    { "_FXObject","_class_FXPyObject",SwigFXPyObjectToFXObject},
    { "_FXObject","_FXPyObject",SwigFXPyObjectToFXObject},
    { "_FXObject","_class_FXObject",0},
    { "_FXPyGIFImage","_class_FXPyGIFImage",0},
    { "_FXBMPImage","_class_FXPyBMPImage",SwigFXPyBMPImageToFXBMPImage},
    { "_FXBMPImage","_FXPyBMPImage",SwigFXPyBMPImageToFXBMPImage},
    { "_FXBMPImage","_class_FXBMPImage",0},
    { "_FXICOImage","_class_FXPyICOImage",SwigFXPyICOImageToFXICOImage},
    { "_FXICOImage","_FXPyICOImage",SwigFXPyICOImageToFXICOImage},
    { "_FXICOImage","_class_FXICOImage",0},
    { "_class_FXRGBIcon","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXRGBIcon},
    { "_class_FXRGBIcon","_FXPyRGBIcon",SwigFXPyRGBIconToFXRGBIcon},
    { "_class_FXRGBIcon","_FXRGBIcon",0},
    { "_FXRecentFiles","_class_FXPyRecentFiles",SwigFXPyRecentFilesToFXRecentFiles},
    { "_FXRecentFiles","_FXPyRecentFiles",SwigFXPyRecentFilesToFXRecentFiles},
    { "_FXRecentFiles","_class_FXRecentFiles",0},
    { "_FXDebugTarget","_class_FXDebugTarget",0},
    { "_class_FXPyCommand","_FXPyCommand",0},
    { "_FXPCXImage","_class_FXPyPCXImage",SwigFXPyPCXImageToFXPCXImage},
    { "_FXPCXImage","_FXPyPCXImage",SwigFXPyPCXImageToFXPCXImage},
    { "_FXPCXImage","_class_FXPCXImage",0},
    { "_FXFileStream","_class_FXPyFileStream",SwigFXPyFileStreamToFXFileStream},
    { "_FXFileStream","_FXPyFileStream",SwigFXPyFileStreamToFXFileStream},
    { "_FXFileStream","_class_FXFileStream",0},
    { "_class_FXPyDelegator","_FXPyDelegator",0},
    { "_class_FXPyDrawable","_FXPyDrawable",0},
    { "_FXPyImage","_class_FXPyImage",0},
    { "_FXGIFIcon","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXGIFIcon},
    { "_FXGIFIcon","_FXPyGIFIcon",SwigFXPyGIFIconToFXGIFIcon},
    { "_FXGIFIcon","_class_FXGIFIcon",0},
    { "_FXColor","_FXInputHandle",0},
    { "_FXColor","_FXDragType",0},
    { "_FXColor","_FXHotKey",0},
    { "_FXColor","_FXuint",0},
    { "_FXColor","_int",0},
    { "_FXColor","_unsigned_int",0},
    { "_FXColor","_FXint",0},
    { "_FXColor","_FXSelector",0},
    { "_FXColor","_FXID",0},
    { "_FXPyJPGIcon","_class_FXPyJPGIcon",0},
    { "_FXDataTarget","_class_FXPyDebugTarget",SwigFXPyDebugTargetToFXDataTarget},
    { "_FXDataTarget","_FXPyDebugTarget",SwigFXPyDebugTargetToFXDataTarget},
    { "_FXDataTarget","_class_FXPyDataTarget",SwigFXPyDataTargetToFXDataTarget},
    { "_FXDataTarget","_FXPyDataTarget",SwigFXPyDataTargetToFXDataTarget},
    { "_FXDataTarget","_class_FXDataTarget",0},
    { "_FXTime","_FXPixel",0},
    { "_FXTime","_long",0},
    { "_FXTime","_signed_long",0},
    { "_FXTime","_unsigned_long",0},
    { "_FXHotKey","_FXInputHandle",0},
    { "_FXHotKey","_FXDragType",0},
    { "_FXHotKey","_FXuint",0},
    { "_FXHotKey","_int",0},
    { "_FXHotKey","_unsigned_int",0},
    { "_FXHotKey","_FXint",0},
    { "_FXHotKey","_FXSelector",0},
    { "_FXHotKey","_FXID",0},
    { "_FXHotKey","_FXColor",0},
    { "_class_FXSize","_FXSize",0},
    { "_class_FXPyObject","_FXPyObject",0},
    { "_struct_FXFontDesc","_FXFontDesc",0},
    { "_class_FXPyBMPIcon","_FXPyBMPIcon",0},
    { "_class_FXPyICOIcon","_FXPyICOIcon",0},
    { "_char","_FXchar",0},
    { "_FXdouble","_double",0},
    { "_FXStream","_class_FXPyFileStream",SwigFXPyFileStreamToFXStream},
    { "_FXStream","_FXPyFileStream",SwigFXPyFileStreamToFXStream},
    { "_FXStream","_class_FXFileStream",SwigFXFileStreamToFXStream},
    { "_FXStream","_FXFileStream",SwigFXFileStreamToFXStream},
    { "_FXStream","_class_FXPyStream",SwigFXPyStreamToFXStream},
    { "_FXStream","_FXPyStream",SwigFXPyStreamToFXStream},
    { "_FXStream","_class_FXStream",0},
    { "_FXPyStringDict","_class_FXPyStringDict",0},
    { "_FXObjectPtr","_FXObject_p",0},
    { "_class_FXDelegator","_class_FXPyDelegator",SwigFXPyDelegatorToFXDelegator},
    { "_class_FXDelegator","_FXPyDelegator",SwigFXPyDelegatorToFXDelegator},
    { "_class_FXDelegator","_FXDelegator",0},
    { "_FXbool","_FXuchar",0},
    { "_FXbool","_unsigned_char",0},
    { "_class_FXTGAImage","_class_FXPyTGAImage",SwigFXPyTGAImageToFXTGAImage},
    { "_class_FXTGAImage","_FXPyTGAImage",SwigFXPyTGAImageToFXTGAImage},
    { "_class_FXTGAImage","_FXTGAImage",0},
    { "_class_FXPyStream","_FXPyStream",0},
    { "_FXStringDict","_class_FXPyStringDict",SwigFXPyStringDictToFXStringDict},
    { "_FXStringDict","_FXPyStringDict",SwigFXPyStringDictToFXStringDict},
    { "_FXStringDict","_class_FXStringDict",0},
    { "_class_FXPyApp","_FXPyApp",0},
    { "_class_FXPyXPMImage","_FXPyXPMImage",0},
    { "_class_FXPyGIFImage","_FXPyGIFImage",0},
    { "_class_FXFileStream","_class_FXPyFileStream",SwigFXPyFileStreamToFXFileStream},
    { "_class_FXFileStream","_FXPyFileStream",SwigFXPyFileStreamToFXFileStream},
    { "_class_FXFileStream","_FXFileStream",0},
    { "_class_FXPyImage","_FXPyImage",0},
    { "_class_FXGIFIcon","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXGIFIcon},
    { "_class_FXGIFIcon","_FXPyGIFIcon",SwigFXPyGIFIconToFXGIFIcon},
    { "_class_FXGIFIcon","_FXGIFIcon",0},
    { "_class_FXPyRGBIcon","_FXPyRGBIcon",0},
    { "_unsigned_long","_FXPixel",0},
    { "_unsigned_long","_FXTime",0},
    { "_unsigned_long","_long",0},
    { "_class_FXDataTarget","_class_FXPyDebugTarget",SwigFXPyDebugTargetToFXDataTarget},
    { "_class_FXDataTarget","_FXPyDebugTarget",SwigFXPyDebugTargetToFXDataTarget},
    { "_class_FXDataTarget","_class_FXPyDataTarget",SwigFXPyDataTargetToFXDataTarget},
    { "_class_FXDataTarget","_FXPyDataTarget",SwigFXPyDataTargetToFXDataTarget},
    { "_class_FXDataTarget","_FXDataTarget",0},
    { "_FXPCXIcon","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXPCXIcon},
    { "_FXPCXIcon","_FXPyPCXIcon",SwigFXPyPCXIconToFXPCXIcon},
    { "_FXPCXIcon","_class_FXPCXIcon",0},
    { "_class_FXJPGImage","_class_FXPyJPGImage",SwigFXPyJPGImageToFXJPGImage},
    { "_class_FXJPGImage","_FXPyJPGImage",SwigFXPyJPGImageToFXJPGImage},
    { "_class_FXJPGImage","_FXJPGImage",0},
    { "_class_FXPyIcon","_FXPyIcon",0},
    { "_class_FXPyAccelTable","_FXPyAccelTable",0},
    { "_FXVisual","_class_FXPyVisual",SwigFXPyVisualToFXVisual},
    { "_FXVisual","_FXPyVisual",SwigFXPyVisualToFXVisual},
    { "_FXVisual","_class_FXVisual",0},
    { "_FXPyTIFImage","_class_FXPyTIFImage",0},
    { "_FXPNGIcon","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXPNGIcon},
    { "_FXPNGIcon","_FXPyPNGIcon",SwigFXPyPNGIconToFXPNGIcon},
    { "_FXPNGIcon","_class_FXPNGIcon",0},
    { "_signed_int","_FXInputHandle",0},
    { "_signed_int","_FXint",0},
    { "_signed_int","_int",0},
    { "_FXPNGImage","_class_FXPyPNGImage",SwigFXPyPNGImageToFXPNGImage},
    { "_FXPNGImage","_FXPyPNGImage",SwigFXPyPNGImageToFXPNGImage},
    { "_FXPNGImage","_class_FXPNGImage",0},
    { "_FXPyTGAIcon","_class_FXPyTGAIcon",0},
    { "_FXPyDict","_class_FXPyDict",0},
    { "_class_FXStringDict","_class_FXPyStringDict",SwigFXPyStringDictToFXStringDict},
    { "_class_FXStringDict","_FXPyStringDict",SwigFXPyStringDictToFXStringDict},
    { "_class_FXStringDict","_FXStringDict",0},
    { "_FXRegion","_class_FXRegion",0},
    { "_FXRawEvent","__XEvent",0},
    { "_class_FXPyVisual","_FXPyVisual",0},
    { "_class_FXRGBImage","_class_FXPyRGBImage",SwigFXPyRGBImageToFXRGBImage},
    { "_class_FXRGBImage","_FXPyRGBImage",SwigFXPyRGBImageToFXRGBImage},
    { "_class_FXRGBImage","_FXRGBImage",0},
    { "_unsigned_short","_FXshort",0},
    { "_unsigned_short","_FXushort",0},
    { "_unsigned_short","_short",0},
    { "_class_FXBMPImage","_class_FXPyBMPImage",SwigFXPyBMPImageToFXBMPImage},
    { "_class_FXBMPImage","_FXPyBMPImage",SwigFXPyBMPImageToFXBMPImage},
    { "_class_FXBMPImage","_FXBMPImage",0},
    { "_class_FXICOImage","_class_FXPyICOImage",SwigFXPyICOImageToFXICOImage},
    { "_class_FXICOImage","_FXPyICOImage",SwigFXPyICOImageToFXICOImage},
    { "_class_FXICOImage","_FXICOImage",0},
    { "_class_FXRecentFiles","_class_FXPyRecentFiles",SwigFXPyRecentFilesToFXRecentFiles},
    { "_class_FXRecentFiles","_FXPyRecentFiles",SwigFXPyRecentFilesToFXRecentFiles},
    { "_class_FXRecentFiles","_FXRecentFiles",0},
    { "_class_FXDebugTarget","_FXDebugTarget",0},
    { "_FXDrawable","_class_FXPyICOIcon",SwigFXPyICOIconToFXDrawable},
    { "_FXDrawable","_FXPyICOIcon",SwigFXPyICOIconToFXDrawable},
    { "_FXDrawable","_class_FXICOIcon",SwigFXICOIconToFXDrawable},
    { "_FXDrawable","_FXICOIcon",SwigFXICOIconToFXDrawable},
    { "_FXDrawable","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXDrawable},
    { "_FXDrawable","_FXPyRGBIcon",SwigFXPyRGBIconToFXDrawable},
    { "_FXDrawable","_class_FXRGBIcon",SwigFXRGBIconToFXDrawable},
    { "_FXDrawable","_FXRGBIcon",SwigFXRGBIconToFXDrawable},
    { "_FXDrawable","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXDrawable},
    { "_FXDrawable","_FXPyTGAIcon",SwigFXPyTGAIconToFXDrawable},
    { "_FXDrawable","_class_FXTGAIcon",SwigFXTGAIconToFXDrawable},
    { "_FXDrawable","_FXTGAIcon",SwigFXTGAIconToFXDrawable},
    { "_FXDrawable","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXDrawable},
    { "_FXDrawable","_FXPyTIFIcon",SwigFXPyTIFIconToFXDrawable},
    { "_FXDrawable","_class_FXTIFIcon",SwigFXTIFIconToFXDrawable},
    { "_FXDrawable","_FXTIFIcon",SwigFXTIFIconToFXDrawable},
    { "_FXDrawable","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXDrawable},
    { "_FXDrawable","_FXPyPCXIcon",SwigFXPyPCXIconToFXDrawable},
    { "_FXDrawable","_class_FXPCXIcon",SwigFXPCXIconToFXDrawable},
    { "_FXDrawable","_FXPCXIcon",SwigFXPCXIconToFXDrawable},
    { "_FXDrawable","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXDrawable},
    { "_FXDrawable","_FXPyXPMIcon",SwigFXPyXPMIconToFXDrawable},
    { "_FXDrawable","_class_FXXPMIcon",SwigFXXPMIconToFXDrawable},
    { "_FXDrawable","_FXXPMIcon",SwigFXXPMIconToFXDrawable},
    { "_FXDrawable","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXDrawable},
    { "_FXDrawable","_FXPyJPGIcon",SwigFXPyJPGIconToFXDrawable},
    { "_FXDrawable","_class_FXJPGIcon",SwigFXJPGIconToFXDrawable},
    { "_FXDrawable","_FXJPGIcon",SwigFXJPGIconToFXDrawable},
    { "_FXDrawable","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXDrawable},
    { "_FXDrawable","_FXPyPNGIcon",SwigFXPyPNGIconToFXDrawable},
    { "_FXDrawable","_class_FXPNGIcon",SwigFXPNGIconToFXDrawable},
    { "_FXDrawable","_FXPNGIcon",SwigFXPNGIconToFXDrawable},
    { "_FXDrawable","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXDrawable},
    { "_FXDrawable","_FXPyBMPIcon",SwigFXPyBMPIconToFXDrawable},
    { "_FXDrawable","_class_FXBMPIcon",SwigFXBMPIconToFXDrawable},
    { "_FXDrawable","_FXBMPIcon",SwigFXBMPIconToFXDrawable},
    { "_FXDrawable","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXDrawable},
    { "_FXDrawable","_FXPyGIFIcon",SwigFXPyGIFIconToFXDrawable},
    { "_FXDrawable","_class_FXGIFIcon",SwigFXGIFIconToFXDrawable},
    { "_FXDrawable","_FXGIFIcon",SwigFXGIFIconToFXDrawable},
    { "_FXDrawable","_class_FXPyIcon",SwigFXPyIconToFXDrawable},
    { "_FXDrawable","_FXPyIcon",SwigFXPyIconToFXDrawable},
    { "_FXDrawable","_class_FXIcon",SwigFXIconToFXDrawable},
    { "_FXDrawable","_FXIcon",SwigFXIconToFXDrawable},
    { "_FXDrawable","_class_FXPyICOImage",SwigFXPyICOImageToFXDrawable},
    { "_FXDrawable","_FXPyICOImage",SwigFXPyICOImageToFXDrawable},
    { "_FXDrawable","_class_FXICOImage",SwigFXICOImageToFXDrawable},
    { "_FXDrawable","_FXICOImage",SwigFXICOImageToFXDrawable},
    { "_FXDrawable","_class_FXPyRGBImage",SwigFXPyRGBImageToFXDrawable},
    { "_FXDrawable","_FXPyRGBImage",SwigFXPyRGBImageToFXDrawable},
    { "_FXDrawable","_class_FXRGBImage",SwigFXRGBImageToFXDrawable},
    { "_FXDrawable","_FXRGBImage",SwigFXRGBImageToFXDrawable},
    { "_FXDrawable","_class_FXPyTGAImage",SwigFXPyTGAImageToFXDrawable},
    { "_FXDrawable","_FXPyTGAImage",SwigFXPyTGAImageToFXDrawable},
    { "_FXDrawable","_class_FXTGAImage",SwigFXTGAImageToFXDrawable},
    { "_FXDrawable","_FXTGAImage",SwigFXTGAImageToFXDrawable},
    { "_FXDrawable","_class_FXPyTIFImage",SwigFXPyTIFImageToFXDrawable},
    { "_FXDrawable","_FXPyTIFImage",SwigFXPyTIFImageToFXDrawable},
    { "_FXDrawable","_class_FXTIFImage",SwigFXTIFImageToFXDrawable},
    { "_FXDrawable","_FXTIFImage",SwigFXTIFImageToFXDrawable},
    { "_FXDrawable","_class_FXPyPCXImage",SwigFXPyPCXImageToFXDrawable},
    { "_FXDrawable","_FXPyPCXImage",SwigFXPyPCXImageToFXDrawable},
    { "_FXDrawable","_class_FXPCXImage",SwigFXPCXImageToFXDrawable},
    { "_FXDrawable","_FXPCXImage",SwigFXPCXImageToFXDrawable},
    { "_FXDrawable","_class_FXPyXPMImage",SwigFXPyXPMImageToFXDrawable},
    { "_FXDrawable","_FXPyXPMImage",SwigFXPyXPMImageToFXDrawable},
    { "_FXDrawable","_class_FXXPMImage",SwigFXXPMImageToFXDrawable},
    { "_FXDrawable","_FXXPMImage",SwigFXXPMImageToFXDrawable},
    { "_FXDrawable","_class_FXPyJPGImage",SwigFXPyJPGImageToFXDrawable},
    { "_FXDrawable","_FXPyJPGImage",SwigFXPyJPGImageToFXDrawable},
    { "_FXDrawable","_class_FXJPGImage",SwigFXJPGImageToFXDrawable},
    { "_FXDrawable","_FXJPGImage",SwigFXJPGImageToFXDrawable},
    { "_FXDrawable","_class_FXPyPNGImage",SwigFXPyPNGImageToFXDrawable},
    { "_FXDrawable","_FXPyPNGImage",SwigFXPyPNGImageToFXDrawable},
    { "_FXDrawable","_class_FXPNGImage",SwigFXPNGImageToFXDrawable},
    { "_FXDrawable","_FXPNGImage",SwigFXPNGImageToFXDrawable},
    { "_FXDrawable","_class_FXPyBMPImage",SwigFXPyBMPImageToFXDrawable},
    { "_FXDrawable","_FXPyBMPImage",SwigFXPyBMPImageToFXDrawable},
    { "_FXDrawable","_class_FXBMPImage",SwigFXBMPImageToFXDrawable},
    { "_FXDrawable","_FXBMPImage",SwigFXBMPImageToFXDrawable},
    { "_FXDrawable","_class_FXPyGIFImage",SwigFXPyGIFImageToFXDrawable},
    { "_FXDrawable","_FXPyGIFImage",SwigFXPyGIFImageToFXDrawable},
    { "_FXDrawable","_class_FXGIFImage",SwigFXGIFImageToFXDrawable},
    { "_FXDrawable","_FXGIFImage",SwigFXGIFImageToFXDrawable},
    { "_FXDrawable","_class_FXPyImage",SwigFXPyImageToFXDrawable},
    { "_FXDrawable","_FXPyImage",SwigFXPyImageToFXDrawable},
    { "_FXDrawable","_class_FXImage",SwigFXImageToFXDrawable},
    { "_FXDrawable","_FXImage",SwigFXImageToFXDrawable},
    { "_FXDrawable","_class_FXPyDrawable",SwigFXPyDrawableToFXDrawable},
    { "_FXDrawable","_FXPyDrawable",SwigFXPyDrawableToFXDrawable},
    { "_FXDrawable","_class_FXDrawable",0},
    { "_class_FXPCXImage","_class_FXPyPCXImage",SwigFXPyPCXImageToFXPCXImage},
    { "_class_FXPCXImage","_FXPyPCXImage",SwigFXPyPCXImageToFXPCXImage},
    { "_class_FXPCXImage","_FXPCXImage",0},
    { "_FXJPGIcon","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXJPGIcon},
    { "_FXJPGIcon","_FXPyJPGIcon",SwigFXPyJPGIconToFXJPGIcon},
    { "_FXJPGIcon","_class_FXJPGIcon",0},
    { "_FXPyXPMIcon","_class_FXPyXPMIcon",0},
    { "_FXObject_p","_FXObjectPtr",0},
    { "_FXID","_FXInputHandle",0},
    { "_FXID","_FXDragType",0},
    { "_FXID","_FXHotKey",0},
    { "_FXID","_FXColor",0},
    { "_FXID","_unsigned_int",0},
    { "_FXID","_int",0},
    { "_FXID","_FXuint",0},
    { "_FXID","_FXint",0},
    { "_FXID","_FXSelector",0},
    { "_class_FXPyGIFIcon","_FXPyGIFIcon",0},
    { "_struct_FXPrinter","_FXPrinter",0},
    { "_FXPyTIFIcon","_class_FXPyTIFIcon",0},
    { "_class_FXPCXIcon","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXPCXIcon},
    { "_class_FXPCXIcon","_FXPyPCXIcon",SwigFXPyPCXIconToFXPCXIcon},
    { "_class_FXPCXIcon","_FXPCXIcon",0},
    { "_signed_short","_FXshort",0},
    { "_signed_short","_short",0},
    { "_FXfloat","_float",0},
    { "_FXEvent","_struct_FXEvent",0},
    { "_class_FXPyTIFImage","_FXPyTIFImage",0},
    { "_class_FXPNGIcon","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXPNGIcon},
    { "_class_FXPNGIcon","_FXPyPNGIcon",SwigFXPyPNGIconToFXPNGIcon},
    { "_class_FXPNGIcon","_FXPNGIcon",0},
    { "_unsigned_char","_FXbool",0},
    { "_unsigned_char","_FXuchar",0},
    { "_FXPixel","_unsigned_long",0},
    { "_FXPixel","_long",0},
    { "_FXPixel","_FXTime",0},
    { "_FXImage","_class_FXPyICOIcon",SwigFXPyICOIconToFXImage},
    { "_FXImage","_FXPyICOIcon",SwigFXPyICOIconToFXImage},
    { "_FXImage","_class_FXICOIcon",SwigFXICOIconToFXImage},
    { "_FXImage","_FXICOIcon",SwigFXICOIconToFXImage},
    { "_FXImage","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXImage},
    { "_FXImage","_FXPyRGBIcon",SwigFXPyRGBIconToFXImage},
    { "_FXImage","_class_FXRGBIcon",SwigFXRGBIconToFXImage},
    { "_FXImage","_FXRGBIcon",SwigFXRGBIconToFXImage},
    { "_FXImage","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXImage},
    { "_FXImage","_FXPyTGAIcon",SwigFXPyTGAIconToFXImage},
    { "_FXImage","_class_FXTGAIcon",SwigFXTGAIconToFXImage},
    { "_FXImage","_FXTGAIcon",SwigFXTGAIconToFXImage},
    { "_FXImage","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXImage},
    { "_FXImage","_FXPyTIFIcon",SwigFXPyTIFIconToFXImage},
    { "_FXImage","_class_FXTIFIcon",SwigFXTIFIconToFXImage},
    { "_FXImage","_FXTIFIcon",SwigFXTIFIconToFXImage},
    { "_FXImage","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXImage},
    { "_FXImage","_FXPyPCXIcon",SwigFXPyPCXIconToFXImage},
    { "_FXImage","_class_FXPCXIcon",SwigFXPCXIconToFXImage},
    { "_FXImage","_FXPCXIcon",SwigFXPCXIconToFXImage},
    { "_FXImage","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXImage},
    { "_FXImage","_FXPyXPMIcon",SwigFXPyXPMIconToFXImage},
    { "_FXImage","_class_FXXPMIcon",SwigFXXPMIconToFXImage},
    { "_FXImage","_FXXPMIcon",SwigFXXPMIconToFXImage},
    { "_FXImage","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXImage},
    { "_FXImage","_FXPyJPGIcon",SwigFXPyJPGIconToFXImage},
    { "_FXImage","_class_FXJPGIcon",SwigFXJPGIconToFXImage},
    { "_FXImage","_FXJPGIcon",SwigFXJPGIconToFXImage},
    { "_FXImage","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXImage},
    { "_FXImage","_FXPyPNGIcon",SwigFXPyPNGIconToFXImage},
    { "_FXImage","_class_FXPNGIcon",SwigFXPNGIconToFXImage},
    { "_FXImage","_FXPNGIcon",SwigFXPNGIconToFXImage},
    { "_FXImage","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXImage},
    { "_FXImage","_FXPyBMPIcon",SwigFXPyBMPIconToFXImage},
    { "_FXImage","_class_FXBMPIcon",SwigFXBMPIconToFXImage},
    { "_FXImage","_FXBMPIcon",SwigFXBMPIconToFXImage},
    { "_FXImage","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXImage},
    { "_FXImage","_FXPyGIFIcon",SwigFXPyGIFIconToFXImage},
    { "_FXImage","_class_FXGIFIcon",SwigFXGIFIconToFXImage},
    { "_FXImage","_FXGIFIcon",SwigFXGIFIconToFXImage},
    { "_FXImage","_class_FXPyIcon",SwigFXPyIconToFXImage},
    { "_FXImage","_FXPyIcon",SwigFXPyIconToFXImage},
    { "_FXImage","_class_FXIcon",SwigFXIconToFXImage},
    { "_FXImage","_FXIcon",SwigFXIconToFXImage},
    { "_FXImage","_class_FXPyICOImage",SwigFXPyICOImageToFXImage},
    { "_FXImage","_FXPyICOImage",SwigFXPyICOImageToFXImage},
    { "_FXImage","_class_FXICOImage",SwigFXICOImageToFXImage},
    { "_FXImage","_FXICOImage",SwigFXICOImageToFXImage},
    { "_FXImage","_class_FXPyRGBImage",SwigFXPyRGBImageToFXImage},
    { "_FXImage","_FXPyRGBImage",SwigFXPyRGBImageToFXImage},
    { "_FXImage","_class_FXRGBImage",SwigFXRGBImageToFXImage},
    { "_FXImage","_FXRGBImage",SwigFXRGBImageToFXImage},
    { "_FXImage","_class_FXPyTGAImage",SwigFXPyTGAImageToFXImage},
    { "_FXImage","_FXPyTGAImage",SwigFXPyTGAImageToFXImage},
    { "_FXImage","_class_FXTGAImage",SwigFXTGAImageToFXImage},
    { "_FXImage","_FXTGAImage",SwigFXTGAImageToFXImage},
    { "_FXImage","_class_FXPyTIFImage",SwigFXPyTIFImageToFXImage},
    { "_FXImage","_FXPyTIFImage",SwigFXPyTIFImageToFXImage},
    { "_FXImage","_class_FXTIFImage",SwigFXTIFImageToFXImage},
    { "_FXImage","_FXTIFImage",SwigFXTIFImageToFXImage},
    { "_FXImage","_class_FXPyPCXImage",SwigFXPyPCXImageToFXImage},
    { "_FXImage","_FXPyPCXImage",SwigFXPyPCXImageToFXImage},
    { "_FXImage","_class_FXPCXImage",SwigFXPCXImageToFXImage},
    { "_FXImage","_FXPCXImage",SwigFXPCXImageToFXImage},
    { "_FXImage","_class_FXPyXPMImage",SwigFXPyXPMImageToFXImage},
    { "_FXImage","_FXPyXPMImage",SwigFXPyXPMImageToFXImage},
    { "_FXImage","_class_FXXPMImage",SwigFXXPMImageToFXImage},
    { "_FXImage","_FXXPMImage",SwigFXXPMImageToFXImage},
    { "_FXImage","_class_FXPyJPGImage",SwigFXPyJPGImageToFXImage},
    { "_FXImage","_FXPyJPGImage",SwigFXPyJPGImageToFXImage},
    { "_FXImage","_class_FXJPGImage",SwigFXJPGImageToFXImage},
    { "_FXImage","_FXJPGImage",SwigFXJPGImageToFXImage},
    { "_FXImage","_class_FXPyPNGImage",SwigFXPyPNGImageToFXImage},
    { "_FXImage","_FXPyPNGImage",SwigFXPyPNGImageToFXImage},
    { "_FXImage","_class_FXPNGImage",SwigFXPNGImageToFXImage},
    { "_FXImage","_FXPNGImage",SwigFXPNGImageToFXImage},
    { "_FXImage","_class_FXPyBMPImage",SwigFXPyBMPImageToFXImage},
    { "_FXImage","_FXPyBMPImage",SwigFXPyBMPImageToFXImage},
    { "_FXImage","_class_FXBMPImage",SwigFXBMPImageToFXImage},
    { "_FXImage","_FXBMPImage",SwigFXBMPImageToFXImage},
    { "_FXImage","_class_FXPyGIFImage",SwigFXPyGIFImageToFXImage},
    { "_FXImage","_FXPyGIFImage",SwigFXPyGIFImageToFXImage},
    { "_FXImage","_class_FXGIFImage",SwigFXGIFImageToFXImage},
    { "_FXImage","_FXGIFImage",SwigFXGIFImageToFXImage},
    { "_FXImage","_class_FXPyImage",SwigFXPyImageToFXImage},
    { "_FXImage","_FXPyImage",SwigFXPyImageToFXImage},
    { "_FXImage","_class_FXImage",0},
    { "_unsigned_int","_FXInputHandle",0},
    { "_unsigned_int","_FXDragType",0},
    { "_unsigned_int","_FXHotKey",0},
    { "_unsigned_int","_FXColor",0},
    { "_unsigned_int","_FXID",0},
    { "_unsigned_int","_FXSelector",0},
    { "_unsigned_int","_FXint",0},
    { "_unsigned_int","_FXuint",0},
    { "_unsigned_int","_int",0},
    { "_FXPyTGAImage","_class_FXPyTGAImage",0},
    { "_FXDict","_class_FXPyStringDict",SwigFXPyStringDictToFXDict},
    { "_FXDict","_FXPyStringDict",SwigFXPyStringDictToFXDict},
    { "_FXDict","_class_FXStringDict",SwigFXStringDictToFXDict},
    { "_FXDict","_FXStringDict",SwigFXStringDictToFXDict},
    { "_FXDict","_class_FXPyDict",SwigFXPyDictToFXDict},
    { "_FXDict","_FXPyDict",SwigFXPyDictToFXDict},
    { "_FXDict","_class_FXDict",0},
    { "_FXuint","_FXInputHandle",0},
    { "_FXuint","_FXDragType",0},
    { "_FXuint","_FXHotKey",0},
    { "_FXuint","_FXColor",0},
    { "_FXuint","_FXID",0},
    { "_FXuint","_FXSelector",0},
    { "_FXuint","_FXint",0},
    { "_FXuint","_unsigned_int",0},
    { "_FXuint","_int",0},
    { "_short","_FXshort",0},
    { "_short","_FXushort",0},
    { "_short","_unsigned_short",0},
    { "_short","_signed_short",0},
    { "_FXRectangle","_class_FXRectangle",0},
    { "_FXPyFont","_class_FXPyFont",0},
    { "_class_FXApp","_class_FXPyApp",SwigFXPyAppToFXApp},
    { "_class_FXApp","_FXPyApp",SwigFXPyAppToFXApp},
    { "_class_FXApp","_FXApp",0},
    { "_FXXPMImage","_class_FXPyXPMImage",SwigFXPyXPMImageToFXXPMImage},
    { "_FXXPMImage","_FXPyXPMImage",SwigFXPyXPMImageToFXXPMImage},
    { "_FXXPMImage","_class_FXXPMImage",0},
    { "_FXGIFImage","_class_FXPyGIFImage",SwigFXPyGIFImageToFXGIFImage},
    { "_FXGIFImage","_FXPyGIFImage",SwigFXPyGIFImageToFXGIFImage},
    { "_FXGIFImage","_class_FXGIFImage",0},
    { "_FXPyCommand","_class_FXPyCommand",0},
    { "_class_FXJPGIcon","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXJPGIcon},
    { "_class_FXJPGIcon","_FXPyJPGIcon",SwigFXPyJPGIconToFXJPGIcon},
    { "_class_FXJPGIcon","_FXJPGIcon",0},
    { "_FXchar","_char",0},
    { "_FXuchar","_FXbool",0},
    { "_FXuchar","_unsigned_char",0},
    { "_int","_FXInputHandle",0},
    { "_int","_FXDragType",0},
    { "_int","_FXHotKey",0},
    { "_int","_FXColor",0},
    { "_int","_FXID",0},
    { "_int","_FXSelector",0},
    { "_int","_FXint",0},
    { "_int","_FXuint",0},
    { "_int","_unsigned_int",0},
    { "_int","_signed_int",0},
    { "_FXDragType","_FXInputHandle",0},
    { "_FXDragType","_FXID",0},
    { "_FXDragType","_FXSelector",0},
    { "_FXDragType","_FXint",0},
    { "_FXDragType","_FXuint",0},
    { "_FXDragType","_int",0},
    { "_FXDragType","_unsigned_int",0},
    { "_FXDragType","_FXColor",0},
    { "_FXDragType","_FXHotKey",0},
    { "_FXSettings","_class_FXRegistry",SwigFXRegistryToFXSettings},
    { "_FXSettings","_FXRegistry",SwigFXRegistryToFXSettings},
    { "_FXSettings","_class_FXSettings",0},
    { "_FXRegistry","_class_FXRegistry",0},
    { "_FXPyBMPIcon","_class_FXPyBMPIcon",0},
    { "_FXPyICOIcon","_class_FXPyICOIcon",0},
    { "_FXPSBounds","_struct_FXPSBounds",0},
    { "_FXPyJPGImage","_class_FXPyJPGImage",0},
    { "_class_FXPyPCXIcon","_FXPyPCXIcon",0},
    { "_FXTGAIcon","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXTGAIcon},
    { "_FXTGAIcon","_FXPyTGAIcon",SwigFXPyTGAIconToFXTGAIcon},
    { "_FXTGAIcon","_class_FXTGAIcon",0},
    { "_FXDelegator","_class_FXPyDelegator",SwigFXPyDelegatorToFXDelegator},
    { "_FXDelegator","_FXPyDelegator",SwigFXPyDelegatorToFXDelegator},
    { "_FXDelegator","_class_FXDelegator",0},
    { "_class_FXPNGImage","_class_FXPyPNGImage",SwigFXPyPNGImageToFXPNGImage},
    { "_class_FXPNGImage","_FXPyPNGImage",SwigFXPyPNGImageToFXPNGImage},
    { "_class_FXPNGImage","_FXPNGImage",0},
    { "_class_FXPyPNGIcon","_FXPyPNGIcon",0},
    { "_class_FXPyTGAImage","_FXPyTGAImage",0},
    { "_class_FXDict","_class_FXPyStringDict",SwigFXPyStringDictToFXDict},
    { "_class_FXDict","_FXPyStringDict",SwigFXPyStringDictToFXDict},
    { "_class_FXDict","_class_FXStringDict",SwigFXStringDictToFXDict},
    { "_class_FXDict","_FXStringDict",SwigFXStringDictToFXDict},
    { "_class_FXDict","_class_FXPyDict",SwigFXPyDictToFXDict},
    { "_class_FXDict","_FXPyDict",SwigFXPyDictToFXDict},
    { "_class_FXDict","_FXDict",0},
    { "_FXInputHandle","_FXint",0},
    { "_FXInputHandle","_FXuint",0},
    { "_FXInputHandle","_unsigned_int",0},
    { "_FXInputHandle","_signed_int",0},
    { "_FXInputHandle","_int",0},
    { "_FXInputHandle","_FXSelector",0},
    { "_FXInputHandle","_FXID",0},
    { "_FXInputHandle","_FXColor",0},
    { "_FXInputHandle","_FXHotKey",0},
    { "_FXInputHandle","_FXDragType",0},
    { "_class_FXPyFileStream","_FXPyFileStream",0},
    { "_FXFont","_class_FXPyFont",SwigFXPyFontToFXFont},
    { "_FXFont","_FXPyFont",SwigFXPyFontToFXFont},
    { "_FXFont","_class_FXFont",0},
    { "_FXPyRGBImage","_class_FXPyRGBImage",0},
    { "_class_FXPyDataTarget","_FXPyDataTarget",0},
    { "_class_FXObject","_class_FXPyDebugTarget",SwigFXPyDebugTargetToFXObject},
    { "_class_FXObject","_FXPyDebugTarget",SwigFXPyDebugTargetToFXObject},
    { "_class_FXObject","_class_FXDebugTarget",SwigFXDebugTargetToFXObject},
    { "_class_FXObject","_FXDebugTarget",SwigFXDebugTargetToFXObject},
    { "_class_FXObject","_class_FXPyDataTarget",SwigFXPyDataTargetToFXObject},
    { "_class_FXObject","_FXPyDataTarget",SwigFXPyDataTargetToFXObject},
    { "_class_FXObject","_class_FXDataTarget",SwigFXDataTargetToFXObject},
    { "_class_FXObject","_FXDataTarget",SwigFXDataTargetToFXObject},
    { "_class_FXObject","_class_FXPyDelegator",SwigFXPyDelegatorToFXObject},
    { "_class_FXObject","_FXPyDelegator",SwigFXPyDelegatorToFXObject},
    { "_class_FXObject","_class_FXDelegator",SwigFXDelegatorToFXObject},
    { "_class_FXObject","_FXDelegator",SwigFXDelegatorToFXObject},
    { "_class_FXObject","_class_FXPyStringDict",SwigFXPyStringDictToFXObject},
    { "_class_FXObject","_FXPyStringDict",SwigFXPyStringDictToFXObject},
    { "_class_FXObject","_class_FXStringDict",SwigFXStringDictToFXObject},
    { "_class_FXObject","_FXStringDict",SwigFXStringDictToFXObject},
    { "_class_FXObject","_class_FXPyDict",SwigFXPyDictToFXObject},
    { "_class_FXObject","_FXPyDict",SwigFXPyDictToFXObject},
    { "_class_FXObject","_class_FXDict",SwigFXDictToFXObject},
    { "_class_FXObject","_FXDict",SwigFXDictToFXObject},
    { "_class_FXObject","_class_FXPyRecentFiles",SwigFXPyRecentFilesToFXObject},
    { "_class_FXObject","_FXPyRecentFiles",SwigFXPyRecentFilesToFXObject},
    { "_class_FXObject","_class_FXRecentFiles",SwigFXRecentFilesToFXObject},
    { "_class_FXObject","_FXRecentFiles",SwigFXRecentFilesToFXObject},
    { "_class_FXObject","_class_FXPyAccelTable",SwigFXPyAccelTableToFXObject},
    { "_class_FXObject","_FXPyAccelTable",SwigFXPyAccelTableToFXObject},
    { "_class_FXObject","_class_FXAccelTable",SwigFXAccelTableToFXObject},
    { "_class_FXObject","_FXAccelTable",SwigFXAccelTableToFXObject},
    { "_class_FXObject","_class_FXPyICOIcon",SwigFXPyICOIconToFXObject},
    { "_class_FXObject","_FXPyICOIcon",SwigFXPyICOIconToFXObject},
    { "_class_FXObject","_class_FXICOIcon",SwigFXICOIconToFXObject},
    { "_class_FXObject","_FXICOIcon",SwigFXICOIconToFXObject},
    { "_class_FXObject","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXObject},
    { "_class_FXObject","_FXPyRGBIcon",SwigFXPyRGBIconToFXObject},
    { "_class_FXObject","_class_FXRGBIcon",SwigFXRGBIconToFXObject},
    { "_class_FXObject","_FXRGBIcon",SwigFXRGBIconToFXObject},
    { "_class_FXObject","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXObject},
    { "_class_FXObject","_FXPyTGAIcon",SwigFXPyTGAIconToFXObject},
    { "_class_FXObject","_class_FXTGAIcon",SwigFXTGAIconToFXObject},
    { "_class_FXObject","_FXTGAIcon",SwigFXTGAIconToFXObject},
    { "_class_FXObject","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXObject},
    { "_class_FXObject","_FXPyTIFIcon",SwigFXPyTIFIconToFXObject},
    { "_class_FXObject","_class_FXTIFIcon",SwigFXTIFIconToFXObject},
    { "_class_FXObject","_FXTIFIcon",SwigFXTIFIconToFXObject},
    { "_class_FXObject","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXObject},
    { "_class_FXObject","_FXPyPCXIcon",SwigFXPyPCXIconToFXObject},
    { "_class_FXObject","_class_FXPCXIcon",SwigFXPCXIconToFXObject},
    { "_class_FXObject","_FXPCXIcon",SwigFXPCXIconToFXObject},
    { "_class_FXObject","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXObject},
    { "_class_FXObject","_FXPyXPMIcon",SwigFXPyXPMIconToFXObject},
    { "_class_FXObject","_class_FXXPMIcon",SwigFXXPMIconToFXObject},
    { "_class_FXObject","_FXXPMIcon",SwigFXXPMIconToFXObject},
    { "_class_FXObject","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXObject},
    { "_class_FXObject","_FXPyJPGIcon",SwigFXPyJPGIconToFXObject},
    { "_class_FXObject","_class_FXJPGIcon",SwigFXJPGIconToFXObject},
    { "_class_FXObject","_FXJPGIcon",SwigFXJPGIconToFXObject},
    { "_class_FXObject","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXObject},
    { "_class_FXObject","_FXPyPNGIcon",SwigFXPyPNGIconToFXObject},
    { "_class_FXObject","_class_FXPNGIcon",SwigFXPNGIconToFXObject},
    { "_class_FXObject","_FXPNGIcon",SwigFXPNGIconToFXObject},
    { "_class_FXObject","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXObject},
    { "_class_FXObject","_FXPyBMPIcon",SwigFXPyBMPIconToFXObject},
    { "_class_FXObject","_class_FXBMPIcon",SwigFXBMPIconToFXObject},
    { "_class_FXObject","_FXBMPIcon",SwigFXBMPIconToFXObject},
    { "_class_FXObject","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXObject},
    { "_class_FXObject","_FXPyGIFIcon",SwigFXPyGIFIconToFXObject},
    { "_class_FXObject","_class_FXGIFIcon",SwigFXGIFIconToFXObject},
    { "_class_FXObject","_FXGIFIcon",SwigFXGIFIconToFXObject},
    { "_class_FXObject","_class_FXPyIcon",SwigFXPyIconToFXObject},
    { "_class_FXObject","_FXPyIcon",SwigFXPyIconToFXObject},
    { "_class_FXObject","_class_FXIcon",SwigFXIconToFXObject},
    { "_class_FXObject","_FXIcon",SwigFXIconToFXObject},
    { "_class_FXObject","_class_FXPyICOImage",SwigFXPyICOImageToFXObject},
    { "_class_FXObject","_FXPyICOImage",SwigFXPyICOImageToFXObject},
    { "_class_FXObject","_class_FXICOImage",SwigFXICOImageToFXObject},
    { "_class_FXObject","_FXICOImage",SwigFXICOImageToFXObject},
    { "_class_FXObject","_class_FXPyRGBImage",SwigFXPyRGBImageToFXObject},
    { "_class_FXObject","_FXPyRGBImage",SwigFXPyRGBImageToFXObject},
    { "_class_FXObject","_class_FXRGBImage",SwigFXRGBImageToFXObject},
    { "_class_FXObject","_FXRGBImage",SwigFXRGBImageToFXObject},
    { "_class_FXObject","_class_FXPyTGAImage",SwigFXPyTGAImageToFXObject},
    { "_class_FXObject","_FXPyTGAImage",SwigFXPyTGAImageToFXObject},
    { "_class_FXObject","_class_FXTGAImage",SwigFXTGAImageToFXObject},
    { "_class_FXObject","_FXTGAImage",SwigFXTGAImageToFXObject},
    { "_class_FXObject","_class_FXPyTIFImage",SwigFXPyTIFImageToFXObject},
    { "_class_FXObject","_FXPyTIFImage",SwigFXPyTIFImageToFXObject},
    { "_class_FXObject","_class_FXTIFImage",SwigFXTIFImageToFXObject},
    { "_class_FXObject","_FXTIFImage",SwigFXTIFImageToFXObject},
    { "_class_FXObject","_class_FXPyPCXImage",SwigFXPyPCXImageToFXObject},
    { "_class_FXObject","_FXPyPCXImage",SwigFXPyPCXImageToFXObject},
    { "_class_FXObject","_class_FXPCXImage",SwigFXPCXImageToFXObject},
    { "_class_FXObject","_FXPCXImage",SwigFXPCXImageToFXObject},
    { "_class_FXObject","_class_FXPyXPMImage",SwigFXPyXPMImageToFXObject},
    { "_class_FXObject","_FXPyXPMImage",SwigFXPyXPMImageToFXObject},
    { "_class_FXObject","_class_FXXPMImage",SwigFXXPMImageToFXObject},
    { "_class_FXObject","_FXXPMImage",SwigFXXPMImageToFXObject},
    { "_class_FXObject","_class_FXPyJPGImage",SwigFXPyJPGImageToFXObject},
    { "_class_FXObject","_FXPyJPGImage",SwigFXPyJPGImageToFXObject},
    { "_class_FXObject","_class_FXJPGImage",SwigFXJPGImageToFXObject},
    { "_class_FXObject","_FXJPGImage",SwigFXJPGImageToFXObject},
    { "_class_FXObject","_class_FXPyPNGImage",SwigFXPyPNGImageToFXObject},
    { "_class_FXObject","_FXPyPNGImage",SwigFXPyPNGImageToFXObject},
    { "_class_FXObject","_class_FXPNGImage",SwigFXPNGImageToFXObject},
    { "_class_FXObject","_FXPNGImage",SwigFXPNGImageToFXObject},
    { "_class_FXObject","_class_FXPyBMPImage",SwigFXPyBMPImageToFXObject},
    { "_class_FXObject","_FXPyBMPImage",SwigFXPyBMPImageToFXObject},
    { "_class_FXObject","_class_FXBMPImage",SwigFXBMPImageToFXObject},
    { "_class_FXObject","_FXBMPImage",SwigFXBMPImageToFXObject},
    { "_class_FXObject","_class_FXPyGIFImage",SwigFXPyGIFImageToFXObject},
    { "_class_FXObject","_FXPyGIFImage",SwigFXPyGIFImageToFXObject},
    { "_class_FXObject","_class_FXGIFImage",SwigFXGIFImageToFXObject},
    { "_class_FXObject","_FXGIFImage",SwigFXGIFImageToFXObject},
    { "_class_FXObject","_class_FXPyImage",SwigFXPyImageToFXObject},
    { "_class_FXObject","_FXPyImage",SwigFXPyImageToFXObject},
    { "_class_FXObject","_class_FXImage",SwigFXImageToFXObject},
    { "_class_FXObject","_FXImage",SwigFXImageToFXObject},
    { "_class_FXObject","_class_FXPyFont",SwigFXPyFontToFXObject},
    { "_class_FXObject","_FXPyFont",SwigFXPyFontToFXObject},
    { "_class_FXObject","_class_FXFont",SwigFXFontToFXObject},
    { "_class_FXObject","_FXFont",SwigFXFontToFXObject},
    { "_class_FXObject","_class_FXPyVisual",SwigFXPyVisualToFXObject},
    { "_class_FXObject","_FXPyVisual",SwigFXPyVisualToFXObject},
    { "_class_FXObject","_class_FXVisual",SwigFXVisualToFXObject},
    { "_class_FXObject","_FXVisual",SwigFXVisualToFXObject},
    { "_class_FXObject","_class_FXPyApp",SwigFXPyAppToFXObject},
    { "_class_FXObject","_FXPyApp",SwigFXPyAppToFXObject},
    { "_class_FXObject","_class_FXApp",SwigFXAppToFXObject},
    { "_class_FXObject","_FXApp",SwigFXAppToFXObject},
    { "_class_FXObject","_class_FXPyDrawable",SwigFXPyDrawableToFXObject},
    { "_class_FXObject","_FXPyDrawable",SwigFXPyDrawableToFXObject},
    { "_class_FXObject","_class_FXDrawable",SwigFXDrawableToFXObject},
    { "_class_FXObject","_FXDrawable",SwigFXDrawableToFXObject},
    { "_class_FXObject","_class_FXPyId",SwigFXPyIdToFXObject},
    { "_class_FXObject","_FXPyId",SwigFXPyIdToFXObject},
    { "_class_FXObject","_class_FXId",SwigFXIdToFXObject},
    { "_class_FXObject","_FXId",SwigFXIdToFXObject},
    { "_class_FXObject","_class_FXPyObject",SwigFXPyObjectToFXObject},
    { "_class_FXObject","_FXPyObject",SwigFXPyObjectToFXObject},
    { "_class_FXObject","_FXObject",0},
    { "_FXXPMIcon","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXXPMIcon},
    { "_FXXPMIcon","_FXPyXPMIcon",SwigFXPyXPMIconToFXXPMIcon},
    { "_FXXPMIcon","_class_FXXPMIcon",0},
    { "_FXId","_class_FXPyICOIcon",SwigFXPyICOIconToFXId},
    { "_FXId","_FXPyICOIcon",SwigFXPyICOIconToFXId},
    { "_FXId","_class_FXICOIcon",SwigFXICOIconToFXId},
    { "_FXId","_FXICOIcon",SwigFXICOIconToFXId},
    { "_FXId","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXId},
    { "_FXId","_FXPyRGBIcon",SwigFXPyRGBIconToFXId},
    { "_FXId","_class_FXRGBIcon",SwigFXRGBIconToFXId},
    { "_FXId","_FXRGBIcon",SwigFXRGBIconToFXId},
    { "_FXId","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXId},
    { "_FXId","_FXPyTGAIcon",SwigFXPyTGAIconToFXId},
    { "_FXId","_class_FXTGAIcon",SwigFXTGAIconToFXId},
    { "_FXId","_FXTGAIcon",SwigFXTGAIconToFXId},
    { "_FXId","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXId},
    { "_FXId","_FXPyTIFIcon",SwigFXPyTIFIconToFXId},
    { "_FXId","_class_FXTIFIcon",SwigFXTIFIconToFXId},
    { "_FXId","_FXTIFIcon",SwigFXTIFIconToFXId},
    { "_FXId","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXId},
    { "_FXId","_FXPyPCXIcon",SwigFXPyPCXIconToFXId},
    { "_FXId","_class_FXPCXIcon",SwigFXPCXIconToFXId},
    { "_FXId","_FXPCXIcon",SwigFXPCXIconToFXId},
    { "_FXId","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXId},
    { "_FXId","_FXPyXPMIcon",SwigFXPyXPMIconToFXId},
    { "_FXId","_class_FXXPMIcon",SwigFXXPMIconToFXId},
    { "_FXId","_FXXPMIcon",SwigFXXPMIconToFXId},
    { "_FXId","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXId},
    { "_FXId","_FXPyJPGIcon",SwigFXPyJPGIconToFXId},
    { "_FXId","_class_FXJPGIcon",SwigFXJPGIconToFXId},
    { "_FXId","_FXJPGIcon",SwigFXJPGIconToFXId},
    { "_FXId","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXId},
    { "_FXId","_FXPyPNGIcon",SwigFXPyPNGIconToFXId},
    { "_FXId","_class_FXPNGIcon",SwigFXPNGIconToFXId},
    { "_FXId","_FXPNGIcon",SwigFXPNGIconToFXId},
    { "_FXId","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXId},
    { "_FXId","_FXPyBMPIcon",SwigFXPyBMPIconToFXId},
    { "_FXId","_class_FXBMPIcon",SwigFXBMPIconToFXId},
    { "_FXId","_FXBMPIcon",SwigFXBMPIconToFXId},
    { "_FXId","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXId},
    { "_FXId","_FXPyGIFIcon",SwigFXPyGIFIconToFXId},
    { "_FXId","_class_FXGIFIcon",SwigFXGIFIconToFXId},
    { "_FXId","_FXGIFIcon",SwigFXGIFIconToFXId},
    { "_FXId","_class_FXPyIcon",SwigFXPyIconToFXId},
    { "_FXId","_FXPyIcon",SwigFXPyIconToFXId},
    { "_FXId","_class_FXIcon",SwigFXIconToFXId},
    { "_FXId","_FXIcon",SwigFXIconToFXId},
    { "_FXId","_class_FXPyICOImage",SwigFXPyICOImageToFXId},
    { "_FXId","_FXPyICOImage",SwigFXPyICOImageToFXId},
    { "_FXId","_class_FXICOImage",SwigFXICOImageToFXId},
    { "_FXId","_FXICOImage",SwigFXICOImageToFXId},
    { "_FXId","_class_FXPyRGBImage",SwigFXPyRGBImageToFXId},
    { "_FXId","_FXPyRGBImage",SwigFXPyRGBImageToFXId},
    { "_FXId","_class_FXRGBImage",SwigFXRGBImageToFXId},
    { "_FXId","_FXRGBImage",SwigFXRGBImageToFXId},
    { "_FXId","_class_FXPyTGAImage",SwigFXPyTGAImageToFXId},
    { "_FXId","_FXPyTGAImage",SwigFXPyTGAImageToFXId},
    { "_FXId","_class_FXTGAImage",SwigFXTGAImageToFXId},
    { "_FXId","_FXTGAImage",SwigFXTGAImageToFXId},
    { "_FXId","_class_FXPyTIFImage",SwigFXPyTIFImageToFXId},
    { "_FXId","_FXPyTIFImage",SwigFXPyTIFImageToFXId},
    { "_FXId","_class_FXTIFImage",SwigFXTIFImageToFXId},
    { "_FXId","_FXTIFImage",SwigFXTIFImageToFXId},
    { "_FXId","_class_FXPyPCXImage",SwigFXPyPCXImageToFXId},
    { "_FXId","_FXPyPCXImage",SwigFXPyPCXImageToFXId},
    { "_FXId","_class_FXPCXImage",SwigFXPCXImageToFXId},
    { "_FXId","_FXPCXImage",SwigFXPCXImageToFXId},
    { "_FXId","_class_FXPyXPMImage",SwigFXPyXPMImageToFXId},
    { "_FXId","_FXPyXPMImage",SwigFXPyXPMImageToFXId},
    { "_FXId","_class_FXXPMImage",SwigFXXPMImageToFXId},
    { "_FXId","_FXXPMImage",SwigFXXPMImageToFXId},
    { "_FXId","_class_FXPyJPGImage",SwigFXPyJPGImageToFXId},
    { "_FXId","_FXPyJPGImage",SwigFXPyJPGImageToFXId},
    { "_FXId","_class_FXJPGImage",SwigFXJPGImageToFXId},
    { "_FXId","_FXJPGImage",SwigFXJPGImageToFXId},
    { "_FXId","_class_FXPyPNGImage",SwigFXPyPNGImageToFXId},
    { "_FXId","_FXPyPNGImage",SwigFXPyPNGImageToFXId},
    { "_FXId","_class_FXPNGImage",SwigFXPNGImageToFXId},
    { "_FXId","_FXPNGImage",SwigFXPNGImageToFXId},
    { "_FXId","_class_FXPyBMPImage",SwigFXPyBMPImageToFXId},
    { "_FXId","_FXPyBMPImage",SwigFXPyBMPImageToFXId},
    { "_FXId","_class_FXBMPImage",SwigFXBMPImageToFXId},
    { "_FXId","_FXBMPImage",SwigFXBMPImageToFXId},
    { "_FXId","_class_FXPyGIFImage",SwigFXPyGIFImageToFXId},
    { "_FXId","_FXPyGIFImage",SwigFXPyGIFImageToFXId},
    { "_FXId","_class_FXGIFImage",SwigFXGIFImageToFXId},
    { "_FXId","_FXGIFImage",SwigFXGIFImageToFXId},
    { "_FXId","_class_FXPyImage",SwigFXPyImageToFXId},
    { "_FXId","_FXPyImage",SwigFXPyImageToFXId},
    { "_FXId","_class_FXImage",SwigFXImageToFXId},
    { "_FXId","_FXImage",SwigFXImageToFXId},
    { "_FXId","_class_FXPyFont",SwigFXPyFontToFXId},
    { "_FXId","_FXPyFont",SwigFXPyFontToFXId},
    { "_FXId","_class_FXFont",SwigFXFontToFXId},
    { "_FXId","_FXFont",SwigFXFontToFXId},
    { "_FXId","_class_FXPyVisual",SwigFXPyVisualToFXId},
    { "_FXId","_FXPyVisual",SwigFXPyVisualToFXId},
    { "_FXId","_class_FXVisual",SwigFXVisualToFXId},
    { "_FXId","_FXVisual",SwigFXVisualToFXId},
    { "_FXId","_class_FXPyDrawable",SwigFXPyDrawableToFXId},
    { "_FXId","_FXPyDrawable",SwigFXPyDrawableToFXId},
    { "_FXId","_class_FXDrawable",SwigFXDrawableToFXId},
    { "_FXId","_FXDrawable",SwigFXDrawableToFXId},
    { "_FXId","_class_FXPyId",SwigFXPyIdToFXId},
    { "_FXId","_FXPyId",SwigFXPyIdToFXId},
    { "_FXId","_class_FXId",0},
    { "_class_FXDrawable","_class_FXPyICOIcon",SwigFXPyICOIconToFXDrawable},
    { "_class_FXDrawable","_FXPyICOIcon",SwigFXPyICOIconToFXDrawable},
    { "_class_FXDrawable","_class_FXICOIcon",SwigFXICOIconToFXDrawable},
    { "_class_FXDrawable","_FXICOIcon",SwigFXICOIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXDrawable},
    { "_class_FXDrawable","_FXPyRGBIcon",SwigFXPyRGBIconToFXDrawable},
    { "_class_FXDrawable","_class_FXRGBIcon",SwigFXRGBIconToFXDrawable},
    { "_class_FXDrawable","_FXRGBIcon",SwigFXRGBIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXDrawable},
    { "_class_FXDrawable","_FXPyTGAIcon",SwigFXPyTGAIconToFXDrawable},
    { "_class_FXDrawable","_class_FXTGAIcon",SwigFXTGAIconToFXDrawable},
    { "_class_FXDrawable","_FXTGAIcon",SwigFXTGAIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXDrawable},
    { "_class_FXDrawable","_FXPyTIFIcon",SwigFXPyTIFIconToFXDrawable},
    { "_class_FXDrawable","_class_FXTIFIcon",SwigFXTIFIconToFXDrawable},
    { "_class_FXDrawable","_FXTIFIcon",SwigFXTIFIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXDrawable},
    { "_class_FXDrawable","_FXPyPCXIcon",SwigFXPyPCXIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPCXIcon",SwigFXPCXIconToFXDrawable},
    { "_class_FXDrawable","_FXPCXIcon",SwigFXPCXIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXDrawable},
    { "_class_FXDrawable","_FXPyXPMIcon",SwigFXPyXPMIconToFXDrawable},
    { "_class_FXDrawable","_class_FXXPMIcon",SwigFXXPMIconToFXDrawable},
    { "_class_FXDrawable","_FXXPMIcon",SwigFXXPMIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXDrawable},
    { "_class_FXDrawable","_FXPyJPGIcon",SwigFXPyJPGIconToFXDrawable},
    { "_class_FXDrawable","_class_FXJPGIcon",SwigFXJPGIconToFXDrawable},
    { "_class_FXDrawable","_FXJPGIcon",SwigFXJPGIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXDrawable},
    { "_class_FXDrawable","_FXPyPNGIcon",SwigFXPyPNGIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPNGIcon",SwigFXPNGIconToFXDrawable},
    { "_class_FXDrawable","_FXPNGIcon",SwigFXPNGIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXDrawable},
    { "_class_FXDrawable","_FXPyBMPIcon",SwigFXPyBMPIconToFXDrawable},
    { "_class_FXDrawable","_class_FXBMPIcon",SwigFXBMPIconToFXDrawable},
    { "_class_FXDrawable","_FXBMPIcon",SwigFXBMPIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXDrawable},
    { "_class_FXDrawable","_FXPyGIFIcon",SwigFXPyGIFIconToFXDrawable},
    { "_class_FXDrawable","_class_FXGIFIcon",SwigFXGIFIconToFXDrawable},
    { "_class_FXDrawable","_FXGIFIcon",SwigFXGIFIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyIcon",SwigFXPyIconToFXDrawable},
    { "_class_FXDrawable","_FXPyIcon",SwigFXPyIconToFXDrawable},
    { "_class_FXDrawable","_class_FXIcon",SwigFXIconToFXDrawable},
    { "_class_FXDrawable","_FXIcon",SwigFXIconToFXDrawable},
    { "_class_FXDrawable","_class_FXPyICOImage",SwigFXPyICOImageToFXDrawable},
    { "_class_FXDrawable","_FXPyICOImage",SwigFXPyICOImageToFXDrawable},
    { "_class_FXDrawable","_class_FXICOImage",SwigFXICOImageToFXDrawable},
    { "_class_FXDrawable","_FXICOImage",SwigFXICOImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyRGBImage",SwigFXPyRGBImageToFXDrawable},
    { "_class_FXDrawable","_FXPyRGBImage",SwigFXPyRGBImageToFXDrawable},
    { "_class_FXDrawable","_class_FXRGBImage",SwigFXRGBImageToFXDrawable},
    { "_class_FXDrawable","_FXRGBImage",SwigFXRGBImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTGAImage",SwigFXPyTGAImageToFXDrawable},
    { "_class_FXDrawable","_FXPyTGAImage",SwigFXPyTGAImageToFXDrawable},
    { "_class_FXDrawable","_class_FXTGAImage",SwigFXTGAImageToFXDrawable},
    { "_class_FXDrawable","_FXTGAImage",SwigFXTGAImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTIFImage",SwigFXPyTIFImageToFXDrawable},
    { "_class_FXDrawable","_FXPyTIFImage",SwigFXPyTIFImageToFXDrawable},
    { "_class_FXDrawable","_class_FXTIFImage",SwigFXTIFImageToFXDrawable},
    { "_class_FXDrawable","_FXTIFImage",SwigFXTIFImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPCXImage",SwigFXPyPCXImageToFXDrawable},
    { "_class_FXDrawable","_FXPyPCXImage",SwigFXPyPCXImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPCXImage",SwigFXPCXImageToFXDrawable},
    { "_class_FXDrawable","_FXPCXImage",SwigFXPCXImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyXPMImage",SwigFXPyXPMImageToFXDrawable},
    { "_class_FXDrawable","_FXPyXPMImage",SwigFXPyXPMImageToFXDrawable},
    { "_class_FXDrawable","_class_FXXPMImage",SwigFXXPMImageToFXDrawable},
    { "_class_FXDrawable","_FXXPMImage",SwigFXXPMImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyJPGImage",SwigFXPyJPGImageToFXDrawable},
    { "_class_FXDrawable","_FXPyJPGImage",SwigFXPyJPGImageToFXDrawable},
    { "_class_FXDrawable","_class_FXJPGImage",SwigFXJPGImageToFXDrawable},
    { "_class_FXDrawable","_FXJPGImage",SwigFXJPGImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPNGImage",SwigFXPyPNGImageToFXDrawable},
    { "_class_FXDrawable","_FXPyPNGImage",SwigFXPyPNGImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPNGImage",SwigFXPNGImageToFXDrawable},
    { "_class_FXDrawable","_FXPNGImage",SwigFXPNGImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyBMPImage",SwigFXPyBMPImageToFXDrawable},
    { "_class_FXDrawable","_FXPyBMPImage",SwigFXPyBMPImageToFXDrawable},
    { "_class_FXDrawable","_class_FXBMPImage",SwigFXBMPImageToFXDrawable},
    { "_class_FXDrawable","_FXBMPImage",SwigFXBMPImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyGIFImage",SwigFXPyGIFImageToFXDrawable},
    { "_class_FXDrawable","_FXPyGIFImage",SwigFXPyGIFImageToFXDrawable},
    { "_class_FXDrawable","_class_FXGIFImage",SwigFXGIFImageToFXDrawable},
    { "_class_FXDrawable","_FXGIFImage",SwigFXGIFImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyImage",SwigFXPyImageToFXDrawable},
    { "_class_FXDrawable","_FXPyImage",SwigFXPyImageToFXDrawable},
    { "_class_FXDrawable","_class_FXImage",SwigFXImageToFXDrawable},
    { "_class_FXDrawable","_FXImage",SwigFXImageToFXDrawable},
    { "_class_FXDrawable","_class_FXPyDrawable",SwigFXPyDrawableToFXDrawable},
    { "_class_FXDrawable","_FXPyDrawable",SwigFXPyDrawableToFXDrawable},
    { "_class_FXDrawable","_FXDrawable",0},
    { "_FXPyBMPImage","_class_FXPyBMPImage",0},
    { "_FXPyICOImage","_class_FXPyICOImage",0},
    { "_FXPyPCXImage","_class_FXPyPCXImage",0},
    { "_FXPyRGBIcon","_class_FXPyRGBIcon",0},
    { "_class_FXPyJPGIcon","_FXPyJPGIcon",0},
    { "_FXTIFIcon","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXTIFIcon},
    { "_FXTIFIcon","_FXPyTIFIcon",SwigFXPyTIFIconToFXTIFIcon},
    { "_FXTIFIcon","_class_FXTIFIcon",0},
    { "__XEvent","_FXRawEvent",0},
    { "_struct_FXEvent","_FXEvent",0},
    { "_class_FXStream","_class_FXPyFileStream",SwigFXPyFileStreamToFXStream},
    { "_class_FXStream","_FXPyFileStream",SwigFXPyFileStreamToFXStream},
    { "_class_FXStream","_class_FXFileStream",SwigFXFileStreamToFXStream},
    { "_class_FXStream","_FXFileStream",SwigFXFileStreamToFXStream},
    { "_class_FXStream","_class_FXPyStream",SwigFXPyStreamToFXStream},
    { "_class_FXStream","_FXPyStream",SwigFXPyStreamToFXStream},
    { "_class_FXStream","_FXStream",0},
    { "_class_FXPyStringDict","_FXPyStringDict",0},
    { "_class_FXPyJPGImage","_FXPyJPGImage",0},
    { "_FXTIFImage","_class_FXPyTIFImage",SwigFXPyTIFImageToFXTIFImage},
    { "_FXTIFImage","_FXPyTIFImage",SwigFXPyTIFImageToFXTIFImage},
    { "_FXTIFImage","_class_FXTIFImage",0},
    { "_FXPyIcon","_class_FXPyIcon",0},
    { "_FXPyAccelTable","_class_FXPyAccelTable",0},
    { "_class_FXTGAIcon","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXTGAIcon},
    { "_class_FXTGAIcon","_FXPyTGAIcon",SwigFXPyTGAIconToFXTGAIcon},
    { "_class_FXTGAIcon","_FXTGAIcon",0},
    { "_struct_FXPSBounds","_FXPSBounds",0},
    { "_class_FXImage","_class_FXPyICOIcon",SwigFXPyICOIconToFXImage},
    { "_class_FXImage","_FXPyICOIcon",SwigFXPyICOIconToFXImage},
    { "_class_FXImage","_class_FXICOIcon",SwigFXICOIconToFXImage},
    { "_class_FXImage","_FXICOIcon",SwigFXICOIconToFXImage},
    { "_class_FXImage","_class_FXPyRGBIcon",SwigFXPyRGBIconToFXImage},
    { "_class_FXImage","_FXPyRGBIcon",SwigFXPyRGBIconToFXImage},
    { "_class_FXImage","_class_FXRGBIcon",SwigFXRGBIconToFXImage},
    { "_class_FXImage","_FXRGBIcon",SwigFXRGBIconToFXImage},
    { "_class_FXImage","_class_FXPyTGAIcon",SwigFXPyTGAIconToFXImage},
    { "_class_FXImage","_FXPyTGAIcon",SwigFXPyTGAIconToFXImage},
    { "_class_FXImage","_class_FXTGAIcon",SwigFXTGAIconToFXImage},
    { "_class_FXImage","_FXTGAIcon",SwigFXTGAIconToFXImage},
    { "_class_FXImage","_class_FXPyTIFIcon",SwigFXPyTIFIconToFXImage},
    { "_class_FXImage","_FXPyTIFIcon",SwigFXPyTIFIconToFXImage},
    { "_class_FXImage","_class_FXTIFIcon",SwigFXTIFIconToFXImage},
    { "_class_FXImage","_FXTIFIcon",SwigFXTIFIconToFXImage},
    { "_class_FXImage","_class_FXPyPCXIcon",SwigFXPyPCXIconToFXImage},
    { "_class_FXImage","_FXPyPCXIcon",SwigFXPyPCXIconToFXImage},
    { "_class_FXImage","_class_FXPCXIcon",SwigFXPCXIconToFXImage},
    { "_class_FXImage","_FXPCXIcon",SwigFXPCXIconToFXImage},
    { "_class_FXImage","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXImage},
    { "_class_FXImage","_FXPyXPMIcon",SwigFXPyXPMIconToFXImage},
    { "_class_FXImage","_class_FXXPMIcon",SwigFXXPMIconToFXImage},
    { "_class_FXImage","_FXXPMIcon",SwigFXXPMIconToFXImage},
    { "_class_FXImage","_class_FXPyJPGIcon",SwigFXPyJPGIconToFXImage},
    { "_class_FXImage","_FXPyJPGIcon",SwigFXPyJPGIconToFXImage},
    { "_class_FXImage","_class_FXJPGIcon",SwigFXJPGIconToFXImage},
    { "_class_FXImage","_FXJPGIcon",SwigFXJPGIconToFXImage},
    { "_class_FXImage","_class_FXPyPNGIcon",SwigFXPyPNGIconToFXImage},
    { "_class_FXImage","_FXPyPNGIcon",SwigFXPyPNGIconToFXImage},
    { "_class_FXImage","_class_FXPNGIcon",SwigFXPNGIconToFXImage},
    { "_class_FXImage","_FXPNGIcon",SwigFXPNGIconToFXImage},
    { "_class_FXImage","_class_FXPyBMPIcon",SwigFXPyBMPIconToFXImage},
    { "_class_FXImage","_FXPyBMPIcon",SwigFXPyBMPIconToFXImage},
    { "_class_FXImage","_class_FXBMPIcon",SwigFXBMPIconToFXImage},
    { "_class_FXImage","_FXBMPIcon",SwigFXBMPIconToFXImage},
    { "_class_FXImage","_class_FXPyGIFIcon",SwigFXPyGIFIconToFXImage},
    { "_class_FXImage","_FXPyGIFIcon",SwigFXPyGIFIconToFXImage},
    { "_class_FXImage","_class_FXGIFIcon",SwigFXGIFIconToFXImage},
    { "_class_FXImage","_FXGIFIcon",SwigFXGIFIconToFXImage},
    { "_class_FXImage","_class_FXPyIcon",SwigFXPyIconToFXImage},
    { "_class_FXImage","_FXPyIcon",SwigFXPyIconToFXImage},
    { "_class_FXImage","_class_FXIcon",SwigFXIconToFXImage},
    { "_class_FXImage","_FXIcon",SwigFXIconToFXImage},
    { "_class_FXImage","_class_FXPyICOImage",SwigFXPyICOImageToFXImage},
    { "_class_FXImage","_FXPyICOImage",SwigFXPyICOImageToFXImage},
    { "_class_FXImage","_class_FXICOImage",SwigFXICOImageToFXImage},
    { "_class_FXImage","_FXICOImage",SwigFXICOImageToFXImage},
    { "_class_FXImage","_class_FXPyRGBImage",SwigFXPyRGBImageToFXImage},
    { "_class_FXImage","_FXPyRGBImage",SwigFXPyRGBImageToFXImage},
    { "_class_FXImage","_class_FXRGBImage",SwigFXRGBImageToFXImage},
    { "_class_FXImage","_FXRGBImage",SwigFXRGBImageToFXImage},
    { "_class_FXImage","_class_FXPyTGAImage",SwigFXPyTGAImageToFXImage},
    { "_class_FXImage","_FXPyTGAImage",SwigFXPyTGAImageToFXImage},
    { "_class_FXImage","_class_FXTGAImage",SwigFXTGAImageToFXImage},
    { "_class_FXImage","_FXTGAImage",SwigFXTGAImageToFXImage},
    { "_class_FXImage","_class_FXPyTIFImage",SwigFXPyTIFImageToFXImage},
    { "_class_FXImage","_FXPyTIFImage",SwigFXPyTIFImageToFXImage},
    { "_class_FXImage","_class_FXTIFImage",SwigFXTIFImageToFXImage},
    { "_class_FXImage","_FXTIFImage",SwigFXTIFImageToFXImage},
    { "_class_FXImage","_class_FXPyPCXImage",SwigFXPyPCXImageToFXImage},
    { "_class_FXImage","_FXPyPCXImage",SwigFXPyPCXImageToFXImage},
    { "_class_FXImage","_class_FXPCXImage",SwigFXPCXImageToFXImage},
    { "_class_FXImage","_FXPCXImage",SwigFXPCXImageToFXImage},
    { "_class_FXImage","_class_FXPyXPMImage",SwigFXPyXPMImageToFXImage},
    { "_class_FXImage","_FXPyXPMImage",SwigFXPyXPMImageToFXImage},
    { "_class_FXImage","_class_FXXPMImage",SwigFXXPMImageToFXImage},
    { "_class_FXImage","_FXXPMImage",SwigFXXPMImageToFXImage},
    { "_class_FXImage","_class_FXPyJPGImage",SwigFXPyJPGImageToFXImage},
    { "_class_FXImage","_FXPyJPGImage",SwigFXPyJPGImageToFXImage},
    { "_class_FXImage","_class_FXJPGImage",SwigFXJPGImageToFXImage},
    { "_class_FXImage","_FXJPGImage",SwigFXJPGImageToFXImage},
    { "_class_FXImage","_class_FXPyPNGImage",SwigFXPyPNGImageToFXImage},
    { "_class_FXImage","_FXPyPNGImage",SwigFXPyPNGImageToFXImage},
    { "_class_FXImage","_class_FXPNGImage",SwigFXPNGImageToFXImage},
    { "_class_FXImage","_FXPNGImage",SwigFXPNGImageToFXImage},
    { "_class_FXImage","_class_FXPyBMPImage",SwigFXPyBMPImageToFXImage},
    { "_class_FXImage","_FXPyBMPImage",SwigFXPyBMPImageToFXImage},
    { "_class_FXImage","_class_FXBMPImage",SwigFXBMPImageToFXImage},
    { "_class_FXImage","_FXBMPImage",SwigFXBMPImageToFXImage},
    { "_class_FXImage","_class_FXPyGIFImage",SwigFXPyGIFImageToFXImage},
    { "_class_FXImage","_FXPyGIFImage",SwigFXPyGIFImageToFXImage},
    { "_class_FXImage","_class_FXGIFImage",SwigFXGIFImageToFXImage},
    { "_class_FXImage","_FXGIFImage",SwigFXGIFImageToFXImage},
    { "_class_FXImage","_class_FXPyImage",SwigFXPyImageToFXImage},
    { "_class_FXImage","_FXPyImage",SwigFXPyImageToFXImage},
    { "_class_FXImage","_FXImage",0},
    { "_FXPoint","_class_FXPoint",0},
    { "_FXAccelTable","_class_FXPyAccelTable",SwigFXPyAccelTableToFXAccelTable},
    { "_FXAccelTable","_FXPyAccelTable",SwigFXPyAccelTableToFXAccelTable},
    { "_FXAccelTable","_class_FXAccelTable",0},
    { "_FXPyId","_class_FXPyId",0},
    { "_FXSelector","_FXInputHandle",0},
    { "_FXSelector","_FXDragType",0},
    { "_FXSelector","_FXHotKey",0},
    { "_FXSelector","_FXColor",0},
    { "_FXSelector","_FXID",0},
    { "_FXSelector","_FXuint",0},
    { "_FXSelector","_int",0},
    { "_FXSelector","_unsigned_int",0},
    { "_FXSelector","_FXint",0},
    { "_class_FXFont","_class_FXPyFont",SwigFXPyFontToFXFont},
    { "_class_FXFont","_FXPyFont",SwigFXPyFontToFXFont},
    { "_class_FXFont","_FXFont",0},
    { "_class_FXXPMImage","_class_FXPyXPMImage",SwigFXPyXPMImageToFXXPMImage},
    { "_class_FXXPMImage","_FXPyXPMImage",SwigFXPyXPMImageToFXXPMImage},
    { "_class_FXXPMImage","_FXXPMImage",0},
    { "_FXPyRecentFiles","_class_FXPyRecentFiles",0},
    { "_FXPyDebugTarget","_class_FXPyDebugTarget",0},
    { "_FXCommand","_class_FXPyCommand",SwigFXPyCommandToFXCommand},
    { "_FXCommand","_FXPyCommand",SwigFXPyCommandToFXCommand},
    { "_FXCommand","_class_FXCommand",0},
    { "_class_FXGIFImage","_class_FXPyGIFImage",SwigFXPyGIFImageToFXGIFImage},
    { "_class_FXGIFImage","_FXPyGIFImage",SwigFXPyGIFImageToFXGIFImage},
    { "_class_FXGIFImage","_FXGIFImage",0},
    { "_class_FXPyRGBImage","_FXPyRGBImage",0},
    { "_class_FXXPMIcon","_class_FXPyXPMIcon",SwigFXPyXPMIconToFXXPMIcon},
    { "_class_FXXPMIcon","_FXPyXPMIcon",SwigFXPyXPMIconToFXXPMIcon},
    { "_class_FXXPMIcon","_FXXPMIcon",0},
{0,0,0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initmiscc() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("miscc", misccMethods);
	 d = PyModule_GetDict(m);
	 PyDict_SetItemString(d,"INPUT_NONE", PyInt_FromLong((long) INPUT_NONE));
	 PyDict_SetItemString(d,"INPUT_READ", PyInt_FromLong((long) INPUT_READ));
	 PyDict_SetItemString(d,"INPUT_WRITE", PyInt_FromLong((long) INPUT_WRITE));
	 PyDict_SetItemString(d,"INPUT_EXCEPT", PyInt_FromLong((long) INPUT_EXCEPT));
	 PyDict_SetItemString(d,"MODAL_FOR_NONE", PyInt_FromLong((long) MODAL_FOR_NONE));
	 PyDict_SetItemString(d,"MODAL_FOR_WINDOW", PyInt_FromLong((long) MODAL_FOR_WINDOW));
	 PyDict_SetItemString(d,"MODAL_FOR_POPUP", PyInt_FromLong((long) MODAL_FOR_POPUP));
	 PyDict_SetItemString(d,"DEF_ARROW_CURSOR", PyInt_FromLong((long) DEF_ARROW_CURSOR));
	 PyDict_SetItemString(d,"DEF_RARROW_CURSOR", PyInt_FromLong((long) DEF_RARROW_CURSOR));
	 PyDict_SetItemString(d,"DEF_TEXT_CURSOR", PyInt_FromLong((long) DEF_TEXT_CURSOR));
	 PyDict_SetItemString(d,"DEF_HSPLIT_CURSOR", PyInt_FromLong((long) DEF_HSPLIT_CURSOR));
	 PyDict_SetItemString(d,"DEF_VSPLIT_CURSOR", PyInt_FromLong((long) DEF_VSPLIT_CURSOR));
	 PyDict_SetItemString(d,"DEF_XSPLIT_CURSOR", PyInt_FromLong((long) DEF_XSPLIT_CURSOR));
	 PyDict_SetItemString(d,"DEF_SWATCH_CURSOR", PyInt_FromLong((long) DEF_SWATCH_CURSOR));
	 PyDict_SetItemString(d,"DEF_MOVE_CURSOR", PyInt_FromLong((long) DEF_MOVE_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGH_CURSOR", PyInt_FromLong((long) DEF_DRAGH_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGV_CURSOR", PyInt_FromLong((long) DEF_DRAGV_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGTL_CURSOR", PyInt_FromLong((long) DEF_DRAGTL_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGBR_CURSOR", PyInt_FromLong((long) DEF_DRAGBR_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGTR_CURSOR", PyInt_FromLong((long) DEF_DRAGTR_CURSOR));
	 PyDict_SetItemString(d,"DEF_DRAGBL_CURSOR", PyInt_FromLong((long) DEF_DRAGBL_CURSOR));
	 PyDict_SetItemString(d,"DEF_DNDSTOP_CURSOR", PyInt_FromLong((long) DEF_DNDSTOP_CURSOR));
	 PyDict_SetItemString(d,"DEF_DNDCOPY_CURSOR", PyInt_FromLong((long) DEF_DNDCOPY_CURSOR));
	 PyDict_SetItemString(d,"DEF_DNDMOVE_CURSOR", PyInt_FromLong((long) DEF_DNDMOVE_CURSOR));
	 PyDict_SetItemString(d,"DEF_DNDLINK_CURSOR", PyInt_FromLong((long) DEF_DNDLINK_CURSOR));
	 PyDict_SetItemString(d,"DEF_CROSSHAIR_CURSOR", PyInt_FromLong((long) DEF_CROSSHAIR_CURSOR));
	 PyDict_SetItemString(d,"DEF_CORNERNE_CURSOR", PyInt_FromLong((long) DEF_CORNERNE_CURSOR));
	 PyDict_SetItemString(d,"DEF_CORNERNW_CURSOR", PyInt_FromLong((long) DEF_CORNERNW_CURSOR));
	 PyDict_SetItemString(d,"DEF_CORNERSE_CURSOR", PyInt_FromLong((long) DEF_CORNERSE_CURSOR));
	 PyDict_SetItemString(d,"DEF_CORNERSW_CURSOR", PyInt_FromLong((long) DEF_CORNERSW_CURSOR));
	 PyDict_SetItemString(d,"DEF_ROTATE_CURSOR", PyInt_FromLong((long) DEF_ROTATE_CURSOR));
	 PyDict_SetItemString(d,"VISUAL_DEFAULT", PyInt_FromLong((long) VISUAL_DEFAULT));
	 PyDict_SetItemString(d,"VISUAL_MONOCHROME", PyInt_FromLong((long) VISUAL_MONOCHROME));
	 PyDict_SetItemString(d,"VISUAL_BEST", PyInt_FromLong((long) VISUAL_BEST));
	 PyDict_SetItemString(d,"VISUAL_INDEXCOLOR", PyInt_FromLong((long) VISUAL_INDEXCOLOR));
	 PyDict_SetItemString(d,"VISUAL_GRAYSCALE", PyInt_FromLong((long) VISUAL_GRAYSCALE));
	 PyDict_SetItemString(d,"VISUAL_TRUECOLOR", PyInt_FromLong((long) VISUAL_TRUECOLOR));
	 PyDict_SetItemString(d,"VISUAL_OWNCOLORMAP", PyInt_FromLong((long) VISUAL_OWNCOLORMAP));
	 PyDict_SetItemString(d,"VISUAL_DOUBLEBUFFER", PyInt_FromLong((long) VISUAL_DOUBLEBUFFER));
	 PyDict_SetItemString(d,"VISUAL_STEREO", PyInt_FromLong((long) VISUAL_STEREO));
	 PyDict_SetItemString(d,"VISUAL_NOACCEL", PyInt_FromLong((long) VISUAL_NOACCEL));
	 PyDict_SetItemString(d,"VISUALTYPE_UNKNOWN", PyInt_FromLong((long) VISUALTYPE_UNKNOWN));
	 PyDict_SetItemString(d,"VISUALTYPE_MONO", PyInt_FromLong((long) VISUALTYPE_MONO));
	 PyDict_SetItemString(d,"VISUALTYPE_TRUE", PyInt_FromLong((long) VISUALTYPE_TRUE));
	 PyDict_SetItemString(d,"VISUALTYPE_INDEX", PyInt_FromLong((long) VISUALTYPE_INDEX));
	 PyDict_SetItemString(d,"VISUALTYPE_GRAY", PyInt_FromLong((long) VISUALTYPE_GRAY));
	 PyDict_SetItemString(d,"IMAGE_KEEP", PyInt_FromLong((long) IMAGE_KEEP));
	 PyDict_SetItemString(d,"IMAGE_OWNED", PyInt_FromLong((long) IMAGE_OWNED));
	 PyDict_SetItemString(d,"IMAGE_DITHER", PyInt_FromLong((long) IMAGE_DITHER));
	 PyDict_SetItemString(d,"IMAGE_NEAREST", PyInt_FromLong((long) IMAGE_NEAREST));
	 PyDict_SetItemString(d,"IMAGE_ALPHA", PyInt_FromLong((long) IMAGE_ALPHA));
	 PyDict_SetItemString(d,"IMAGE_OPAQUE", PyInt_FromLong((long) IMAGE_OPAQUE));
	 PyDict_SetItemString(d,"IMAGE_ALPHACOLOR", PyInt_FromLong((long) IMAGE_ALPHACOLOR));
	 PyDict_SetItemString(d,"IMAGE_SHMI", PyInt_FromLong((long) IMAGE_SHMI));
	 PyDict_SetItemString(d,"IMAGE_SHMP", PyInt_FromLong((long) IMAGE_SHMP));
	 PyDict_SetItemString(d,"IMAGE_ALPHAGUESS", PyInt_FromLong((long) IMAGE_ALPHAGUESS));
	 PyDict_SetItemString(d,"FXStreamDead", PyInt_FromLong((long) FXStreamDead));
	 PyDict_SetItemString(d,"FXStreamSave", PyInt_FromLong((long) FXStreamSave));
	 PyDict_SetItemString(d,"FXStreamLoad", PyInt_FromLong((long) FXStreamLoad));
	 PyDict_SetItemString(d,"FXStreamOK", PyInt_FromLong((long) FXStreamOK));
	 PyDict_SetItemString(d,"FXStreamEnd", PyInt_FromLong((long) FXStreamEnd));
	 PyDict_SetItemString(d,"FXStreamFull", PyInt_FromLong((long) FXStreamFull));
	 PyDict_SetItemString(d,"FXStreamNoWrite", PyInt_FromLong((long) FXStreamNoWrite));
	 PyDict_SetItemString(d,"FXStreamNoRead", PyInt_FromLong((long) FXStreamNoRead));
	 PyDict_SetItemString(d,"FXStreamFormat", PyInt_FromLong((long) FXStreamFormat));
	 PyDict_SetItemString(d,"FXStreamUnknown", PyInt_FromLong((long) FXStreamUnknown));
	 PyDict_SetItemString(d,"FXStreamAlloc", PyInt_FromLong((long) FXStreamAlloc));
	 PyDict_SetItemString(d,"FX_App_ID_QUIT", PyInt_FromLong((long) FXApp::ID_QUIT));
	 PyDict_SetItemString(d,"FX_App_ID_DUMP", PyInt_FromLong((long) FXApp::ID_DUMP));
	 PyDict_SetItemString(d,"FX_App_ID_LAST", PyInt_FromLong((long) FXApp::ID_LAST));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_CLEAR", PyInt_FromLong((long) FXRecentFiles::ID_CLEAR));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_ANYFILES", PyInt_FromLong((long) FXRecentFiles::ID_ANYFILES));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_1", PyInt_FromLong((long) FXRecentFiles::ID_FILE_1));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_2", PyInt_FromLong((long) FXRecentFiles::ID_FILE_2));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_3", PyInt_FromLong((long) FXRecentFiles::ID_FILE_3));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_4", PyInt_FromLong((long) FXRecentFiles::ID_FILE_4));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_5", PyInt_FromLong((long) FXRecentFiles::ID_FILE_5));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_6", PyInt_FromLong((long) FXRecentFiles::ID_FILE_6));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_7", PyInt_FromLong((long) FXRecentFiles::ID_FILE_7));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_8", PyInt_FromLong((long) FXRecentFiles::ID_FILE_8));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_9", PyInt_FromLong((long) FXRecentFiles::ID_FILE_9));
	 PyDict_SetItemString(d,"FX_RecentFiles_ID_FILE_10", PyInt_FromLong((long) FXRecentFiles::ID_FILE_10));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_VOID", PyInt_FromLong((long) FXDataTarget::DT_VOID));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_CHAR", PyInt_FromLong((long) FXDataTarget::DT_CHAR));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_UCHAR", PyInt_FromLong((long) FXDataTarget::DT_UCHAR));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_SHORT", PyInt_FromLong((long) FXDataTarget::DT_SHORT));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_USHORT", PyInt_FromLong((long) FXDataTarget::DT_USHORT));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_INT", PyInt_FromLong((long) FXDataTarget::DT_INT));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_UINT", PyInt_FromLong((long) FXDataTarget::DT_UINT));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_FLOAT", PyInt_FromLong((long) FXDataTarget::DT_FLOAT));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_DOUBLE", PyInt_FromLong((long) FXDataTarget::DT_DOUBLE));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_STRING", PyInt_FromLong((long) FXDataTarget::DT_STRING));
	 PyDict_SetItemString(d,"FX_DataTarget_DT_LAST", PyInt_FromLong((long) FXDataTarget::DT_LAST));
	 PyDict_SetItemString(d,"FX_DataTarget_ID_VALUE", PyInt_FromLong((long) FXDataTarget::ID_VALUE));
	 PyDict_SetItemString(d,"FX_DataTarget_ID_OPTION", PyInt_FromLong((long) FXDataTarget::ID_OPTION));
	 PyDict_SetItemString(d,"FX_DataTarget_ID_LAST", PyInt_FromLong((long) FXDataTarget::ID_LAST));
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
}
