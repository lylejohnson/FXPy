/*
 * FILE : ../src/controls.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a) __declspec(dllexport) a
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a) a _export 
#	else
#	    define SWIGEXPORT(a) a 
#	endif
#   endif
#else
#   define SWIGEXPORT(a) a 
#endif

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern char *SWIG_GetPtrObj(PyObject *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif
#define SWIG_init    initcontrolsc

#define SWIG_name    "controlsc"

#include "fx.h"
#include "fx3d.h"
#include "FXCURCursor.h"
#include "FXJPGImage.h"
#include "FXJPGIcon.h"
#include "FXPNGIcon.h"
#include "FXPNGImage.h"
#include "FXTIFIcon.h"
#include "FXTIFImage.h"
#include "FXRGBIcon.h"
#include "FXRGBImage.h"
#include "FXICOIcon.h"
#include "FXICOImage.h"
#include "FXPyApp.h"
#include "FXPy.h"

static PyObject* l_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyList_Check(target)) {
            o2 = target;
            target = PyList_New(0);
            PyList_Append(target, o2);
	    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
	Py_XDECREF(o);
    }
    return target;
}

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

  /**
  * Construct a floatable toolbar 
  * Normally, the toolbar is docked under window p.
  * When floated, the toolbar can be docked under window q, which is
  * typically an FXToolbarShell window.
  */
  FXPyToolbar *CreateFloatingToolbar(FXComposite* p,FXComposite* q,FXuint opts=LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X,FXint x=0,FXint y=0,FXint w=0,FXint h=0,FXint pl=3,FXint pr=3,FXint pt=2,FXint pb=2,FXint hs=DEFAULT_SPACING,FXint vs=DEFAULT_SPACING) {
    return new FXPyToolbar(p,q,opts,x,y,w,h,pl,pr,pt,pb,hs,vs);
  }

  /**
  * Construct a non-floatable toolbar.
  * The toolbar can not be undocked.
  */
  FXPyToolbar* CreateNonFloatingToolbar(FXComposite* p,FXuint opts=LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X,FXint x=0,FXint y=0,FXint w=0,FXint h=0,FXint pl=2,FXint pr=3,FXint pt=3,FXint pb=2,FXint hs=DEFAULT_SPACING,FXint vs=DEFAULT_SPACING) {
    return new FXPyToolbar(p,opts,x,y,w,h,pl,pr,pt,pb,hs,vs);
  }
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_CreateFloatingToolbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _result;
    FXComposite * _arg0;
    FXComposite * _arg1;
    FXuint  _arg2 = (FXuint ) LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 3;
    FXint  _arg8 = (FXint ) 3;
    FXint  _arg9 = (FXint ) 2;
    FXint  _arg10 = (FXint ) 2;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    FXint  _arg12 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "p","q","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|iiiiiiiiiii:CreateFloatingToolbar",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of CreateFloatingToolbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of CreateFloatingToolbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbar *)CreateFloatingToolbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static PyObject *_wrap_CreateNonFloatingToolbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 2;
    FXint  _arg7 = (FXint ) 3;
    FXint  _arg8 = (FXint ) 3;
    FXint  _arg9 = (FXint ) 2;
    FXint  _arg10 = (FXint ) DEFAULT_SPACING;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiiiiiii:CreateNonFloatingToolbar",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of CreateNonFloatingToolbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbar *)CreateNonFloatingToolbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXLabelToFXFrame(void *ptr) {
    FXLabel *src;
    FXFrame *dest;
    src = (FXLabel *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXLabelToFXWindow(void *ptr) {
    FXLabel *src;
    FXWindow *dest;
    src = (FXLabel *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXLabelToFXDrawable(void *ptr) {
    FXLabel *src;
    FXDrawable *dest;
    src = (FXLabel *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXLabelToFXId(void *ptr) {
    FXLabel *src;
    FXId *dest;
    src = (FXLabel *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXLabelToFXObject(void *ptr) {
    FXLabel *src;
    FXObject *dest;
    src = (FXLabel *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Label_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onPaint. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onHotKeyPress. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onHotKeyRelease. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onCmdGetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onCmdGetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onCmdGetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onCmdGetStringValue. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onCmdGetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onCmdGetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onCmdSetStringValue. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onQueryHelp. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Label_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Label_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Label_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_onQueryTip. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Label_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Label_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Label(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXLabel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_Label(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) 0;
    FXuint  _arg3 = (FXuint ) (LABEL_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","ic","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiii:new_FX_Label",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Label. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXLabel *)new_FX_Label(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXLabel_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Label_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_Label_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Label_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Label_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_Label_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Label_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Label_setIcon(_swigobj,_swigarg0)  (_swigobj->setIcon(_swigarg0))
static PyObject *_wrap_FX_Label_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Label_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setIcon. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Label_getIcon(_swigobj)  (_swigobj->getIcon())
static PyObject *_wrap_FX_Label_getIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getIcon. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_Label_getIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Label_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_Label_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Label_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setFont. Expected _FXLabel_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Label_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Label_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_Label_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getFont. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_Label_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Label_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_Label_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getTextColor. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Label_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Label_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_Label_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Label_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setTextColor. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Label_setJustify(_swigobj,_swigarg0)  (_swigobj->setJustify(_swigarg0))
static PyObject *_wrap_FX_Label_setJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Label_setJustify",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setJustify. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setJustify(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Label_getJustify(_swigobj)  (_swigobj->getJustify())
static PyObject *_wrap_FX_Label_getJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getJustify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getJustify. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Label_getJustify(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Label_setIconPosition(_swigobj,_swigarg0)  (_swigobj->setIconPosition(_swigarg0))
static PyObject *_wrap_FX_Label_setIconPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Label_setIconPosition",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setIconPosition. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setIconPosition(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Label_getIconPosition(_swigobj)  (_swigobj->getIconPosition())
static PyObject *_wrap_FX_Label_getIconPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getIconPosition",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getIconPosition. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Label_getIconPosition(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Label_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_Label_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Label_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setHelpText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Label_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_Label_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getHelpText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Label_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Label_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_Label_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXLabel * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Label_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_setTipText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Label_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Label_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_Label_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Label_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Label_getTipText. Expected _FXLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Label_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyLabelToFXLabel(void *ptr) {
    FXPyLabel *src;
    FXLabel *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyLabelToFXFrame(void *ptr) {
    FXPyLabel *src;
    FXFrame *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyLabelToFXWindow(void *ptr) {
    FXPyLabel *src;
    FXWindow *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyLabelToFXDrawable(void *ptr) {
    FXPyLabel *src;
    FXDrawable *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyLabelToFXId(void *ptr) {
    FXPyLabel *src;
    FXId *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyLabelToFXObject(void *ptr) {
    FXPyLabel *src;
    FXObject *dest;
    src = (FXPyLabel *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXLabel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyLabel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXLabel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) 0;
    FXuint  _arg3 = (FXuint ) (LABEL_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","ic","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiii:new_FXLabel",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXLabel. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyLabel *)new_FXLabel(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyLabel_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXLabel_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXLabel_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyLabel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXLabel_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_onDefault. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXLabel_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXLabel_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXLabel_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_create. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXLabel_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_destroy. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXLabel_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_detach. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXLabel_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXLabel_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_resize. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXLabel_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_getDefaultWidth. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXLabel_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXLabel_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXLabel_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_getDefaultHeight. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXLabel_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXLabel_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXLabel_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_show. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXLabel_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_hide. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXLabel_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_enable. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXLabel_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_disable. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXLabel_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_canFocus. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXLabel_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXLabel_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXLabel_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_setFocus. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXLabel_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_killFocus. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXLabel_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXLabel_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_setDefault. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXLabel_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_recalc. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXLabel_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_layout. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXLabel_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_lower. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXLabel_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXLabel_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_move. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXLabel_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXLabel_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_position. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXLabel_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_isComposite. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXLabel_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXLabel_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXLabel_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyLabel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXLabel_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_contains. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXLabel_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXLabel_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXLabel_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyLabel * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXLabel_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_getWidthForHeight. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXLabel_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXLabel_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXLabel_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyLabel * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXLabel_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_getHeightForWidth. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXLabel_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXLabel_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXLabel_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyLabel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXLabel_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_doesSaveUnder. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXLabel_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXLabel_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXLabel_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXLabel_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_reparent. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXLabel_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXLabel_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXLabel_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyLabel * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXLabel_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyLabel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXLabel_setBackColor. Expected _FXPyLabel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXLabel_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXDialToFXFrame(void *ptr) {
    FXDial *src;
    FXFrame *dest;
    src = (FXDial *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXDialToFXWindow(void *ptr) {
    FXDial *src;
    FXWindow *dest;
    src = (FXDial *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXDialToFXDrawable(void *ptr) {
    FXDial *src;
    FXDrawable *dest;
    src = (FXDial *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXDialToFXId(void *ptr) {
    FXDial *src;
    FXId *dest;
    src = (FXDial *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXDialToFXObject(void *ptr) {
    FXDial *src;
    FXObject *dest;
    src = (FXDial *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Dial_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onPaint. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onMotion. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onMouseWheel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMouseWheel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onMouseWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onMouseWheel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onMouseWheel. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onMouseWheel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onMouseWheel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onLeftBtnPress. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onLeftBtnRelease. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onUngrabbed. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdSetValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdSetIntValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdGetIntValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdSetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdSetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdSetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdSetRealValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdSetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdSetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdGetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdGetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdGetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdGetRealValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdGetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdGetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdSetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdSetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdSetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdSetIntRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdSetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdSetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdGetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdGetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdGetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdGetIntRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdGetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdGetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdSetRealRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetRealRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdSetRealRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdSetRealRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdSetRealRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdSetRealRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdSetRealRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onCmdGetRealRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetRealRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onCmdGetRealRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onCmdGetRealRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onCmdGetRealRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onCmdGetRealRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onCmdGetRealRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onQueryHelp. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Dial_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Dial_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Dial_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_onQueryTip. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Dial_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Dial_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Dial(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXDial(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_Dial(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (DIAL_VERTICAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_Dial",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Dial. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDial *)new_FX_Dial(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDial_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Dial_setRange(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setRange(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Dial_setRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","lo","hi", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Dial_setRange",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setRange(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject * FXDial_getRange(FXDial *self) {
      FXint lo,hi;
      self->getRange(lo,hi);
      FXbool doSave = FXPyRestoreThread();
      PyObject* tuple = PyTuple_New(2);
      if (tuple) {
	PyObject *obj1 = PyInt_FromLong(lo);
	if (!obj1 || PyTuple_SetItem(tuple, 0, obj1) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
	PyObject *obj2 = PyInt_FromLong(hi);
	if (!obj2 || PyTuple_SetItem(tuple, 1, obj2) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
      }
      FXPySaveThread(doSave);
      return tuple;
    }
static PyObject *_wrap_FX_Dial_getRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getRange",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getRange. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXDial_getRange(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Dial_setValue(_swigobj,_swigarg0)  (_swigobj->setValue(_swigarg0))
static PyObject *_wrap_FX_Dial_setValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dial_setValue",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setValue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dial_getValue(_swigobj)  (_swigobj->getValue())
static PyObject *_wrap_FX_Dial_getValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getValue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getValue. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dial_getValue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dial_setRevolutionIncrement(_swigobj,_swigarg0)  (_swigobj->setRevolutionIncrement(_swigarg0))
static PyObject *_wrap_FX_Dial_setRevolutionIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","i", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dial_setRevolutionIncrement",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setRevolutionIncrement. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setRevolutionIncrement(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dial_getRevolutionIncrement(_swigobj)  (_swigobj->getRevolutionIncrement())
static PyObject *_wrap_FX_Dial_getRevolutionIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getRevolutionIncrement",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getRevolutionIncrement. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dial_getRevolutionIncrement(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dial_setNotchSpacing(_swigobj,_swigarg0)  (_swigobj->setNotchSpacing(_swigarg0))
static PyObject *_wrap_FX_Dial_setNotchSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","spacing", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dial_setNotchSpacing",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setNotchSpacing. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setNotchSpacing(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dial_getNotchSpacing(_swigobj)  (_swigobj->getNotchSpacing())
static PyObject *_wrap_FX_Dial_getNotchSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getNotchSpacing",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getNotchSpacing. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dial_getNotchSpacing(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dial_setNotchOffset(_swigobj,_swigarg0)  (_swigobj->setNotchOffset(_swigarg0))
static PyObject *_wrap_FX_Dial_setNotchOffset(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","offset", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dial_setNotchOffset",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setNotchOffset. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setNotchOffset(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dial_getNotchOffset(_swigobj)  (_swigobj->getNotchOffset())
static PyObject *_wrap_FX_Dial_getNotchOffset(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getNotchOffset",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getNotchOffset. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Dial_getNotchOffset(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dial_getDialStyle(_swigobj)  (_swigobj->getDialStyle())
static PyObject *_wrap_FX_Dial_getDialStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getDialStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getDialStyle. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Dial_getDialStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Dial_setDialStyle(_swigobj,_swigarg0)  (_swigobj->setDialStyle(_swigarg0))
static PyObject *_wrap_FX_Dial_setDialStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","opts", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Dial_setDialStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setDialStyle. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setDialStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Dial_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_Dial_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Dial_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setHelpText. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Dial_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_Dial_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getHelpText. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Dial_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Dial_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_Dial_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDial * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Dial_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_setTipText. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Dial_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Dial_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_Dial_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Dial_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Dial_getTipText. Expected _FXDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Dial_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyDialToFXDial(void *ptr) {
    FXPyDial *src;
    FXDial *dest;
    src = (FXPyDial *) ptr;
    dest = (FXDial *) src;
    return (void *) dest;
}

static void *SwigFXPyDialToFXFrame(void *ptr) {
    FXPyDial *src;
    FXFrame *dest;
    src = (FXPyDial *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyDialToFXWindow(void *ptr) {
    FXPyDial *src;
    FXWindow *dest;
    src = (FXPyDial *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyDialToFXDrawable(void *ptr) {
    FXPyDial *src;
    FXDrawable *dest;
    src = (FXPyDial *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyDialToFXId(void *ptr) {
    FXPyDial *src;
    FXId *dest;
    src = (FXPyDial *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyDialToFXObject(void *ptr) {
    FXPyDial *src;
    FXObject *dest;
    src = (FXPyDial *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDial(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyDial(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXDial(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (DIAL_VERTICAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXDial",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXDial. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDial *)new_FXDial(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDial_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDial_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDial_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDial * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDial_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_onDefault. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDial_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXDial_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXDial_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_create. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXDial_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_destroy. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXDial_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_detach. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDial_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDial_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_resize. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXDial_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_getDefaultWidth. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDial_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDial_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXDial_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_getDefaultHeight. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDial_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDial_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXDial_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_show. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXDial_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_hide. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXDial_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_enable. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXDial_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_disable. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXDial_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_canFocus. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDial_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDial_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXDial_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_setFocus. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXDial_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_killFocus. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXDial_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXDial_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_setDefault. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXDial_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_recalc. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXDial_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_layout. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXDial_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_lower. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDial_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDial_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_move. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXDial_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXDial_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_position. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXDial_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_isComposite. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDial_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDial_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDial_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDial * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDial_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_contains. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDial_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDial_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXDial_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDial_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_getWidthForHeight. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDial_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDial_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXDial_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDial * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDial_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_getHeightForWidth. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDial_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDial_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXDial_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDial * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDial_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_doesSaveUnder. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDial_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDial_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXDial_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXDial_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_reparent. Expected _FXPyDial_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXDial_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDial_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXDial_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDial * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDial_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDial_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDial_setBackColor. Expected _FXPyDial_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDial_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXColorWellToFXFrame(void *ptr) {
    FXColorWell *src;
    FXFrame *dest;
    src = (FXColorWell *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXColorWellToFXWindow(void *ptr) {
    FXColorWell *src;
    FXWindow *dest;
    src = (FXColorWell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXColorWellToFXDrawable(void *ptr) {
    FXColorWell *src;
    FXDrawable *dest;
    src = (FXColorWell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXColorWellToFXId(void *ptr) {
    FXColorWell *src;
    FXId *dest;
    src = (FXColorWell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXColorWellToFXObject(void *ptr) {
    FXColorWell *src;
    FXObject *dest;
    src = (FXColorWell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ColorWell_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onPaint. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onLeftBtnPress. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onLeftBtnRelease. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onMiddleBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onMiddleBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onMiddleBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onMiddleBtnPress. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onMiddleBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onMiddleBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onMiddleBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onMiddleBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onMiddleBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onMiddleBtnRelease. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onMiddleBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onMiddleBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onKeyPress. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onKeyRelease. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onUngrabbed. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onMotion. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onBeginDrag(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onBeginDrag(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onBeginDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onBeginDrag",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onBeginDrag. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onBeginDrag. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onBeginDrag(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onEndDrag(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEndDrag(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onEndDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onEndDrag",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onEndDrag. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onEndDrag. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onEndDrag(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDragged(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDragged(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDragged(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDragged",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDragged. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDragged. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDragged(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onFocusIn. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onFocusOut. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDNDEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDNDEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDNDEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDNDEnter. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDNDEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDNDEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDNDLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDNDLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDNDLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDNDLeave. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDNDLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDNDLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDNDMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDNDMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDNDMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDNDMotion. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDNDMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDNDMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDNDDrop(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDDrop(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDNDDrop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDNDDrop",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDNDDrop. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDNDDrop. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDNDDrop(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDNDRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDNDRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDNDRequest",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDNDRequest. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDNDRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDNDRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onSelectionLost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionLost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onSelectionLost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onSelectionLost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onSelectionLost. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onSelectionLost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onSelectionLost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onSelectionGained(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionGained(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onSelectionGained(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onSelectionGained",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onSelectionGained. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onSelectionGained. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onSelectionGained(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onSelectionRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onSelectionRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onSelectionRequest",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onSelectionRequest. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onSelectionRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onSelectionRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onClicked. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onDoubleClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDoubleClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onDoubleClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onDoubleClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onDoubleClicked. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onDoubleClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onDoubleClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onTripleClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTripleClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onTripleClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onTripleClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onTripleClicked. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onTripleClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onTripleClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onQueryHelp. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onQueryTip. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onCmdSetValue. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onCmdColorWell(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdColorWell(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onCmdColorWell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onCmdColorWell",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onCmdColorWell. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onCmdColorWell. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onCmdColorWell(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onChgColorWell(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onChgColorWell(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onChgColorWell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onChgColorWell",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onChgColorWell. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onChgColorWell. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onChgColorWell(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onCmdSetIntValue. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWell_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWell_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWell_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_onCmdGetIntValue. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWell_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWell_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ColorWell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXColorWell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_ColorWell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWell * _result;
    FXComposite * _arg0;
    FXColor  _arg1 = (FXColor ) 0;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (COLORWELL_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","clr","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iOiiiiiiiiii:new_FX_ColorWell",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ColorWell. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColorWell *)new_FX_ColorWell(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXColorWell_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ColorWell_setRGBA(_swigobj,_swigarg0)  (_swigobj->setRGBA(_swigarg0))
static PyObject *_wrap_FX_ColorWell_setRGBA(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ColorWell_setRGBA",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_setRGBA. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWell_setRGBA(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorWell_getRGBA(_swigobj)  (_swigobj->getRGBA())
static PyObject *_wrap_FX_ColorWell_getRGBA(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWell_getRGBA",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_getRGBA. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ColorWell_getRGBA(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ColorWell_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ColorWell_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWell * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorWell_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_setHelpText. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWell_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorWell_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ColorWell_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWell_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_getHelpText. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorWell_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ColorWell_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ColorWell_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWell * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorWell_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_setTipText. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWell_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorWell_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ColorWell_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWell_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_getTipText. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorWell_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ColorWell_isOpaqueOnly(_swigobj)  (_swigobj->isOpaqueOnly())
static PyObject *_wrap_FX_ColorWell_isOpaqueOnly(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWell_isOpaqueOnly",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_isOpaqueOnly. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ColorWell_isOpaqueOnly(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ColorWell_setOpaqueOnly(_swigobj,_swigarg0)  (_swigobj->setOpaqueOnly(_swigarg0))
static PyObject *_wrap_FX_ColorWell_setOpaqueOnly(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWell * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","opaque", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ColorWell_setOpaqueOnly",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWell_setOpaqueOnly. Expected _FXColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWell_setOpaqueOnly(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyColorWellToFXColorWell(void *ptr) {
    FXPyColorWell *src;
    FXColorWell *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXColorWell *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWellToFXFrame(void *ptr) {
    FXPyColorWell *src;
    FXFrame *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWellToFXWindow(void *ptr) {
    FXPyColorWell *src;
    FXWindow *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWellToFXDrawable(void *ptr) {
    FXPyColorWell *src;
    FXDrawable *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWellToFXId(void *ptr) {
    FXPyColorWell *src;
    FXId *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWellToFXObject(void *ptr) {
    FXPyColorWell *src;
    FXObject *dest;
    src = (FXPyColorWell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXColorWell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyColorWell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXColorWell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _result;
    FXComposite * _arg0;
    FXColor  _arg1 = (FXColor ) 0;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (COLORWELL_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","clr","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iOiiiiiiiiii:new_FXColorWell",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXColorWell. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyColorWell *)new_FXColorWell(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyColorWell_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXColorWell_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXColorWell_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyColorWell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXColorWell_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_onDefault. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXColorWell_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXColorWell_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXColorWell_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_create. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXColorWell_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_destroy. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXColorWell_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_detach. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWell_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWell_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_resize. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXColorWell_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_getDefaultWidth. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWell_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWell_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXColorWell_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_getDefaultHeight. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWell_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWell_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXColorWell_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_show. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXColorWell_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_hide. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXColorWell_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_enable. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXColorWell_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_disable. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXColorWell_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_canFocus. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWell_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWell_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXColorWell_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_setFocus. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXColorWell_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_killFocus. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXColorWell_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXColorWell_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_setDefault. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXColorWell_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_recalc. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXColorWell_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_layout. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXColorWell_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_lower. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWell_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWell_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_move. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXColorWell_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXColorWell_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_position. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXColorWell_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_isComposite. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWell_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWell_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWell_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWell_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_contains. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWell_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWell_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXColorWell_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWell_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_getWidthForHeight. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWell_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWell_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXColorWell_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWell_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_getHeightForWidth. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWell_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWell_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXColorWell_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWell_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_doesSaveUnder. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWell_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWell_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXColorWell_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXColorWell_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_reparent. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXColorWell_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWell_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXColorWell_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWell_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWell_setBackColor. Expected _FXPyColorWell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWell_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTextFieldToFXFrame(void *ptr) {
    FXTextField *src;
    FXFrame *dest;
    src = (FXTextField *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXTextFieldToFXWindow(void *ptr) {
    FXTextField *src;
    FXWindow *dest;
    src = (FXTextField *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTextFieldToFXDrawable(void *ptr) {
    FXTextField *src;
    FXDrawable *dest;
    src = (FXTextField *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTextFieldToFXId(void *ptr) {
    FXTextField *src;
    FXId *dest;
    src = (FXTextField *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTextFieldToFXObject(void *ptr) {
    FXTextField *src;
    FXObject *dest;
    src = (FXTextField *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_TextField_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onPaint. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onKeyPress. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onKeyRelease. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onLeftBtnPress. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onLeftBtnRelease. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onMiddleBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onMiddleBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onMiddleBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onMiddleBtnPress. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onMiddleBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onMiddleBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onMiddleBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onMiddleBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onMiddleBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onMiddleBtnRelease. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onMiddleBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onMiddleBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onVerify(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onVerify(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onVerify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onVerify",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onVerify. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onVerify. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onVerify(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onMotion. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onSelectionLost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionLost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onSelectionLost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onSelectionLost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onSelectionLost. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onSelectionLost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onSelectionLost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onSelectionGained(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionGained(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onSelectionGained(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onSelectionGained",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onSelectionGained. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onSelectionGained. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onSelectionGained(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onSelectionRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onSelectionRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onSelectionRequest",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onSelectionRequest. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onSelectionRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onClipboardLost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardLost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onClipboardLost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onClipboardLost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onClipboardLost. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onClipboardLost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onClipboardLost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onClipboardGained(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardGained(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onClipboardGained(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onClipboardGained",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onClipboardGained. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onClipboardGained. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onClipboardGained(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onClipboardRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onClipboardRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onClipboardRequest",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onClipboardRequest. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onClipboardRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onClipboardRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onFocusSelf(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusSelf(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onFocusSelf(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onFocusSelf",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onFocusSelf. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onFocusSelf. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onFocusSelf(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onFocusIn. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onFocusOut. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onBlink(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onBlink(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onBlink(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onBlink",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onBlink. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onBlink. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onBlink(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onAutoScroll(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onAutoScroll(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onAutoScroll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onAutoScroll",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onAutoScroll. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onAutoScroll. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onAutoScroll(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onQueryHelp. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onQueryTip. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdSetValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdSetIntValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdSetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdSetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdSetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdSetRealValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdSetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdSetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdSetStringValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdGetIntValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdGetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdGetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdGetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdGetRealValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdGetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdGetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdGetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdGetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdGetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdGetStringValue. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdGetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdGetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCursorHome(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCursorHome(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCursorHome(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCursorHome",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCursorHome. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCursorHome. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCursorHome(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCursorEnd(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCursorEnd(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCursorEnd(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCursorEnd",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCursorEnd. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCursorEnd. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCursorEnd(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCursorRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCursorRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCursorRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCursorRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCursorRight. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCursorRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCursorRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCursorLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCursorLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCursorLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCursorLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCursorLeft. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCursorLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCursorLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdMark(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdMark(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdMark(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdMark",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdMark. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdMark. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdMark(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdExtend(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdExtend(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdExtend(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdExtend",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdExtend. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdExtend. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdExtend(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdSelectAll(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSelectAll(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdSelectAll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdSelectAll",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdSelectAll. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdSelectAll. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdSelectAll(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdDeselectAll(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDeselectAll(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdDeselectAll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdDeselectAll",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdDeselectAll. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdDeselectAll. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdDeselectAll(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCutSel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCutSel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCutSel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCutSel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCutSel. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCutSel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCutSel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdCopySel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCopySel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdCopySel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdCopySel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdCopySel. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdCopySel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdCopySel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdPasteSel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdPasteSel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdPasteSel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdPasteSel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdPasteSel. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdPasteSel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdPasteSel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdDeleteSel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDeleteSel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdDeleteSel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdDeleteSel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdDeleteSel. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdDeleteSel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdDeleteSel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdOverstString(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdOverstString(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdOverstString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdOverstString",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdOverstString. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdOverstString. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdOverstString(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdInsertString(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdInsertString(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdInsertString(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdInsertString",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdInsertString. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdInsertString. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdInsertString(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdBackspace(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdBackspace(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdBackspace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdBackspace",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdBackspace. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdBackspace. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdBackspace(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdDelete(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDelete(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdDelete(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdDelete",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdDelete. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdDelete. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdDelete(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdToggleEditable(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdToggleEditable(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdToggleEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdToggleEditable",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdToggleEditable. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdToggleEditable. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdToggleEditable(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onUpdToggleEditable(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdToggleEditable(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onUpdToggleEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onUpdToggleEditable",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onUpdToggleEditable. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onUpdToggleEditable. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onUpdToggleEditable(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onCmdToggleOverstrike(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdToggleOverstrike(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onCmdToggleOverstrike(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onCmdToggleOverstrike",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onCmdToggleOverstrike. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onCmdToggleOverstrike. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onCmdToggleOverstrike(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TextField_onUpdToggleOverstrike(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdToggleOverstrike(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TextField_onUpdToggleOverstrike(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TextField_onUpdToggleOverstrike",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_onUpdToggleOverstrike. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TextField_onUpdToggleOverstrike. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TextField_onUpdToggleOverstrike(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_TextField(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXTextField(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_TextField(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (TEXTFIELD_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","ncols","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FX_TextField",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TextField. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTextField *)new_FX_TextField(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTextField_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_TextField_isEditable(_swigobj)  (_swigobj->isEditable())
static PyObject *_wrap_FX_TextField_isEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_isEditable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_isEditable. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_isEditable(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_setEditable(_swigobj,_swigarg0)  (_swigobj->setEditable(_swigarg0))
static PyObject *_wrap_FX_TextField_setEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","edit", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_TextField_setEditable",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setEditable. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setEditable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_setCursorPos(_swigobj,_swigarg0)  (_swigobj->setCursorPos(_swigarg0))
static PyObject *_wrap_FX_TextField_setCursorPos(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setCursorPos",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setCursorPos. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setCursorPos(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getCursorPos(_swigobj)  (_swigobj->getCursorPos())
static PyObject *_wrap_FX_TextField_getCursorPos(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getCursorPos",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getCursorPos. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TextField_getCursorPos(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setAnchorPos(_swigobj,_swigarg0)  (_swigobj->setAnchorPos(_swigarg0))
static PyObject *_wrap_FX_TextField_setAnchorPos(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setAnchorPos",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setAnchorPos. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setAnchorPos(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getAnchorPos(_swigobj)  (_swigobj->getAnchorPos())
static PyObject *_wrap_FX_TextField_getAnchorPos(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getAnchorPos",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getAnchorPos. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TextField_getAnchorPos(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_TextField_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TextField_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_TextField_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_TextField_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_TextField_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_TextField_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_TextField_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TextField_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setFont. Expected _FXTextField_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_TextField_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_TextField_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getFont. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_TextField_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_TextField_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_TextField_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setTextColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_TextField_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getTextColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_TextField_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setSelBackColor(_swigobj,_swigarg0)  (_swigobj->setSelBackColor(_swigarg0))
static PyObject *_wrap_FX_TextField_setSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setSelBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setSelBackColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setSelBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getSelBackColor(_swigobj)  (_swigobj->getSelBackColor())
static PyObject *_wrap_FX_TextField_getSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getSelBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getSelBackColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_TextField_getSelBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setSelTextColor(_swigobj,_swigarg0)  (_swigobj->setSelTextColor(_swigarg0))
static PyObject *_wrap_FX_TextField_setSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setSelTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setSelTextColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setSelTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getSelTextColor(_swigobj)  (_swigobj->getSelTextColor())
static PyObject *_wrap_FX_TextField_getSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getSelTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getSelTextColor. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_TextField_getSelTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setNumColumns(_swigobj,_swigarg0)  (_swigobj->setNumColumns(_swigarg0))
static PyObject *_wrap_FX_TextField_setNumColumns(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","cols", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setNumColumns",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setNumColumns. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setNumColumns(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getNumColumns(_swigobj)  (_swigobj->getNumColumns())
static PyObject *_wrap_FX_TextField_getNumColumns(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getNumColumns",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getNumColumns. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TextField_getNumColumns(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setJustify(_swigobj,_swigarg0)  (_swigobj->setJustify(_swigarg0))
static PyObject *_wrap_FX_TextField_setJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setJustify",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setJustify. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setJustify(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getJustify(_swigobj)  (_swigobj->getJustify())
static PyObject *_wrap_FX_TextField_getJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getJustify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getJustify. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TextField_getJustify(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_TextField_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TextField_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setHelpText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_TextField_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_TextField_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getHelpText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_TextField_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_TextField_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_TextField_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TextField_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setTipText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_TextField_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_TextField_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getTipText. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_TextField_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_TextField_setTextStyle(_swigobj,_swigarg0)  (_swigobj->setTextStyle(_swigarg0))
static PyObject *_wrap_FX_TextField_setTextStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_setTextStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setTextStyle. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_setTextStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TextField_getTextStyle(_swigobj)  (_swigobj->getTextStyle())
static PyObject *_wrap_FX_TextField_getTextStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_getTextStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_getTextStyle. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TextField_getTextStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TextField_selectAll(_swigobj)  (_swigobj->selectAll())
static PyObject *_wrap_FX_TextField_selectAll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_selectAll",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_selectAll. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_selectAll(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_setSelection(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setSelection(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_TextField_setSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos","len", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_TextField_setSelection",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_setSelection. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_setSelection(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_extendSelection(_swigobj,_swigarg0)  (_swigobj->extendSelection(_swigarg0))
static PyObject *_wrap_FX_TextField_extendSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_extendSelection",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_extendSelection. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_extendSelection(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_killSelection(_swigobj)  (_swigobj->killSelection())
static PyObject *_wrap_FX_TextField_killSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TextField_killSelection",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_killSelection. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_killSelection(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_isPosSelected(_swigobj,_swigarg0)  (_swigobj->isPosSelected(_swigarg0))
static PyObject *_wrap_FX_TextField_isPosSelected(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_isPosSelected",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_isPosSelected. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_isPosSelected(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_isPosVisible(_swigobj,_swigarg0)  (_swigobj->isPosVisible(_swigarg0))
static PyObject *_wrap_FX_TextField_isPosVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_isPosVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_isPosVisible. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TextField_isPosVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TextField_makePositionVisible(_swigobj,_swigarg0)  (_swigobj->makePositionVisible(_swigarg0))
static PyObject *_wrap_FX_TextField_makePositionVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pos", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TextField_makePositionVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TextField_makePositionVisible. Expected _FXTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TextField_makePositionVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTextFieldToFXTextField(void *ptr) {
    FXPyTextField *src;
    FXTextField *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXTextField *) src;
    return (void *) dest;
}

static void *SwigFXPyTextFieldToFXFrame(void *ptr) {
    FXPyTextField *src;
    FXFrame *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyTextFieldToFXWindow(void *ptr) {
    FXPyTextField *src;
    FXWindow *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTextFieldToFXDrawable(void *ptr) {
    FXPyTextField *src;
    FXDrawable *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTextFieldToFXId(void *ptr) {
    FXPyTextField *src;
    FXId *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTextFieldToFXObject(void *ptr) {
    FXPyTextField *src;
    FXObject *dest;
    src = (FXPyTextField *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTextField(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyTextField(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXTextField(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (TEXTFIELD_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","cols","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FXTextField",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTextField. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTextField *)new_FXTextField(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTextField_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXTextField_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTextField_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTextField * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTextField_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_onDefault. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTextField_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTextField_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTextField_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_create. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTextField_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_destroy. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTextField_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_detach. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTextField_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTextField_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_resize. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTextField_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_getDefaultWidth. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTextField_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTextField_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTextField_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_getDefaultHeight. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTextField_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTextField_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTextField_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_show. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTextField_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_hide. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTextField_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_enable. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTextField_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_disable. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTextField_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_canFocus. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTextField_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTextField_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTextField_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_setFocus. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTextField_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_killFocus. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTextField_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTextField_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_setDefault. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTextField_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_recalc. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTextField_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_layout. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTextField_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_lower. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTextField_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTextField_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_move. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTextField_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTextField_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_position. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTextField_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_isComposite. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTextField_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTextField_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTextField_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTextField * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTextField_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_contains. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTextField_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTextField_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTextField_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTextField_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_getWidthForHeight. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTextField_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTextField_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTextField_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTextField * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTextField_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_getHeightForWidth. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTextField_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTextField_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTextField_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTextField * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTextField_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_doesSaveUnder. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTextField_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTextField_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTextField_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTextField_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_reparent. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTextField_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTextField_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTextField_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTextField * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTextField_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTextField_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTextField_setBackColor. Expected _FXPyTextField_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTextField_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXButtonToFXLabel(void *ptr) {
    FXButton *src;
    FXLabel *dest;
    src = (FXButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXButtonToFXFrame(void *ptr) {
    FXButton *src;
    FXFrame *dest;
    src = (FXButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXButtonToFXWindow(void *ptr) {
    FXButton *src;
    FXWindow *dest;
    src = (FXButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXButtonToFXDrawable(void *ptr) {
    FXButton *src;
    FXDrawable *dest;
    src = (FXButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXButtonToFXId(void *ptr) {
    FXButton *src;
    FXId *dest;
    src = (FXButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXButtonToFXObject(void *ptr) {
    FXButton *src;
    FXObject *dest;
    src = (FXButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Button_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onPaint. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onUpdate. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onEnter. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onLeave. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onFocusIn. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onFocusOut. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onUngrabbed. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onLeftBtnPress. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onLeftBtnRelease. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onKeyPress. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onKeyRelease. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onHotKeyPress. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onHotKeyRelease. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onCheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onCheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onCheck. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onCheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onCheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onUncheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUncheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onUncheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onUncheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onUncheck. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onUncheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onUncheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onCmdSetValue. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onCmdSetIntValue. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Button_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Button_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Button_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_onCmdGetIntValue. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Button_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Button_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Button(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FX_Button(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (BUTTON_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FX_Button",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Button. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXButton *)new_FX_Button(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Button_setState(_swigobj,_swigarg0)  (_swigobj->setState(_swigarg0))
static PyObject *_wrap_FX_Button_setState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Button_setState",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_setState. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Button_setState(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Button_getState(_swigobj)  (_swigobj->getState())
static PyObject *_wrap_FX_Button_getState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Button_getState",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_getState. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Button_getState(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Button_setButtonStyle(_swigobj,_swigarg0)  (_swigobj->setButtonStyle(_swigarg0))
static PyObject *_wrap_FX_Button_setButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Button_setButtonStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_setButtonStyle. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Button_setButtonStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Button_getButtonStyle(_swigobj)  (_swigobj->getButtonStyle())
static PyObject *_wrap_FX_Button_getButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Button_getButtonStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Button_getButtonStyle. Expected _FXButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Button_getButtonStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyButtonToFXButton(void *ptr) {
    FXPyButton *src;
    FXButton *dest;
    src = (FXPyButton *) ptr;
    dest = (FXButton *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXLabel(void *ptr) {
    FXPyButton *src;
    FXLabel *dest;
    src = (FXPyButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXFrame(void *ptr) {
    FXPyButton *src;
    FXFrame *dest;
    src = (FXPyButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXWindow(void *ptr) {
    FXPyButton *src;
    FXWindow *dest;
    src = (FXPyButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXDrawable(void *ptr) {
    FXPyButton *src;
    FXDrawable *dest;
    src = (FXPyButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXId(void *ptr) {
    FXPyButton *src;
    FXId *dest;
    src = (FXPyButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyButtonToFXObject(void *ptr) {
    FXPyButton *src;
    FXObject *dest;
    src = (FXPyButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXPyButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FXButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (BUTTON_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FXButton",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyButton *)new_FXButton(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXButton_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXButton_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXButton_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_onDefault. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXButton_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXButton_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXButton_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_create. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXButton_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_destroy. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXButton_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_detach. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXButton_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXButton_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_resize. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXButton_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_getDefaultWidth. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXButton_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXButton_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXButton_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_getDefaultHeight. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXButton_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXButton_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXButton_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_show. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXButton_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_hide. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXButton_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_enable. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXButton_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_disable. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXButton_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_canFocus. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXButton_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXButton_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXButton_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_setFocus. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXButton_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_killFocus. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXButton_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXButton_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_setDefault. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXButton_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_recalc. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXButton_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_layout. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXButton_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_lower. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXButton_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXButton_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_move. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXButton_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXButton_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_position. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXButton_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_isComposite. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXButton_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXButton_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXButton_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXButton_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_contains. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXButton_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXButton_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXButton_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXButton_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_getWidthForHeight. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXButton_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXButton_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXButton_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXButton_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_getHeightForWidth. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXButton_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXButton_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXButton_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXButton_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_doesSaveUnder. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXButton_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXButton_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXButton_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXButton_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_reparent. Expected _FXPyButton_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXButton_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXButton_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXButton_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXButton_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXButton_setBackColor. Expected _FXPyButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXButton_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXToggleButtonToFXLabel(void *ptr) {
    FXToggleButton *src;
    FXLabel *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXToggleButtonToFXFrame(void *ptr) {
    FXToggleButton *src;
    FXFrame *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXToggleButtonToFXWindow(void *ptr) {
    FXToggleButton *src;
    FXWindow *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXToggleButtonToFXDrawable(void *ptr) {
    FXToggleButton *src;
    FXDrawable *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXToggleButtonToFXId(void *ptr) {
    FXToggleButton *src;
    FXId *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXToggleButtonToFXObject(void *ptr) {
    FXToggleButton *src;
    FXObject *dest;
    src = (FXToggleButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ToggleButton_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onPaint. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onUpdate. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onEnter. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onLeave. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onFocusIn. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onFocusOut. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onUngrabbed. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onLeftBtnPress. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onLeftBtnRelease. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onKeyPress. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onKeyRelease. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onHotKeyPress. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onHotKeyRelease. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onCheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onCheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onCheck. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onCheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onCheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onUncheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUncheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onUncheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onUncheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onUncheck. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onUncheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onUncheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onQueryHelp. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onQueryTip. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onCmdSetValue. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onCmdSetIntValue. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToggleButton_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToggleButton_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToggleButton_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_onCmdGetIntValue. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToggleButton_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToggleButton_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ToggleButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14,_swigarg15) (new FXToggleButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14,_swigarg15))
static PyObject *_wrap_new_FX_ToggleButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXIcon * _arg4 = (FXIcon *) NULL;
    FXObject * _arg5 = (FXObject *) NULL;
    FXSelector  _arg6 = (FXSelector ) 0;
    FXuint  _arg7 = (FXuint ) (TOGGLEBUTTON_NORMAL);
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) 0;
    FXint  _arg11 = (FXint ) 0;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    FXint  _arg14 = (FXint ) DEFAULT_PAD;
    FXint  _arg15 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;
    char *_kwnames[] = { "p","text1","text2","ic1","ic2","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO|OOOiiiiiiiiii:new_FX_ToggleButton",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13,&_arg14,&_arg15)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ToggleButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    if (_obj4 == Py_None)
	_arg4 = NULL;
    else
	SWIG_GetPtrObj(_obj4, (void**) &_arg4, "_FXIcon_p");
}
    if (_obj5)
{
    if (_obj5 == Py_None)
	_arg5 = NULL;
    else
	SWIG_GetPtrObj(_obj5, (void**) &_arg5, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXToggleButton *)new_FX_ToggleButton(_arg0,*_arg1,*_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13,_arg14,_arg15);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXToggleButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ToggleButton_setState(_swigobj,_swigarg0)  (_swigobj->setState(_swigarg0))
static PyObject *_wrap_FX_ToggleButton_setState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_ToggleButton_setState",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_setState. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToggleButton_setState(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToggleButton_getState(_swigobj)  (_swigobj->getState())
static PyObject *_wrap_FX_ToggleButton_getState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToggleButton_getState",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_getState. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ToggleButton_getState(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ToggleButton_setAltText(_swigobj,_swigarg0)  (_swigobj->setAltText(_swigarg0))
static PyObject *_wrap_FX_ToggleButton_setAltText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ToggleButton_setAltText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_setAltText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToggleButton_setAltText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ToggleButton_getAltText(_swigobj)  (_swigobj->getAltText())
static PyObject *_wrap_FX_ToggleButton_getAltText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToggleButton_getAltText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_getAltText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ToggleButton_getAltText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ToggleButton_setAltIcon(_swigobj,_swigarg0)  (_swigobj->setAltIcon(_swigarg0))
static PyObject *_wrap_FX_ToggleButton_setAltIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ToggleButton_setAltIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_setAltIcon. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToggleButton_setAltIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToggleButton_getAltIcon(_swigobj)  (_swigobj->getAltIcon())
static PyObject *_wrap_FX_ToggleButton_getAltIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToggleButton_getAltIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_getAltIcon. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_ToggleButton_getAltIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ToggleButton_setAltHelpText(_swigobj,_swigarg0)  (_swigobj->setAltHelpText(_swigarg0))
static PyObject *_wrap_FX_ToggleButton_setAltHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ToggleButton_setAltHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_setAltHelpText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToggleButton_setAltHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ToggleButton_getAltHelpText(_swigobj)  (_swigobj->getAltHelpText())
static PyObject *_wrap_FX_ToggleButton_getAltHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToggleButton_getAltHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_getAltHelpText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ToggleButton_getAltHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ToggleButton_setAltTipText(_swigobj,_swigarg0)  (_swigobj->setAltTipText(_swigarg0))
static PyObject *_wrap_FX_ToggleButton_setAltTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToggleButton * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ToggleButton_setAltTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_setAltTipText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToggleButton_setAltTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ToggleButton_getAltTipText(_swigobj)  (_swigobj->getAltTipText())
static PyObject *_wrap_FX_ToggleButton_getAltTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToggleButton_getAltTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToggleButton_getAltTipText. Expected _FXToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ToggleButton_getAltTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyToggleButtonToFXToggleButton(void *ptr) {
    FXPyToggleButton *src;
    FXToggleButton *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXToggleButton *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXLabel(void *ptr) {
    FXPyToggleButton *src;
    FXLabel *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXFrame(void *ptr) {
    FXPyToggleButton *src;
    FXFrame *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXWindow(void *ptr) {
    FXPyToggleButton *src;
    FXWindow *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXDrawable(void *ptr) {
    FXPyToggleButton *src;
    FXDrawable *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXId(void *ptr) {
    FXPyToggleButton *src;
    FXId *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyToggleButtonToFXObject(void *ptr) {
    FXPyToggleButton *src;
    FXObject *dest;
    src = (FXPyToggleButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXToggleButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14,_swigarg15) (new FXPyToggleButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14,_swigarg15))
static PyObject *_wrap_new_FXToggleButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXIcon * _arg4 = (FXIcon *) NULL;
    FXObject * _arg5 = (FXObject *) NULL;
    FXSelector  _arg6 = (FXSelector ) 0;
    FXuint  _arg7 = (FXuint ) (TOGGLEBUTTON_NORMAL);
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) 0;
    FXint  _arg11 = (FXint ) 0;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    FXint  _arg14 = (FXint ) DEFAULT_PAD;
    FXint  _arg15 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj5 = 0;
    char *_kwnames[] = { "p","text1","text2","ic1","ic2","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOO|OOOiiiiiiiiii:new_FXToggleButton",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_obj4,&_obj5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13,&_arg14,&_arg15)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXToggleButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    if (_obj4 == Py_None)
	_arg4 = NULL;
    else
	SWIG_GetPtrObj(_obj4, (void**) &_arg4, "_FXIcon_p");
}
    if (_obj5)
{
    if (_obj5 == Py_None)
	_arg5 = NULL;
    else
	SWIG_GetPtrObj(_obj5, (void**) &_arg5, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToggleButton *)new_FXToggleButton(_arg0,*_arg1,*_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13,_arg14,_arg15);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToggleButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
{
    delete _arg2;
}
    return _resultobj;
}

#define FXToggleButton_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXToggleButton_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyToggleButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXToggleButton_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_onDefault. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXToggleButton_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXToggleButton_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXToggleButton_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_create. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXToggleButton_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_destroy. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXToggleButton_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_detach. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToggleButton_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToggleButton_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_resize. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXToggleButton_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_getDefaultWidth. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToggleButton_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToggleButton_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXToggleButton_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_getDefaultHeight. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToggleButton_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToggleButton_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXToggleButton_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_show. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXToggleButton_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_hide. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXToggleButton_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_enable. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXToggleButton_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_disable. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXToggleButton_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_canFocus. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToggleButton_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToggleButton_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXToggleButton_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_setFocus. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXToggleButton_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_killFocus. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXToggleButton_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXToggleButton_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_setDefault. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXToggleButton_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_recalc. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXToggleButton_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_layout. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXToggleButton_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_lower. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToggleButton_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToggleButton_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_move. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXToggleButton_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXToggleButton_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_position. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXToggleButton_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_isComposite. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToggleButton_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToggleButton_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToggleButton_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToggleButton_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_contains. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToggleButton_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToggleButton_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXToggleButton_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToggleButton_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_getWidthForHeight. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToggleButton_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToggleButton_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXToggleButton_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToggleButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToggleButton_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_getHeightForWidth. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToggleButton_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToggleButton_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXToggleButton_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToggleButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToggleButton_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_doesSaveUnder. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToggleButton_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToggleButton_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXToggleButton_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXToggleButton_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_reparent. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXToggleButton_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToggleButton_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXToggleButton_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToggleButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToggleButton_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToggleButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToggleButton_setBackColor. Expected _FXPyToggleButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToggleButton_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXRadioButtonToFXLabel(void *ptr) {
    FXRadioButton *src;
    FXLabel *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXRadioButtonToFXFrame(void *ptr) {
    FXRadioButton *src;
    FXFrame *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXRadioButtonToFXWindow(void *ptr) {
    FXRadioButton *src;
    FXWindow *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXRadioButtonToFXDrawable(void *ptr) {
    FXRadioButton *src;
    FXDrawable *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXRadioButtonToFXId(void *ptr) {
    FXRadioButton *src;
    FXId *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXRadioButtonToFXObject(void *ptr) {
    FXRadioButton *src;
    FXObject *dest;
    src = (FXRadioButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_RadioButton_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onPaint. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onUpdate. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onEnter. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onLeave. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onFocusIn. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onFocusOut. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onUngrabbed. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onLeftBtnPress. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onLeftBtnRelease. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onKeyPress. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onKeyRelease. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onHotKeyPress. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onHotKeyRelease. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onUncheckRadio(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUncheckRadio(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onUncheckRadio(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onUncheckRadio",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onUncheckRadio. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onUncheckRadio. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onUncheckRadio(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onCheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onCheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onCheck. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onCheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onCheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onUncheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUncheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onUncheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onUncheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onUncheck. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onUncheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onUncheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onUnknown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUnknown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onUnknown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onUnknown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onUnknown. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onUnknown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onUnknown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onCmdSetValue. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onCmdSetIntValue. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_RadioButton_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_RadioButton_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_RadioButton_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_onCmdGetIntValue. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_RadioButton_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_RadioButton_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_RadioButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXRadioButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_RadioButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRadioButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (RADIOBUTTON_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiiii:new_FX_RadioButton",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_RadioButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRadioButton *)new_FX_RadioButton(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXRadioButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_RadioButton_setCheck(_swigobj,_swigarg0)  (_swigobj->setCheck(_swigarg0))
static PyObject *_wrap_FX_RadioButton_setCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRadioButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_RadioButton_setCheck",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_setCheck. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RadioButton_setCheck(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_RadioButton_getCheck(_swigobj)  (_swigobj->getCheck())
static PyObject *_wrap_FX_RadioButton_getCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RadioButton_getCheck",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_getCheck. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_RadioButton_getCheck(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_RadioButton_setRadioButtonStyle(_swigobj,_swigarg0)  (_swigobj->setRadioButtonStyle(_swigarg0))
static PyObject *_wrap_FX_RadioButton_setRadioButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRadioButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_RadioButton_setRadioButtonStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_setRadioButtonStyle. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RadioButton_setRadioButtonStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_RadioButton_getRadioButtonStyle(_swigobj)  (_swigobj->getRadioButtonStyle())
static PyObject *_wrap_FX_RadioButton_getRadioButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RadioButton_getRadioButtonStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_getRadioButtonStyle. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_RadioButton_getRadioButtonStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_RadioButton_getRadioColor(_swigobj)  (_swigobj->getRadioColor())
static PyObject *_wrap_FX_RadioButton_getRadioColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_RadioButton_getRadioColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_getRadioColor. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_RadioButton_getRadioColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_RadioButton_setRadioColor(_swigobj,_swigarg0)  (_swigobj->setRadioColor(_swigarg0))
static PyObject *_wrap_FX_RadioButton_setRadioColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRadioButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_RadioButton_setRadioColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_RadioButton_setRadioColor. Expected _FXRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_RadioButton_setRadioColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyRadioButtonToFXRadioButton(void *ptr) {
    FXPyRadioButton *src;
    FXRadioButton *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXRadioButton *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXLabel(void *ptr) {
    FXPyRadioButton *src;
    FXLabel *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXFrame(void *ptr) {
    FXPyRadioButton *src;
    FXFrame *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXWindow(void *ptr) {
    FXPyRadioButton *src;
    FXWindow *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXDrawable(void *ptr) {
    FXPyRadioButton *src;
    FXDrawable *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXId(void *ptr) {
    FXPyRadioButton *src;
    FXId *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyRadioButtonToFXObject(void *ptr) {
    FXPyRadioButton *src;
    FXObject *dest;
    src = (FXPyRadioButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXRadioButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyRadioButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXRadioButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (RADIOBUTTON_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiiii:new_FXRadioButton",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXRadioButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRadioButton *)new_FXRadioButton(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRadioButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXRadioButton_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXRadioButton_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyRadioButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXRadioButton_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_onDefault. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXRadioButton_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXRadioButton_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXRadioButton_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_create. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXRadioButton_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_destroy. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXRadioButton_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_detach. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRadioButton_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRadioButton_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_resize. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXRadioButton_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_getDefaultWidth. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRadioButton_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRadioButton_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXRadioButton_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_getDefaultHeight. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRadioButton_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRadioButton_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXRadioButton_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_show. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXRadioButton_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_hide. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXRadioButton_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_enable. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXRadioButton_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_disable. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXRadioButton_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_canFocus. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRadioButton_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRadioButton_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXRadioButton_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_setFocus. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXRadioButton_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_killFocus. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXRadioButton_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXRadioButton_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_setDefault. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXRadioButton_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_recalc. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXRadioButton_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_layout. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXRadioButton_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_lower. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRadioButton_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRadioButton_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_move. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXRadioButton_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXRadioButton_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_position. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXRadioButton_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_isComposite. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRadioButton_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRadioButton_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRadioButton_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRadioButton_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_contains. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRadioButton_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRadioButton_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXRadioButton_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRadioButton_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_getWidthForHeight. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRadioButton_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRadioButton_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXRadioButton_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRadioButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRadioButton_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_getHeightForWidth. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRadioButton_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRadioButton_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXRadioButton_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRadioButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRadioButton_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_doesSaveUnder. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRadioButton_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRadioButton_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXRadioButton_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRadioButton_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_reparent. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRadioButton_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRadioButton_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXRadioButton_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRadioButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRadioButton_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRadioButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRadioButton_setBackColor. Expected _FXPyRadioButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRadioButton_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXCheckButtonToFXLabel(void *ptr) {
    FXCheckButton *src;
    FXLabel *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXCheckButtonToFXFrame(void *ptr) {
    FXCheckButton *src;
    FXFrame *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXCheckButtonToFXWindow(void *ptr) {
    FXCheckButton *src;
    FXWindow *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXCheckButtonToFXDrawable(void *ptr) {
    FXCheckButton *src;
    FXDrawable *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXCheckButtonToFXId(void *ptr) {
    FXCheckButton *src;
    FXId *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXCheckButtonToFXObject(void *ptr) {
    FXCheckButton *src;
    FXObject *dest;
    src = (FXCheckButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_CheckButton_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onPaint. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onUpdate. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onEnter. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onLeave. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onFocusIn. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onFocusOut. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onUngrabbed. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onLeftBtnPress. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onLeftBtnRelease. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onKeyPress. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onKeyRelease. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onHotKeyPress. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onHotKeyRelease. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onCheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onCheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onCheck. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onCheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onCheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onUncheck(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUncheck(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onUncheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onUncheck",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onUncheck. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onUncheck. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onUncheck(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onUnknown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUnknown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onUnknown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onUnknown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onUnknown. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onUnknown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onUnknown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onCmdSetValue. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onCmdSetIntValue. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_CheckButton_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_CheckButton_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_CheckButton_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_onCmdGetIntValue. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_CheckButton_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_CheckButton_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_CheckButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXCheckButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_CheckButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCheckButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (CHECKBUTTON_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiiii:new_FX_CheckButton",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_CheckButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCheckButton *)new_FX_CheckButton(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXCheckButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_CheckButton_setCheck(_swigobj,_swigarg0)  (_swigobj->setCheck(_swigarg0))
static PyObject *_wrap_FX_CheckButton_setCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCheckButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","state", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_CheckButton_setCheck",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_setCheck. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_CheckButton_setCheck(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_CheckButton_getCheck(_swigobj)  (_swigobj->getCheck())
static PyObject *_wrap_FX_CheckButton_getCheck(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_CheckButton_getCheck",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_getCheck. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_CheckButton_getCheck(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_CheckButton_getBoxColor(_swigobj)  (_swigobj->getBoxColor())
static PyObject *_wrap_FX_CheckButton_getBoxColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_CheckButton_getBoxColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_getBoxColor. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_CheckButton_getBoxColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_CheckButton_setBoxColor(_swigobj,_swigarg0)  (_swigobj->setBoxColor(_swigarg0))
static PyObject *_wrap_FX_CheckButton_setBoxColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCheckButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_CheckButton_setBoxColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_setBoxColor. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_CheckButton_setBoxColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_CheckButton_setCheckButtonStyle(_swigobj,_swigarg0)  (_swigobj->setCheckButtonStyle(_swigarg0))
static PyObject *_wrap_FX_CheckButton_setCheckButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCheckButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_CheckButton_setCheckButtonStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_setCheckButtonStyle. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_CheckButton_setCheckButtonStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_CheckButton_getCheckButtonStyle(_swigobj)  (_swigobj->getCheckButtonStyle())
static PyObject *_wrap_FX_CheckButton_getCheckButtonStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_CheckButton_getCheckButtonStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_CheckButton_getCheckButtonStyle. Expected _FXCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_CheckButton_getCheckButtonStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyCheckButtonToFXCheckButton(void *ptr) {
    FXPyCheckButton *src;
    FXCheckButton *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXCheckButton *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXLabel(void *ptr) {
    FXPyCheckButton *src;
    FXLabel *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXFrame(void *ptr) {
    FXPyCheckButton *src;
    FXFrame *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXWindow(void *ptr) {
    FXPyCheckButton *src;
    FXWindow *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXDrawable(void *ptr) {
    FXPyCheckButton *src;
    FXDrawable *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXId(void *ptr) {
    FXPyCheckButton *src;
    FXId *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyCheckButtonToFXObject(void *ptr) {
    FXPyCheckButton *src;
    FXObject *dest;
    src = (FXPyCheckButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXCheckButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyCheckButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXCheckButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (CHECKBUTTON_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiiii:new_FXCheckButton",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXCheckButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyCheckButton *)new_FXCheckButton(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyCheckButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXCheckButton_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXCheckButton_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyCheckButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXCheckButton_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_onDefault. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXCheckButton_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXCheckButton_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXCheckButton_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_create. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXCheckButton_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_destroy. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXCheckButton_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_detach. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCheckButton_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCheckButton_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_resize. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXCheckButton_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_getDefaultWidth. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCheckButton_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCheckButton_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXCheckButton_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_getDefaultHeight. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCheckButton_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCheckButton_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXCheckButton_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_show. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXCheckButton_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_hide. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXCheckButton_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_enable. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXCheckButton_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_disable. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXCheckButton_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_canFocus. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCheckButton_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCheckButton_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXCheckButton_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_setFocus. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXCheckButton_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_killFocus. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXCheckButton_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXCheckButton_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_setDefault. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXCheckButton_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_recalc. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXCheckButton_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_layout. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXCheckButton_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_lower. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCheckButton_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCheckButton_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_move. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXCheckButton_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXCheckButton_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_position. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXCheckButton_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_isComposite. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCheckButton_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCheckButton_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCheckButton_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCheckButton_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_contains. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCheckButton_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCheckButton_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXCheckButton_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCheckButton_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_getWidthForHeight. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCheckButton_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCheckButton_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXCheckButton_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCheckButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCheckButton_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_getHeightForWidth. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCheckButton_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCheckButton_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXCheckButton_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCheckButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCheckButton_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_doesSaveUnder. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCheckButton_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCheckButton_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXCheckButton_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXCheckButton_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_reparent. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXCheckButton_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCheckButton_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXCheckButton_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCheckButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCheckButton_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCheckButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCheckButton_setBackColor. Expected _FXPyCheckButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCheckButton_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXArrowButtonToFXFrame(void *ptr) {
    FXArrowButton *src;
    FXFrame *dest;
    src = (FXArrowButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXArrowButtonToFXWindow(void *ptr) {
    FXArrowButton *src;
    FXWindow *dest;
    src = (FXArrowButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXArrowButtonToFXDrawable(void *ptr) {
    FXArrowButton *src;
    FXDrawable *dest;
    src = (FXArrowButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXArrowButtonToFXId(void *ptr) {
    FXArrowButton *src;
    FXId *dest;
    src = (FXArrowButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXArrowButtonToFXObject(void *ptr) {
    FXArrowButton *src;
    FXObject *dest;
    src = (FXArrowButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ArrowButton_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onPaint. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onUpdate. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onEnter. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onLeave. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onLeftBtnPress. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onLeftBtnRelease. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onUngrabbed. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onRepeat(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRepeat(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onRepeat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onRepeat",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onRepeat. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onRepeat. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onRepeat(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onKeyPress. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onKeyRelease. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onHotKeyPress. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onHotKeyRelease. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onQueryHelp. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ArrowButton_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ArrowButton_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ArrowButton_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_onQueryTip. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ArrowButton_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ArrowButton_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ArrowButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXArrowButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_ArrowButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (ARROW_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_ArrowButton",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ArrowButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXArrowButton *)new_FX_ArrowButton(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXArrowButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ArrowButton_setState(_swigobj,_swigarg0)  (_swigobj->setState(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ArrowButton_setState",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setState. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setState(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ArrowButton_getState(_swigobj)  (_swigobj->getState())
static PyObject *_wrap_FX_ArrowButton_getState(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getState",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getState. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ArrowButton_getState(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ArrowButton_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ArrowButton_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setHelpText. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ArrowButton_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ArrowButton_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getHelpText. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ArrowButton_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ArrowButton_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ArrowButton_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setTipText. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ArrowButton_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ArrowButton_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getTipText. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ArrowButton_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ArrowButton_setArrowStyle(_swigobj,_swigarg0)  (_swigobj->setArrowStyle(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setArrowStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ArrowButton_setArrowStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setArrowStyle. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setArrowStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ArrowButton_getArrowStyle(_swigobj)  (_swigobj->getArrowStyle())
static PyObject *_wrap_FX_ArrowButton_getArrowStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getArrowStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getArrowStyle. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ArrowButton_getArrowStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ArrowButton_setArrowSize(_swigobj,_swigarg0)  (_swigobj->setArrowSize(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setArrowSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","size", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ArrowButton_setArrowSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setArrowSize. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setArrowSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ArrowButton_getArrowSize(_swigobj)  (_swigobj->getArrowSize())
static PyObject *_wrap_FX_ArrowButton_getArrowSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getArrowSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getArrowSize. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ArrowButton_getArrowSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ArrowButton_setJustify(_swigobj,_swigarg0)  (_swigobj->setJustify(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ArrowButton_setJustify",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setJustify. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setJustify(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ArrowButton_getJustify(_swigobj)  (_swigobj->getJustify())
static PyObject *_wrap_FX_ArrowButton_getJustify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getJustify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getJustify. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ArrowButton_getJustify(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ArrowButton_getArrowColor(_swigobj)  (_swigobj->getArrowColor())
static PyObject *_wrap_FX_ArrowButton_getArrowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ArrowButton_getArrowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_getArrowColor. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ArrowButton_getArrowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ArrowButton_setArrowColor(_swigobj,_swigarg0)  (_swigobj->setArrowColor(_swigarg0))
static PyObject *_wrap_FX_ArrowButton_setArrowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXArrowButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ArrowButton_setArrowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ArrowButton_setArrowColor. Expected _FXArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ArrowButton_setArrowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyArrowButtonToFXArrowButton(void *ptr) {
    FXPyArrowButton *src;
    FXArrowButton *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXArrowButton *) src;
    return (void *) dest;
}

static void *SwigFXPyArrowButtonToFXFrame(void *ptr) {
    FXPyArrowButton *src;
    FXFrame *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyArrowButtonToFXWindow(void *ptr) {
    FXPyArrowButton *src;
    FXWindow *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyArrowButtonToFXDrawable(void *ptr) {
    FXPyArrowButton *src;
    FXDrawable *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyArrowButtonToFXId(void *ptr) {
    FXPyArrowButton *src;
    FXId *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyArrowButtonToFXObject(void *ptr) {
    FXPyArrowButton *src;
    FXObject *dest;
    src = (FXPyArrowButton *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXArrowButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyArrowButton(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXArrowButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (ARROW_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXArrowButton",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXArrowButton. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyArrowButton *)new_FXArrowButton(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyArrowButton_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXArrowButton_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXArrowButton_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyArrowButton * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXArrowButton_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_onDefault. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXArrowButton_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXArrowButton_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXArrowButton_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_create. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXArrowButton_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_destroy. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXArrowButton_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_detach. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXArrowButton_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXArrowButton_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_resize. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXArrowButton_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_getDefaultWidth. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXArrowButton_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXArrowButton_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXArrowButton_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_getDefaultHeight. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXArrowButton_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXArrowButton_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXArrowButton_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_show. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXArrowButton_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_hide. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXArrowButton_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_enable. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXArrowButton_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_disable. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXArrowButton_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_canFocus. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXArrowButton_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXArrowButton_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXArrowButton_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_setFocus. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXArrowButton_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_killFocus. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXArrowButton_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXArrowButton_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_setDefault. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXArrowButton_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_recalc. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXArrowButton_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_layout. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXArrowButton_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_lower. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXArrowButton_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXArrowButton_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_move. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXArrowButton_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXArrowButton_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_position. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXArrowButton_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_isComposite. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXArrowButton_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXArrowButton_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXArrowButton_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXArrowButton_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_contains. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXArrowButton_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXArrowButton_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXArrowButton_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXArrowButton_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_getWidthForHeight. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXArrowButton_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXArrowButton_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXArrowButton_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyArrowButton * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXArrowButton_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_getHeightForWidth. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXArrowButton_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXArrowButton_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXArrowButton_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyArrowButton * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXArrowButton_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_doesSaveUnder. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXArrowButton_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXArrowButton_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXArrowButton_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXArrowButton_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_reparent. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXArrowButton_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXArrowButton_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXArrowButton_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyArrowButton * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXArrowButton_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyArrowButton_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXArrowButton_setBackColor. Expected _FXPyArrowButton_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXArrowButton_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPickerToFXButton(void *ptr) {
    FXPicker *src;
    FXButton *dest;
    src = (FXPicker *) ptr;
    dest = (FXButton *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXLabel(void *ptr) {
    FXPicker *src;
    FXLabel *dest;
    src = (FXPicker *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXFrame(void *ptr) {
    FXPicker *src;
    FXFrame *dest;
    src = (FXPicker *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXWindow(void *ptr) {
    FXPicker *src;
    FXWindow *dest;
    src = (FXPicker *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXDrawable(void *ptr) {
    FXPicker *src;
    FXDrawable *dest;
    src = (FXPicker *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXId(void *ptr) {
    FXPicker *src;
    FXId *dest;
    src = (FXPicker *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPickerToFXObject(void *ptr) {
    FXPicker *src;
    FXObject *dest;
    src = (FXPicker *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Picker_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Picker_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Picker_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Picker_onMotion. Expected _FXPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Picker_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Picker_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Picker_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Picker_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Picker_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Picker_onLeftBtnPress. Expected _FXPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Picker_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Picker_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Picker_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Picker_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Picker_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Picker_onLeftBtnRelease. Expected _FXPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Picker_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Picker_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Picker_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Picker_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Picker_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Picker_onEnter. Expected _FXPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Picker_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Picker_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Picker_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Picker_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Picker_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Picker_onLeave. Expected _FXPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Picker_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Picker_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Picker(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXPicker(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FX_Picker(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPicker * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (BUTTON_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FX_Picker",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Picker. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPicker *)new_FX_Picker(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPicker_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

static void *SwigFXPyPickerToFXPicker(void *ptr) {
    FXPyPicker *src;
    FXPicker *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXPicker *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXButton(void *ptr) {
    FXPyPicker *src;
    FXButton *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXButton *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXLabel(void *ptr) {
    FXPyPicker *src;
    FXLabel *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXFrame(void *ptr) {
    FXPyPicker *src;
    FXFrame *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXWindow(void *ptr) {
    FXPyPicker *src;
    FXWindow *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXDrawable(void *ptr) {
    FXPyPicker *src;
    FXDrawable *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXId(void *ptr) {
    FXPyPicker *src;
    FXId *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPickerToFXObject(void *ptr) {
    FXPyPicker *src;
    FXObject *dest;
    src = (FXPyPicker *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPicker(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXPyPicker(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FXPicker(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (BUTTON_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FXPicker",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXPicker. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPicker *)new_FXPicker(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPicker_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXPicker_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPicker_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPicker * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPicker_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_onDefault. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPicker_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPicker_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPicker_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_create. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPicker_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_destroy. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPicker_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_detach. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPicker_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPicker_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_resize. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXPicker_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_getDefaultWidth. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPicker_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPicker_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXPicker_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_getDefaultHeight. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPicker_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPicker_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXPicker_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_show. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXPicker_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_hide. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXPicker_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_enable. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXPicker_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_disable. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXPicker_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_canFocus. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPicker_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPicker_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXPicker_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_setFocus. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXPicker_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_killFocus. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXPicker_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXPicker_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_setDefault. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXPicker_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_recalc. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXPicker_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_layout. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXPicker_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_lower. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPicker_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPicker_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_move. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPicker_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPicker_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_position. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXPicker_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_isComposite. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPicker_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPicker_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPicker_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPicker * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPicker_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_contains. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPicker_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPicker_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXPicker_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPicker * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPicker_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_getWidthForHeight. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPicker_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPicker_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXPicker_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPicker * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPicker_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_getHeightForWidth. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPicker_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPicker_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXPicker_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPicker * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPicker_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_doesSaveUnder. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPicker_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPicker_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXPicker_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPicker_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_reparent. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPicker_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPicker_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXPicker_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPicker * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPicker_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPicker_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPicker_setBackColor. Expected _FXPyPicker_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPicker_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXSpinnerToFXPacker(void *ptr) {
    FXSpinner *src;
    FXPacker *dest;
    src = (FXSpinner *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXSpinnerToFXComposite(void *ptr) {
    FXSpinner *src;
    FXComposite *dest;
    src = (FXSpinner *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXSpinnerToFXWindow(void *ptr) {
    FXSpinner *src;
    FXWindow *dest;
    src = (FXSpinner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXSpinnerToFXDrawable(void *ptr) {
    FXSpinner *src;
    FXDrawable *dest;
    src = (FXSpinner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXSpinnerToFXId(void *ptr) {
    FXSpinner *src;
    FXId *dest;
    src = (FXSpinner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXSpinnerToFXObject(void *ptr) {
    FXSpinner *src;
    FXObject *dest;
    src = (FXSpinner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Spinner_onUpdIncrement(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdIncrement(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onUpdIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onUpdIncrement",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onUpdIncrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onUpdIncrement. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onUpdIncrement(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdIncrement(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdIncrement(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdIncrement",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdIncrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdIncrement. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdIncrement(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onUpdDecrement(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdDecrement(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onUpdDecrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onUpdDecrement",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onUpdDecrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onUpdDecrement. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onUpdDecrement(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdDecrement(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDecrement(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdDecrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdDecrement",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdDecrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdDecrement. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdDecrement(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdEntry",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdEntry. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdEntry. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onChgEntry(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onChgEntry(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onChgEntry(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onChgEntry",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onChgEntry. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onChgEntry. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onChgEntry(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onKeyPress. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onKeyRelease. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdSetValue. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdSetIntValue. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdGetIntValue. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdSetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdSetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdSetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdSetIntRange. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdSetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdSetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Spinner_onCmdGetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Spinner_onCmdGetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Spinner_onCmdGetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_onCmdGetIntRange. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Spinner_onCmdGetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Spinner_onCmdGetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Spinner(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXSpinner(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_Spinner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (SPIN_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","cols","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FX_Spinner",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Spinner. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSpinner *)new_FX_Spinner(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSpinner_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Spinner_increment(_swigobj)  (_swigobj->increment())
static PyObject *_wrap_FX_Spinner_increment(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_increment",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_increment. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_increment(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_decrement(_swigobj)  (_swigobj->decrement())
static PyObject *_wrap_FX_Spinner_decrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_decrement",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_decrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_decrement(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_isCyclic(_swigobj)  (_swigobj->isCyclic())
static PyObject *_wrap_FX_Spinner_isCyclic(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_isCyclic",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_isCyclic. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Spinner_isCyclic(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Spinner_setCyclic(_swigobj,_swigarg0)  (_swigobj->setCyclic(_swigarg0))
static PyObject *_wrap_FX_Spinner_setCyclic(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","cyclic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_Spinner_setCyclic",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setCyclic. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setCyclic(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_isTextVisible(_swigobj)  (_swigobj->isTextVisible())
static PyObject *_wrap_FX_Spinner_isTextVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_isTextVisible",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_isTextVisible. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Spinner_isTextVisible(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Spinner_setTextVisible(_swigobj,_swigarg0)  (_swigobj->setTextVisible(_swigarg0))
static PyObject *_wrap_FX_Spinner_setTextVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","shown", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_Spinner_setTextVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setTextVisible. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setTextVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_setValue(_swigobj,_swigarg0)  (_swigobj->setValue(_swigarg0))
static PyObject *_wrap_FX_Spinner_setValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Spinner_setValue",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setValue. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setValue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_getValue(_swigobj)  (_swigobj->getValue())
static PyObject *_wrap_FX_Spinner_getValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getValue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getValue. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Spinner_getValue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Spinner_setRange(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setRange(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Spinner_setRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","lo","hi", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Spinner_setRange",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setRange. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setRange(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject * FXSpinner_getRange(FXSpinner *self) {
      FXint lo,hi;
      self->getRange(lo,hi);
      FXbool doSave = FXPyRestoreThread();
      PyObject* tuple=PyTuple_New(2);
      if (tuple) {
	PyObject *obj1 = PyInt_FromLong(lo);
	if (!obj1 || PyTuple_SetItem(tuple, 0, obj1) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
	PyObject *obj2 = PyInt_FromLong(hi);
	if (!obj2 || PyTuple_SetItem(tuple, 1, obj2) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
      }
      FXPySaveThread(doSave);
      return tuple;
    }
static PyObject *_wrap_FX_Spinner_getRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getRange",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getRange. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXSpinner_getRange(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Spinner_setIncrement(_swigobj,_swigarg0)  (_swigobj->setIncrement(_swigarg0))
static PyObject *_wrap_FX_Spinner_setIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","increment", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Spinner_setIncrement",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setIncrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setIncrement(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_getIncrement(_swigobj)  (_swigobj->getIncrement())
static PyObject *_wrap_FX_Spinner_getIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getIncrement",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getIncrement. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Spinner_getIncrement(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Spinner_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_Spinner_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Spinner_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setFont. Expected _FXSpinner_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Spinner_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_Spinner_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getFont. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_Spinner_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Spinner_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_Spinner_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Spinner_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setHelpText. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Spinner_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_Spinner_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getHelpText. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Spinner_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Spinner_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_Spinner_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Spinner_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setTipText. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Spinner_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_Spinner_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getTipText. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Spinner_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Spinner_setSpinnerStyle(_swigobj,_swigarg0)  (_swigobj->setSpinnerStyle(_swigarg0))
static PyObject *_wrap_FX_Spinner_setSpinnerStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Spinner_setSpinnerStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setSpinnerStyle. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setSpinnerStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_getSpinnerStyle(_swigobj)  (_swigobj->getSpinnerStyle())
static PyObject *_wrap_FX_Spinner_getSpinnerStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_getSpinnerStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_getSpinnerStyle. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Spinner_getSpinnerStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Spinner_setEditable(_swigobj,_swigarg0)  (_swigobj->setEditable(_swigarg0))
static PyObject *_wrap_FX_Spinner_setEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSpinner * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","edit", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Spinner_setEditable",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_setEditable. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Spinner_setEditable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Spinner_isEditable(_swigobj)  (_swigobj->isEditable())
static PyObject *_wrap_FX_Spinner_isEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXSpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Spinner_isEditable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Spinner_isEditable. Expected _FXSpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Spinner_isEditable(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static void *SwigFXPySpinnerToFXSpinner(void *ptr) {
    FXPySpinner *src;
    FXSpinner *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXSpinner *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXPacker(void *ptr) {
    FXPySpinner *src;
    FXPacker *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXComposite(void *ptr) {
    FXPySpinner *src;
    FXComposite *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXWindow(void *ptr) {
    FXPySpinner *src;
    FXWindow *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXDrawable(void *ptr) {
    FXPySpinner *src;
    FXDrawable *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXId(void *ptr) {
    FXPySpinner *src;
    FXId *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPySpinnerToFXObject(void *ptr) {
    FXPySpinner *src;
    FXObject *dest;
    src = (FXPySpinner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXSpinner(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPySpinner(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXSpinner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (SPIN_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","cols","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FXSpinner",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXSpinner. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPySpinner *)new_FXSpinner(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPySpinner_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXSpinner_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXSpinner_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPySpinner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXSpinner_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_onDefault. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXSpinner_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXSpinner_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXSpinner_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_create. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXSpinner_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_destroy. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXSpinner_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_detach. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSpinner_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSpinner_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_resize. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXSpinner_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_getDefaultWidth. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSpinner_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSpinner_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXSpinner_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_getDefaultHeight. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSpinner_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSpinner_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXSpinner_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_show. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXSpinner_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_hide. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXSpinner_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_enable. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXSpinner_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_disable. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXSpinner_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_canFocus. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSpinner_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSpinner_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXSpinner_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_setFocus. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXSpinner_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_killFocus. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXSpinner_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXSpinner_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_setDefault. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXSpinner_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_recalc. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXSpinner_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_layout. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXSpinner_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_lower. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSpinner_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSpinner_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_move. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXSpinner_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXSpinner_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_position. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXSpinner_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_isComposite. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSpinner_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSpinner_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSpinner_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySpinner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSpinner_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_contains. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSpinner_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSpinner_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXSpinner_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySpinner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSpinner_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_getWidthForHeight. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSpinner_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSpinner_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXSpinner_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySpinner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSpinner_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_getHeightForWidth. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSpinner_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSpinner_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXSpinner_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySpinner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSpinner_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_doesSaveUnder. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSpinner_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSpinner_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXSpinner_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXSpinner_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_reparent. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXSpinner_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSpinner_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXSpinner_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySpinner * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSpinner_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySpinner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSpinner_setBackColor. Expected _FXPySpinner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSpinner_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTooltipToFXShell(void *ptr) {
    FXTooltip *src;
    FXShell *dest;
    src = (FXTooltip *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXTooltipToFXComposite(void *ptr) {
    FXTooltip *src;
    FXComposite *dest;
    src = (FXTooltip *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXTooltipToFXWindow(void *ptr) {
    FXTooltip *src;
    FXWindow *dest;
    src = (FXTooltip *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTooltipToFXDrawable(void *ptr) {
    FXTooltip *src;
    FXDrawable *dest;
    src = (FXTooltip *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTooltipToFXId(void *ptr) {
    FXTooltip *src;
    FXId *dest;
    src = (FXTooltip *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTooltipToFXObject(void *ptr) {
    FXTooltip *src;
    FXObject *dest;
    src = (FXTooltip *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Tooltip_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onPaint. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Tooltip_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onUpdate. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Tooltip_onTipShow(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTipShow(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onTipShow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onTipShow",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onTipShow. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onTipShow. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onTipShow(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Tooltip_onTipHide(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTipHide(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onTipHide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onTipHide",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onTipHide. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onTipHide. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onTipHide(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Tooltip_onCmdGetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onCmdGetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onCmdGetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onCmdGetStringValue. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onCmdGetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onCmdGetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Tooltip_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Tooltip_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Tooltip_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_onCmdSetStringValue. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Tooltip_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Tooltip_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Tooltip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXTooltip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_Tooltip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTooltip * _result;
    FXApp * _arg0;
    FXuint  _arg1 = (FXuint ) (TOOLTIP_NORMAL);
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "a","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FX_Tooltip",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Tooltip. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTooltip *)new_FX_Tooltip(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTooltip_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Tooltip_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_Tooltip_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTooltip * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Tooltip_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_setText. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Tooltip_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Tooltip_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_Tooltip_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Tooltip_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_getText. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Tooltip_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Tooltip_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_Tooltip_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTooltip * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Tooltip_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_setFont. Expected _FXTooltip_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Tooltip_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Tooltip_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Tooltip_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_Tooltip_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Tooltip_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_getFont. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_Tooltip_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Tooltip_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_Tooltip_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Tooltip_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_getTextColor. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Tooltip_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Tooltip_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_Tooltip_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTooltip * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Tooltip_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Tooltip_setTextColor. Expected _FXTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Tooltip_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTooltipToFXTooltip(void *ptr) {
    FXPyTooltip *src;
    FXTooltip *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXTooltip *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXShell(void *ptr) {
    FXPyTooltip *src;
    FXShell *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXComposite(void *ptr) {
    FXPyTooltip *src;
    FXComposite *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXWindow(void *ptr) {
    FXPyTooltip *src;
    FXWindow *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXDrawable(void *ptr) {
    FXPyTooltip *src;
    FXDrawable *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXId(void *ptr) {
    FXPyTooltip *src;
    FXId *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTooltipToFXObject(void *ptr) {
    FXPyTooltip *src;
    FXObject *dest;
    src = (FXPyTooltip *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTooltip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyTooltip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXTooltip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _result;
    FXApp * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "a","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FXTooltip",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTooltip. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTooltip *)new_FXTooltip(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTooltip_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXTooltip_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTooltip_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTooltip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTooltip_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_onDefault. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTooltip_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTooltip_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTooltip_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_create. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTooltip_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_destroy. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTooltip_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_detach. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTooltip_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTooltip_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_resize. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTooltip_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_getDefaultWidth. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTooltip_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTooltip_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTooltip_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_getDefaultHeight. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTooltip_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTooltip_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTooltip_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_show. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTooltip_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_hide. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTooltip_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_enable. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTooltip_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_disable. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTooltip_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_canFocus. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTooltip_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTooltip_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTooltip_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_setFocus. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTooltip_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_killFocus. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTooltip_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTooltip_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_setDefault. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTooltip_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_recalc. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTooltip_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_layout. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTooltip_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_lower. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTooltip_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTooltip_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_move. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTooltip_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTooltip_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_position. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTooltip_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_isComposite. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTooltip_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTooltip_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTooltip_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTooltip_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_contains. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTooltip_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTooltip_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTooltip_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTooltip_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_getWidthForHeight. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTooltip_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTooltip_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTooltip_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTooltip * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTooltip_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_getHeightForWidth. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTooltip_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTooltip_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTooltip_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTooltip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTooltip_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_doesSaveUnder. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTooltip_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTooltip_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTooltip_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTooltip_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_reparent. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTooltip_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTooltip_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTooltip_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTooltip * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTooltip_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTooltip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTooltip_setBackColor. Expected _FXPyTooltip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTooltip_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXOptionToFXLabel(void *ptr) {
    FXOption *src;
    FXLabel *dest;
    src = (FXOption *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXOptionToFXFrame(void *ptr) {
    FXOption *src;
    FXFrame *dest;
    src = (FXOption *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXOptionToFXWindow(void *ptr) {
    FXOption *src;
    FXWindow *dest;
    src = (FXOption *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXOptionToFXDrawable(void *ptr) {
    FXOption *src;
    FXDrawable *dest;
    src = (FXOption *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXOptionToFXId(void *ptr) {
    FXOption *src;
    FXId *dest;
    src = (FXOption *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXOptionToFXObject(void *ptr) {
    FXOption *src;
    FXObject *dest;
    src = (FXOption *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Option_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onPaint. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onEnter. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onLeave. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onLeftBtnPress. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onLeftBtnRelease. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onKeyPress. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onKeyRelease. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onHotKeyPress. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Option_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Option_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Option_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Option_onHotKeyRelease. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Option_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Option_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Option(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXOption(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FX_Option(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOption * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (JUSTIFY_NORMAL)|(ICON_BEFORE_TEXT)|MENUBUTTON_DOWN;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FX_Option",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Option. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXOption *)new_FX_Option(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
{
    delete _arg1;
}
    return _resultobj;
}

static void *SwigFXPyOptionToFXOption(void *ptr) {
    FXPyOption *src;
    FXOption *dest;
    src = (FXPyOption *) ptr;
    dest = (FXOption *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXLabel(void *ptr) {
    FXPyOption *src;
    FXLabel *dest;
    src = (FXPyOption *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXFrame(void *ptr) {
    FXPyOption *src;
    FXFrame *dest;
    src = (FXPyOption *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXWindow(void *ptr) {
    FXPyOption *src;
    FXWindow *dest;
    src = (FXPyOption *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXDrawable(void *ptr) {
    FXPyOption *src;
    FXDrawable *dest;
    src = (FXPyOption *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXId(void *ptr) {
    FXPyOption *src;
    FXId *dest;
    src = (FXPyOption *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionToFXObject(void *ptr) {
    FXPyOption *src;
    FXObject *dest;
    src = (FXPyOption *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXOption(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXPyOption(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FXOption(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _result;
    FXComposite * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (JUSTIFY_NORMAL)|(ICON_BEFORE_TEXT)|MENUBUTTON_DOWN;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","text","ic","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiii:new_FXOption",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXOption. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyOption *)new_FXOption(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyOption_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXOption_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXOption_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyOption * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXOption_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_onDefault. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXOption_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXOption_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXOption_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_create. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXOption_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_destroy. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXOption_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_detach. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOption_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOption_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_resize. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXOption_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_getDefaultWidth. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOption_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOption_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXOption_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_getDefaultHeight. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOption_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOption_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXOption_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_show. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXOption_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_hide. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXOption_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_enable. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXOption_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_disable. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXOption_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_canFocus. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOption_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOption_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXOption_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_setFocus. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXOption_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_killFocus. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXOption_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXOption_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_setDefault. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXOption_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_recalc. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXOption_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_layout. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXOption_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_lower. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOption_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOption_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_move. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXOption_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXOption_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_position. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXOption_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_isComposite. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOption_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOption_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOption_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOption * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOption_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_contains. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOption_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOption_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXOption_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOption * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOption_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_getWidthForHeight. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOption_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOption_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXOption_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOption * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOption_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_getHeightForWidth. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOption_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOption_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXOption_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOption * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOption_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_doesSaveUnder. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOption_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOption_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXOption_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXOption_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_reparent. Expected _FXPyOption_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXOption_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOption_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXOption_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOption * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOption_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOption_setBackColor. Expected _FXPyOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOption_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXOptionMenuToFXLabel(void *ptr) {
    FXOptionMenu *src;
    FXLabel *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXOptionMenuToFXFrame(void *ptr) {
    FXOptionMenu *src;
    FXFrame *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXOptionMenuToFXWindow(void *ptr) {
    FXOptionMenu *src;
    FXWindow *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXOptionMenuToFXDrawable(void *ptr) {
    FXOptionMenu *src;
    FXDrawable *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXOptionMenuToFXId(void *ptr) {
    FXOptionMenu *src;
    FXId *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXOptionMenuToFXObject(void *ptr) {
    FXOptionMenu *src;
    FXObject *dest;
    src = (FXOptionMenu *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_OptionMenu_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onPaint. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onLeftBtnPress. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onLeftBtnRelease. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onFocusIn. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onFocusOut. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onMotion. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onKeyPress. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onKeyRelease. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onCmdPost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdPost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onCmdPost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onCmdPost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onCmdPost. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onCmdPost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onCmdPost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onCmdUnpost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUnpost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onCmdUnpost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onCmdUnpost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onCmdUnpost. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onCmdUnpost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onCmdUnpost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onQueryHelp. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onQueryTip. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onCmdSetValue. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onCmdSetIntValue. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_OptionMenu_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_OptionMenu_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_OptionMenu_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_onCmdGetIntValue. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_OptionMenu_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_OptionMenu_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_OptionMenu(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10) (new FXOptionMenu(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10))
static PyObject *_wrap_new_FX_OptionMenu(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOptionMenu * _result;
    FXComposite * _arg0;
    FXPopup * _arg1 = (FXPopup *) NULL;
    FXuint  _arg2 = (FXuint ) (JUSTIFY_NORMAL)|(ICON_BEFORE_TEXT);
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) DEFAULT_PAD;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "p","pup","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiii:new_FX_OptionMenu",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_OptionMenu. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FX_OptionMenu. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXOptionMenu *)new_FX_OptionMenu(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXOptionMenu_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_OptionMenu_setCurrent(_swigobj,_swigarg0)  (_swigobj->setCurrent(_swigarg0))
static PyObject *_wrap_FX_OptionMenu_setCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOptionMenu * _arg0;
    FXOption * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","win", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_OptionMenu_setCurrent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_setCurrent. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXOption_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_OptionMenu_setCurrent. Expected _FXOption_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_OptionMenu_setCurrent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_OptionMenu_getCurrent(_swigobj)  (_swigobj->getCurrent())
static PyObject *_wrap_FX_OptionMenu_getCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOption * _result;
    FXOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_OptionMenu_getCurrent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_getCurrent. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXOption *)FX_OptionMenu_getCurrent(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_OptionMenu_setCurrentNo(_swigobj,_swigarg0)  (_swigobj->setCurrentNo(_swigarg0))
static PyObject *_wrap_FX_OptionMenu_setCurrentNo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOptionMenu * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","no", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_OptionMenu_setCurrentNo",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_setCurrentNo. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_OptionMenu_setCurrentNo(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_OptionMenu_getCurrentNo(_swigobj)  (_swigobj->getCurrentNo())
static PyObject *_wrap_FX_OptionMenu_getCurrentNo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_OptionMenu_getCurrentNo",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_getCurrentNo. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_OptionMenu_getCurrentNo(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_OptionMenu_setPopup(_swigobj,_swigarg0)  (_swigobj->setPopup(_swigarg0))
static PyObject *_wrap_FX_OptionMenu_setPopup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXOptionMenu * _arg0;
    FXPopup * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","pup", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_OptionMenu_setPopup",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_setPopup. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_OptionMenu_setPopup. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_OptionMenu_setPopup(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_OptionMenu_getPopup(_swigobj)  (_swigobj->getPopup())
static PyObject *_wrap_FX_OptionMenu_getPopup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _result;
    FXOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_OptionMenu_getPopup",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_getPopup. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPopup *)FX_OptionMenu_getPopup(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_OptionMenu_isPopped(_swigobj)  (_swigobj->isPopped())
static PyObject *_wrap_FX_OptionMenu_isPopped(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_OptionMenu_isPopped",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_OptionMenu_isPopped. Expected _FXOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_OptionMenu_isPopped(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static void *SwigFXPyOptionMenuToFXOptionMenu(void *ptr) {
    FXPyOptionMenu *src;
    FXOptionMenu *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXOptionMenu *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXLabel(void *ptr) {
    FXPyOptionMenu *src;
    FXLabel *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXFrame(void *ptr) {
    FXPyOptionMenu *src;
    FXFrame *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXWindow(void *ptr) {
    FXPyOptionMenu *src;
    FXWindow *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXDrawable(void *ptr) {
    FXPyOptionMenu *src;
    FXDrawable *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXId(void *ptr) {
    FXPyOptionMenu *src;
    FXId *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyOptionMenuToFXObject(void *ptr) {
    FXPyOptionMenu *src;
    FXObject *dest;
    src = (FXPyOptionMenu *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXOptionMenu(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10) (new FXPyOptionMenu(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10))
static PyObject *_wrap_new_FXOptionMenu(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _result;
    FXComposite * _arg0;
    FXPopup * _arg1 = (FXPopup *) NULL;
    FXuint  _arg2 = (FXuint ) (JUSTIFY_NORMAL)|(ICON_BEFORE_TEXT);
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) DEFAULT_PAD;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "p","pup","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiii:new_FXOptionMenu",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXOptionMenu. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXOptionMenu. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyOptionMenu *)new_FXOptionMenu(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyOptionMenu_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXOptionMenu_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXOptionMenu_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyOptionMenu * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXOptionMenu_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_onDefault. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXOptionMenu_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXOptionMenu_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXOptionMenu_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_create. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXOptionMenu_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_destroy. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXOptionMenu_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_detach. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOptionMenu_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOptionMenu_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_resize. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXOptionMenu_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_getDefaultWidth. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOptionMenu_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOptionMenu_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXOptionMenu_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_getDefaultHeight. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOptionMenu_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOptionMenu_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXOptionMenu_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_show. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXOptionMenu_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_hide. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXOptionMenu_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_enable. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXOptionMenu_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_disable. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXOptionMenu_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_canFocus. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOptionMenu_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOptionMenu_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXOptionMenu_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_setFocus. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXOptionMenu_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_killFocus. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXOptionMenu_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXOptionMenu_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_setDefault. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXOptionMenu_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_recalc. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXOptionMenu_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_layout. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXOptionMenu_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_lower. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOptionMenu_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOptionMenu_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_move. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXOptionMenu_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXOptionMenu_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_position. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXOptionMenu_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_isComposite. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOptionMenu_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOptionMenu_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXOptionMenu_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXOptionMenu_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_contains. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOptionMenu_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOptionMenu_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXOptionMenu_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOptionMenu_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_getWidthForHeight. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOptionMenu_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOptionMenu_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXOptionMenu_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyOptionMenu * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOptionMenu_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_getHeightForWidth. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXOptionMenu_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXOptionMenu_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXOptionMenu_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyOptionMenu * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXOptionMenu_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_doesSaveUnder. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXOptionMenu_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXOptionMenu_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXOptionMenu_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXOptionMenu_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_reparent. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXOptionMenu_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXOptionMenu_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXOptionMenu_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyOptionMenu * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXOptionMenu_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyOptionMenu_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXOptionMenu_setBackColor. Expected _FXPyOptionMenu_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXOptionMenu_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTabBarToFXPacker(void *ptr) {
    FXTabBar *src;
    FXPacker *dest;
    src = (FXTabBar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXTabBarToFXComposite(void *ptr) {
    FXTabBar *src;
    FXComposite *dest;
    src = (FXTabBar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXTabBarToFXWindow(void *ptr) {
    FXTabBar *src;
    FXWindow *dest;
    src = (FXTabBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTabBarToFXDrawable(void *ptr) {
    FXTabBar *src;
    FXDrawable *dest;
    src = (FXTabBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTabBarToFXId(void *ptr) {
    FXTabBar *src;
    FXId *dest;
    src = (FXTabBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTabBarToFXObject(void *ptr) {
    FXTabBar *src;
    FXObject *dest;
    src = (FXTabBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_TabBar_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onPaint. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusNext(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusNext(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusNext",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusNext. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusNext. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusNext(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusPrev(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusPrev(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusPrev",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusPrev. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusPrev. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusPrev(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusUp. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusDown. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusLeft. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onFocusRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onFocusRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onFocusRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onFocusRight. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onFocusRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onFocusRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onCmdOpenItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdOpenItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onCmdOpenItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onCmdOpenItem",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onCmdOpenItem. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onCmdOpenItem. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onCmdOpenItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onCmdSetValue. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onCmdSetIntValue. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onCmdGetIntValue. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onCmdOpen(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdOpen(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onCmdOpen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onCmdOpen",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onCmdOpen. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onCmdOpen. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onCmdOpen(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBar_onUpdOpen(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdOpen(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBar_onUpdOpen(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBar_onUpdOpen",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_onUpdOpen. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBar_onUpdOpen. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBar_onUpdOpen(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_TabBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXTabBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_TabBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TABBOOK_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_SPACING;
    FXint  _arg9 = (FXint ) DEFAULT_SPACING;
    FXint  _arg10 = (FXint ) DEFAULT_SPACING;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_TabBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TabBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTabBar *)new_FX_TabBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTabBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_TabBar_setCurrent(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setCurrent(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_TabBar_setCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabBar * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","panel","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_TabBar_setCurrent",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_setCurrent. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TabBar_setCurrent(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TabBar_getCurrent(_swigobj)  (_swigobj->getCurrent())
static PyObject *_wrap_FX_TabBar_getCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TabBar_getCurrent",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_getCurrent. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TabBar_getCurrent(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TabBar_getTabStyle(_swigobj)  (_swigobj->getTabStyle())
static PyObject *_wrap_FX_TabBar_getTabStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TabBar_getTabStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_getTabStyle. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TabBar_getTabStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TabBar_setTabStyle(_swigobj,_swigarg0)  (_swigobj->setTabStyle(_swigarg0))
static PyObject *_wrap_FX_TabBar_setTabStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TabBar_setTabStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBar_setTabStyle. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TabBar_setTabStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTabBarToFXTabBar(void *ptr) {
    FXPyTabBar *src;
    FXTabBar *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXTabBar *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXPacker(void *ptr) {
    FXPyTabBar *src;
    FXPacker *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXComposite(void *ptr) {
    FXPyTabBar *src;
    FXComposite *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXWindow(void *ptr) {
    FXPyTabBar *src;
    FXWindow *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXDrawable(void *ptr) {
    FXPyTabBar *src;
    FXDrawable *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXId(void *ptr) {
    FXPyTabBar *src;
    FXId *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBarToFXObject(void *ptr) {
    FXPyTabBar *src;
    FXObject *dest;
    src = (FXPyTabBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTabBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyTabBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXTabBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TABBOOK_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_SPACING;
    FXint  _arg9 = (FXint ) DEFAULT_SPACING;
    FXint  _arg10 = (FXint ) DEFAULT_SPACING;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXTabBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTabBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTabBar *)new_FXTabBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTabBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXTabBar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTabBar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTabBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTabBar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_onDefault. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTabBar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTabBar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTabBar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_create. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTabBar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_destroy. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTabBar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_detach. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_resize. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTabBar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_getDefaultWidth. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTabBar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_getDefaultHeight. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTabBar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_show. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTabBar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_hide. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTabBar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_enable. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTabBar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_disable. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTabBar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_canFocus. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTabBar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_setFocus. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTabBar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_killFocus. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTabBar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTabBar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_setDefault. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTabBar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_recalc. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTabBar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_layout. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTabBar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_lower. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_move. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTabBar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTabBar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_position. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTabBar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_isComposite. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_contains. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTabBar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_getWidthForHeight. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTabBar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_getHeightForWidth. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTabBar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_doesSaveUnder. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTabBar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTabBar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_reparent. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTabBar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTabBar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_setBackColor. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBar_setCurrent(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_setCurrent(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBar_setCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBar * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","panel","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FXTabBar_setCurrent",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBar_setCurrent. Expected _FXPyTabBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBar_setCurrent(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTabItemToFXLabel(void *ptr) {
    FXTabItem *src;
    FXLabel *dest;
    src = (FXTabItem *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXTabItemToFXFrame(void *ptr) {
    FXTabItem *src;
    FXFrame *dest;
    src = (FXTabItem *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXTabItemToFXWindow(void *ptr) {
    FXTabItem *src;
    FXWindow *dest;
    src = (FXTabItem *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTabItemToFXDrawable(void *ptr) {
    FXTabItem *src;
    FXDrawable *dest;
    src = (FXTabItem *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTabItemToFXId(void *ptr) {
    FXTabItem *src;
    FXId *dest;
    src = (FXTabItem *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTabItemToFXObject(void *ptr) {
    FXTabItem *src;
    FXObject *dest;
    src = (FXTabItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_TabItem_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onPaint. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onFocusIn. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onFocusOut. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onUngrabbed. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onLeftBtnPress. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onLeftBtnRelease. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onKeyPress. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onKeyRelease. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onHotKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onHotKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onHotKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onHotKeyPress. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onHotKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onHotKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabItem_onHotKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onHotKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabItem_onHotKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabItem_onHotKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_onHotKeyRelease. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabItem_onHotKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabItem_onHotKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_TabItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXTabItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_TabItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabItem * _result;
    FXTabBar * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) 0;
    FXuint  _arg3 = (FXuint ) (TAB_TOP_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","ic","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiii:new_FX_TabItem",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TabItem. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTabItem *)new_FX_TabItem(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTabItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_TabItem_getTabOrientation(_swigobj)  (_swigobj->getTabOrientation())
static PyObject *_wrap_FX_TabItem_getTabOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TabItem_getTabOrientation",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_getTabOrientation. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TabItem_getTabOrientation(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TabItem_setTabOrientation(_swigobj,_swigarg0)  (_swigobj->setTabOrientation(_swigarg0))
static PyObject *_wrap_FX_TabItem_setTabOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabItem * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TabItem_setTabOrientation",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabItem_setTabOrientation. Expected _FXTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TabItem_setTabOrientation(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyTabItemToFXTabItem(void *ptr) {
    FXPyTabItem *src;
    FXTabItem *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXTabItem *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXLabel(void *ptr) {
    FXPyTabItem *src;
    FXLabel *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXLabel *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXFrame(void *ptr) {
    FXPyTabItem *src;
    FXFrame *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXWindow(void *ptr) {
    FXPyTabItem *src;
    FXWindow *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXDrawable(void *ptr) {
    FXPyTabItem *src;
    FXDrawable *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXId(void *ptr) {
    FXPyTabItem *src;
    FXId *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTabItemToFXObject(void *ptr) {
    FXPyTabItem *src;
    FXObject *dest;
    src = (FXPyTabItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTabItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyTabItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXTabItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _result;
    FXTabBar * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) 0;
    FXuint  _arg3 = (FXuint ) (TAB_TOP_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","text","ic","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|Oiiiiiiiii:new_FXTabItem",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTabItem. Expected _FXTabBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTabItem *)new_FXTabItem(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTabItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXTabItem_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTabItem_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTabItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTabItem_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_onDefault. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTabItem_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTabItem_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTabItem_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_create. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTabItem_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_destroy. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTabItem_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_detach. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabItem_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabItem_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_resize. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTabItem_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_getDefaultWidth. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabItem_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabItem_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTabItem_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_getDefaultHeight. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabItem_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabItem_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTabItem_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_show. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTabItem_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_hide. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTabItem_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_enable. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTabItem_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_disable. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTabItem_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_canFocus. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabItem_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabItem_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTabItem_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_setFocus. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTabItem_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_killFocus. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTabItem_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTabItem_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_setDefault. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTabItem_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_recalc. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTabItem_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_layout. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTabItem_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_lower. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabItem_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabItem_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_move. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTabItem_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTabItem_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_position. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTabItem_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_isComposite. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabItem_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabItem_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabItem_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabItem_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_contains. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabItem_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabItem_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTabItem_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabItem_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_getWidthForHeight. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabItem_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabItem_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTabItem_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabItem * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabItem_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_getHeightForWidth. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabItem_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabItem_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTabItem_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabItem_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_doesSaveUnder. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabItem_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabItem_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTabItem_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTabItem_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_reparent. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTabItem_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabItem_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTabItem_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabItem * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabItem_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabItem_setBackColor. Expected _FXPyTabItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabItem_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXTabBookToFXTabBar(void *ptr) {
    FXTabBook *src;
    FXTabBar *dest;
    src = (FXTabBook *) ptr;
    dest = (FXTabBar *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXPacker(void *ptr) {
    FXTabBook *src;
    FXPacker *dest;
    src = (FXTabBook *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXComposite(void *ptr) {
    FXTabBook *src;
    FXComposite *dest;
    src = (FXTabBook *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXWindow(void *ptr) {
    FXTabBook *src;
    FXWindow *dest;
    src = (FXTabBook *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXDrawable(void *ptr) {
    FXTabBook *src;
    FXDrawable *dest;
    src = (FXTabBook *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXId(void *ptr) {
    FXTabBook *src;
    FXId *dest;
    src = (FXTabBook *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTabBookToFXObject(void *ptr) {
    FXTabBook *src;
    FXObject *dest;
    src = (FXTabBook *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_TabBook_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onPaint. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusNext(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusNext(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusNext",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusNext. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusNext. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusNext(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusPrev(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusPrev(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusPrev",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusPrev. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusPrev. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusPrev(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusUp. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusDown. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusLeft. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onFocusRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onFocusRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onFocusRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onFocusRight. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onFocusRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onFocusRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TabBook_onCmdOpenItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdOpenItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TabBook_onCmdOpenItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TabBook_onCmdOpenItem",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TabBook_onCmdOpenItem. Expected _FXTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TabBook_onCmdOpenItem. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TabBook_onCmdOpenItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_TabBook(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXTabBook(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_TabBook(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTabBook * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TABBOOK_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_SPACING;
    FXint  _arg9 = (FXint ) DEFAULT_SPACING;
    FXint  _arg10 = (FXint ) DEFAULT_SPACING;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_TabBook",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_TabBook. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXTabBook *)new_FX_TabBook(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXTabBook_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static void *SwigFXPyTabBookToFXTabBook(void *ptr) {
    FXPyTabBook *src;
    FXTabBook *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXTabBook *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXTabBar(void *ptr) {
    FXPyTabBook *src;
    FXTabBar *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXTabBar *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXPacker(void *ptr) {
    FXPyTabBook *src;
    FXPacker *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXComposite(void *ptr) {
    FXPyTabBook *src;
    FXComposite *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXWindow(void *ptr) {
    FXPyTabBook *src;
    FXWindow *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXDrawable(void *ptr) {
    FXPyTabBook *src;
    FXDrawable *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXId(void *ptr) {
    FXPyTabBook *src;
    FXId *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTabBookToFXObject(void *ptr) {
    FXPyTabBook *src;
    FXObject *dest;
    src = (FXPyTabBook *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXTabBook(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyTabBook(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXTabBook(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TABBOOK_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_SPACING;
    FXint  _arg9 = (FXint ) DEFAULT_SPACING;
    FXint  _arg10 = (FXint ) DEFAULT_SPACING;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXTabBook",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXTabBook. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyTabBook *)new_FXTabBook(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyTabBook_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXTabBook_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTabBook_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTabBook * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTabBook_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_onDefault. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTabBook_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTabBook_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTabBook_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_create. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTabBook_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_destroy. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTabBook_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_detach. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBook_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBook_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_resize. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTabBook_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_getDefaultWidth. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBook_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBook_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTabBook_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_getDefaultHeight. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBook_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBook_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTabBook_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_show. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTabBook_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_hide. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTabBook_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_enable. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTabBook_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_disable. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTabBook_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_canFocus. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBook_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBook_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTabBook_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_setFocus. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTabBook_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_killFocus. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTabBook_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTabBook_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_setDefault. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTabBook_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_recalc. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTabBook_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_layout. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTabBook_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_lower. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBook_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBook_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_move. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTabBook_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTabBook_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_position. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTabBook_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_isComposite. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBook_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBook_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBook_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTabBook_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_contains. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBook_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBook_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTabBook_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBook_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_getWidthForHeight. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBook_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBook_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTabBook_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBook_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_getHeightForWidth. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTabBook_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTabBook_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTabBook_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTabBook * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTabBook_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_doesSaveUnder. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTabBook_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTabBook_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTabBook_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTabBook_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_reparent. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTabBook_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTabBook_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTabBook_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_setBackColor. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTabBook_setCurrent(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_setCurrent(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTabBook_setCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTabBook * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","panel","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FXTabBook_setCurrent",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTabBook_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTabBook_setCurrent. Expected _FXPyTabBook_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTabBook_setCurrent(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXScrollbarToFXWindow(void *ptr) {
    FXScrollbar *src;
    FXWindow *dest;
    src = (FXScrollbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXScrollbarToFXDrawable(void *ptr) {
    FXScrollbar *src;
    FXDrawable *dest;
    src = (FXScrollbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXScrollbarToFXId(void *ptr) {
    FXScrollbar *src;
    FXId *dest;
    src = (FXScrollbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXScrollbarToFXObject(void *ptr) {
    FXScrollbar *src;
    FXObject *dest;
    src = (FXScrollbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Scrollbar_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onPaint. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onMotion. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onMouseWheel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMouseWheel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onMouseWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onMouseWheel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onMouseWheel. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onMouseWheel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onMouseWheel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onLeftBtnPress. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onLeftBtnRelease. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onMiddleBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onMiddleBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onMiddleBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onMiddleBtnPress. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onMiddleBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onMiddleBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onMiddleBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onMiddleBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onMiddleBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onMiddleBtnRelease. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onMiddleBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onMiddleBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onRightBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onRightBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onRightBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onRightBtnPress. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onRightBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onRightBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onRightBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onRightBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onRightBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onRightBtnRelease. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onRightBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onRightBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onUngrabbed. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeIncPix(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeIncPix(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeIncPix(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeIncPix",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeIncPix. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeIncPix. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeIncPix(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeIncLine(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeIncLine(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeIncLine(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeIncLine",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeIncLine. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeIncLine. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeIncLine(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeIncPage(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeIncPage(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeIncPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeIncPage",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeIncPage. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeIncPage. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeIncPage(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeDecPix(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeDecPix(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeDecPix(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeDecPix",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeDecPix. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeDecPix. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeDecPix(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeDecLine(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeDecLine(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeDecLine(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeDecLine",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeDecLine. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeDecLine. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeDecLine(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeDecPage(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeDecPage(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeDecPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeDecPage",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeDecPage. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeDecPage. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeDecPage(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onTimeWheel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeWheel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onTimeWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onTimeWheel",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onTimeWheel. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onTimeWheel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onTimeWheel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onCmdSetValue. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onCmdSetIntValue. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onCmdGetIntValue. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onCmdSetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onCmdSetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onCmdSetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onCmdSetIntRange. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onCmdSetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onCmdSetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Scrollbar_onCmdGetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Scrollbar_onCmdGetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Scrollbar_onCmdGetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_onCmdGetIntRange. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Scrollbar_onCmdGetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Scrollbar_onCmdGetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Scrollbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXScrollbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FX_Scrollbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (SCROLLBAR_VERTICAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FX_Scrollbar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Scrollbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXScrollbar *)new_FX_Scrollbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Scrollbar_setRange(_swigobj,_swigarg0)  (_swigobj->setRange(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","r", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setRange",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setRange. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setRange(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getRange(_swigobj)  (_swigobj->getRange())
static PyObject *_wrap_FX_Scrollbar_getRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getRange",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getRange. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Scrollbar_getRange(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setPage(_swigobj,_swigarg0)  (_swigobj->setPage(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","p", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setPage",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setPage. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setPage(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getPage(_swigobj)  (_swigobj->getPage())
static PyObject *_wrap_FX_Scrollbar_getPage(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getPage",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getPage. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Scrollbar_getPage(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setLine(_swigobj,_swigarg0)  (_swigobj->setLine(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setLine(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","l", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setLine",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setLine. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setLine(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getLine(_swigobj)  (_swigobj->getLine())
static PyObject *_wrap_FX_Scrollbar_getLine(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getLine",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getLine. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Scrollbar_getLine(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setPosition(_swigobj,_swigarg0)  (_swigobj->setPosition(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","p", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setPosition",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setPosition. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setPosition(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getPosition(_swigobj)  (_swigobj->getPosition())
static PyObject *_wrap_FX_Scrollbar_getPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getPosition",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getPosition. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Scrollbar_getPosition(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setHiliteColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_Scrollbar_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getHiliteColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Scrollbar_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setShadowColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_Scrollbar_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getShadowColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Scrollbar_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_Scrollbar_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getBorderColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Scrollbar_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setBorderColor. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Scrollbar_getScrollbarStyle(_swigobj)  (_swigobj->getScrollbarStyle())
static PyObject *_wrap_FX_Scrollbar_getScrollbarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Scrollbar_getScrollbarStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_getScrollbarStyle. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Scrollbar_getScrollbarStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Scrollbar_setScrollbarStyle(_swigobj,_swigarg0)  (_swigobj->setScrollbarStyle(_swigarg0))
static PyObject *_wrap_FX_Scrollbar_setScrollbarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollbar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Scrollbar_setScrollbarStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Scrollbar_setScrollbarStyle. Expected _FXScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Scrollbar_setScrollbarStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXScrollbar__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Scrollbar_deleteType'(FXDragType )");
        return 1; 
    }
    FXScrollbar::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollbar__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollbar::deleteType);
    return pyobj;
}

static int _wrap_FXScrollbar__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Scrollbar_textType'(FXDragType )");
        return 1; 
    }
    FXScrollbar::textType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollbar__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollbar::textType);
    return pyobj;
}

static int _wrap_FXScrollbar__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Scrollbar_stringType'(FXDragType )");
        return 1; 
    }
    FXScrollbar::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollbar__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollbar::stringType);
    return pyobj;
}

static int _wrap_FXScrollbar__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Scrollbar_colorType'(FXDragType )");
        return 1; 
    }
    FXScrollbar::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollbar__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollbar::colorType);
    return pyobj;
}

static int _wrap_FXScrollbar__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Scrollbar_urilistType'(FXDragType )");
        return 1; 
    }
    FXScrollbar::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollbar__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollbar::urilistType);
    return pyobj;
}

static void *SwigFXPyScrollbarToFXScrollbar(void *ptr) {
    FXPyScrollbar *src;
    FXScrollbar *dest;
    src = (FXPyScrollbar *) ptr;
    dest = (FXScrollbar *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollbarToFXWindow(void *ptr) {
    FXPyScrollbar *src;
    FXWindow *dest;
    src = (FXPyScrollbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollbarToFXDrawable(void *ptr) {
    FXPyScrollbar *src;
    FXDrawable *dest;
    src = (FXPyScrollbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollbarToFXId(void *ptr) {
    FXPyScrollbar *src;
    FXId *dest;
    src = (FXPyScrollbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollbarToFXObject(void *ptr) {
    FXPyScrollbar *src;
    FXObject *dest;
    src = (FXPyScrollbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXScrollbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXPyScrollbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FXScrollbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (SCROLLBAR_VERTICAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FXScrollbar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXScrollbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyScrollbar *)new_FXScrollbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyScrollbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXScrollbar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXScrollbar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyScrollbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXScrollbar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_onDefault. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXScrollbar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXScrollbar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXScrollbar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_create. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXScrollbar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_destroy. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXScrollbar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_detach. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollbar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollbar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_resize. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXScrollbar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_getDefaultWidth. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollbar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollbar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXScrollbar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_getDefaultHeight. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollbar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollbar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXScrollbar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_show. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXScrollbar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_hide. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXScrollbar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_enable. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXScrollbar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_disable. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXScrollbar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_canFocus. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollbar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollbar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXScrollbar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_setFocus. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXScrollbar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_killFocus. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXScrollbar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXScrollbar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_setDefault. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXScrollbar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_recalc. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXScrollbar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_layout. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXScrollbar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_lower. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollbar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollbar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_move. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXScrollbar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXScrollbar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_position. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXScrollbar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_isComposite. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollbar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollbar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollbar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollbar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_contains. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollbar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollbar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXScrollbar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollbar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_getWidthForHeight. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollbar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollbar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXScrollbar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollbar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_getHeightForWidth. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollbar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollbar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXScrollbar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollbar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_doesSaveUnder. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollbar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollbar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXScrollbar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXScrollbar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_reparent. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXScrollbar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollbar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXScrollbar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollbar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollbar_setBackColor. Expected _FXPyScrollbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollbar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyScrollbar__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollbar_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyScrollbar::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollbar__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollbar::deleteType);
    return pyobj;
}

static int _wrap_FXPyScrollbar__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollbar_textType'(FXDragType )");
        return 1; 
    }
    FXPyScrollbar::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollbar__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollbar::textType);
    return pyobj;
}

static int _wrap_FXPyScrollbar__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollbar_stringType'(FXDragType )");
        return 1; 
    }
    FXPyScrollbar::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollbar__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollbar::stringType);
    return pyobj;
}

static int _wrap_FXPyScrollbar__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollbar_colorType'(FXDragType )");
        return 1; 
    }
    FXPyScrollbar::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollbar__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollbar::colorType);
    return pyobj;
}

static int _wrap_FXPyScrollbar__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollbar_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyScrollbar::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollbar__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollbar::urilistType);
    return pyobj;
}

static void *SwigFXScrollCornerToFXWindow(void *ptr) {
    FXScrollCorner *src;
    FXWindow *dest;
    src = (FXScrollCorner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXScrollCornerToFXDrawable(void *ptr) {
    FXScrollCorner *src;
    FXDrawable *dest;
    src = (FXScrollCorner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXScrollCornerToFXId(void *ptr) {
    FXScrollCorner *src;
    FXId *dest;
    src = (FXScrollCorner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXScrollCornerToFXObject(void *ptr) {
    FXScrollCorner *src;
    FXObject *dest;
    src = (FXScrollCorner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ScrollCorner_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ScrollCorner_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXScrollCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ScrollCorner_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ScrollCorner_onPaint. Expected _FXScrollCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ScrollCorner_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ScrollCorner_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ScrollCorner(_swigarg0) (new FXScrollCorner(_swigarg0))
static PyObject *_wrap_new_FX_ScrollCorner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXScrollCorner * _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:new_FX_ScrollCorner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ScrollCorner. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXScrollCorner *)new_FX_ScrollCorner(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXScrollCorner_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static int _wrap_FXScrollCorner__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ScrollCorner_deleteType'(FXDragType )");
        return 1; 
    }
    FXScrollCorner::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollCorner__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollCorner::deleteType);
    return pyobj;
}

static int _wrap_FXScrollCorner__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ScrollCorner_textType'(FXDragType )");
        return 1; 
    }
    FXScrollCorner::textType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollCorner__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollCorner::textType);
    return pyobj;
}

static int _wrap_FXScrollCorner__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ScrollCorner_stringType'(FXDragType )");
        return 1; 
    }
    FXScrollCorner::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollCorner__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollCorner::stringType);
    return pyobj;
}

static int _wrap_FXScrollCorner__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ScrollCorner_colorType'(FXDragType )");
        return 1; 
    }
    FXScrollCorner::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollCorner__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollCorner::colorType);
    return pyobj;
}

static int _wrap_FXScrollCorner__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ScrollCorner_urilistType'(FXDragType )");
        return 1; 
    }
    FXScrollCorner::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXScrollCorner__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXScrollCorner::urilistType);
    return pyobj;
}

static void *SwigFXPyScrollCornerToFXScrollCorner(void *ptr) {
    FXPyScrollCorner *src;
    FXScrollCorner *dest;
    src = (FXPyScrollCorner *) ptr;
    dest = (FXScrollCorner *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollCornerToFXWindow(void *ptr) {
    FXPyScrollCorner *src;
    FXWindow *dest;
    src = (FXPyScrollCorner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollCornerToFXDrawable(void *ptr) {
    FXPyScrollCorner *src;
    FXDrawable *dest;
    src = (FXPyScrollCorner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollCornerToFXId(void *ptr) {
    FXPyScrollCorner *src;
    FXId *dest;
    src = (FXPyScrollCorner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyScrollCornerToFXObject(void *ptr) {
    FXPyScrollCorner *src;
    FXObject *dest;
    src = (FXPyScrollCorner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXScrollCorner(_swigarg0) (new FXPyScrollCorner(_swigarg0))
static PyObject *_wrap_new_FXScrollCorner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:new_FXScrollCorner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXScrollCorner. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyScrollCorner *)new_FXScrollCorner(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyScrollCorner_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXScrollCorner_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXScrollCorner_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyScrollCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXScrollCorner_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_onDefault. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXScrollCorner_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXScrollCorner_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXScrollCorner_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_create. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXScrollCorner_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_destroy. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXScrollCorner_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_detach. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollCorner_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollCorner_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_resize. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXScrollCorner_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_getDefaultWidth. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollCorner_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollCorner_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXScrollCorner_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_getDefaultHeight. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollCorner_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollCorner_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXScrollCorner_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_show. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXScrollCorner_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_hide. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXScrollCorner_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_enable. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXScrollCorner_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_disable. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXScrollCorner_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_canFocus. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollCorner_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollCorner_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXScrollCorner_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_setFocus. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXScrollCorner_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_killFocus. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXScrollCorner_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXScrollCorner_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_setDefault. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXScrollCorner_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_recalc. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXScrollCorner_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_layout. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXScrollCorner_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_lower. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollCorner_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollCorner_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_move. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXScrollCorner_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXScrollCorner_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_position. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXScrollCorner_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_isComposite. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollCorner_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollCorner_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXScrollCorner_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXScrollCorner_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_contains. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollCorner_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollCorner_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXScrollCorner_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollCorner_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_getWidthForHeight. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollCorner_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollCorner_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXScrollCorner_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyScrollCorner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollCorner_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_getHeightForWidth. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXScrollCorner_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXScrollCorner_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXScrollCorner_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyScrollCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXScrollCorner_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_doesSaveUnder. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXScrollCorner_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXScrollCorner_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXScrollCorner_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXScrollCorner_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_reparent. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXScrollCorner_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXScrollCorner_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXScrollCorner_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyScrollCorner * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXScrollCorner_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyScrollCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXScrollCorner_setBackColor. Expected _FXPyScrollCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXScrollCorner_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyScrollCorner__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollCorner_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyScrollCorner::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollCorner__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollCorner::deleteType);
    return pyobj;
}

static int _wrap_FXPyScrollCorner__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollCorner_textType'(FXDragType )");
        return 1; 
    }
    FXPyScrollCorner::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollCorner__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollCorner::textType);
    return pyobj;
}

static int _wrap_FXPyScrollCorner__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollCorner_stringType'(FXDragType )");
        return 1; 
    }
    FXPyScrollCorner::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollCorner__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollCorner::stringType);
    return pyobj;
}

static int _wrap_FXPyScrollCorner__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollCorner_colorType'(FXDragType )");
        return 1; 
    }
    FXPyScrollCorner::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollCorner__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollCorner::colorType);
    return pyobj;
}

static int _wrap_FXPyScrollCorner__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXScrollCorner_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyScrollCorner::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyScrollCorner__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyScrollCorner::urilistType);
    return pyobj;
}

static void *SwigFXListItemToFXObject(void *ptr) {
    FXListItem *src;
    FXObject *dest;
    src = (FXListItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_ListItem(_swigarg0,_swigarg1,_swigarg2) (new FXListItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FX_ListItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _result;
    FXString * _arg0;
    FXIcon * _arg1 = (FXIcon *) NULL;
    void * _arg2 = (void *) NULL;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "text","ic","ptr", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|OO:new_FX_ListItem",_kwnames,&_obj0,&_obj1,&_obj2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
    if (_obj2)
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXListItem *)new_FX_ListItem(*_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXListItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg0;
}
    return _resultobj;
}

#define FX_ListItem_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_ListItem_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_getText. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ListItem_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ListItem_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_ListItem_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListItem_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setText. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListItem_getIcon(_swigobj)  (_swigobj->getIcon())
static PyObject *_wrap_FX_ListItem_getIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_getIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_getIcon. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_ListItem_getIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ListItem_setIcon(_swigobj,_swigarg0)  (_swigobj->setIcon(_swigarg0))
static PyObject *_wrap_FX_ListItem_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListItem_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setIcon. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void  FXListItem_setData(FXListItem *self,PyObject * ptr) {
      FXPySetData(self, ptr);
    }
static PyObject *_wrap_FX_ListItem_setData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    PyObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListItem_setData",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setData. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject * FXListItem_getData(FXListItem *self) {
      return FXPyGetData(self);
    }
static PyObject *_wrap_FX_ListItem_getData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_getData",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_getData. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXListItem_getData(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_ListItem_hasFocus(_swigobj)  (_swigobj->hasFocus())
static PyObject *_wrap_FX_ListItem_hasFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_hasFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_hasFocus. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListItem_hasFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListItem_setFocus(_swigobj,_swigarg0)  (_swigobj->setFocus(_swigarg0))
static PyObject *_wrap_FX_ListItem_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","focus", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ListItem_setFocus",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setFocus. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setFocus(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_isSelected(_swigobj)  (_swigobj->isSelected())
static PyObject *_wrap_FX_ListItem_isSelected(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_isSelected",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_isSelected. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListItem_isSelected(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListItem_setSelected(_swigobj,_swigarg0)  (_swigobj->setSelected(_swigarg0))
static PyObject *_wrap_FX_ListItem_setSelected(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","selected", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ListItem_setSelected",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setSelected. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setSelected(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_isEnabled(_swigobj)  (_swigobj->isEnabled())
static PyObject *_wrap_FX_ListItem_isEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_isEnabled",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_isEnabled. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListItem_isEnabled(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListItem_setEnabled(_swigobj,_swigarg0)  (_swigobj->setEnabled(_swigarg0))
static PyObject *_wrap_FX_ListItem_setEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enabled", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ListItem_setEnabled",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setEnabled. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setEnabled(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_isDraggable(_swigobj)  (_swigobj->isDraggable())
static PyObject *_wrap_FX_ListItem_isDraggable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_isDraggable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_isDraggable. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListItem_isDraggable(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListItem_setDraggable(_swigobj,_swigarg0)  (_swigobj->setDraggable(_swigarg0))
static PyObject *_wrap_FX_ListItem_setDraggable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","draggable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_ListItem_setDraggable",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setDraggable. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setDraggable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_isIconOwned(_swigobj)  (_swigobj->isIconOwned())
static PyObject *_wrap_FX_ListItem_isIconOwned(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_isIconOwned",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_isIconOwned. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ListItem_isIconOwned(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListItem_setIconOwned(_swigobj,_swigarg0)  (_swigobj->setIconOwned(_swigarg0))
static PyObject *_wrap_FX_ListItem_setIconOwned(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    FXuint  _arg1 = (FXuint ) 16;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","owned", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_ListItem_setIconOwned",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_setIconOwned. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_setIconOwned(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_getWidth(_swigobj,_swigarg0)  (_swigobj->getWidth(_swigarg0))
static PyObject *_wrap_FX_ListItem_getWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListItem * _arg0;
    FXList * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","list", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListItem_getWidth",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_getWidth. Expected _FXListItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ListItem_getWidth. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListItem_getWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListItem_getHeight(_swigobj,_swigarg0)  (_swigobj->getHeight(_swigarg0))
static PyObject *_wrap_FX_ListItem_getHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListItem * _arg0;
    FXList * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","list", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListItem_getHeight",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_getHeight. Expected _FXListItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ListItem_getHeight. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListItem_getHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListItem_create(_swigobj)  (_swigobj->create())
static PyObject *_wrap_FX_ListItem_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_create. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_detach(_swigobj)  (_swigobj->detach())
static PyObject *_wrap_FX_ListItem_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_detach. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListItem_destroy(_swigobj)  (_swigobj->destroy())
static PyObject *_wrap_FX_ListItem_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListItem_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListItem_destroy. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListItem_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyListItemToFXListItem(void *ptr) {
    FXPyListItem *src;
    FXListItem *dest;
    src = (FXPyListItem *) ptr;
    dest = (FXListItem *) src;
    return (void *) dest;
}

static void *SwigFXPyListItemToFXObject(void *ptr) {
    FXPyListItem *src;
    FXObject *dest;
    src = (FXPyListItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXListItem(_swigarg0,_swigarg1,_swigarg2) (new FXPyListItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FXListItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _result;
    FXString * _arg0;
    FXIcon * _arg1 = (FXIcon *) NULL;
    void * _arg2 = (void *) NULL;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "text","ic","ptr", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|OO:new_FXListItem",_kwnames,&_obj0,&_obj1,&_obj2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
    if (_obj2)
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyListItem *)new_FXListItem(*_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyListItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg0;
}
    return _resultobj;
}

#define FXListItem_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXListItem_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyListItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXListItem_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_onDefault. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXListItem_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXListItem_setText(_swigobj,_swigarg0)  (_swigobj->_setText(_swigarg0))
static PyObject *_wrap_FXListItem_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXListItem_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setText. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FXListItem_setIcon(_swigobj,_swigarg0)  (_swigobj->_setIcon(_swigarg0))
static PyObject *_wrap_FXListItem_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXListItem_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setIcon. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_setFocus(_swigobj,_swigarg0)  (_swigobj->_setFocus(_swigarg0))
static PyObject *_wrap_FXListItem_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","focus", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXListItem_setFocus",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setFocus. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setFocus(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_setSelected(_swigobj,_swigarg0)  (_swigobj->_setSelected(_swigarg0))
static PyObject *_wrap_FXListItem_setSelected(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","selected", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXListItem_setSelected",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setSelected. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setSelected(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_setEnabled(_swigobj,_swigarg0)  (_swigobj->_setEnabled(_swigarg0))
static PyObject *_wrap_FXListItem_setEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enabled", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXListItem_setEnabled",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setEnabled. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setEnabled(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_setDraggable(_swigobj,_swigarg0)  (_swigobj->_setDraggable(_swigarg0))
static PyObject *_wrap_FXListItem_setDraggable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","draggable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FXListItem_setDraggable",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setDraggable. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setDraggable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_setIconOwned(_swigobj,_swigarg0)  (_swigobj->_setIconOwned(_swigarg0))
static PyObject *_wrap_FXListItem_setIconOwned(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","owned", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXListItem_setIconOwned",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_setIconOwned. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_setIconOwned(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_getWidth(_swigobj,_swigarg0)  (_swigobj->_getWidth(_swigarg0))
static PyObject *_wrap_FXListItem_getWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListItem * _arg0;
    FXList * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","list", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXListItem_getWidth",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_getWidth. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXListItem_getWidth. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListItem_getWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListItem_getHeight(_swigobj,_swigarg0)  (_swigobj->_getHeight(_swigarg0))
static PyObject *_wrap_FXListItem_getHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListItem * _arg0;
    FXList * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","list", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXListItem_getHeight",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_getHeight. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXListItem_getHeight. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListItem_getHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListItem_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXListItem_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListItem_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_create. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXListItem_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListItem_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_detach. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListItem_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXListItem_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListItem_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListItem_destroy. Expected _FXPyListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListItem_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXListToFXScrollArea(void *ptr) {
    FXList *src;
    FXScrollArea *dest;
    src = (FXList *) ptr;
    dest = (FXScrollArea *) src;
    return (void *) dest;
}

static void *SwigFXListToFXComposite(void *ptr) {
    FXList *src;
    FXComposite *dest;
    src = (FXList *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXListToFXWindow(void *ptr) {
    FXList *src;
    FXWindow *dest;
    src = (FXList *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXListToFXDrawable(void *ptr) {
    FXList *src;
    FXDrawable *dest;
    src = (FXList *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXListToFXId(void *ptr) {
    FXList *src;
    FXId *dest;
    src = (FXList *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXListToFXObject(void *ptr) {
    FXList *src;
    FXObject *dest;
    src = (FXList *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_List_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onPaint. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onEnter. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onLeave. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onUngrabbed. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onKeyPress. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onKeyRelease. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onLeftBtnPress. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onLeftBtnRelease. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onRightBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onRightBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onRightBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onRightBtnPress. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onRightBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onRightBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onRightBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onRightBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onRightBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onRightBtnRelease. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onRightBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onRightBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onMotion. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onFocusIn",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onFocusIn. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onFocusOut",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onFocusOut. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onAutoScroll(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onAutoScroll(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onAutoScroll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onAutoScroll",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onAutoScroll. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onAutoScroll. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onAutoScroll(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onClicked. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onDoubleClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDoubleClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onDoubleClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onDoubleClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onDoubleClicked. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onDoubleClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onDoubleClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onTripleClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTripleClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onTripleClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onTripleClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onTripleClicked. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onTripleClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onTripleClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onQueryTip. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onQueryHelp. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onCommand(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCommand(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onCommand(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onCommand",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onCommand. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onCommand. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onCommand(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onTipTimer(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTipTimer(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onTipTimer(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onTipTimer",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onTipTimer. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onTipTimer. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onTipTimer(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onLookupTimer(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLookupTimer(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onLookupTimer(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onLookupTimer",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onLookupTimer. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onLookupTimer. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onLookupTimer(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onCmdSetValue. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onCmdGetIntValue. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_List_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_List_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_onCmdSetIntValue. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_List_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_List_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_List(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8) (new FXList(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8))
static PyObject *_wrap_new_FX_List(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _result;
    FXComposite * _arg0;
    FXuint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (LIST_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiii:new_FX_List",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_List. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXList *)new_FX_List(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXList_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_List_getNumItems(_swigobj)  (_swigobj->getNumItems())
static PyObject *_wrap_FX_List_getNumItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getNumItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getNumItems. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_List_getNumItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_getNumVisible(_swigobj)  (_swigobj->getNumVisible())
static PyObject *_wrap_FX_List_getNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getNumVisible",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getNumVisible. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_List_getNumVisible(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setNumVisible(_swigobj,_swigarg0)  (_swigobj->setNumVisible(_swigarg0))
static PyObject *_wrap_FX_List_setNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","nitems", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setNumVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setNumVisible. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setNumVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_retrieveItem(_swigobj,_swigarg0)  (_swigobj->retrieveItem(_swigarg0))
static PyObject *_wrap_FX_List_retrieveItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListItem * _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_retrieveItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_retrieveItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXListItem *)FX_List_retrieveItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXListItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_List_insertItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_insertItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXListItem * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","index","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|b:FX_List_insertItem",_kwnames,&_argo0,&_arg1,&_argo2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_insertItem. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of FX_List_insertItem. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_insertItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_insertItemStr(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_List_insertItemStr(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    void * _arg4 = (void *) NULL;
    FXbool  _arg5 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","index","text","icon","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OOb:FX_List_insertItemStr",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_obj4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_insertItemStr. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_insertItemStr(_arg0,_arg1,*_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_List_replaceItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_replaceItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXListItem * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","index","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|b:FX_List_replaceItem",_kwnames,&_argo0,&_arg1,&_argo2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_replaceItem. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of FX_List_replaceItem. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_replaceItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_replaceItemStr(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_List_replaceItemStr(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    void * _arg4 = (void *) NULL;
    FXbool  _arg5 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","index","text","icon","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OOb:FX_List_replaceItemStr",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_obj4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_replaceItemStr. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_replaceItemStr(_arg0,_arg1,*_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_List_appendItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->appendItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_appendItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXListItem * _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|b:FX_List_appendItem",_kwnames,&_argo0,&_argo1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_appendItem. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_List_appendItem. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_appendItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_appendItemStr(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->appendItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_List_appendItemStr(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    void * _arg3 = (void *) NULL;
    FXbool  _arg4 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","text","icon","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOb:FX_List_appendItemStr",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_appendItemStr. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_appendItemStr(_arg0,*_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_List_prependItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->prependItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_prependItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXListItem * _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|b:FX_List_prependItem",_kwnames,&_argo0,&_argo1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_prependItem. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXListItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_List_prependItem. Expected _FXListItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_prependItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_prependItemStr(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->prependItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_List_prependItemStr(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    void * _arg3 = (void *) NULL;
    FXbool  _arg4 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","text","icon","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOb:FX_List_prependItemStr",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_prependItemStr. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_prependItemStr(_arg0,*_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_List_removeItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->removeItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_removeItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_removeItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_removeItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_removeItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_clearItems(_swigobj,_swigarg0)  (_swigobj->clearItems(_swigarg0))
static PyObject *_wrap_FX_List_clearItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXbool  _arg1 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_List_clearItems",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_clearItems. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_clearItems(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getItemWidth(_swigobj,_swigarg0)  (_swigobj->getItemWidth(_swigarg0))
static PyObject *_wrap_FX_List_getItemWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_getItemWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemWidth. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getItemWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_getItemHeight(_swigobj,_swigarg0)  (_swigobj->getItemHeight(_swigarg0))
static PyObject *_wrap_FX_List_getItemHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_getItemHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemHeight. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getItemHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_getItemAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->getItemAt(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_getItemAt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_List_getItemAt",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemAt. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getItemAt(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_hitItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->hitItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_hitItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiii:FX_List_hitItem",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_hitItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_hitItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_findItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->findItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_List_findItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    FXString * _arg1;
    FXint  _arg2 = (FXint ) -1;
    FXuint  _arg3 = (FXuint ) SEARCH_FORWARD|SEARCH_WRAP;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text","start","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|ii:FX_List_findItem",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_findItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_findItem(_arg0,*_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_List_makeItemVisible(_swigobj,_swigarg0)  (_swigobj->makeItemVisible(_swigarg0))
static PyObject *_wrap_FX_List_makeItemVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_makeItemVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_makeItemVisible. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_makeItemVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_updateItem(_swigobj,_swigarg0)  (_swigobj->updateItem(_swigarg0))
static PyObject *_wrap_FX_List_updateItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_updateItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_updateItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_updateItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_setItemText(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemText(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_setItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_List_setItemText",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setItemText. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setItemText(_arg0,_arg1,*_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_List_getItemText(_swigobj,_swigarg0)  (_swigobj->getItemText(_swigarg0))
static PyObject *_wrap_FX_List_getItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_getItemText",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemText. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_List_getItemText(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_List_setItemIcon(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemIcon(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_setItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    FXIcon * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","icon", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_List_setItemIcon",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setItemIcon. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setItemIcon(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getItemIcon(_swigobj,_swigarg0)  (_swigobj->getItemIcon(_swigarg0))
static PyObject *_wrap_FX_List_getItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_getItemIcon",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemIcon. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_List_getItemIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_List_setItemData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemData(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_setItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    void * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_List_setItemData",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setItemData. Expected _FXList_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setItemData(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getItemData(_swigobj,_swigarg0)  (_swigobj->getItemData(_swigarg0))
static PyObject *_wrap_FX_List_getItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_getItemData",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getItemData. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_List_getItemData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_List_isItemSelected(_swigobj,_swigarg0)  (_swigobj->isItemSelected(_swigarg0))
static PyObject *_wrap_FX_List_isItemSelected(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_isItemSelected",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_isItemSelected. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_isItemSelected(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_isItemCurrent(_swigobj,_swigarg0)  (_swigobj->isItemCurrent(_swigarg0))
static PyObject *_wrap_FX_List_isItemCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_isItemCurrent",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_isItemCurrent. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_isItemCurrent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_isItemVisible(_swigobj,_swigarg0)  (_swigobj->isItemVisible(_swigarg0))
static PyObject *_wrap_FX_List_isItemVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_isItemVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_isItemVisible. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_isItemVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_isItemEnabled(_swigobj,_swigarg0)  (_swigobj->isItemEnabled(_swigarg0))
static PyObject *_wrap_FX_List_isItemEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_isItemEnabled",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_isItemEnabled. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_isItemEnabled(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_enableItem(_swigobj,_swigarg0)  (_swigobj->enableItem(_swigarg0))
static PyObject *_wrap_FX_List_enableItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_enableItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_enableItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_enableItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_disableItem(_swigobj,_swigarg0)  (_swigobj->disableItem(_swigarg0))
static PyObject *_wrap_FX_List_disableItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_disableItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_disableItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_disableItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_selectItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->selectItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_selectItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_selectItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_selectItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_selectItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_deselectItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->deselectItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_deselectItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_deselectItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_deselectItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_deselectItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_toggleItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->toggleItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_toggleItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_toggleItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_toggleItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_toggleItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_setCurrentItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setCurrentItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_setCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_setCurrentItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setCurrentItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setCurrentItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getCurrentItem(_swigobj)  (_swigobj->getCurrentItem())
static PyObject *_wrap_FX_List_getCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getCurrentItem",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getCurrentItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getCurrentItem(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setAnchorItem(_swigobj,_swigarg0)  (_swigobj->setAnchorItem(_swigarg0))
static PyObject *_wrap_FX_List_setAnchorItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setAnchorItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setAnchorItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setAnchorItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getAnchorItem(_swigobj)  (_swigobj->getAnchorItem())
static PyObject *_wrap_FX_List_getAnchorItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getAnchorItem",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getAnchorItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getAnchorItem(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_getCursorItem(_swigobj)  (_swigobj->getCursorItem())
static PyObject *_wrap_FX_List_getCursorItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getCursorItem",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getCursorItem. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_List_getCursorItem(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_extendSelection(_swigobj,_swigarg0,_swigarg1)  (_swigobj->extendSelection(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_List_extendSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_List_extendSelection",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_extendSelection. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_extendSelection(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_killSelection(_swigobj,_swigarg0)  (_swigobj->killSelection(_swigarg0))
static PyObject *_wrap_FX_List_killSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXList * _arg0;
    FXbool  _arg1 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_List_killSelection",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_killSelection. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_List_killSelection(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_List_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_List_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_List_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setFont. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_List_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_List_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getFont. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_List_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_List_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_List_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getTextColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_List_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_List_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setTextColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getSelBackColor(_swigobj)  (_swigobj->getSelBackColor())
static PyObject *_wrap_FX_List_getSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getSelBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getSelBackColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_List_getSelBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setSelBackColor(_swigobj,_swigarg0)  (_swigobj->setSelBackColor(_swigarg0))
static PyObject *_wrap_FX_List_setSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setSelBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setSelBackColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setSelBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getSelTextColor(_swigobj)  (_swigobj->getSelTextColor())
static PyObject *_wrap_FX_List_getSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getSelTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getSelTextColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_List_getSelTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setSelTextColor(_swigobj,_swigarg0)  (_swigobj->setSelTextColor(_swigarg0))
static PyObject *_wrap_FX_List_setSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setSelTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setSelTextColor. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setSelTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getSortFunc(_swigobj)  (_swigobj->getSortFunc())
static PyObject *_wrap_FX_List_getSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListSortFunc * _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getSortFunc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getSortFunc. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXListSortFunc (FX_List_getSortFunc(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXListSortFunc_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_List_setSortFunc(_swigobj,_swigarg0)  (_swigobj->setSortFunc(_swigarg0))
static PyObject *_wrap_FX_List_setSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXListSortFunc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","func", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_List_setSortFunc",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setSortFunc. Expected _FXList_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXListSortFunc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_List_setSortFunc. Expected _FXListSortFunc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setSortFunc(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_getListStyle(_swigobj)  (_swigobj->getListStyle())
static PyObject *_wrap_FX_List_getListStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getListStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getListStyle. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_List_getListStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_List_setListStyle(_swigobj,_swigarg0)  (_swigobj->setListStyle(_swigarg0))
static PyObject *_wrap_FX_List_setListStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_List_setListStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setListStyle. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setListStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_List_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_List_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXList * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_List_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_setHelpText. Expected _FXList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_List_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_List_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_List_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_List_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_List_getHelpText. Expected _FXList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_List_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyListToFXList(void *ptr) {
    FXPyList *src;
    FXList *dest;
    src = (FXPyList *) ptr;
    dest = (FXList *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXScrollArea(void *ptr) {
    FXPyList *src;
    FXScrollArea *dest;
    src = (FXPyList *) ptr;
    dest = (FXScrollArea *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXComposite(void *ptr) {
    FXPyList *src;
    FXComposite *dest;
    src = (FXPyList *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXWindow(void *ptr) {
    FXPyList *src;
    FXWindow *dest;
    src = (FXPyList *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXDrawable(void *ptr) {
    FXPyList *src;
    FXDrawable *dest;
    src = (FXPyList *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXId(void *ptr) {
    FXPyList *src;
    FXId *dest;
    src = (FXPyList *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyListToFXObject(void *ptr) {
    FXPyList *src;
    FXObject *dest;
    src = (FXPyList *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXList(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8) (new FXPyList(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8))
static PyObject *_wrap_new_FXList(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _result;
    FXComposite * _arg0;
    FXuint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) (LIST_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiii:new_FXList",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXList. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyList *)new_FXList(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyList_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXList_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXList_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyList * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXList_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_onDefault. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXList_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXList_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXList_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_create. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXList_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_destroy. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXList_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_detach. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXList_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXList_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_resize. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXList_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getDefaultWidth. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXList_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getDefaultHeight. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXList_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_show. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXList_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_hide. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXList_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_enable. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXList_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_disable. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXList_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_canFocus. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXList_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXList_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXList_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_setFocus. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXList_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_killFocus. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXList_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXList_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_setDefault. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXList_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_recalc. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXList_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_layout. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXList_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_lower. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXList_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXList_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_move. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXList_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXList_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_position. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXList_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_isComposite. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXList_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXList_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXList_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXList_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_contains. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXList_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXList_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXList_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXList_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getWidthForHeight. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXList_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXList_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getHeightForWidth. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXList_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_doesSaveUnder. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXList_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXList_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXList_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXList_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_reparent. Expected _FXPyList_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXList_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXList_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXList_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_setBackColor. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXList_getContentWidth(_swigobj)  (_swigobj->_getContentWidth())
static PyObject *_wrap_FXList_getContentWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getContentWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getContentWidth. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getContentWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_getContentHeight(_swigobj)  (_swigobj->_getContentHeight())
static PyObject *_wrap_FXList_getContentHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getContentHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getContentHeight. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getContentHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_getViewportWidth(_swigobj)  (_swigobj->_getViewportWidth())
static PyObject *_wrap_FXList_getViewportWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getViewportWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getViewportWidth. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getViewportWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_getViewportHeight(_swigobj)  (_swigobj->_getViewportHeight())
static PyObject *_wrap_FXList_getViewportHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyList * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXList_getViewportHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_getViewportHeight. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXList_getViewportHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXList_moveContents(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_moveContents(_swigarg0,_swigarg1))
static PyObject *_wrap_FXList_moveContents(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyList * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXList_moveContents",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyList_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXList_moveContents. Expected _FXPyList_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXList_moveContents(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXComboBoxToFXPacker(void *ptr) {
    FXComboBox *src;
    FXPacker *dest;
    src = (FXComboBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXComboBoxToFXComposite(void *ptr) {
    FXComboBox *src;
    FXComposite *dest;
    src = (FXComboBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXComboBoxToFXWindow(void *ptr) {
    FXComboBox *src;
    FXWindow *dest;
    src = (FXComboBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXComboBoxToFXDrawable(void *ptr) {
    FXComboBox *src;
    FXDrawable *dest;
    src = (FXComboBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXComboBoxToFXId(void *ptr) {
    FXComboBox *src;
    FXId *dest;
    src = (FXComboBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXComboBoxToFXObject(void *ptr) {
    FXComboBox *src;
    FXObject *dest;
    src = (FXComboBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ComboBox_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onFocusUp. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onFocusDown. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onTextButton(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTextButton(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onTextButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onTextButton",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onTextButton. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onTextButton. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onTextButton(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onTextChanged(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTextChanged(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onTextChanged(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onTextChanged",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onTextChanged. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onTextChanged. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onTextChanged(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onTextCommand(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTextCommand(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onTextCommand(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onTextCommand",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onTextCommand. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onTextCommand. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onTextCommand(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onListClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onListClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onListClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onListClicked. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onListClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onListClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onFwdToText(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFwdToText(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onFwdToText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onFwdToText",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onFwdToText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onFwdToText. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onFwdToText(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ComboBox_onUpdFmText(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdFmText(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_onUpdFmText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ComboBox_onUpdFmText",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_onUpdFmText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ComboBox_onUpdFmText. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ComboBox_onUpdFmText(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ComboBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXComboBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FX_ComboBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (COMBOBOX_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","cols","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii|Oiiiiiiiiii:new_FX_ComboBox",_kwnames,&_argo0,&_arg1,&_arg2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ComboBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXComboBox *)new_FX_ComboBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXComboBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ComboBox_isEditable(_swigobj)  (_swigobj->isEditable())
static PyObject *_wrap_FX_ComboBox_isEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_isEditable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_isEditable. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ComboBox_isEditable(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ComboBox_setEditable(_swigobj,_swigarg0)  (_swigobj->setEditable(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setEditable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","edit", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_ComboBox_setEditable",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setEditable. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setEditable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ComboBox_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ComboBox_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_ComboBox_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ComboBox_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ComboBox_setNumColumns(_swigobj,_swigarg0)  (_swigobj->setNumColumns(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setNumColumns(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","cols", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setNumColumns",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setNumColumns. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setNumColumns(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getNumColumns(_swigobj)  (_swigobj->getNumColumns())
static PyObject *_wrap_FX_ComboBox_getNumColumns(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getNumColumns",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getNumColumns. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ComboBox_getNumColumns(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_getNumItems(_swigobj)  (_swigobj->getNumItems())
static PyObject *_wrap_FX_ComboBox_getNumItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getNumItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getNumItems. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ComboBox_getNumItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_getNumVisible(_swigobj)  (_swigobj->getNumVisible())
static PyObject *_wrap_FX_ComboBox_getNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getNumVisible",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getNumVisible. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ComboBox_getNumVisible(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_setNumVisible(_swigobj,_swigarg0)  (_swigobj->setNumVisible(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","nitems", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setNumVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setNumVisible. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setNumVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_isItemCurrent(_swigobj,_swigarg0)  (_swigobj->isItemCurrent(_swigarg0))
static PyObject *_wrap_FX_ComboBox_isItemCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_isItemCurrent",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_isItemCurrent. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ComboBox_isItemCurrent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ComboBox_setCurrentItem(_swigobj,_swigarg0)  (_swigobj->setCurrentItem(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setCurrentItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setCurrentItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setCurrentItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getCurrentItem(_swigobj)  (_swigobj->getCurrentItem())
static PyObject *_wrap_FX_ComboBox_getCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getCurrentItem",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getCurrentItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ComboBox_getCurrentItem(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_retrieveItem(_swigobj,_swigarg0)  (_swigobj->retrieveItem(_swigarg0))
static PyObject *_wrap_FX_ComboBox_retrieveItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_retrieveItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_retrieveItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ComboBox_retrieveItem(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ComboBox_replaceItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_replaceItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    void * _arg3 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","index","text","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|O:FX_ComboBox_replaceItem",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_replaceItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_replaceItem(_arg0,_arg1,*_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ComboBox_insertItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ComboBox_insertItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    void * _arg3 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","index","text","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|O:FX_ComboBox_insertItem",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_insertItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_insertItem(_arg0,_arg1,*_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ComboBox_appendItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->appendItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ComboBox_appendItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXString * _arg1;
    void * _arg2 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","text","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|O:FX_ComboBox_appendItem",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_appendItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_appendItem(_arg0,*_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ComboBox_prependItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->prependItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ComboBox_prependItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXString * _arg1;
    void * _arg2 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","text","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|O:FX_ComboBox_prependItem",_kwnames,&_argo0,&_obj1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_prependItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_prependItem(_arg0,*_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ComboBox_removeItem(_swigobj,_swigarg0)  (_swigobj->removeItem(_swigarg0))
static PyObject *_wrap_FX_ComboBox_removeItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_removeItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_removeItem. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_removeItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_clearItems(_swigobj)  (_swigobj->clearItems())
static PyObject *_wrap_FX_ComboBox_clearItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_clearItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_clearItems. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_clearItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_setItemText(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemText(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ComboBox_setItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_ComboBox_setItemText",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setItemText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setItemText(_arg0,_arg1,*_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ComboBox_getItemText(_swigobj,_swigarg0)  (_swigobj->getItemText(_swigarg0))
static PyObject *_wrap_FX_ComboBox_getItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_getItemText",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getItemText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ComboBox_getItemText(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ComboBox_setItemData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemData(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ComboBox_setItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXint  _arg1;
    void * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_ComboBox_setItemData",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setItemData. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setItemData(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getItemData(_swigobj,_swigarg0)  (_swigobj->getItemData(_swigarg0))
static PyObject *_wrap_FX_ComboBox_getItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_getItemData",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getItemData. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_ComboBox_getItemData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ComboBox_isPaneShown(_swigobj)  (_swigobj->isPaneShown())
static PyObject *_wrap_FX_ComboBox_isPaneShown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_isPaneShown",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_isPaneShown. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ComboBox_isPaneShown(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ComboBox_sortItems(_swigobj)  (_swigobj->sortItems())
static PyObject *_wrap_FX_ComboBox_sortItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_sortItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_sortItems. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_sortItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ComboBox_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setFont. Expected _FXComboBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ComboBox_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_ComboBox_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getFont. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_ComboBox_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ComboBox_setComboStyle(_swigobj,_swigarg0)  (_swigobj->setComboStyle(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setComboStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","mode", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setComboStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setComboStyle. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setComboStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getComboStyle(_swigobj)  (_swigobj->getComboStyle())
static PyObject *_wrap_FX_ComboBox_getComboStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getComboStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getComboStyle. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ComboBox_getComboStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_setBackColor(_swigobj,_swigarg0)  (_swigobj->setBackColor(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setBackColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getBackColor(_swigobj)  (_swigobj->getBackColor())
static PyObject *_wrap_FX_ComboBox_getBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getBackColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ComboBox_getBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setTextColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_ComboBox_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getTextColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ComboBox_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_setSelBackColor(_swigobj,_swigarg0)  (_swigobj->setSelBackColor(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setSelBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setSelBackColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setSelBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getSelBackColor(_swigobj)  (_swigobj->getSelBackColor())
static PyObject *_wrap_FX_ComboBox_getSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getSelBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getSelBackColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ComboBox_getSelBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_setSelTextColor(_swigobj,_swigarg0)  (_swigobj->setSelTextColor(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ComboBox_setSelTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setSelTextColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setSelTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_getSelTextColor(_swigobj)  (_swigobj->getSelTextColor())
static PyObject *_wrap_FX_ComboBox_getSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getSelTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getSelTextColor. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ComboBox_getSelTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ComboBox_getSortFunc(_swigobj)  (_swigobj->getSortFunc())
static PyObject *_wrap_FX_ComboBox_getSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListSortFunc * _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getSortFunc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getSortFunc. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXListSortFunc (FX_ComboBox_getSortFunc(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXListSortFunc_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_ComboBox_setSortFunc(_swigobj,_swigarg0)  (_swigobj->setSortFunc(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXListSortFunc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","func", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ComboBox_setSortFunc",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setSortFunc. Expected _FXComboBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXListSortFunc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ComboBox_setSortFunc. Expected _FXListSortFunc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setSortFunc(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ComboBox_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","txt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ComboBox_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setHelpText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ComboBox_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ComboBox_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getHelpText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ComboBox_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ComboBox_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ComboBox_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComboBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","txt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ComboBox_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_setTipText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ComboBox_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ComboBox_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ComboBox_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ComboBox_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ComboBox_getTipText. Expected _FXComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ComboBox_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyComboBoxToFXComboBox(void *ptr) {
    FXPyComboBox *src;
    FXComboBox *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXComboBox *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXPacker(void *ptr) {
    FXPyComboBox *src;
    FXPacker *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXComposite(void *ptr) {
    FXPyComboBox *src;
    FXComposite *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXWindow(void *ptr) {
    FXPyComboBox *src;
    FXWindow *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXDrawable(void *ptr) {
    FXPyComboBox *src;
    FXDrawable *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXId(void *ptr) {
    FXPyComboBox *src;
    FXId *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyComboBoxToFXObject(void *ptr) {
    FXPyComboBox *src;
    FXObject *dest;
    src = (FXPyComboBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXComboBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13) (new FXPyComboBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13))
static PyObject *_wrap_new_FXComboBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXObject * _arg3 = (FXObject *) NULL;
    FXSelector  _arg4 = (FXSelector ) 0;
    FXuint  _arg5 = (FXuint ) (COMBOBOX_NORMAL);
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    FXint  _arg13 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "p","cols","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii|Oiiiiiiiiii:new_FXComboBox",_kwnames,&_argo0,&_arg1,&_arg2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXComboBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyComboBox *)new_FXComboBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyComboBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXComboBox_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXComboBox_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyComboBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXComboBox_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_onDefault. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXComboBox_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXComboBox_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXComboBox_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_create. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXComboBox_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_destroy. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXComboBox_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_detach. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComboBox_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComboBox_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_resize. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXComboBox_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_getDefaultWidth. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComboBox_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComboBox_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXComboBox_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_getDefaultHeight. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComboBox_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComboBox_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXComboBox_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_show. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXComboBox_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_hide. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXComboBox_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_enable. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXComboBox_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_disable. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXComboBox_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_canFocus. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComboBox_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComboBox_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXComboBox_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_setFocus. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXComboBox_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_killFocus. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXComboBox_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXComboBox_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_setDefault. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXComboBox_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_recalc. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXComboBox_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_layout. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXComboBox_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_lower. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComboBox_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComboBox_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_move. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXComboBox_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXComboBox_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_position. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXComboBox_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_isComposite. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComboBox_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComboBox_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComboBox_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComboBox_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_contains. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComboBox_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComboBox_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXComboBox_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComboBox_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_getWidthForHeight. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComboBox_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComboBox_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXComboBox_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComboBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComboBox_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_getHeightForWidth. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComboBox_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComboBox_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXComboBox_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComboBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComboBox_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_doesSaveUnder. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComboBox_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComboBox_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXComboBox_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXComboBox_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_reparent. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXComboBox_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComboBox_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXComboBox_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComboBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComboBox_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComboBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComboBox_setBackColor. Expected _FXPyComboBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComboBox_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXDragCornerToFXWindow(void *ptr) {
    FXDragCorner *src;
    FXWindow *dest;
    src = (FXDragCorner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXDragCornerToFXDrawable(void *ptr) {
    FXDragCorner *src;
    FXDrawable *dest;
    src = (FXDragCorner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXDragCornerToFXId(void *ptr) {
    FXDragCorner *src;
    FXId *dest;
    src = (FXDragCorner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXDragCornerToFXObject(void *ptr) {
    FXDragCorner *src;
    FXObject *dest;
    src = (FXDragCorner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_DragCorner_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DragCorner_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDragCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DragCorner_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_onPaint. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DragCorner_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DragCorner_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DragCorner_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DragCorner_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDragCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DragCorner_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_onLeftBtnPress. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DragCorner_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DragCorner_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DragCorner_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DragCorner_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDragCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DragCorner_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_onLeftBtnRelease. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DragCorner_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DragCorner_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DragCorner_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DragCorner_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDragCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DragCorner_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_onMotion. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DragCorner_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DragCorner_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_DragCorner(_swigarg0) (new FXDragCorner(_swigarg0))
static PyObject *_wrap_new_FX_DragCorner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragCorner * _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "parent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:new_FX_DragCorner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_DragCorner. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragCorner *)new_FX_DragCorner(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_DragCorner_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_DragCorner_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DragCorner_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_getHiliteColor. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_DragCorner_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_DragCorner_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_DragCorner_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragCorner * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","arg2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_DragCorner_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_setHiliteColor. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_DragCorner_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_DragCorner_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_DragCorner_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DragCorner_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_getShadowColor. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_DragCorner_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_DragCorner_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_DragCorner_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragCorner * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","arg2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_DragCorner_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DragCorner_setShadowColor. Expected _FXDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_DragCorner_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXDragCorner__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_DragCorner_deleteType'(FXDragType )");
        return 1; 
    }
    FXDragCorner::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXDragCorner__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXDragCorner::deleteType);
    return pyobj;
}

static int _wrap_FXDragCorner__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_DragCorner_textType'(FXDragType )");
        return 1; 
    }
    FXDragCorner::textType = tval;
    return 0;
}

static PyObject *_wrap_FXDragCorner__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXDragCorner::textType);
    return pyobj;
}

static int _wrap_FXDragCorner__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_DragCorner_stringType'(FXDragType )");
        return 1; 
    }
    FXDragCorner::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXDragCorner__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXDragCorner::stringType);
    return pyobj;
}

static int _wrap_FXDragCorner__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_DragCorner_colorType'(FXDragType )");
        return 1; 
    }
    FXDragCorner::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXDragCorner__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXDragCorner::colorType);
    return pyobj;
}

static int _wrap_FXDragCorner__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_DragCorner_urilistType'(FXDragType )");
        return 1; 
    }
    FXDragCorner::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXDragCorner__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXDragCorner::urilistType);
    return pyobj;
}

static void *SwigFXPyDragCornerToFXDragCorner(void *ptr) {
    FXPyDragCorner *src;
    FXDragCorner *dest;
    src = (FXPyDragCorner *) ptr;
    dest = (FXDragCorner *) src;
    return (void *) dest;
}

static void *SwigFXPyDragCornerToFXWindow(void *ptr) {
    FXPyDragCorner *src;
    FXWindow *dest;
    src = (FXPyDragCorner *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyDragCornerToFXDrawable(void *ptr) {
    FXPyDragCorner *src;
    FXDrawable *dest;
    src = (FXPyDragCorner *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyDragCornerToFXId(void *ptr) {
    FXPyDragCorner *src;
    FXId *dest;
    src = (FXPyDragCorner *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyDragCornerToFXObject(void *ptr) {
    FXPyDragCorner *src;
    FXObject *dest;
    src = (FXPyDragCorner *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDragCorner(_swigarg0) (new FXPyDragCorner(_swigarg0))
static PyObject *_wrap_new_FXDragCorner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "parent", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:new_FXDragCorner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXDragCorner. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDragCorner *)new_FXDragCorner(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDragCorner_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDragCorner_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDragCorner_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDragCorner * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDragCorner_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_onDefault. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDragCorner_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXDragCorner_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXDragCorner_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_create. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXDragCorner_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_destroy. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXDragCorner_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_detach. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDragCorner_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDragCorner_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_resize. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXDragCorner_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_getDefaultWidth. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDragCorner_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDragCorner_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXDragCorner_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_getDefaultHeight. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDragCorner_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDragCorner_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXDragCorner_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_show. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXDragCorner_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_hide. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXDragCorner_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_enable. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXDragCorner_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_disable. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXDragCorner_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_canFocus. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDragCorner_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDragCorner_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXDragCorner_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_setFocus. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXDragCorner_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_killFocus. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXDragCorner_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXDragCorner_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_setDefault. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXDragCorner_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_recalc. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXDragCorner_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_layout. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXDragCorner_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_lower. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDragCorner_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDragCorner_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_move. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXDragCorner_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXDragCorner_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_position. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXDragCorner_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_isComposite. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDragCorner_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDragCorner_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDragCorner_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDragCorner_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_contains. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDragCorner_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDragCorner_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXDragCorner_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDragCorner_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_getWidthForHeight. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDragCorner_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDragCorner_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXDragCorner_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDragCorner * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDragCorner_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_getHeightForWidth. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDragCorner_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDragCorner_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXDragCorner_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDragCorner * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDragCorner_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_doesSaveUnder. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDragCorner_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDragCorner_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXDragCorner_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXDragCorner_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_reparent. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXDragCorner_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDragCorner_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXDragCorner_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDragCorner * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDragCorner_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDragCorner_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDragCorner_setBackColor. Expected _FXPyDragCorner_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDragCorner_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyDragCorner__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXDragCorner_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyDragCorner::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyDragCorner__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyDragCorner::deleteType);
    return pyobj;
}

static int _wrap_FXPyDragCorner__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXDragCorner_textType'(FXDragType )");
        return 1; 
    }
    FXPyDragCorner::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyDragCorner__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyDragCorner::textType);
    return pyobj;
}

static int _wrap_FXPyDragCorner__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXDragCorner_stringType'(FXDragType )");
        return 1; 
    }
    FXPyDragCorner::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyDragCorner__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyDragCorner::stringType);
    return pyobj;
}

static int _wrap_FXPyDragCorner__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXDragCorner_colorType'(FXDragType )");
        return 1; 
    }
    FXPyDragCorner::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyDragCorner__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyDragCorner::colorType);
    return pyobj;
}

static int _wrap_FXPyDragCorner__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXDragCorner_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyDragCorner::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyDragCorner__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyDragCorner::urilistType);
    return pyobj;
}

static void *SwigFXStatuslineToFXFrame(void *ptr) {
    FXStatusline *src;
    FXFrame *dest;
    src = (FXStatusline *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXStatuslineToFXWindow(void *ptr) {
    FXStatusline *src;
    FXWindow *dest;
    src = (FXStatusline *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXStatuslineToFXDrawable(void *ptr) {
    FXStatusline *src;
    FXDrawable *dest;
    src = (FXStatusline *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXStatuslineToFXId(void *ptr) {
    FXStatusline *src;
    FXId *dest;
    src = (FXStatusline *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXStatuslineToFXObject(void *ptr) {
    FXStatusline *src;
    FXObject *dest;
    src = (FXStatusline *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Statusline_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Statusline_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXStatusline * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Statusline_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_onPaint. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Statusline_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Statusline_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Statusline_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Statusline_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXStatusline * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Statusline_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_onUpdate. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Statusline_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Statusline_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Statusline_onCmdGetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Statusline_onCmdGetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXStatusline * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Statusline_onCmdGetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_onCmdGetStringValue. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Statusline_onCmdGetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Statusline_onCmdGetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Statusline_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Statusline_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXStatusline * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Statusline_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_onCmdSetStringValue. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Statusline_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Statusline_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Statusline(_swigarg0,_swigarg1,_swigarg2) (new FXStatusline(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FX_Statusline(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "arg1","arg2","arg3", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:new_FX_Statusline",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Statusline. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStatusline *)new_FX_Statusline(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Statusline_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_Statusline_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Statusline_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_setText. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusline_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Statusline_setNormalText(_swigobj,_swigarg0)  (_swigobj->setNormalText(_swigarg0))
static PyObject *_wrap_FX_Statusline_setNormalText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Statusline_setNormalText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_setNormalText. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusline_setNormalText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Statusline_getNormalText(_swigobj)  (_swigobj->getNormalText())
static PyObject *_wrap_FX_Statusline_getNormalText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusline_getNormalText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_getNormalText. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Statusline_getNormalText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Statusline_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_Statusline_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusline_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_getText. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Statusline_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Statusline_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_Statusline_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","arg2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Statusline_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_setFont. Expected _FXStatusline_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Statusline_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusline_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Statusline_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_Statusline_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusline_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_getFont. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_Statusline_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Statusline_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_Statusline_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusline_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_getTextColor. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Statusline_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Statusline_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_Statusline_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","arg2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Statusline_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_setTextColor. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusline_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Statusline_getTextHighlightColor(_swigobj)  (_swigobj->getTextHighlightColor())
static PyObject *_wrap_FX_Statusline_getTextHighlightColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusline_getTextHighlightColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_getTextHighlightColor. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Statusline_getTextHighlightColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Statusline_setTextHighlightColor(_swigobj,_swigarg0)  (_swigobj->setTextHighlightColor(_swigarg0))
static PyObject *_wrap_FX_Statusline_setTextHighlightColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","arg2", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Statusline_setTextHighlightColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusline_setTextHighlightColor. Expected _FXStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusline_setTextHighlightColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyStatuslineToFXStatusline(void *ptr) {
    FXPyStatusline *src;
    FXStatusline *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXStatusline *) src;
    return (void *) dest;
}

static void *SwigFXPyStatuslineToFXFrame(void *ptr) {
    FXPyStatusline *src;
    FXFrame *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyStatuslineToFXWindow(void *ptr) {
    FXPyStatusline *src;
    FXWindow *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyStatuslineToFXDrawable(void *ptr) {
    FXPyStatusline *src;
    FXDrawable *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyStatuslineToFXId(void *ptr) {
    FXPyStatusline *src;
    FXId *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyStatuslineToFXObject(void *ptr) {
    FXPyStatusline *src;
    FXObject *dest;
    src = (FXPyStatusline *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXStatusline(_swigarg0,_swigarg1,_swigarg2) (new FXPyStatusline(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_new_FXStatusline(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "arg1","arg2","arg3", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOi:new_FXStatusline",_kwnames,&_argo0,&_obj1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXStatusline. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyStatusline *)new_FXStatusline(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyStatusline_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXStatusline_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXStatusline_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyStatusline * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXStatusline_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_onDefault. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXStatusline_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXStatusline_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXStatusline_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_create. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXStatusline_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_destroy. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXStatusline_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_detach. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusline_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusline_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_resize. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXStatusline_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_getDefaultWidth. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusline_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusline_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXStatusline_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_getDefaultHeight. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusline_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusline_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXStatusline_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_show. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXStatusline_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_hide. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXStatusline_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_enable. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXStatusline_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_disable. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXStatusline_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_canFocus. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusline_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusline_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXStatusline_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_setFocus. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXStatusline_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_killFocus. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXStatusline_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXStatusline_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_setDefault. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXStatusline_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_recalc. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXStatusline_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_layout. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXStatusline_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_lower. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusline_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusline_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_move. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXStatusline_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXStatusline_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_position. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXStatusline_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_isComposite. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusline_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusline_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusline_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusline_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_contains. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusline_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusline_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXStatusline_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusline_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_getWidthForHeight. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusline_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusline_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXStatusline_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusline * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusline_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_getHeightForWidth. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusline_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusline_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXStatusline_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusline * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusline_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_doesSaveUnder. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusline_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusline_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXStatusline_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXStatusline_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_reparent. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXStatusline_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusline_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXStatusline_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusline * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusline_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusline_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusline_setBackColor. Expected _FXPyStatusline_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusline_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXStatusbarToFXHorizontalFrame(void *ptr) {
    FXStatusbar *src;
    FXHorizontalFrame *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXHorizontalFrame *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXPacker(void *ptr) {
    FXStatusbar *src;
    FXPacker *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXComposite(void *ptr) {
    FXStatusbar *src;
    FXComposite *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXWindow(void *ptr) {
    FXStatusbar *src;
    FXWindow *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXDrawable(void *ptr) {
    FXStatusbar *src;
    FXDrawable *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXId(void *ptr) {
    FXStatusbar *src;
    FXId *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXStatusbarToFXObject(void *ptr) {
    FXStatusbar *src;
    FXObject *dest;
    src = (FXStatusbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_Statusbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXStatusbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_Statusbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusbar * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 3;
    FXint  _arg7 = (FXint ) 3;
    FXint  _arg8 = (FXint ) 2;
    FXint  _arg9 = (FXint ) 2;
    FXint  _arg10 = (FXint ) 4;
    FXint  _arg11 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiiiiiii:new_FX_Statusbar",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Statusbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStatusbar *)new_FX_Statusbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXStatusbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Statusbar_setCornerStyle(_swigobj,_swigarg0)  (_swigobj->setCornerStyle(_swigarg0))
static PyObject *_wrap_FX_Statusbar_setCornerStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusbar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","withcorner", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Statusbar_setCornerStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusbar_setCornerStyle. Expected _FXStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Statusbar_setCornerStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Statusbar_getCornerStyle(_swigobj)  (_swigobj->getCornerStyle())
static PyObject *_wrap_FX_Statusbar_getCornerStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusbar_getCornerStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusbar_getCornerStyle. Expected _FXStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Statusbar_getCornerStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Statusbar_getStatusline(_swigobj)  (_swigobj->getStatusline())
static PyObject *_wrap_FX_Statusbar_getStatusline(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXStatusline * _result;
    FXStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusbar_getStatusline",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusbar_getStatusline. Expected _FXStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXStatusline *)FX_Statusbar_getStatusline(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Statusbar_getDragCorner(_swigobj)  (_swigobj->getDragCorner())
static PyObject *_wrap_FX_Statusbar_getDragCorner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragCorner * _result;
    FXStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Statusbar_getDragCorner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Statusbar_getDragCorner. Expected _FXStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragCorner *)FX_Statusbar_getDragCorner(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

static void *SwigFXPyStatusbarToFXStatusbar(void *ptr) {
    FXPyStatusbar *src;
    FXStatusbar *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXStatusbar *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXHorizontalFrame(void *ptr) {
    FXPyStatusbar *src;
    FXHorizontalFrame *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXHorizontalFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXPacker(void *ptr) {
    FXPyStatusbar *src;
    FXPacker *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXComposite(void *ptr) {
    FXPyStatusbar *src;
    FXComposite *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXWindow(void *ptr) {
    FXPyStatusbar *src;
    FXWindow *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXDrawable(void *ptr) {
    FXPyStatusbar *src;
    FXDrawable *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXId(void *ptr) {
    FXPyStatusbar *src;
    FXId *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyStatusbarToFXObject(void *ptr) {
    FXPyStatusbar *src;
    FXObject *dest;
    src = (FXPyStatusbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXStatusbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyStatusbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXStatusbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 3;
    FXint  _arg7 = (FXint ) 3;
    FXint  _arg8 = (FXint ) 2;
    FXint  _arg9 = (FXint ) 2;
    FXint  _arg10 = (FXint ) 4;
    FXint  _arg11 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiiiiiii:new_FXStatusbar",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXStatusbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyStatusbar *)new_FXStatusbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyStatusbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXStatusbar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXStatusbar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyStatusbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXStatusbar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_onDefault. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXStatusbar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXStatusbar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXStatusbar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_create. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXStatusbar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_destroy. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXStatusbar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_detach. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusbar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusbar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_resize. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXStatusbar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_getDefaultWidth. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusbar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusbar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXStatusbar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_getDefaultHeight. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusbar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusbar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXStatusbar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_show. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXStatusbar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_hide. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXStatusbar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_enable. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXStatusbar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_disable. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXStatusbar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_canFocus. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusbar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusbar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXStatusbar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_setFocus. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXStatusbar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_killFocus. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXStatusbar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXStatusbar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_setDefault. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXStatusbar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_recalc. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXStatusbar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_layout. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXStatusbar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_lower. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusbar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusbar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_move. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXStatusbar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXStatusbar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_position. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXStatusbar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_isComposite. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusbar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusbar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXStatusbar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXStatusbar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_contains. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusbar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusbar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXStatusbar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusbar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_getWidthForHeight. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusbar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusbar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXStatusbar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyStatusbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusbar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_getHeightForWidth. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXStatusbar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXStatusbar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXStatusbar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyStatusbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXStatusbar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_doesSaveUnder. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXStatusbar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXStatusbar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXStatusbar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXStatusbar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_reparent. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXStatusbar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXStatusbar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXStatusbar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyStatusbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXStatusbar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyStatusbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXStatusbar_setBackColor. Expected _FXPyStatusbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXStatusbar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXSliderToFXFrame(void *ptr) {
    FXSlider *src;
    FXFrame *dest;
    src = (FXSlider *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXSliderToFXWindow(void *ptr) {
    FXSlider *src;
    FXWindow *dest;
    src = (FXSlider *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXSliderToFXDrawable(void *ptr) {
    FXSlider *src;
    FXDrawable *dest;
    src = (FXSlider *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXSliderToFXId(void *ptr) {
    FXSlider *src;
    FXId *dest;
    src = (FXSlider *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXSliderToFXObject(void *ptr) {
    FXSlider *src;
    FXObject *dest;
    src = (FXSlider *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Slider_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onPaint. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onLeftBtnPress. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onLeftBtnRelease. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onMiddleBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onMiddleBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onMiddleBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onMiddleBtnPress. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onMiddleBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onMiddleBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onMiddleBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onMiddleBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onMiddleBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onMiddleBtnRelease. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onMiddleBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onMiddleBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onUngrabbed. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onMotion. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onTimeInc(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeInc(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onTimeInc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onTimeInc",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onTimeInc. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onTimeInc. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onTimeInc(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onTimeDec(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTimeDec(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onTimeDec(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onTimeDec",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onTimeDec. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onTimeDec. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onTimeDec(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdSetValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdSetIntValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdGetIntValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdSetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdSetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdSetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdSetRealValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdSetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdSetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdGetRealValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetRealValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdGetRealValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdGetRealValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdGetRealValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdGetRealValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdGetRealValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdSetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdSetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdSetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdSetIntRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdSetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdSetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdGetIntRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdGetIntRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdGetIntRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdGetIntRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdGetIntRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdGetIntRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdSetRealRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetRealRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdSetRealRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdSetRealRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdSetRealRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdSetRealRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdSetRealRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onCmdGetRealRange(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetRealRange(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onCmdGetRealRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onCmdGetRealRange",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onCmdGetRealRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onCmdGetRealRange. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onCmdGetRealRange(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onQueryHelp. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Slider_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Slider_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXSlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Slider_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_onQueryTip. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Slider_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Slider_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Slider(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXSlider(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_Slider(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (SLIDER_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) 0;
    FXint  _arg11 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_Slider",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Slider. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSlider *)new_FX_Slider(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXSlider_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Slider_setRange(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setRange(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Slider_setRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","lo","hi", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Slider_setRange",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setRange(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject * FXSlider_getRange(FXSlider *self) {
      FXint lo,hi;
      self->getRange(lo,hi);
      FXbool doSave=FXPyRestoreThread();
      PyObject* tuple=PyTuple_New(2);
      if (tuple) {
	PyObject *obj1 = PyInt_FromLong(lo);
	if (!obj1 || PyTuple_SetItem(tuple, 0, obj1) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
	PyObject *obj2 = PyInt_FromLong(hi);
	if (!obj2 || PyTuple_SetItem(tuple, 1, obj2) < 0) {
	  Py_DECREF(tuple);
          FXPySaveThread(doSave);
	  return NULL;
	}
      }
      FXPySaveThread(doSave);
      return tuple;
    }
static PyObject *_wrap_FX_Slider_getRange(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getRange",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getRange. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXSlider_getRange(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Slider_setValue(_swigobj,_swigarg0)  (_swigobj->setValue(_swigarg0))
static PyObject *_wrap_FX_Slider_setValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setValue",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setValue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getValue(_swigobj)  (_swigobj->getValue())
static PyObject *_wrap_FX_Slider_getValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getValue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getValue. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Slider_getValue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_getSliderStyle(_swigobj)  (_swigobj->getSliderStyle())
static PyObject *_wrap_FX_Slider_getSliderStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getSliderStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getSliderStyle. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Slider_getSliderStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setSliderStyle(_swigobj,_swigarg0)  (_swigobj->setSliderStyle(_swigarg0))
static PyObject *_wrap_FX_Slider_setSliderStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setSliderStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setSliderStyle. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setSliderStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getHeadSize(_swigobj)  (_swigobj->getHeadSize())
static PyObject *_wrap_FX_Slider_getHeadSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getHeadSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getHeadSize. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Slider_getHeadSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setHeadSize(_swigobj,_swigarg0)  (_swigobj->setHeadSize(_swigarg0))
static PyObject *_wrap_FX_Slider_setHeadSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hs", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setHeadSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setHeadSize. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setHeadSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getSlotSize(_swigobj)  (_swigobj->getSlotSize())
static PyObject *_wrap_FX_Slider_getSlotSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getSlotSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getSlotSize. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Slider_getSlotSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setSlotSize(_swigobj,_swigarg0)  (_swigobj->setSlotSize(_swigarg0))
static PyObject *_wrap_FX_Slider_setSlotSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","bs", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setSlotSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setSlotSize. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setSlotSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getIncrement(_swigobj)  (_swigobj->getIncrement())
static PyObject *_wrap_FX_Slider_getIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getIncrement",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getIncrement. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Slider_getIncrement(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setIncrement(_swigobj,_swigarg0)  (_swigobj->setIncrement(_swigarg0))
static PyObject *_wrap_FX_Slider_setIncrement(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","inc", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setIncrement",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setIncrement. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setIncrement(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_setTickDelta(_swigobj,_swigarg0)  (_swigobj->setTickDelta(_swigarg0))
static PyObject *_wrap_FX_Slider_setTickDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dist", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setTickDelta",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setTickDelta. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setTickDelta(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getTickDelta(_swigobj)  (_swigobj->getTickDelta())
static PyObject *_wrap_FX_Slider_getTickDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getTickDelta",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getTickDelta. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Slider_getTickDelta(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_getSlotColor(_swigobj)  (_swigobj->getSlotColor())
static PyObject *_wrap_FX_Slider_getSlotColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getSlotColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getSlotColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Slider_getSlotColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setSlotColor(_swigobj,_swigarg0)  (_swigobj->setSlotColor(_swigarg0))
static PyObject *_wrap_FX_Slider_setSlotColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setSlotColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setSlotColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setSlotColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_Slider_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getHiliteColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Slider_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_Slider_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setHiliteColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_Slider_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getShadowColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Slider_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_Slider_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setShadowColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_Slider_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getBorderColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Slider_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_Slider_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setBorderColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getBaseColor(_swigobj)  (_swigobj->getBaseColor())
static PyObject *_wrap_FX_Slider_getBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getBaseColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getBaseColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Slider_getBaseColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Slider_setBaseColor(_swigobj,_swigarg0)  (_swigobj->setBaseColor(_swigarg0))
static PyObject *_wrap_FX_Slider_setBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Slider_setBaseColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setBaseColor. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setBaseColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Slider_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_Slider_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getHelpText. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Slider_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Slider_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_Slider_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Slider_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setHelpText. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Slider_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_Slider_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXSlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Slider_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_getTipText. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Slider_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Slider_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_Slider_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSlider * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Slider_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXSlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Slider_setTipText. Expected _FXSlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Slider_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

static void *SwigFXPySliderToFXSlider(void *ptr) {
    FXPySlider *src;
    FXSlider *dest;
    src = (FXPySlider *) ptr;
    dest = (FXSlider *) src;
    return (void *) dest;
}

static void *SwigFXPySliderToFXFrame(void *ptr) {
    FXPySlider *src;
    FXFrame *dest;
    src = (FXPySlider *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPySliderToFXWindow(void *ptr) {
    FXPySlider *src;
    FXWindow *dest;
    src = (FXPySlider *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPySliderToFXDrawable(void *ptr) {
    FXPySlider *src;
    FXDrawable *dest;
    src = (FXPySlider *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPySliderToFXId(void *ptr) {
    FXPySlider *src;
    FXId *dest;
    src = (FXPySlider *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPySliderToFXObject(void *ptr) {
    FXPySlider *src;
    FXObject *dest;
    src = (FXPySlider *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXSlider(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPySlider(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXSlider(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (SLIDER_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) 0;
    FXint  _arg11 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXSlider",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXSlider. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPySlider *)new_FXSlider(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPySlider_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXSlider_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXSlider_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPySlider * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXSlider_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_onDefault. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXSlider_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXSlider_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXSlider_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_create. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXSlider_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_destroy. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXSlider_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_detach. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSlider_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSlider_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_resize. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXSlider_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_getDefaultWidth. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSlider_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSlider_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXSlider_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_getDefaultHeight. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSlider_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSlider_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXSlider_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_show. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXSlider_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_hide. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXSlider_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_enable. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXSlider_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_disable. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXSlider_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_canFocus. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSlider_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSlider_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXSlider_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_setFocus. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXSlider_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_killFocus. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXSlider_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXSlider_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_setDefault. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXSlider_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_recalc. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXSlider_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_layout. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXSlider_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_lower. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSlider_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSlider_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_move. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXSlider_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXSlider_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_position. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXSlider_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_isComposite. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSlider_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSlider_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXSlider_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySlider * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXSlider_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_contains. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSlider_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSlider_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXSlider_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSlider_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_getWidthForHeight. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSlider_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSlider_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXSlider_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPySlider * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSlider_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_getHeightForWidth. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXSlider_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXSlider_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXSlider_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPySlider * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXSlider_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_doesSaveUnder. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXSlider_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXSlider_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXSlider_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXSlider_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_reparent. Expected _FXPySlider_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXSlider_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXSlider_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXSlider_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPySlider * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXSlider_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPySlider_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXSlider_setBackColor. Expected _FXPySlider_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXSlider_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXHeaderItemToFXObject(void *ptr) {
    FXHeaderItem *src;
    FXObject *dest;
    src = (FXHeaderItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_HeaderItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new FXHeaderItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_FX_HeaderItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _result;
    FXString * _arg0;
    FXIcon * _arg1 = (FXIcon *) NULL;
    FXint  _arg2 = (FXint ) 0;
    void * _arg3 = (void *) NULL;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "text","ic","s","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|OiO:new_FX_HeaderItem",_kwnames,&_obj0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXHeaderItem *)new_FX_HeaderItem(*_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
{
    delete _arg0;
}
    return _resultobj;
}

#define FX_HeaderItem_getText(_swigobj)  (_swigobj->getText())
static PyObject *_wrap_FX_HeaderItem_getText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_getText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getText. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_HeaderItem_getText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_HeaderItem_setText(_swigobj,_swigarg0)  (_swigobj->setText(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_HeaderItem_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_setText. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_HeaderItem_getIcon(_swigobj)  (_swigobj->getIcon())
static PyObject *_wrap_FX_HeaderItem_getIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_getIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getIcon. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_HeaderItem_getIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_HeaderItem_setIcon(_swigobj,_swigarg0)  (_swigobj->setIcon(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_HeaderItem_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_setIcon. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void  FXHeaderItem_setData(FXHeaderItem *self,PyObject * ptr) {
      FXPySetData(self, ptr);
    }
static PyObject *_wrap_FX_HeaderItem_setData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    PyObject * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_HeaderItem_setData",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_setData. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_setData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyObject * FXHeaderItem_getData(FXHeaderItem *self) {
      return FXPyGetData(self);
    }
static PyObject *_wrap_FX_HeaderItem_getData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_getData",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getData. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXHeaderItem_getData(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_HeaderItem_setSize(_swigobj,_swigarg0)  (_swigobj->setSize(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_setSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_HeaderItem_setSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_setSize. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_setSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_HeaderItem_getSize(_swigobj)  (_swigobj->getSize())
static PyObject *_wrap_FX_HeaderItem_getSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_getSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getSize. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_HeaderItem_getSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_HeaderItem_setArrowDir(_swigobj,_swigarg0)  (_swigobj->setArrowDir(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_setArrowDir(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    FXuint  _arg1 = (FXuint ) MAYBE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dir", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_HeaderItem_setArrowDir",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_setArrowDir. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_setArrowDir(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_HeaderItem_getArrowDir(_swigobj)  (_swigobj->getArrowDir())
static PyObject *_wrap_FX_HeaderItem_getArrowDir(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_getArrowDir",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getArrowDir. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_HeaderItem_getArrowDir(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_HeaderItem_getWidth(_swigobj,_swigarg0)  (_swigobj->getWidth(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_getWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeaderItem * _arg0;
    FXHeader * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","header", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_HeaderItem_getWidth",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getWidth. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_HeaderItem_getWidth. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_HeaderItem_getWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_HeaderItem_getHeight(_swigobj,_swigarg0)  (_swigobj->getHeight(_swigarg0))
static PyObject *_wrap_FX_HeaderItem_getHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeaderItem * _arg0;
    FXHeader * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","header", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_HeaderItem_getHeight",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_getHeight. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_HeaderItem_getHeight. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_HeaderItem_getHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_HeaderItem_create(_swigobj)  (_swigobj->create())
static PyObject *_wrap_FX_HeaderItem_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_create. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_HeaderItem_detach(_swigobj)  (_swigobj->detach())
static PyObject *_wrap_FX_HeaderItem_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_detach. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_HeaderItem_destroy(_swigobj)  (_swigobj->destroy())
static PyObject *_wrap_FX_HeaderItem_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_HeaderItem_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_HeaderItem_destroy. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_HeaderItem_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyHeaderItemToFXHeaderItem(void *ptr) {
    FXPyHeaderItem *src;
    FXHeaderItem *dest;
    src = (FXPyHeaderItem *) ptr;
    dest = (FXHeaderItem *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderItemToFXObject(void *ptr) {
    FXPyHeaderItem *src;
    FXObject *dest;
    src = (FXPyHeaderItem *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXHeaderItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3) (new FXPyHeaderItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_new_FXHeaderItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _result;
    FXString * _arg0;
    FXIcon * _arg1 = (FXIcon *) NULL;
    FXint  _arg2 = (FXint ) 0;
    void * _arg3 = (void *) NULL;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "text","ic","s","ptr", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|OiO:new_FXHeaderItem",_kwnames,&_obj0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = new FXString;
    else if (!PyString_Check(_obj0)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg0 = new FXString(PyString_AsString(_obj0));
}
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyHeaderItem *)new_FXHeaderItem(*_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyHeaderItem_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg0;
}
    return _resultobj;
}

#define FXHeaderItem_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXHeaderItem_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyHeaderItem * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXHeaderItem_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_onDefault. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXHeaderItem_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXHeaderItem_setText(_swigobj,_swigarg0)  (_swigobj->_setText(_swigarg0))
static PyObject *_wrap_FXHeaderItem_setText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXHeaderItem_setText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_setText. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_setText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FXHeaderItem_setIcon(_swigobj,_swigarg0)  (_swigobj->_setIcon(_swigarg0))
static PyObject *_wrap_FXHeaderItem_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXHeaderItem_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_setIcon. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeaderItem_getWidth(_swigobj,_swigarg0)  (_swigobj->_getWidth(_swigarg0))
static PyObject *_wrap_FXHeaderItem_getWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeaderItem * _arg0;
    FXHeader * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","header", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXHeaderItem_getWidth",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_getWidth. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXHeaderItem_getWidth. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeaderItem_getWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeaderItem_getHeight(_swigobj,_swigarg0)  (_swigobj->_getHeight(_swigarg0))
static PyObject *_wrap_FXHeaderItem_getHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeaderItem * _arg0;
    FXHeader * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","header", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXHeaderItem_getHeight",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_getHeight. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXHeaderItem_getHeight. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeaderItem_getHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeaderItem_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXHeaderItem_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeaderItem_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_create. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeaderItem_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXHeaderItem_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeaderItem_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_detach. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeaderItem_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXHeaderItem_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeaderItem * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeaderItem_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeaderItem_destroy. Expected _FXPyHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeaderItem_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXHeaderToFXFrame(void *ptr) {
    FXHeader *src;
    FXFrame *dest;
    src = (FXHeader *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXHeaderToFXWindow(void *ptr) {
    FXHeader *src;
    FXWindow *dest;
    src = (FXHeader *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXHeaderToFXDrawable(void *ptr) {
    FXHeader *src;
    FXDrawable *dest;
    src = (FXHeader *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXHeaderToFXId(void *ptr) {
    FXHeader *src;
    FXId *dest;
    src = (FXHeader *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXHeaderToFXObject(void *ptr) {
    FXHeader *src;
    FXObject *dest;
    src = (FXHeader *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Header_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onPaint. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onLeftBtnPress. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onLeftBtnRelease. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onUngrabbed. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onMotion. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onTipTimer(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onTipTimer(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onTipTimer(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onTipTimer",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onTipTimer. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onTipTimer. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onTipTimer(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onQueryTip. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Header_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Header_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_onQueryHelp. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Header_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Header_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Header(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXHeader(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_Header(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (HEADER_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_Header",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Header. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXHeader *)new_FX_Header(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Header_getNumItems(_swigobj)  (_swigobj->getNumItems())
static PyObject *_wrap_FX_Header_getNumItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Header_getNumItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getNumItems. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_getNumItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_retrieveItem(_swigobj,_swigarg0)  (_swigobj->retrieveItem(_swigarg0))
static PyObject *_wrap_FX_Header_retrieveItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeaderItem * _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_retrieveItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_retrieveItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXHeaderItem *)FX_Header_retrieveItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Header_replaceItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_replaceItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    FXHeaderItem * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","index","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|b:FX_Header_replaceItem",_kwnames,&_argo0,&_arg1,&_argo2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_replaceItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of FX_Header_replaceItem. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_replaceItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_replaceItem2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_FX_Header_replaceItem2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXint  _arg4 = (FXint ) 0;
    void * _arg5 = (void *) NULL;
    FXbool  _arg6 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;
    char *_kwnames[] = { "self","index","text","icon","size","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OiOb:FX_Header_replaceItem2",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_arg4,&_obj5,&_arg6)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_replaceItem2. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj5)
{
    _arg5 = NULL;
    if (PyObject_HasAttrString(_obj5, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj5, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg5 = NULL;
	}
	else
	    _arg5 = (void*) _obj5;
	Py_DECREF(obj);
    }
    else
	_arg5 = (void*) _obj5;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_replaceItem2(_arg0,_arg1,*_arg2,_arg3,_arg4,_arg5,_arg6);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_Header_insertItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Header_insertItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    FXHeaderItem * _arg2;
    FXbool  _arg3 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo2 = 0;
    char *_kwnames[] = { "self","index","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|b:FX_Header_insertItem",_kwnames,&_argo0,&_arg1,&_argo2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_insertItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
    if (_argo2) {
        if (_argo2 == Py_None) { _arg2 = NULL; }
        else if (SWIG_GetPtrObj(_argo2,(void **) &_arg2,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 3 of FX_Header_insertItem. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_insertItem(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_insertItem2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_FX_Header_insertItem2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXint  _arg4 = (FXint ) 0;
    void * _arg5 = (void *) NULL;
    FXbool  _arg6 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;
    char *_kwnames[] = { "self","index","text","icon","size","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OiOb:FX_Header_insertItem2",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_arg4,&_obj5,&_arg6)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_insertItem2. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj5)
{
    _arg5 = NULL;
    if (PyObject_HasAttrString(_obj5, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj5, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg5 = NULL;
	}
	else
	    _arg5 = (void*) _obj5;
	Py_DECREF(obj);
    }
    else
	_arg5 = (void*) _obj5;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_insertItem2(_arg0,_arg1,*_arg2,_arg3,_arg4,_arg5,_arg6);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_Header_appendItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->appendItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_appendItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXHeaderItem * _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|b:FX_Header_appendItem",_kwnames,&_argo0,&_argo1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_appendItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Header_appendItem. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_appendItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_appendItem2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->appendItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_Header_appendItem2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXint  _arg3 = (FXint ) 0;
    void * _arg4 = (void *) NULL;
    FXbool  _arg5 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","text","icon","size","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OiOb:FX_Header_appendItem2",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_obj4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_appendItem2. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_appendItem2(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Header_prependItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->prependItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_prependItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXHeaderItem * _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","item","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|b:FX_Header_prependItem",_kwnames,&_argo0,&_argo1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_prependItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXHeaderItem_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Header_prependItem. Expected _FXHeaderItem_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_prependItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_prependItem2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->prependItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_Header_prependItem2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXint  _arg3 = (FXint ) 0;
    void * _arg4 = (void *) NULL;
    FXbool  _arg5 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","text","icon","size","ptr","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OiOb:FX_Header_prependItem2",_kwnames,&_argo0,&_obj1,&_obj2,&_arg3,&_obj4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_prependItem2. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_prependItem2(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Header_removeItem(_swigobj,_swigarg0,_swigarg1)  (_swigobj->removeItem(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_removeItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXint  _arg1;
    FXbool  _arg2 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|b:FX_Header_removeItem",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_removeItem. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_removeItem(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_clearItems(_swigobj,_swigarg0)  (_swigobj->clearItems(_swigarg0))
static PyObject *_wrap_FX_Header_clearItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXbool  _arg1 = (FXbool ) FALSE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","notify", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Header_clearItems",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_clearItems. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_clearItems(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getItemAt(_swigobj,_swigarg0)  (_swigobj->getItemAt(_swigarg0))
static PyObject *_wrap_FX_Header_getItemAt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","offset", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemAt",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemAt. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_getItemAt(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_setItemText(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemText(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_setItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_Header_setItemText",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setItemText. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setItemText(_arg0,_arg1,*_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_Header_getItemText(_swigobj,_swigarg0)  (_swigobj->getItemText(_swigarg0))
static PyObject *_wrap_FX_Header_getItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemText",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemText. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Header_getItemText(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_Header_setItemIcon(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemIcon(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_setItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXint  _arg1;
    FXIcon * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","icon", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_Header_setItemIcon",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setItemIcon. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setItemIcon(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getItemIcon(_swigobj,_swigarg0)  (_swigobj->getItemIcon(_swigarg0))
static PyObject *_wrap_FX_Header_getItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemIcon",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemIcon. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_Header_getItemIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Header_setItemSize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemSize(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_setItemSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index","size", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Header_setItemSize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setItemSize. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setItemSize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getItemSize(_swigobj,_swigarg0)  (_swigobj->getItemSize(_swigarg0))
static PyObject *_wrap_FX_Header_getItemSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemSize. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_getItemSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_getItemOffset(_swigobj,_swigarg0)  (_swigobj->getItemOffset(_swigarg0))
static PyObject *_wrap_FX_Header_getItemOffset(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemOffset",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemOffset. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Header_getItemOffset(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_setItemData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemData(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Header_setItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXint  _arg1;
    void * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_Header_setItemData",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setItemData. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setItemData(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getItemData(_swigobj,_swigarg0)  (_swigobj->getItemData(_swigarg0))
static PyObject *_wrap_FX_Header_getItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_getItemData",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getItemData. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_Header_getItemData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Header_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_Header_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Header_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setFont. Expected _FXHeader_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Header_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_Header_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Header_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getFont. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_Header_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Header_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_Header_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Header_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getTextColor. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Header_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_Header_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setTextColor. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_setHeaderStyle(_swigobj,_swigarg0)  (_swigobj->setHeaderStyle(_swigarg0))
static PyObject *_wrap_FX_Header_setHeaderStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Header_setHeaderStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setHeaderStyle. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setHeaderStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Header_getHeaderStyle(_swigobj)  (_swigobj->getHeaderStyle())
static PyObject *_wrap_FX_Header_getHeaderStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Header_getHeaderStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getHeaderStyle. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Header_getHeaderStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Header_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_Header_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXHeader * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Header_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_setHelpText. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Header_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_Header_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_Header_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Header_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Header_getHelpText. Expected _FXHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_Header_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyHeaderToFXHeader(void *ptr) {
    FXPyHeader *src;
    FXHeader *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXHeader *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderToFXFrame(void *ptr) {
    FXPyHeader *src;
    FXFrame *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderToFXWindow(void *ptr) {
    FXPyHeader *src;
    FXWindow *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderToFXDrawable(void *ptr) {
    FXPyHeader *src;
    FXDrawable *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderToFXId(void *ptr) {
    FXPyHeader *src;
    FXId *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyHeaderToFXObject(void *ptr) {
    FXPyHeader *src;
    FXObject *dest;
    src = (FXPyHeader *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXHeader(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyHeader(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXHeader(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (HEADER_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXHeader",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXHeader. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyHeader *)new_FXHeader(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyHeader_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXHeader_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXHeader_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyHeader * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXHeader_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_onDefault. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXHeader_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXHeader_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXHeader_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_create. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXHeader_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_destroy. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXHeader_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_detach. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXHeader_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXHeader_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_resize. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXHeader_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_getDefaultWidth. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeader_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeader_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXHeader_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_getDefaultHeight. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeader_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeader_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXHeader_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_show. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXHeader_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_hide. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXHeader_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_enable. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXHeader_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_disable. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXHeader_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_canFocus. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXHeader_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXHeader_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXHeader_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_setFocus. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXHeader_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_killFocus. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXHeader_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXHeader_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_setDefault. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXHeader_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_recalc. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXHeader_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_layout. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXHeader_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_lower. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXHeader_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXHeader_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_move. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXHeader_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXHeader_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_position. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXHeader_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_isComposite. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXHeader_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXHeader_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXHeader_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyHeader * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXHeader_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_contains. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXHeader_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXHeader_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXHeader_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXHeader_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_getWidthForHeight. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeader_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeader_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXHeader_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyHeader * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXHeader_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_getHeightForWidth. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXHeader_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXHeader_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXHeader_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyHeader * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXHeader_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_doesSaveUnder. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXHeader_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXHeader_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXHeader_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXHeader_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_reparent. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXHeader_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXHeader_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXHeader_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyHeader * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXHeader_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyHeader_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXHeader_setBackColor. Expected _FXPyHeader_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXHeader_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXProgressBarToFXFrame(void *ptr) {
    FXProgressBar *src;
    FXFrame *dest;
    src = (FXProgressBar *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXProgressBarToFXWindow(void *ptr) {
    FXProgressBar *src;
    FXWindow *dest;
    src = (FXProgressBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXProgressBarToFXDrawable(void *ptr) {
    FXProgressBar *src;
    FXDrawable *dest;
    src = (FXProgressBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXProgressBarToFXId(void *ptr) {
    FXProgressBar *src;
    FXId *dest;
    src = (FXProgressBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXProgressBarToFXObject(void *ptr) {
    FXProgressBar *src;
    FXObject *dest;
    src = (FXProgressBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ProgressBar_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ProgressBar_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXProgressBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ProgressBar_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_onPaint. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ProgressBar_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ProgressBar_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ProgressBar_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ProgressBar_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXProgressBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ProgressBar_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_onCmdSetValue. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ProgressBar_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ProgressBar_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ProgressBar_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ProgressBar_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXProgressBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ProgressBar_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_onCmdSetIntValue. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ProgressBar_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ProgressBar_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ProgressBar_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ProgressBar_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXProgressBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ProgressBar_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_onCmdGetIntValue. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ProgressBar_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ProgressBar_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ProgressBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXProgressBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_ProgressBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (PROGRESSBAR_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","target","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_ProgressBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ProgressBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXProgressBar *)new_FX_ProgressBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXProgressBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ProgressBar_setProgress(_swigobj,_swigarg0)  (_swigobj->setProgress(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setProgress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setProgress",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setProgress. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setProgress(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getProgress(_swigobj)  (_swigobj->getProgress())
static PyObject *_wrap_FX_ProgressBar_getProgress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getProgress",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getProgress. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ProgressBar_getProgress(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setTotal(_swigobj,_swigarg0)  (_swigobj->setTotal(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setTotal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setTotal",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setTotal. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setTotal(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getTotal(_swigobj)  (_swigobj->getTotal())
static PyObject *_wrap_FX_ProgressBar_getTotal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getTotal",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getTotal. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ProgressBar_getTotal(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_increment(_swigobj,_swigarg0)  (_swigobj->increment(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_increment(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","value", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_increment",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_increment. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_increment(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_hideNumber(_swigobj)  (_swigobj->hideNumber())
static PyObject *_wrap_FX_ProgressBar_hideNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_hideNumber",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_hideNumber. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_hideNumber(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_showNumber(_swigobj)  (_swigobj->showNumber())
static PyObject *_wrap_FX_ProgressBar_showNumber(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_showNumber",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_showNumber. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_showNumber(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_setBarSize(_swigobj,_swigarg0)  (_swigobj->setBarSize(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setBarSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","size", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setBarSize",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setBarSize. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setBarSize(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getBarSize(_swigobj)  (_swigobj->getBarSize())
static PyObject *_wrap_FX_ProgressBar_getBarSize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getBarSize",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getBarSize. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ProgressBar_getBarSize(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setBarBGColor(_swigobj,_swigarg0)  (_swigobj->setBarBGColor(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setBarBGColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setBarBGColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setBarBGColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setBarBGColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getBarBGColor(_swigobj)  (_swigobj->getBarBGColor())
static PyObject *_wrap_FX_ProgressBar_getBarBGColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getBarBGColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getBarBGColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ProgressBar_getBarBGColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setBarColor(_swigobj,_swigarg0)  (_swigobj->setBarColor(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setBarColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setBarColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setBarColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setBarColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getBarColor(_swigobj)  (_swigobj->getBarColor())
static PyObject *_wrap_FX_ProgressBar_getBarColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getBarColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getBarColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ProgressBar_getBarColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setTextColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_ProgressBar_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getTextColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ProgressBar_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setTextAltColor(_swigobj,_swigarg0)  (_swigobj->setTextAltColor(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setTextAltColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setTextAltColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setTextAltColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setTextAltColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getTextAltColor(_swigobj)  (_swigobj->getTextAltColor())
static PyObject *_wrap_FX_ProgressBar_getTextAltColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getTextAltColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getTextAltColor. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ProgressBar_getTextAltColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ProgressBar_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ProgressBar_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setFont. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ProgressBar_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_ProgressBar_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getFont. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_ProgressBar_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ProgressBar_setBarStyle(_swigobj,_swigarg0)  (_swigobj->setBarStyle(_swigarg0))
static PyObject *_wrap_FX_ProgressBar_setBarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXProgressBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ProgressBar_setBarStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_setBarStyle. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ProgressBar_setBarStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ProgressBar_getBarStyle(_swigobj)  (_swigobj->getBarStyle())
static PyObject *_wrap_FX_ProgressBar_getBarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ProgressBar_getBarStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ProgressBar_getBarStyle. Expected _FXProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ProgressBar_getBarStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyProgressBarToFXProgressBar(void *ptr) {
    FXPyProgressBar *src;
    FXProgressBar *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXProgressBar *) src;
    return (void *) dest;
}

static void *SwigFXPyProgressBarToFXFrame(void *ptr) {
    FXPyProgressBar *src;
    FXFrame *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyProgressBarToFXWindow(void *ptr) {
    FXPyProgressBar *src;
    FXWindow *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyProgressBarToFXDrawable(void *ptr) {
    FXPyProgressBar *src;
    FXDrawable *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyProgressBarToFXId(void *ptr) {
    FXPyProgressBar *src;
    FXId *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyProgressBarToFXObject(void *ptr) {
    FXPyProgressBar *src;
    FXObject *dest;
    src = (FXPyProgressBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXProgressBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyProgressBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXProgressBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (PROGRESSBAR_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","target","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXProgressBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXProgressBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyProgressBar *)new_FXProgressBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyProgressBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXProgressBar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXProgressBar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyProgressBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXProgressBar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_onDefault. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXProgressBar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXProgressBar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXProgressBar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_create. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXProgressBar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_destroy. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXProgressBar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_detach. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXProgressBar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXProgressBar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_resize. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXProgressBar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_getDefaultWidth. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXProgressBar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXProgressBar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXProgressBar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_getDefaultHeight. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXProgressBar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXProgressBar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXProgressBar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_show. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXProgressBar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_hide. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXProgressBar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_enable. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXProgressBar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_disable. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXProgressBar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_canFocus. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXProgressBar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXProgressBar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXProgressBar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_setFocus. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXProgressBar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_killFocus. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXProgressBar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXProgressBar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_setDefault. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXProgressBar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_recalc. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXProgressBar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_layout. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXProgressBar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_lower. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXProgressBar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXProgressBar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_move. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXProgressBar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXProgressBar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_position. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXProgressBar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_isComposite. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXProgressBar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXProgressBar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXProgressBar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXProgressBar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_contains. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXProgressBar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXProgressBar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXProgressBar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXProgressBar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_getWidthForHeight. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXProgressBar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXProgressBar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXProgressBar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyProgressBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXProgressBar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_getHeightForWidth. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXProgressBar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXProgressBar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXProgressBar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyProgressBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXProgressBar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_doesSaveUnder. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXProgressBar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXProgressBar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXProgressBar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXProgressBar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_reparent. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXProgressBar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXProgressBar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXProgressBar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyProgressBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXProgressBar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyProgressBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXProgressBar_setBackColor. Expected _FXPyProgressBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXProgressBar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXToolbarTabToFXFrame(void *ptr) {
    FXToolbarTab *src;
    FXFrame *dest;
    src = (FXToolbarTab *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXToolbarTabToFXWindow(void *ptr) {
    FXToolbarTab *src;
    FXWindow *dest;
    src = (FXToolbarTab *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXToolbarTabToFXDrawable(void *ptr) {
    FXToolbarTab *src;
    FXDrawable *dest;
    src = (FXToolbarTab *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXToolbarTabToFXId(void *ptr) {
    FXToolbarTab *src;
    FXId *dest;
    src = (FXToolbarTab *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXToolbarTabToFXObject(void *ptr) {
    FXToolbarTab *src;
    FXObject *dest;
    src = (FXToolbarTab *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ToolbarTab_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onPaint. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onUpdate. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onEnter. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onLeave. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onUngrabbed. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onLeftBtnPress. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onLeftBtnRelease. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onKeyPress. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onKeyRelease. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onCmdCollapse(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdCollapse(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onCmdCollapse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onCmdCollapse",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onCmdCollapse. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onCmdCollapse. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onCmdCollapse(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onUpdCollapse(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdCollapse(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onUpdCollapse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onUpdCollapse",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onUpdCollapse. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onUpdCollapse. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onUpdCollapse(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onCmdUncollapse(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUncollapse(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onCmdUncollapse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onCmdUncollapse",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onCmdUncollapse. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onCmdUncollapse. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onCmdUncollapse(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarTab_onUpdUncollapse(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdUncollapse(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarTab_onUpdUncollapse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarTab_onUpdUncollapse",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_onUpdUncollapse. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarTab_onUpdUncollapse. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarTab_onUpdUncollapse(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ToolbarTab(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXToolbarTab(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FX_ToolbarTab(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarTab * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_RAISED;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FX_ToolbarTab",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ToolbarTab. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXToolbarTab *)new_FX_ToolbarTab(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXToolbarTab_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ToolbarTab_collapse(_swigobj,_swigarg0)  (_swigobj->collapse(_swigarg0))
static PyObject *_wrap_FX_ToolbarTab_collapse(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarTab * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","c", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_ToolbarTab_collapse",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_collapse. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarTab_collapse(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarTab_isCollapsed(_swigobj)  (_swigobj->isCollapsed())
static PyObject *_wrap_FX_ToolbarTab_isCollapsed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarTab_isCollapsed",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_isCollapsed. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ToolbarTab_isCollapsed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ToolbarTab_setTabStyle(_swigobj,_swigarg0)  (_swigobj->setTabStyle(_swigarg0))
static PyObject *_wrap_FX_ToolbarTab_setTabStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarTab * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarTab_setTabStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_setTabStyle. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarTab_setTabStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarTab_getTabStyle(_swigobj)  (_swigobj->getTabStyle())
static PyObject *_wrap_FX_ToolbarTab_getTabStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarTab_getTabStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_getTabStyle. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ToolbarTab_getTabStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarTab_getActiveColor(_swigobj)  (_swigobj->getActiveColor())
static PyObject *_wrap_FX_ToolbarTab_getActiveColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarTab_getActiveColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_getActiveColor. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarTab_getActiveColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarTab_setActiveColor(_swigobj,_swigarg0)  (_swigobj->setActiveColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarTab_setActiveColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarTab * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarTab_setActiveColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarTab_setActiveColor. Expected _FXToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarTab_setActiveColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXPyToolbarTabToFXToolbarTab(void *ptr) {
    FXPyToolbarTab *src;
    FXToolbarTab *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXToolbarTab *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarTabToFXFrame(void *ptr) {
    FXPyToolbarTab *src;
    FXFrame *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarTabToFXWindow(void *ptr) {
    FXPyToolbarTab *src;
    FXWindow *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarTabToFXDrawable(void *ptr) {
    FXPyToolbarTab *src;
    FXDrawable *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarTabToFXId(void *ptr) {
    FXPyToolbarTab *src;
    FXId *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarTabToFXObject(void *ptr) {
    FXPyToolbarTab *src;
    FXObject *dest;
    src = (FXPyToolbarTab *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXToolbarTab(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXPyToolbarTab(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FXToolbarTab(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_RAISED;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FXToolbarTab",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXToolbarTab. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbarTab *)new_FXToolbarTab(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbarTab_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXToolbarTab_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXToolbarTab_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyToolbarTab * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXToolbarTab_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_onDefault. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXToolbarTab_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXToolbarTab_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXToolbarTab_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_create. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXToolbarTab_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_destroy. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXToolbarTab_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_detach. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarTab_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarTab_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_resize. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXToolbarTab_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_getDefaultWidth. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarTab_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarTab_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXToolbarTab_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_getDefaultHeight. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarTab_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarTab_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXToolbarTab_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_show. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXToolbarTab_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_hide. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXToolbarTab_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_enable. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXToolbarTab_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_disable. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXToolbarTab_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_canFocus. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarTab_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarTab_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXToolbarTab_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_setFocus. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXToolbarTab_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_killFocus. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXToolbarTab_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXToolbarTab_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_setDefault. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXToolbarTab_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_recalc. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXToolbarTab_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_layout. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXToolbarTab_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_lower. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarTab_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarTab_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_move. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXToolbarTab_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXToolbarTab_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_position. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXToolbarTab_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_isComposite. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarTab_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarTab_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarTab_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarTab_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_contains. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarTab_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarTab_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXToolbarTab_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarTab_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_getWidthForHeight. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarTab_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarTab_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXToolbarTab_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarTab * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarTab_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_getHeightForWidth. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarTab_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarTab_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXToolbarTab_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarTab * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarTab_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_doesSaveUnder. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarTab_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarTab_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXToolbarTab_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXToolbarTab_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_reparent. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXToolbarTab_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarTab_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXToolbarTab_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarTab * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarTab_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarTab_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarTab_setBackColor. Expected _FXPyToolbarTab_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarTab_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXToolbarToFXPacker(void *ptr) {
    FXToolbar *src;
    FXPacker *dest;
    src = (FXToolbar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXToolbarToFXComposite(void *ptr) {
    FXToolbar *src;
    FXComposite *dest;
    src = (FXToolbar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXToolbarToFXWindow(void *ptr) {
    FXToolbar *src;
    FXWindow *dest;
    src = (FXToolbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXToolbarToFXDrawable(void *ptr) {
    FXToolbar *src;
    FXDrawable *dest;
    src = (FXToolbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXToolbarToFXId(void *ptr) {
    FXToolbar *src;
    FXId *dest;
    src = (FXToolbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXToolbarToFXObject(void *ptr) {
    FXToolbar *src;
    FXObject *dest;
    src = (FXToolbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Toolbar_onCmdUndock(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUndock(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onCmdUndock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onCmdUndock",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onCmdUndock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onCmdUndock. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onCmdUndock(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onUpdUndock(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdUndock(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onUpdUndock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onUpdUndock",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onUpdUndock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onUpdUndock. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onUpdUndock(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onCmdDockTop(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDockTop(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onCmdDockTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onCmdDockTop",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onCmdDockTop. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onCmdDockTop. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onCmdDockTop(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onUpdDockTop(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdDockTop(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onUpdDockTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onUpdDockTop",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onUpdDockTop. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onUpdDockTop. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onUpdDockTop(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onCmdDockBottom(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDockBottom(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onCmdDockBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onCmdDockBottom",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onCmdDockBottom. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onCmdDockBottom. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onCmdDockBottom(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onUpdDockBottom(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdDockBottom(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onUpdDockBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onUpdDockBottom",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onUpdDockBottom. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onUpdDockBottom. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onUpdDockBottom(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onCmdDockLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDockLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onCmdDockLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onCmdDockLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onCmdDockLeft. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onCmdDockLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onCmdDockLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onUpdDockLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdDockLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onUpdDockLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onUpdDockLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onUpdDockLeft. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onUpdDockLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onUpdDockLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onCmdDockRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDockRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onCmdDockRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onCmdDockRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onCmdDockRight. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onCmdDockRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onCmdDockRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onUpdDockRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdDockRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onUpdDockRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onUpdDockRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onUpdDockRight. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onUpdDockRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onUpdDockRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onBeginDragGrip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onBeginDragGrip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onBeginDragGrip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onBeginDragGrip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onBeginDragGrip. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onBeginDragGrip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onBeginDragGrip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onEndDragGrip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEndDragGrip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onEndDragGrip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onEndDragGrip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onEndDragGrip. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onEndDragGrip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onEndDragGrip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_onDraggedGrip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDraggedGrip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Toolbar_onDraggedGrip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Toolbar_onDraggedGrip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_onDraggedGrip. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Toolbar_onDraggedGrip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Toolbar_onDraggedGrip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Toolbar_setDryDock(_swigobj,_swigarg0)  (_swigobj->setDryDock(_swigarg0))
static PyObject *_wrap_FX_Toolbar_setDryDock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","dry", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Toolbar_setDryDock",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_setDryDock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Toolbar_setDryDock. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Toolbar_setDryDock(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Toolbar_setWetDock(_swigobj,_swigarg0)  (_swigobj->setWetDock(_swigarg0))
static PyObject *_wrap_FX_Toolbar_setWetDock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","wet", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Toolbar_setWetDock",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_setWetDock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Toolbar_setWetDock. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Toolbar_setWetDock(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Toolbar_getDryDock(_swigobj)  (_swigobj->getDryDock())
static PyObject *_wrap_FX_Toolbar_getDryDock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComposite * _result;
    FXToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Toolbar_getDryDock",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_getDryDock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXComposite *)FX_Toolbar_getDryDock(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Toolbar_getWetDock(_swigobj)  (_swigobj->getWetDock())
static PyObject *_wrap_FX_Toolbar_getWetDock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComposite * _result;
    FXToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Toolbar_getWetDock",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_getWetDock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXComposite *)FX_Toolbar_getWetDock(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Toolbar_isDocked(_swigobj)  (_swigobj->isDocked())
static PyObject *_wrap_FX_Toolbar_isDocked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Toolbar_isDocked",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_isDocked. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Toolbar_isDocked(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Toolbar_dock(_swigobj,_swigarg0,_swigarg1)  (_swigobj->dock(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Toolbar_dock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbar * _arg0;
    FXuint  _arg1 = (FXuint ) LAYOUT_SIDE_TOP;
    FXWindow * _arg2 = (FXWindow *) -1;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","side","after", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iO:FX_Toolbar_dock",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_dock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Toolbar_dock(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Toolbar_undock(_swigobj)  (_swigobj->undock())
static PyObject *_wrap_FX_Toolbar_undock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Toolbar_undock",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_undock. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Toolbar_undock(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Toolbar_setDockingSide(_swigobj,_swigarg0)  (_swigobj->setDockingSide(_swigarg0))
static PyObject *_wrap_FX_Toolbar_setDockingSide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbar * _arg0;
    FXuint  _arg1 = (FXuint ) LAYOUT_SIDE_TOP;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","side", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_Toolbar_setDockingSide",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_setDockingSide. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Toolbar_setDockingSide(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Toolbar_getDockingSide(_swigobj)  (_swigobj->getDockingSide())
static PyObject *_wrap_FX_Toolbar_getDockingSide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Toolbar_getDockingSide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Toolbar_getDockingSide. Expected _FXToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Toolbar_getDockingSide(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyToolbarToFXToolbar(void *ptr) {
    FXPyToolbar *src;
    FXToolbar *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXToolbar *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXPacker(void *ptr) {
    FXPyToolbar *src;
    FXPacker *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXComposite(void *ptr) {
    FXPyToolbar *src;
    FXComposite *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXWindow(void *ptr) {
    FXPyToolbar *src;
    FXWindow *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXDrawable(void *ptr) {
    FXPyToolbar *src;
    FXDrawable *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXId(void *ptr) {
    FXPyToolbar *src;
    FXId *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarToFXObject(void *ptr) {
    FXPyToolbar *src;
    FXObject *dest;
    src = (FXPyToolbar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXToolbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyToolbar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXToolbar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _result;
    FXComposite * _arg0;
    FXComposite * _arg1;
    FXuint  _arg2 = (FXuint ) LAYOUT_TOP|LAYOUT_LEFT|LAYOUT_FILL_X;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 3;
    FXint  _arg8 = (FXint ) 3;
    FXint  _arg9 = (FXint ) 2;
    FXint  _arg10 = (FXint ) 2;
    FXint  _arg11 = (FXint ) DEFAULT_SPACING;
    FXint  _arg12 = (FXint ) DEFAULT_SPACING;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "p","q","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|iiiiiiiiiii:new_FXToolbar",_kwnames,&_argo0,&_argo1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXToolbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXToolbar. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbar *)new_FXToolbar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXToolbar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXToolbar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyToolbar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXToolbar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_onDefault. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXToolbar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXToolbar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXToolbar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_create. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXToolbar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_destroy. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXToolbar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_detach. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_resize. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXToolbar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_getDefaultWidth. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXToolbar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_getDefaultHeight. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXToolbar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_show. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXToolbar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_hide. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXToolbar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_enable. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXToolbar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_disable. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXToolbar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_canFocus. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXToolbar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_setFocus. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXToolbar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_killFocus. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXToolbar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXToolbar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_setDefault. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXToolbar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_recalc. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXToolbar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_layout. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXToolbar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_lower. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_move. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXToolbar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXToolbar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_position. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXToolbar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_isComposite. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_contains. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXToolbar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_getWidthForHeight. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXToolbar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_getHeightForWidth. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXToolbar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_doesSaveUnder. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXToolbar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXToolbar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_reparent. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXToolbar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXToolbar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_setBackColor. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_dock(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_dock(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbar_dock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    FXuint  _arg1 = (FXuint ) LAYOUT_SIDE_TOP;
    FXWindow * _arg2 = (FXWindow *) -1;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","side","after", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iO:FXToolbar_dock",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_dock. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_dock(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbar_undock(_swigobj)  (_swigobj->_undock())
static PyObject *_wrap_FXToolbar_undock(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbar_undock",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbar_undock. Expected _FXPyToolbar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbar_undock(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXToolbarShellToFXTopWindow(void *ptr) {
    FXToolbarShell *src;
    FXTopWindow *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXTopWindow *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXShell(void *ptr) {
    FXToolbarShell *src;
    FXShell *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXComposite(void *ptr) {
    FXToolbarShell *src;
    FXComposite *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXWindow(void *ptr) {
    FXToolbarShell *src;
    FXWindow *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXDrawable(void *ptr) {
    FXToolbarShell *src;
    FXDrawable *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXId(void *ptr) {
    FXToolbarShell *src;
    FXId *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXToolbarShellToFXObject(void *ptr) {
    FXToolbarShell *src;
    FXObject *dest;
    src = (FXToolbarShell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ToolbarShell_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarShell_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarShell_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_onPaint. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarShell_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarShell_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ToolbarShell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXToolbarShell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FX_ToolbarShell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _result;
    FXWindow * _arg0;
    FXuint  _arg1 = (FXuint ) FRAME_RAISED|FRAME_THICK;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 4;
    FXint  _arg7 = (FXint ) 4;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "owner","opts","x","y","w","h","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiii:new_FX_ToolbarShell",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXToolbarShell *)new_FX_ToolbarShell(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXToolbarShell_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ToolbarShell_setFrameStyle(_swigobj,_swigarg0)  (_swigobj->setFrameStyle(_swigarg0))
static PyObject *_wrap_FX_ToolbarShell_setFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarShell_setFrameStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_setFrameStyle. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarShell_setFrameStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarShell_getFrameStyle(_swigobj)  (_swigobj->getFrameStyle())
static PyObject *_wrap_FX_ToolbarShell_getFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getFrameStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getFrameStyle. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ToolbarShell_getFrameStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarShell_getBorderWidth(_swigobj)  (_swigobj->getBorderWidth())
static PyObject *_wrap_FX_ToolbarShell_getBorderWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getBorderWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getBorderWidth. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ToolbarShell_getBorderWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarShell_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarShell_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarShell_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_setHiliteColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarShell_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarShell_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_ToolbarShell_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getHiliteColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarShell_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarShell_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarShell_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarShell_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_setShadowColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarShell_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarShell_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_ToolbarShell_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getShadowColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarShell_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarShell_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarShell_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarShell_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_setBorderColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarShell_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarShell_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_ToolbarShell_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getBorderColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarShell_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarShell_setBaseColor(_swigobj,_swigarg0)  (_swigobj->setBaseColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarShell_setBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarShell_setBaseColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_setBaseColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarShell_setBaseColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarShell_getBaseColor(_swigobj)  (_swigobj->getBaseColor())
static PyObject *_wrap_FX_ToolbarShell_getBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarShell_getBaseColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarShell_getBaseColor. Expected _FXToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarShell_getBaseColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static void *SwigFXPyToolbarShellToFXToolbarShell(void *ptr) {
    FXPyToolbarShell *src;
    FXToolbarShell *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXToolbarShell *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXTopWindow(void *ptr) {
    FXPyToolbarShell *src;
    FXTopWindow *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXTopWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXShell(void *ptr) {
    FXPyToolbarShell *src;
    FXShell *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXComposite(void *ptr) {
    FXPyToolbarShell *src;
    FXComposite *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXWindow(void *ptr) {
    FXPyToolbarShell *src;
    FXWindow *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXDrawable(void *ptr) {
    FXPyToolbarShell *src;
    FXDrawable *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXId(void *ptr) {
    FXPyToolbarShell *src;
    FXId *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarShellToFXObject(void *ptr) {
    FXPyToolbarShell *src;
    FXObject *dest;
    src = (FXPyToolbarShell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXToolbarShell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXPyToolbarShell(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FXToolbarShell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _result;
    FXWindow * _arg0;
    FXuint  _arg1 = (FXuint ) FRAME_RAISED|FRAME_THICK;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 4;
    FXint  _arg7 = (FXint ) 4;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "owner","opts","x","y","w","h","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiii:new_FXToolbarShell",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbarShell *)new_FXToolbarShell(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbarShell_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXToolbarShell_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXToolbarShell_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyToolbarShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXToolbarShell_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_onDefault. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXToolbarShell_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXToolbarShell_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXToolbarShell_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_create. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXToolbarShell_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_destroy. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXToolbarShell_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_detach. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarShell_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarShell_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_resize. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXToolbarShell_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_getDefaultWidth. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarShell_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarShell_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXToolbarShell_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_getDefaultHeight. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarShell_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarShell_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXToolbarShell_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_show. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXToolbarShell_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_hide. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXToolbarShell_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_enable. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXToolbarShell_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_disable. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXToolbarShell_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_canFocus. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarShell_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarShell_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXToolbarShell_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_setFocus. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXToolbarShell_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_killFocus. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXToolbarShell_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXToolbarShell_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_setDefault. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXToolbarShell_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_recalc. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXToolbarShell_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_layout. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXToolbarShell_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_lower. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarShell_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarShell_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_move. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXToolbarShell_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXToolbarShell_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_position. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXToolbarShell_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_isComposite. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarShell_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarShell_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarShell_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarShell_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_contains. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarShell_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarShell_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXToolbarShell_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarShell_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_getWidthForHeight. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarShell_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarShell_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXToolbarShell_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarShell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarShell_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_getHeightForWidth. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarShell_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarShell_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXToolbarShell_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_doesSaveUnder. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarShell_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarShell_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXToolbarShell_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXToolbarShell_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_reparent. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXToolbarShell_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXToolbarShell_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarShell_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_setBackColor. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_show2(_swigobj,_swigarg0)  (_swigobj->_show(_swigarg0))
static PyObject *_wrap_FXToolbarShell_show2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","placement", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarShell_show2",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_show2. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_show2(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_iconify(_swigobj)  (_swigobj->_iconify())
static PyObject *_wrap_FXToolbarShell_iconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_iconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_iconify. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_iconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarShell_deiconify(_swigobj)  (_swigobj->_deiconify())
static PyObject *_wrap_FXToolbarShell_deiconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarShell_deiconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarShell_deiconify. Expected _FXPyToolbarShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarShell_deiconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXToolbarGripToFXWindow(void *ptr) {
    FXToolbarGrip *src;
    FXWindow *dest;
    src = (FXToolbarGrip *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXToolbarGripToFXDrawable(void *ptr) {
    FXToolbarGrip *src;
    FXDrawable *dest;
    src = (FXToolbarGrip *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXToolbarGripToFXId(void *ptr) {
    FXToolbarGrip *src;
    FXId *dest;
    src = (FXToolbarGrip *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXToolbarGripToFXObject(void *ptr) {
    FXToolbarGrip *src;
    FXObject *dest;
    src = (FXToolbarGrip *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ToolbarGrip_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onPaint. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onLeftBtnPress. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onLeftBtnRelease. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onMotion. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onEnter. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ToolbarGrip_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ToolbarGrip_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_onLeave. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ToolbarGrip_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ToolbarGrip_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ToolbarGrip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXToolbarGrip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FX_ToolbarGrip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarGrip * _result;
    FXToolbar * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TOOLBARGRIP_SINGLE);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FX_ToolbarGrip",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ToolbarGrip. Expected _FXToolbar_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXToolbarGrip *)new_FX_ToolbarGrip(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXToolbarGrip_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ToolbarGrip_setDoubleBar(_swigobj,_swigarg0)  (_swigobj->setDoubleBar(_swigarg0))
static PyObject *_wrap_FX_ToolbarGrip_setDoubleBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarGrip * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","dbl", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_ToolbarGrip_setDoubleBar",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_setDoubleBar. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarGrip_setDoubleBar(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarGrip_getDoubleBar(_swigobj)  (_swigobj->getDoubleBar())
static PyObject *_wrap_FX_ToolbarGrip_getDoubleBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarGrip_getDoubleBar",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_getDoubleBar. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ToolbarGrip_getDoubleBar(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarGrip_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarGrip * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarGrip_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_setHiliteColor. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarGrip_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarGrip_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_ToolbarGrip_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarGrip_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_getHiliteColor. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarGrip_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_ToolbarGrip_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXToolbarGrip * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ToolbarGrip_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_setShadowColor. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ToolbarGrip_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ToolbarGrip_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_ToolbarGrip_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarGrip_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_getShadowColor. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarGrip_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ToolbarGrip_getActiveColor(_swigobj)  (_swigobj->getActiveColor())
static PyObject *_wrap_FX_ToolbarGrip_getActiveColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ToolbarGrip_getActiveColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ToolbarGrip_getActiveColor. Expected _FXToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ToolbarGrip_getActiveColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static int _wrap_FXToolbarGrip__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ToolbarGrip_deleteType'(FXDragType )");
        return 1; 
    }
    FXToolbarGrip::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXToolbarGrip__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXToolbarGrip::deleteType);
    return pyobj;
}

static int _wrap_FXToolbarGrip__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ToolbarGrip_textType'(FXDragType )");
        return 1; 
    }
    FXToolbarGrip::textType = tval;
    return 0;
}

static PyObject *_wrap_FXToolbarGrip__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXToolbarGrip::textType);
    return pyobj;
}

static int _wrap_FXToolbarGrip__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ToolbarGrip_stringType'(FXDragType )");
        return 1; 
    }
    FXToolbarGrip::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXToolbarGrip__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXToolbarGrip::stringType);
    return pyobj;
}

static int _wrap_FXToolbarGrip__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ToolbarGrip_colorType'(FXDragType )");
        return 1; 
    }
    FXToolbarGrip::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXToolbarGrip__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXToolbarGrip::colorType);
    return pyobj;
}

static int _wrap_FXToolbarGrip__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_ToolbarGrip_urilistType'(FXDragType )");
        return 1; 
    }
    FXToolbarGrip::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXToolbarGrip__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXToolbarGrip::urilistType);
    return pyobj;
}

static void *SwigFXPyToolbarGripToFXToolbarGrip(void *ptr) {
    FXPyToolbarGrip *src;
    FXToolbarGrip *dest;
    src = (FXPyToolbarGrip *) ptr;
    dest = (FXToolbarGrip *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarGripToFXWindow(void *ptr) {
    FXPyToolbarGrip *src;
    FXWindow *dest;
    src = (FXPyToolbarGrip *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarGripToFXDrawable(void *ptr) {
    FXPyToolbarGrip *src;
    FXDrawable *dest;
    src = (FXPyToolbarGrip *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarGripToFXId(void *ptr) {
    FXPyToolbarGrip *src;
    FXId *dest;
    src = (FXPyToolbarGrip *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyToolbarGripToFXObject(void *ptr) {
    FXPyToolbarGrip *src;
    FXObject *dest;
    src = (FXPyToolbarGrip *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXToolbarGrip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXPyToolbarGrip(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FXToolbarGrip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _result;
    FXToolbar * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (TOOLBARGRIP_SINGLE);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FXToolbarGrip",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXToolbar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXToolbarGrip. Expected _FXToolbar_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyToolbarGrip *)new_FXToolbarGrip(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyToolbarGrip_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXToolbarGrip_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXToolbarGrip_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyToolbarGrip * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXToolbarGrip_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_onDefault. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXToolbarGrip_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXToolbarGrip_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXToolbarGrip_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_create. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXToolbarGrip_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_destroy. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXToolbarGrip_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_detach. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarGrip_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarGrip_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_resize. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXToolbarGrip_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_getDefaultWidth. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarGrip_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarGrip_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXToolbarGrip_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_getDefaultHeight. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarGrip_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarGrip_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXToolbarGrip_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_show. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXToolbarGrip_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_hide. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXToolbarGrip_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_enable. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXToolbarGrip_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_disable. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXToolbarGrip_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_canFocus. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarGrip_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarGrip_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXToolbarGrip_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_setFocus. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXToolbarGrip_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_killFocus. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXToolbarGrip_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXToolbarGrip_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_setDefault. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXToolbarGrip_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_recalc. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXToolbarGrip_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_layout. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXToolbarGrip_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_lower. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarGrip_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarGrip_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_move. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXToolbarGrip_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXToolbarGrip_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_position. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXToolbarGrip_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_isComposite. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarGrip_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarGrip_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXToolbarGrip_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXToolbarGrip_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_contains. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarGrip_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarGrip_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXToolbarGrip_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarGrip_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_getWidthForHeight. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarGrip_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarGrip_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXToolbarGrip_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyToolbarGrip * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarGrip_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_getHeightForWidth. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXToolbarGrip_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXToolbarGrip_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXToolbarGrip_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyToolbarGrip * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXToolbarGrip_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_doesSaveUnder. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXToolbarGrip_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXToolbarGrip_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXToolbarGrip_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXToolbarGrip_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_reparent. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXToolbarGrip_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXToolbarGrip_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXToolbarGrip_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyToolbarGrip * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXToolbarGrip_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyToolbarGrip_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXToolbarGrip_setBackColor. Expected _FXPyToolbarGrip_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXToolbarGrip_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyToolbarGrip__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXToolbarGrip_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyToolbarGrip::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyToolbarGrip__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyToolbarGrip::deleteType);
    return pyobj;
}

static int _wrap_FXPyToolbarGrip__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXToolbarGrip_textType'(FXDragType )");
        return 1; 
    }
    FXPyToolbarGrip::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyToolbarGrip__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyToolbarGrip::textType);
    return pyobj;
}

static int _wrap_FXPyToolbarGrip__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXToolbarGrip_stringType'(FXDragType )");
        return 1; 
    }
    FXPyToolbarGrip::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyToolbarGrip__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyToolbarGrip::stringType);
    return pyobj;
}

static int _wrap_FXPyToolbarGrip__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXToolbarGrip_colorType'(FXDragType )");
        return 1; 
    }
    FXPyToolbarGrip::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyToolbarGrip__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyToolbarGrip::colorType);
    return pyobj;
}

static int _wrap_FXPyToolbarGrip__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXToolbarGrip_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyToolbarGrip::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyToolbarGrip__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyToolbarGrip::urilistType);
    return pyobj;
}

static void *SwigFXListBoxToFXPacker(void *ptr) {
    FXListBox *src;
    FXPacker *dest;
    src = (FXListBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXListBoxToFXComposite(void *ptr) {
    FXListBox *src;
    FXComposite *dest;
    src = (FXListBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXListBoxToFXWindow(void *ptr) {
    FXListBox *src;
    FXWindow *dest;
    src = (FXListBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXListBoxToFXDrawable(void *ptr) {
    FXListBox *src;
    FXDrawable *dest;
    src = (FXListBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXListBoxToFXId(void *ptr) {
    FXListBox *src;
    FXId *dest;
    src = (FXListBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXListBoxToFXObject(void *ptr) {
    FXListBox *src;
    FXObject *dest;
    src = (FXListBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ListBox_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onFocusUp. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onFocusDown. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onFieldButton(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFieldButton(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onFieldButton(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onFieldButton",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onFieldButton. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onFieldButton. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onFieldButton(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onListUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onListUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onListUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onListUpdate. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onListUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onListUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onListChanged(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListChanged(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onListChanged(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onListChanged",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onListChanged. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onListChanged. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onListChanged(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onListClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onListClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onListClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onListClicked. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onListClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onListClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onCmdSetValue. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onCmdGetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onCmdGetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onCmdGetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onCmdGetIntValue. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onCmdGetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onCmdGetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ListBox_onCmdSetIntValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetIntValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_onCmdSetIntValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ListBox_onCmdSetIntValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_onCmdSetIntValue. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ListBox_onCmdSetIntValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ListBox_onCmdSetIntValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ListBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXListBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_ListBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) FRAME_SUNKEN|FRAME_THICK|(LISTBOX_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FX_ListBox",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ListBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXListBox *)new_FX_ListBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXListBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ListBox_getNumItems(_swigobj)  (_swigobj->getNumItems())
static PyObject *_wrap_FX_ListBox_getNumItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getNumItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getNumItems. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListBox_getNumItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_getNumVisible(_swigobj)  (_swigobj->getNumVisible())
static PyObject *_wrap_FX_ListBox_getNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getNumVisible",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getNumVisible. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListBox_getNumVisible(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_setNumVisible(_swigobj,_swigarg0)  (_swigobj->setNumVisible(_swigarg0))
static PyObject *_wrap_FX_ListBox_setNumVisible(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","nvis", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setNumVisible",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setNumVisible. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setNumVisible(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_isItemCurrent(_swigobj,_swigarg0)  (_swigobj->isItemCurrent(_swigarg0))
static PyObject *_wrap_FX_ListBox_isItemCurrent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_isItemCurrent",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_isItemCurrent. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListBox_isItemCurrent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListBox_setCurrentItem(_swigobj,_swigarg0)  (_swigobj->setCurrentItem(_swigarg0))
static PyObject *_wrap_FX_ListBox_setCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setCurrentItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setCurrentItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setCurrentItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getCurrentItem(_swigobj)  (_swigobj->getCurrentItem())
static PyObject *_wrap_FX_ListBox_getCurrentItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getCurrentItem",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getCurrentItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListBox_getCurrentItem(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_retrieveItem(_swigobj,_swigarg0)  (_swigobj->retrieveItem(_swigarg0))
static PyObject *_wrap_FX_ListBox_retrieveItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_retrieveItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_retrieveItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ListBox_retrieveItem(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ListBox_replaceItem(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->replaceItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_ListBox_replaceItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    void * _arg4 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","index","text","icon","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OO:FX_ListBox_replaceItem",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_replaceItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_replaceItem(_arg0,_arg1,*_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ListBox_insertItem(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->insertItem(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_ListBox_insertItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    FXIcon * _arg3 = (FXIcon *) NULL;
    void * _arg4 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    char *_kwnames[] = { "self","index","text","icon","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO|OO:FX_ListBox_insertItem",_kwnames,&_argo0,&_arg1,&_obj2,&_obj3,&_obj4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_insertItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
    if (_obj4)
{
    _arg4 = NULL;
    if (PyObject_HasAttrString(_obj4, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj4, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg4 = NULL;
	}
	else
	    _arg4 = (void*) _obj4;
	Py_DECREF(obj);
    }
    else
	_arg4 = (void*) _obj4;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_insertItem(_arg0,_arg1,*_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ListBox_appendItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->appendItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_appendItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    void * _arg3 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","text","icon","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OO:FX_ListBox_appendItem",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_appendItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_appendItem(_arg0,*_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListBox_prependItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->prependItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_prependItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    void * _arg3 = (void *) NULL;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","text","icon","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OO:FX_ListBox_prependItem",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_prependItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_prependItem(_arg0,*_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListBox_removeItem(_swigobj,_swigarg0)  (_swigobj->removeItem(_swigarg0))
static PyObject *_wrap_FX_ListBox_removeItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_removeItem",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_removeItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_removeItem(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_clearItems(_swigobj)  (_swigobj->clearItems())
static PyObject *_wrap_FX_ListBox_clearItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_clearItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_clearItems. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_clearItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_findItem(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->findItem(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ListBox_findItem(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXListBox * _arg0;
    FXString * _arg1;
    FXint  _arg2 = (FXint ) -1;
    FXuint  _arg3 = (FXuint ) SEARCH_FORWARD|SEARCH_WRAP;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text","start","flags", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|ii:FX_ListBox_findItem",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_findItem. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_ListBox_findItem(_arg0,*_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListBox_setItemText(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemText(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ListBox_setItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    FXString * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_ListBox_setItemText",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setItemText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = new FXString;
    else if (!PyString_Check(_obj2)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg2 = new FXString(PyString_AsString(_obj2));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setItemText(_arg0,_arg1,*_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg2;
}
    return _resultobj;
}

#define FX_ListBox_getItemText(_swigobj,_swigarg0)  (_swigobj->getItemText(_swigarg0))
static PyObject *_wrap_FX_ListBox_getItemText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_getItemText",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getItemText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ListBox_getItemText(_arg0,_arg1));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ListBox_setItemIcon(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemIcon(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ListBox_setItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    FXIcon * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","icon", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_ListBox_setItemIcon",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setItemIcon. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setItemIcon(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getItemIcon(_swigobj,_swigarg0)  (_swigobj->getItemIcon(_swigarg0))
static PyObject *_wrap_FX_ListBox_getItemIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_getItemIcon",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getItemIcon. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_ListBox_getItemIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ListBox_setItemData(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setItemData(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_ListBox_setItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXint  _arg1;
    void * _arg2;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "self","index","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiO:FX_ListBox_setItemData",_kwnames,&_argo0,&_arg1,&_obj2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setItemData. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    _arg2 = NULL;
    if (PyObject_HasAttrString(_obj2, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj2, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg2 = NULL;
	}
	else
	    _arg2 = (void*) _obj2;
	Py_DECREF(obj);
    }
    else
	_arg2 = (void*) _obj2;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setItemData(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getItemData(_swigobj,_swigarg0)  (_swigobj->getItemData(_swigarg0))
static PyObject *_wrap_FX_ListBox_getItemData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    void * _result;
    FXListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","index", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_getItemData",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getItemData. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (void *)FX_ListBox_getItemData(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_void_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ListBox_isPaneShown(_swigobj)  (_swigobj->isPaneShown())
static PyObject *_wrap_FX_ListBox_isPaneShown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_isPaneShown",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_isPaneShown. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_ListBox_isPaneShown(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_ListBox_sortItems(_swigobj)  (_swigobj->sortItems())
static PyObject *_wrap_FX_ListBox_sortItems(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_sortItems",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_sortItems. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_sortItems(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_setFont(_swigobj,_swigarg0)  (_swigobj->setFont(_swigarg0))
static PyObject *_wrap_FX_ListBox_setFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXFont * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","fnt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListBox_setFont",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setFont. Expected _FXListBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXFont_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ListBox_setFont. Expected _FXFont_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setFont(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getFont(_swigobj)  (_swigobj->getFont())
static PyObject *_wrap_FX_ListBox_getFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFont * _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getFont",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getFont. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFont *)FX_ListBox_getFont(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_ListBox_setBackColor(_swigobj,_swigarg0)  (_swigobj->setBackColor(_swigarg0))
static PyObject *_wrap_FX_ListBox_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setBackColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getBackColor(_swigobj)  (_swigobj->getBackColor())
static PyObject *_wrap_FX_ListBox_getBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getBackColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ListBox_getBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_setTextColor(_swigobj,_swigarg0)  (_swigobj->setTextColor(_swigarg0))
static PyObject *_wrap_FX_ListBox_setTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setTextColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getTextColor(_swigobj)  (_swigobj->getTextColor())
static PyObject *_wrap_FX_ListBox_getTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getTextColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ListBox_getTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_setSelBackColor(_swigobj,_swigarg0)  (_swigobj->setSelBackColor(_swigarg0))
static PyObject *_wrap_FX_ListBox_setSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setSelBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setSelBackColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setSelBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getSelBackColor(_swigobj)  (_swigobj->getSelBackColor())
static PyObject *_wrap_FX_ListBox_getSelBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getSelBackColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getSelBackColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ListBox_getSelBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_setSelTextColor(_swigobj,_swigarg0)  (_swigobj->setSelTextColor(_swigarg0))
static PyObject *_wrap_FX_ListBox_setSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ListBox_setSelTextColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setSelTextColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setSelTextColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_getSelTextColor(_swigobj)  (_swigobj->getSelTextColor())
static PyObject *_wrap_FX_ListBox_getSelTextColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getSelTextColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getSelTextColor. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_ListBox_getSelTextColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ListBox_getSortFunc(_swigobj)  (_swigobj->getSortFunc())
static PyObject *_wrap_FX_ListBox_getSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListSortFunc * _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getSortFunc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getSortFunc. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXListSortFunc (FX_ListBox_getSortFunc(_arg0));

    FXPy_END_ALLOW_THREADS
}    SWIG_MakePtr(_ptemp, (void *) _result,"_FXListSortFunc_p");
    _resultobj = Py_BuildValue("s",_ptemp);
    return _resultobj;
}

#define FX_ListBox_setSortFunc(_swigobj,_swigarg0)  (_swigobj->setSortFunc(_swigarg0))
static PyObject *_wrap_FX_ListBox_setSortFunc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXListSortFunc * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","func", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListBox_setSortFunc",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setSortFunc. Expected _FXListBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXListSortFunc_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_ListBox_setSortFunc. Expected _FXListSortFunc_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setSortFunc(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ListBox_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ListBox_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","txt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListBox_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setHelpText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListBox_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ListBox_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getHelpText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ListBox_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ListBox_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ListBox_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXListBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","txt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ListBox_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_setTipText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ListBox_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ListBox_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ListBox_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ListBox_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ListBox_getTipText. Expected _FXListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ListBox_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyListBoxToFXListBox(void *ptr) {
    FXPyListBox *src;
    FXListBox *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXListBox *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXPacker(void *ptr) {
    FXPyListBox *src;
    FXPacker *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXComposite(void *ptr) {
    FXPyListBox *src;
    FXComposite *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXWindow(void *ptr) {
    FXPyListBox *src;
    FXWindow *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXDrawable(void *ptr) {
    FXPyListBox *src;
    FXDrawable *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXId(void *ptr) {
    FXPyListBox *src;
    FXId *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyListBoxToFXObject(void *ptr) {
    FXPyListBox *src;
    FXObject *dest;
    src = (FXPyListBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXListBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyListBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXListBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) FRAME_SUNKEN|FRAME_THICK|(LISTBOX_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FXListBox",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXListBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyListBox *)new_FXListBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyListBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXListBox_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXListBox_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyListBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXListBox_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_onDefault. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXListBox_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXListBox_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXListBox_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_create. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXListBox_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_destroy. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXListBox_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_detach. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXListBox_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXListBox_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_resize. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXListBox_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_getDefaultWidth. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListBox_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListBox_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXListBox_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_getDefaultHeight. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListBox_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListBox_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXListBox_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_show. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXListBox_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_hide. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXListBox_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_enable. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXListBox_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_disable. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXListBox_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_canFocus. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXListBox_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXListBox_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXListBox_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_setFocus. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXListBox_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_killFocus. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXListBox_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXListBox_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_setDefault. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXListBox_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_recalc. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXListBox_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_layout. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXListBox_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_lower. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXListBox_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXListBox_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_move. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXListBox_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXListBox_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_position. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXListBox_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_isComposite. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXListBox_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXListBox_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXListBox_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyListBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXListBox_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_contains. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXListBox_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXListBox_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXListBox_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXListBox_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_getWidthForHeight. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListBox_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListBox_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXListBox_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyListBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXListBox_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_getHeightForWidth. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXListBox_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXListBox_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXListBox_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyListBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXListBox_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_doesSaveUnder. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXListBox_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXListBox_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXListBox_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXListBox_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_reparent. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXListBox_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXListBox_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXListBox_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyListBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXListBox_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyListBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXListBox_setBackColor. Expected _FXPyListBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXListBox_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXDriveBoxToFXListBox(void *ptr) {
    FXDriveBox *src;
    FXListBox *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXListBox *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXPacker(void *ptr) {
    FXDriveBox *src;
    FXPacker *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXComposite(void *ptr) {
    FXDriveBox *src;
    FXComposite *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXWindow(void *ptr) {
    FXDriveBox *src;
    FXWindow *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXDrawable(void *ptr) {
    FXDriveBox *src;
    FXDrawable *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXId(void *ptr) {
    FXDriveBox *src;
    FXId *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXDriveBoxToFXObject(void *ptr) {
    FXDriveBox *src;
    FXObject *dest;
    src = (FXDriveBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_DriveBox_onListChanged(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListChanged(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DriveBox_onListChanged(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DriveBox_onListChanged",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_onListChanged. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DriveBox_onListChanged. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DriveBox_onListChanged(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DriveBox_onListClicked(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onListClicked(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DriveBox_onListClicked(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DriveBox_onListClicked",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_onListClicked. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DriveBox_onListClicked. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DriveBox_onListClicked(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DriveBox_onCmdSetValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DriveBox_onCmdSetValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DriveBox_onCmdSetValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_onCmdSetValue. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DriveBox_onCmdSetValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DriveBox_onCmdSetValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DriveBox_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DriveBox_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DriveBox_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_onCmdSetStringValue. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DriveBox_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DriveBox_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_DriveBox_onCmdGetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdGetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_DriveBox_onCmdGetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_DriveBox_onCmdGetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_onCmdGetStringValue. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_DriveBox_onCmdGetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_DriveBox_onCmdGetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_DriveBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXDriveBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FX_DriveBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDriveBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) FRAME_SUNKEN|FRAME_THICK|(LISTBOX_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FX_DriveBox",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_DriveBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDriveBox *)new_FX_DriveBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXDriveBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_DriveBox_setDrive(_swigobj,_swigarg0)  (_swigobj->setDrive(_swigarg0))
static PyObject *_wrap_FX_DriveBox_setDrive(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXDriveBox * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","drive", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_DriveBox_setDrive",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_setDrive. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_DriveBox_setDrive(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_DriveBox_getDrive(_swigobj)  (_swigobj->getDrive())
static PyObject *_wrap_FX_DriveBox_getDrive(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_DriveBox_getDrive",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_DriveBox_getDrive. Expected _FXDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_DriveBox_getDrive(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyDriveBoxToFXDriveBox(void *ptr) {
    FXPyDriveBox *src;
    FXDriveBox *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXDriveBox *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXListBox(void *ptr) {
    FXPyDriveBox *src;
    FXListBox *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXListBox *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXPacker(void *ptr) {
    FXPyDriveBox *src;
    FXPacker *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXPacker *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXComposite(void *ptr) {
    FXPyDriveBox *src;
    FXComposite *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXWindow(void *ptr) {
    FXPyDriveBox *src;
    FXWindow *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXDrawable(void *ptr) {
    FXPyDriveBox *src;
    FXDrawable *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXId(void *ptr) {
    FXPyDriveBox *src;
    FXId *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyDriveBoxToFXObject(void *ptr) {
    FXPyDriveBox *src;
    FXObject *dest;
    src = (FXPyDriveBox *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXDriveBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12) (new FXPyDriveBox(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12))
static PyObject *_wrap_new_FXDriveBox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _result;
    FXComposite * _arg0;
    FXint  _arg1;
    FXObject * _arg2 = (FXObject *) NULL;
    FXSelector  _arg3 = (FXSelector ) 0;
    FXuint  _arg4 = (FXuint ) FRAME_SUNKEN|FRAME_THICK|(LISTBOX_NORMAL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    FXint  _arg12 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj2 = 0;
    char *_kwnames[] = { "p","nvis","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi|Oiiiiiiiiii:new_FXDriveBox",_kwnames,&_argo0,&_arg1,&_obj2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXDriveBox. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyDriveBox *)new_FXDriveBox(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyDriveBox_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXDriveBox_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXDriveBox_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyDriveBox * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXDriveBox_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_onDefault. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXDriveBox_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXDriveBox_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXDriveBox_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_create. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXDriveBox_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_destroy. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXDriveBox_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_detach. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDriveBox_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDriveBox_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_resize. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXDriveBox_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_getDefaultWidth. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDriveBox_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDriveBox_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXDriveBox_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_getDefaultHeight. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDriveBox_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDriveBox_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXDriveBox_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_show. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXDriveBox_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_hide. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXDriveBox_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_enable. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXDriveBox_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_disable. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXDriveBox_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_canFocus. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDriveBox_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDriveBox_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXDriveBox_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_setFocus. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXDriveBox_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_killFocus. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXDriveBox_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXDriveBox_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_setDefault. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXDriveBox_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_recalc. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXDriveBox_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_layout. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXDriveBox_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_lower. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDriveBox_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDriveBox_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_move. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXDriveBox_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXDriveBox_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_position. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXDriveBox_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_isComposite. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDriveBox_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDriveBox_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXDriveBox_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXDriveBox_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_contains. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDriveBox_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDriveBox_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXDriveBox_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDriveBox_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_getWidthForHeight. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDriveBox_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDriveBox_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXDriveBox_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyDriveBox * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDriveBox_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_getHeightForWidth. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXDriveBox_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXDriveBox_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXDriveBox_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyDriveBox * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXDriveBox_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_doesSaveUnder. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXDriveBox_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXDriveBox_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXDriveBox_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXDriveBox_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_reparent. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXDriveBox_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXDriveBox_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXDriveBox_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyDriveBox * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXDriveBox_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyDriveBox_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXDriveBox_setBackColor. Expected _FXPyDriveBox_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXDriveBox_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXColorBarToFXFrame(void *ptr) {
    FXColorBar *src;
    FXFrame *dest;
    src = (FXColorBar *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXColorBarToFXWindow(void *ptr) {
    FXColorBar *src;
    FXWindow *dest;
    src = (FXColorBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXColorBarToFXDrawable(void *ptr) {
    FXColorBar *src;
    FXDrawable *dest;
    src = (FXColorBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXColorBarToFXId(void *ptr) {
    FXColorBar *src;
    FXId *dest;
    src = (FXColorBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXColorBarToFXObject(void *ptr) {
    FXColorBar *src;
    FXObject *dest;
    src = (FXColorBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ColorBar_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onPaint. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorBar_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onLeftBtnPress. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorBar_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onLeftBtnRelease. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorBar_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onMotion. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorBar_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onQueryHelp. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorBar_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorBar_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorBar_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_onQueryTip. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorBar_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorBar_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ColorBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXColorBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_ColorBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_NORMAL;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_ColorBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ColorBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColorBar *)new_FX_ColorBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXColorBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ColorBar_setHue(_swigobj,_swigarg0)  (_swigobj->setHue(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setHue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorBar_setHue",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setHue. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setHue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorBar_getHue(_swigobj)  (_swigobj->getHue())
static PyObject *_wrap_FX_ColorBar_getHue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getHue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getHue. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorBar_getHue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorBar_setSat(_swigobj,_swigarg0)  (_swigobj->setSat(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setSat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorBar_setSat",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setSat. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setSat(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorBar_getSat(_swigobj)  (_swigobj->getSat())
static PyObject *_wrap_FX_ColorBar_getSat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getSat",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getSat. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorBar_getSat(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorBar_setVal(_swigobj,_swigarg0)  (_swigobj->setVal(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setVal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","v", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorBar_setVal",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setVal. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setVal(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorBar_getVal(_swigobj)  (_swigobj->getVal())
static PyObject *_wrap_FX_ColorBar_getVal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getVal",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getVal. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorBar_getVal(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorBar_getBarStyle(_swigobj)  (_swigobj->getBarStyle())
static PyObject *_wrap_FX_ColorBar_getBarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getBarStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getBarStyle. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_ColorBar_getBarStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_ColorBar_setBarStyle(_swigobj,_swigarg0)  (_swigobj->setBarStyle(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setBarStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_ColorBar_setBarStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setBarStyle. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setBarStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorBar_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorBar_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setHelpText. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorBar_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ColorBar_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getHelpText. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorBar_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ColorBar_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ColorBar_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorBar * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorBar_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_setTipText. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorBar_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorBar_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ColorBar_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorBar_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorBar_getTipText. Expected _FXColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorBar_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyColorBarToFXColorBar(void *ptr) {
    FXPyColorBar *src;
    FXColorBar *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXColorBar *) src;
    return (void *) dest;
}

static void *SwigFXPyColorBarToFXFrame(void *ptr) {
    FXPyColorBar *src;
    FXFrame *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyColorBarToFXWindow(void *ptr) {
    FXPyColorBar *src;
    FXWindow *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyColorBarToFXDrawable(void *ptr) {
    FXPyColorBar *src;
    FXDrawable *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyColorBarToFXId(void *ptr) {
    FXPyColorBar *src;
    FXId *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyColorBarToFXObject(void *ptr) {
    FXPyColorBar *src;
    FXObject *dest;
    src = (FXPyColorBar *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXColorBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyColorBar(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXColorBar(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_NORMAL;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXColorBar",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXColorBar. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyColorBar *)new_FXColorBar(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyColorBar_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXColorBar_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXColorBar_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyColorBar * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXColorBar_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_onDefault. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXColorBar_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXColorBar_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXColorBar_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_create. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXColorBar_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_destroy. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXColorBar_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_detach. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorBar_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorBar_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_resize. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXColorBar_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_getDefaultWidth. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorBar_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorBar_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXColorBar_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_getDefaultHeight. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorBar_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorBar_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXColorBar_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_show. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXColorBar_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_hide. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXColorBar_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_enable. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXColorBar_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_disable. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXColorBar_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_canFocus. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorBar_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorBar_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXColorBar_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_setFocus. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXColorBar_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_killFocus. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXColorBar_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXColorBar_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_setDefault. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXColorBar_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_recalc. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXColorBar_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_layout. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXColorBar_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_lower. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorBar_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorBar_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_move. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXColorBar_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXColorBar_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_position. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXColorBar_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_isComposite. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorBar_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorBar_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorBar_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorBar_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_contains. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorBar_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorBar_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXColorBar_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorBar_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_getWidthForHeight. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorBar_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorBar_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXColorBar_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorBar * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorBar_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_getHeightForWidth. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorBar_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorBar_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXColorBar_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorBar * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorBar_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_doesSaveUnder. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorBar_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorBar_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXColorBar_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXColorBar_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_reparent. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXColorBar_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorBar_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXColorBar_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorBar * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorBar_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorBar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorBar_setBackColor. Expected _FXPyColorBar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorBar_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static void *SwigFXColorWheelToFXFrame(void *ptr) {
    FXColorWheel *src;
    FXFrame *dest;
    src = (FXColorWheel *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXColorWheelToFXWindow(void *ptr) {
    FXColorWheel *src;
    FXWindow *dest;
    src = (FXColorWheel *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXColorWheelToFXDrawable(void *ptr) {
    FXColorWheel *src;
    FXDrawable *dest;
    src = (FXColorWheel *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXColorWheelToFXId(void *ptr) {
    FXColorWheel *src;
    FXId *dest;
    src = (FXColorWheel *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXColorWheelToFXObject(void *ptr) {
    FXColorWheel *src;
    FXObject *dest;
    src = (FXColorWheel *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_ColorWheel_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onPaint. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWheel_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onLeftBtnPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onLeftBtnPress. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWheel_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onLeftBtnRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onLeftBtnRelease. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWheel_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onMotion. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWheel_onQueryHelp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryHelp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onQueryHelp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onQueryHelp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onQueryHelp. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onQueryHelp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onQueryHelp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_ColorWheel_onQueryTip(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onQueryTip(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_ColorWheel_onQueryTip(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_ColorWheel_onQueryTip",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_onQueryTip. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_ColorWheel_onQueryTip. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_ColorWheel_onQueryTip(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_ColorWheel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXColorWheel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FX_ColorWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_NORMAL;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FX_ColorWheel",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_ColorWheel. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColorWheel *)new_FX_ColorWheel(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXColorWheel_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_ColorWheel_setHue(_swigobj,_swigarg0)  (_swigobj->setHue(_swigarg0))
static PyObject *_wrap_FX_ColorWheel_setHue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorWheel_setHue",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_setHue. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWheel_setHue(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorWheel_getHue(_swigobj)  (_swigobj->getHue())
static PyObject *_wrap_FX_ColorWheel_getHue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWheel_getHue",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_getHue. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorWheel_getHue(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorWheel_setSat(_swigobj,_swigarg0)  (_swigobj->setSat(_swigarg0))
static PyObject *_wrap_FX_ColorWheel_setSat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","s", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorWheel_setSat",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_setSat. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWheel_setSat(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorWheel_getSat(_swigobj)  (_swigobj->getSat())
static PyObject *_wrap_FX_ColorWheel_getSat(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWheel_getSat",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_getSat. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorWheel_getSat(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorWheel_setVal(_swigobj,_swigarg0)  (_swigobj->setVal(_swigarg0))
static PyObject *_wrap_FX_ColorWheel_setVal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _arg0;
    FXfloat  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","v", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Of:FX_ColorWheel_setVal",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_setVal. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWheel_setVal(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_ColorWheel_getVal(_swigobj)  (_swigobj->getVal())
static PyObject *_wrap_FX_ColorWheel_getVal(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXfloat  _result;
    FXColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWheel_getVal",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_getVal. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXfloat )FX_ColorWheel_getVal(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("f",_result);
    return _resultobj;
}

#define FX_ColorWheel_setHelpText(_swigobj,_swigarg0)  (_swigobj->setHelpText(_swigarg0))
static PyObject *_wrap_FX_ColorWheel_setHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorWheel_setHelpText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_setHelpText. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWheel_setHelpText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorWheel_getHelpText(_swigobj)  (_swigobj->getHelpText())
static PyObject *_wrap_FX_ColorWheel_getHelpText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWheel_getHelpText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_getHelpText. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorWheel_getHelpText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_ColorWheel_setTipText(_swigobj,_swigarg0)  (_swigobj->setTipText(_swigarg0))
static PyObject *_wrap_FX_ColorWheel_setTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColorWheel * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","text", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_ColorWheel_setTipText",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_setTipText. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_ColorWheel_setTipText(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_ColorWheel_getTipText(_swigobj)  (_swigobj->getTipText())
static PyObject *_wrap_FX_ColorWheel_getTipText(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_ColorWheel_getTipText",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_ColorWheel_getTipText. Expected _FXColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_ColorWheel_getTipText(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

static void *SwigFXPyColorWheelToFXColorWheel(void *ptr) {
    FXPyColorWheel *src;
    FXColorWheel *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXColorWheel *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWheelToFXFrame(void *ptr) {
    FXPyColorWheel *src;
    FXFrame *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWheelToFXWindow(void *ptr) {
    FXPyColorWheel *src;
    FXWindow *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWheelToFXDrawable(void *ptr) {
    FXPyColorWheel *src;
    FXDrawable *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWheelToFXId(void *ptr) {
    FXPyColorWheel *src;
    FXId *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyColorWheelToFXObject(void *ptr) {
    FXPyColorWheel *src;
    FXObject *dest;
    src = (FXPyColorWheel *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXColorWheel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11) (new FXPyColorWheel(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11))
static PyObject *_wrap_new_FXColorWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) FRAME_NORMAL;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) DEFAULT_PAD;
    FXint  _arg9 = (FXint ) DEFAULT_PAD;
    FXint  _arg10 = (FXint ) DEFAULT_PAD;
    FXint  _arg11 = (FXint ) DEFAULT_PAD;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiiiiiii:new_FXColorWheel",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXColorWheel. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyColorWheel *)new_FXColorWheel(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyColorWheel_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXColorWheel_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXColorWheel_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyColorWheel * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXColorWheel_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_onDefault. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXColorWheel_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXColorWheel_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXColorWheel_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_create. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXColorWheel_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_destroy. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXColorWheel_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_detach. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWheel_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWheel_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_resize. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXColorWheel_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_getDefaultWidth. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWheel_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWheel_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXColorWheel_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_getDefaultHeight. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWheel_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWheel_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXColorWheel_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_show. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXColorWheel_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_hide. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXColorWheel_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_enable. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXColorWheel_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_disable. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXColorWheel_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_canFocus. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWheel_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWheel_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXColorWheel_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_setFocus. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXColorWheel_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_killFocus. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXColorWheel_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXColorWheel_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_setDefault. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXColorWheel_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_recalc. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXColorWheel_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_layout. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXColorWheel_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_lower. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWheel_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWheel_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_move. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXColorWheel_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXColorWheel_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_position. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXColorWheel_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_isComposite. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWheel_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWheel_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXColorWheel_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXColorWheel_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_contains. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWheel_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWheel_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXColorWheel_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWheel_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_getWidthForHeight. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWheel_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWheel_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXColorWheel_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyColorWheel * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWheel_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_getHeightForWidth. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXColorWheel_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXColorWheel_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXColorWheel_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyColorWheel * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXColorWheel_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_doesSaveUnder. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXColorWheel_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXColorWheel_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXColorWheel_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXColorWheel_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_reparent. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXColorWheel_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXColorWheel_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXColorWheel_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyColorWheel * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXColorWheel_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyColorWheel_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXColorWheel_setBackColor. Expected _FXPyColorWheel_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXColorWheel_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyMethodDef controlscMethods[] = {
	 { "FXColorWheel_setBackColor", (PyCFunction) _wrap_FXColorWheel_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_reparent", (PyCFunction) _wrap_FXColorWheel_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_doesSaveUnder", (PyCFunction) _wrap_FXColorWheel_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_getHeightForWidth", (PyCFunction) _wrap_FXColorWheel_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_getWidthForHeight", (PyCFunction) _wrap_FXColorWheel_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_contains", (PyCFunction) _wrap_FXColorWheel_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_isComposite", (PyCFunction) _wrap_FXColorWheel_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_position", (PyCFunction) _wrap_FXColorWheel_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_move", (PyCFunction) _wrap_FXColorWheel_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_lower", (PyCFunction) _wrap_FXColorWheel_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_layout", (PyCFunction) _wrap_FXColorWheel_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_recalc", (PyCFunction) _wrap_FXColorWheel_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_setDefault", (PyCFunction) _wrap_FXColorWheel_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_killFocus", (PyCFunction) _wrap_FXColorWheel_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_setFocus", (PyCFunction) _wrap_FXColorWheel_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_canFocus", (PyCFunction) _wrap_FXColorWheel_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_disable", (PyCFunction) _wrap_FXColorWheel_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_enable", (PyCFunction) _wrap_FXColorWheel_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_hide", (PyCFunction) _wrap_FXColorWheel_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_show", (PyCFunction) _wrap_FXColorWheel_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_getDefaultHeight", (PyCFunction) _wrap_FXColorWheel_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_getDefaultWidth", (PyCFunction) _wrap_FXColorWheel_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_resize", (PyCFunction) _wrap_FXColorWheel_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_detach", (PyCFunction) _wrap_FXColorWheel_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_destroy", (PyCFunction) _wrap_FXColorWheel_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_create", (PyCFunction) _wrap_FXColorWheel_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWheel_onDefault", (PyCFunction) _wrap_FXColorWheel_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXColorWheel", (PyCFunction) _wrap_new_FXColorWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_getTipText", (PyCFunction) _wrap_FX_ColorWheel_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_setTipText", (PyCFunction) _wrap_FX_ColorWheel_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_getHelpText", (PyCFunction) _wrap_FX_ColorWheel_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_setHelpText", (PyCFunction) _wrap_FX_ColorWheel_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_getVal", (PyCFunction) _wrap_FX_ColorWheel_getVal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_setVal", (PyCFunction) _wrap_FX_ColorWheel_setVal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_getSat", (PyCFunction) _wrap_FX_ColorWheel_getSat, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_setSat", (PyCFunction) _wrap_FX_ColorWheel_setSat, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_getHue", (PyCFunction) _wrap_FX_ColorWheel_getHue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_setHue", (PyCFunction) _wrap_FX_ColorWheel_setHue, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ColorWheel", (PyCFunction) _wrap_new_FX_ColorWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onQueryTip", (PyCFunction) _wrap_FX_ColorWheel_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onQueryHelp", (PyCFunction) _wrap_FX_ColorWheel_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onMotion", (PyCFunction) _wrap_FX_ColorWheel_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onLeftBtnRelease", (PyCFunction) _wrap_FX_ColorWheel_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onLeftBtnPress", (PyCFunction) _wrap_FX_ColorWheel_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWheel_onPaint", (PyCFunction) _wrap_FX_ColorWheel_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_setBackColor", (PyCFunction) _wrap_FXColorBar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_reparent", (PyCFunction) _wrap_FXColorBar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_doesSaveUnder", (PyCFunction) _wrap_FXColorBar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_getHeightForWidth", (PyCFunction) _wrap_FXColorBar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_getWidthForHeight", (PyCFunction) _wrap_FXColorBar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_contains", (PyCFunction) _wrap_FXColorBar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_isComposite", (PyCFunction) _wrap_FXColorBar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_position", (PyCFunction) _wrap_FXColorBar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_move", (PyCFunction) _wrap_FXColorBar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_lower", (PyCFunction) _wrap_FXColorBar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_layout", (PyCFunction) _wrap_FXColorBar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_recalc", (PyCFunction) _wrap_FXColorBar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_setDefault", (PyCFunction) _wrap_FXColorBar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_killFocus", (PyCFunction) _wrap_FXColorBar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_setFocus", (PyCFunction) _wrap_FXColorBar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_canFocus", (PyCFunction) _wrap_FXColorBar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_disable", (PyCFunction) _wrap_FXColorBar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_enable", (PyCFunction) _wrap_FXColorBar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_hide", (PyCFunction) _wrap_FXColorBar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_show", (PyCFunction) _wrap_FXColorBar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_getDefaultHeight", (PyCFunction) _wrap_FXColorBar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_getDefaultWidth", (PyCFunction) _wrap_FXColorBar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_resize", (PyCFunction) _wrap_FXColorBar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_detach", (PyCFunction) _wrap_FXColorBar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_destroy", (PyCFunction) _wrap_FXColorBar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_create", (PyCFunction) _wrap_FXColorBar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorBar_onDefault", (PyCFunction) _wrap_FXColorBar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXColorBar", (PyCFunction) _wrap_new_FXColorBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getTipText", (PyCFunction) _wrap_FX_ColorBar_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setTipText", (PyCFunction) _wrap_FX_ColorBar_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getHelpText", (PyCFunction) _wrap_FX_ColorBar_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setHelpText", (PyCFunction) _wrap_FX_ColorBar_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setBarStyle", (PyCFunction) _wrap_FX_ColorBar_setBarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getBarStyle", (PyCFunction) _wrap_FX_ColorBar_getBarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getVal", (PyCFunction) _wrap_FX_ColorBar_getVal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setVal", (PyCFunction) _wrap_FX_ColorBar_setVal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getSat", (PyCFunction) _wrap_FX_ColorBar_getSat, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setSat", (PyCFunction) _wrap_FX_ColorBar_setSat, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_getHue", (PyCFunction) _wrap_FX_ColorBar_getHue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_setHue", (PyCFunction) _wrap_FX_ColorBar_setHue, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ColorBar", (PyCFunction) _wrap_new_FX_ColorBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onQueryTip", (PyCFunction) _wrap_FX_ColorBar_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onQueryHelp", (PyCFunction) _wrap_FX_ColorBar_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onMotion", (PyCFunction) _wrap_FX_ColorBar_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onLeftBtnRelease", (PyCFunction) _wrap_FX_ColorBar_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onLeftBtnPress", (PyCFunction) _wrap_FX_ColorBar_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorBar_onPaint", (PyCFunction) _wrap_FX_ColorBar_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_setBackColor", (PyCFunction) _wrap_FXDriveBox_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_reparent", (PyCFunction) _wrap_FXDriveBox_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_doesSaveUnder", (PyCFunction) _wrap_FXDriveBox_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_getHeightForWidth", (PyCFunction) _wrap_FXDriveBox_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_getWidthForHeight", (PyCFunction) _wrap_FXDriveBox_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_contains", (PyCFunction) _wrap_FXDriveBox_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_isComposite", (PyCFunction) _wrap_FXDriveBox_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_position", (PyCFunction) _wrap_FXDriveBox_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_move", (PyCFunction) _wrap_FXDriveBox_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_lower", (PyCFunction) _wrap_FXDriveBox_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_layout", (PyCFunction) _wrap_FXDriveBox_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_recalc", (PyCFunction) _wrap_FXDriveBox_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_setDefault", (PyCFunction) _wrap_FXDriveBox_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_killFocus", (PyCFunction) _wrap_FXDriveBox_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_setFocus", (PyCFunction) _wrap_FXDriveBox_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_canFocus", (PyCFunction) _wrap_FXDriveBox_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_disable", (PyCFunction) _wrap_FXDriveBox_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_enable", (PyCFunction) _wrap_FXDriveBox_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_hide", (PyCFunction) _wrap_FXDriveBox_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_show", (PyCFunction) _wrap_FXDriveBox_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_getDefaultHeight", (PyCFunction) _wrap_FXDriveBox_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_getDefaultWidth", (PyCFunction) _wrap_FXDriveBox_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_resize", (PyCFunction) _wrap_FXDriveBox_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_detach", (PyCFunction) _wrap_FXDriveBox_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_destroy", (PyCFunction) _wrap_FXDriveBox_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_create", (PyCFunction) _wrap_FXDriveBox_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXDriveBox_onDefault", (PyCFunction) _wrap_FXDriveBox_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDriveBox", (PyCFunction) _wrap_new_FXDriveBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_getDrive", (PyCFunction) _wrap_FX_DriveBox_getDrive, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_setDrive", (PyCFunction) _wrap_FX_DriveBox_setDrive, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_DriveBox", (PyCFunction) _wrap_new_FX_DriveBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_onCmdGetStringValue", (PyCFunction) _wrap_FX_DriveBox_onCmdGetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_onCmdSetStringValue", (PyCFunction) _wrap_FX_DriveBox_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_onCmdSetValue", (PyCFunction) _wrap_FX_DriveBox_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_onListClicked", (PyCFunction) _wrap_FX_DriveBox_onListClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DriveBox_onListChanged", (PyCFunction) _wrap_FX_DriveBox_onListChanged, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_setBackColor", (PyCFunction) _wrap_FXListBox_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_reparent", (PyCFunction) _wrap_FXListBox_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_doesSaveUnder", (PyCFunction) _wrap_FXListBox_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_getHeightForWidth", (PyCFunction) _wrap_FXListBox_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_getWidthForHeight", (PyCFunction) _wrap_FXListBox_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_contains", (PyCFunction) _wrap_FXListBox_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_isComposite", (PyCFunction) _wrap_FXListBox_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_position", (PyCFunction) _wrap_FXListBox_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_move", (PyCFunction) _wrap_FXListBox_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_lower", (PyCFunction) _wrap_FXListBox_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_layout", (PyCFunction) _wrap_FXListBox_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_recalc", (PyCFunction) _wrap_FXListBox_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_setDefault", (PyCFunction) _wrap_FXListBox_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_killFocus", (PyCFunction) _wrap_FXListBox_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_setFocus", (PyCFunction) _wrap_FXListBox_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_canFocus", (PyCFunction) _wrap_FXListBox_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_disable", (PyCFunction) _wrap_FXListBox_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_enable", (PyCFunction) _wrap_FXListBox_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_hide", (PyCFunction) _wrap_FXListBox_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_show", (PyCFunction) _wrap_FXListBox_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_getDefaultHeight", (PyCFunction) _wrap_FXListBox_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_getDefaultWidth", (PyCFunction) _wrap_FXListBox_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_resize", (PyCFunction) _wrap_FXListBox_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_detach", (PyCFunction) _wrap_FXListBox_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_destroy", (PyCFunction) _wrap_FXListBox_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_create", (PyCFunction) _wrap_FXListBox_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXListBox_onDefault", (PyCFunction) _wrap_FXListBox_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXListBox", (PyCFunction) _wrap_new_FXListBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getTipText", (PyCFunction) _wrap_FX_ListBox_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setTipText", (PyCFunction) _wrap_FX_ListBox_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getHelpText", (PyCFunction) _wrap_FX_ListBox_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setHelpText", (PyCFunction) _wrap_FX_ListBox_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setSortFunc", (PyCFunction) _wrap_FX_ListBox_setSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getSortFunc", (PyCFunction) _wrap_FX_ListBox_getSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getSelTextColor", (PyCFunction) _wrap_FX_ListBox_getSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setSelTextColor", (PyCFunction) _wrap_FX_ListBox_setSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getSelBackColor", (PyCFunction) _wrap_FX_ListBox_getSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setSelBackColor", (PyCFunction) _wrap_FX_ListBox_setSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getTextColor", (PyCFunction) _wrap_FX_ListBox_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setTextColor", (PyCFunction) _wrap_FX_ListBox_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getBackColor", (PyCFunction) _wrap_FX_ListBox_getBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setBackColor", (PyCFunction) _wrap_FX_ListBox_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getFont", (PyCFunction) _wrap_FX_ListBox_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setFont", (PyCFunction) _wrap_FX_ListBox_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_sortItems", (PyCFunction) _wrap_FX_ListBox_sortItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_isPaneShown", (PyCFunction) _wrap_FX_ListBox_isPaneShown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getItemData", (PyCFunction) _wrap_FX_ListBox_getItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setItemData", (PyCFunction) _wrap_FX_ListBox_setItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getItemIcon", (PyCFunction) _wrap_FX_ListBox_getItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setItemIcon", (PyCFunction) _wrap_FX_ListBox_setItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getItemText", (PyCFunction) _wrap_FX_ListBox_getItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setItemText", (PyCFunction) _wrap_FX_ListBox_setItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_findItem", (PyCFunction) _wrap_FX_ListBox_findItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_clearItems", (PyCFunction) _wrap_FX_ListBox_clearItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_removeItem", (PyCFunction) _wrap_FX_ListBox_removeItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_prependItem", (PyCFunction) _wrap_FX_ListBox_prependItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_appendItem", (PyCFunction) _wrap_FX_ListBox_appendItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_insertItem", (PyCFunction) _wrap_FX_ListBox_insertItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_replaceItem", (PyCFunction) _wrap_FX_ListBox_replaceItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_retrieveItem", (PyCFunction) _wrap_FX_ListBox_retrieveItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getCurrentItem", (PyCFunction) _wrap_FX_ListBox_getCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setCurrentItem", (PyCFunction) _wrap_FX_ListBox_setCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_isItemCurrent", (PyCFunction) _wrap_FX_ListBox_isItemCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_setNumVisible", (PyCFunction) _wrap_FX_ListBox_setNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getNumVisible", (PyCFunction) _wrap_FX_ListBox_getNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_getNumItems", (PyCFunction) _wrap_FX_ListBox_getNumItems, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ListBox", (PyCFunction) _wrap_new_FX_ListBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onCmdSetIntValue", (PyCFunction) _wrap_FX_ListBox_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onCmdGetIntValue", (PyCFunction) _wrap_FX_ListBox_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onCmdSetValue", (PyCFunction) _wrap_FX_ListBox_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onListClicked", (PyCFunction) _wrap_FX_ListBox_onListClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onListChanged", (PyCFunction) _wrap_FX_ListBox_onListChanged, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onListUpdate", (PyCFunction) _wrap_FX_ListBox_onListUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onFieldButton", (PyCFunction) _wrap_FX_ListBox_onFieldButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onFocusDown", (PyCFunction) _wrap_FX_ListBox_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListBox_onFocusUp", (PyCFunction) _wrap_FX_ListBox_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_setBackColor", (PyCFunction) _wrap_FXToolbarGrip_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_reparent", (PyCFunction) _wrap_FXToolbarGrip_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_doesSaveUnder", (PyCFunction) _wrap_FXToolbarGrip_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_getHeightForWidth", (PyCFunction) _wrap_FXToolbarGrip_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_getWidthForHeight", (PyCFunction) _wrap_FXToolbarGrip_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_contains", (PyCFunction) _wrap_FXToolbarGrip_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_isComposite", (PyCFunction) _wrap_FXToolbarGrip_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_position", (PyCFunction) _wrap_FXToolbarGrip_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_move", (PyCFunction) _wrap_FXToolbarGrip_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_lower", (PyCFunction) _wrap_FXToolbarGrip_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_layout", (PyCFunction) _wrap_FXToolbarGrip_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_recalc", (PyCFunction) _wrap_FXToolbarGrip_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_setDefault", (PyCFunction) _wrap_FXToolbarGrip_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_killFocus", (PyCFunction) _wrap_FXToolbarGrip_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_setFocus", (PyCFunction) _wrap_FXToolbarGrip_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_canFocus", (PyCFunction) _wrap_FXToolbarGrip_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_disable", (PyCFunction) _wrap_FXToolbarGrip_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_enable", (PyCFunction) _wrap_FXToolbarGrip_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_hide", (PyCFunction) _wrap_FXToolbarGrip_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_show", (PyCFunction) _wrap_FXToolbarGrip_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_getDefaultHeight", (PyCFunction) _wrap_FXToolbarGrip_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_getDefaultWidth", (PyCFunction) _wrap_FXToolbarGrip_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_resize", (PyCFunction) _wrap_FXToolbarGrip_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_detach", (PyCFunction) _wrap_FXToolbarGrip_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_destroy", (PyCFunction) _wrap_FXToolbarGrip_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_create", (PyCFunction) _wrap_FXToolbarGrip_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarGrip_onDefault", (PyCFunction) _wrap_FXToolbarGrip_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXToolbarGrip", (PyCFunction) _wrap_new_FXToolbarGrip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_getActiveColor", (PyCFunction) _wrap_FX_ToolbarGrip_getActiveColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_getShadowColor", (PyCFunction) _wrap_FX_ToolbarGrip_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_setShadowColor", (PyCFunction) _wrap_FX_ToolbarGrip_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_getHiliteColor", (PyCFunction) _wrap_FX_ToolbarGrip_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_setHiliteColor", (PyCFunction) _wrap_FX_ToolbarGrip_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_getDoubleBar", (PyCFunction) _wrap_FX_ToolbarGrip_getDoubleBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_setDoubleBar", (PyCFunction) _wrap_FX_ToolbarGrip_setDoubleBar, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ToolbarGrip", (PyCFunction) _wrap_new_FX_ToolbarGrip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onLeave", (PyCFunction) _wrap_FX_ToolbarGrip_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onEnter", (PyCFunction) _wrap_FX_ToolbarGrip_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onMotion", (PyCFunction) _wrap_FX_ToolbarGrip_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onLeftBtnRelease", (PyCFunction) _wrap_FX_ToolbarGrip_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onLeftBtnPress", (PyCFunction) _wrap_FX_ToolbarGrip_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarGrip_onPaint", (PyCFunction) _wrap_FX_ToolbarGrip_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_deiconify", (PyCFunction) _wrap_FXToolbarShell_deiconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_iconify", (PyCFunction) _wrap_FXToolbarShell_iconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_show2", (PyCFunction) _wrap_FXToolbarShell_show2, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_setBackColor", (PyCFunction) _wrap_FXToolbarShell_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_reparent", (PyCFunction) _wrap_FXToolbarShell_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_doesSaveUnder", (PyCFunction) _wrap_FXToolbarShell_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_getHeightForWidth", (PyCFunction) _wrap_FXToolbarShell_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_getWidthForHeight", (PyCFunction) _wrap_FXToolbarShell_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_contains", (PyCFunction) _wrap_FXToolbarShell_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_isComposite", (PyCFunction) _wrap_FXToolbarShell_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_position", (PyCFunction) _wrap_FXToolbarShell_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_move", (PyCFunction) _wrap_FXToolbarShell_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_lower", (PyCFunction) _wrap_FXToolbarShell_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_layout", (PyCFunction) _wrap_FXToolbarShell_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_recalc", (PyCFunction) _wrap_FXToolbarShell_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_setDefault", (PyCFunction) _wrap_FXToolbarShell_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_killFocus", (PyCFunction) _wrap_FXToolbarShell_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_setFocus", (PyCFunction) _wrap_FXToolbarShell_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_canFocus", (PyCFunction) _wrap_FXToolbarShell_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_disable", (PyCFunction) _wrap_FXToolbarShell_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_enable", (PyCFunction) _wrap_FXToolbarShell_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_hide", (PyCFunction) _wrap_FXToolbarShell_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_show", (PyCFunction) _wrap_FXToolbarShell_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_getDefaultHeight", (PyCFunction) _wrap_FXToolbarShell_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_getDefaultWidth", (PyCFunction) _wrap_FXToolbarShell_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_resize", (PyCFunction) _wrap_FXToolbarShell_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_detach", (PyCFunction) _wrap_FXToolbarShell_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_destroy", (PyCFunction) _wrap_FXToolbarShell_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_create", (PyCFunction) _wrap_FXToolbarShell_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarShell_onDefault", (PyCFunction) _wrap_FXToolbarShell_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXToolbarShell", (PyCFunction) _wrap_new_FXToolbarShell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getBaseColor", (PyCFunction) _wrap_FX_ToolbarShell_getBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_setBaseColor", (PyCFunction) _wrap_FX_ToolbarShell_setBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getBorderColor", (PyCFunction) _wrap_FX_ToolbarShell_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_setBorderColor", (PyCFunction) _wrap_FX_ToolbarShell_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getShadowColor", (PyCFunction) _wrap_FX_ToolbarShell_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_setShadowColor", (PyCFunction) _wrap_FX_ToolbarShell_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getHiliteColor", (PyCFunction) _wrap_FX_ToolbarShell_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_setHiliteColor", (PyCFunction) _wrap_FX_ToolbarShell_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getBorderWidth", (PyCFunction) _wrap_FX_ToolbarShell_getBorderWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_getFrameStyle", (PyCFunction) _wrap_FX_ToolbarShell_getFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_setFrameStyle", (PyCFunction) _wrap_FX_ToolbarShell_setFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ToolbarShell", (PyCFunction) _wrap_new_FX_ToolbarShell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarShell_onPaint", (PyCFunction) _wrap_FX_ToolbarShell_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_undock", (PyCFunction) _wrap_FXToolbar_undock, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_dock", (PyCFunction) _wrap_FXToolbar_dock, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_setBackColor", (PyCFunction) _wrap_FXToolbar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_reparent", (PyCFunction) _wrap_FXToolbar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_doesSaveUnder", (PyCFunction) _wrap_FXToolbar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_getHeightForWidth", (PyCFunction) _wrap_FXToolbar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_getWidthForHeight", (PyCFunction) _wrap_FXToolbar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_contains", (PyCFunction) _wrap_FXToolbar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_isComposite", (PyCFunction) _wrap_FXToolbar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_position", (PyCFunction) _wrap_FXToolbar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_move", (PyCFunction) _wrap_FXToolbar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_lower", (PyCFunction) _wrap_FXToolbar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_layout", (PyCFunction) _wrap_FXToolbar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_recalc", (PyCFunction) _wrap_FXToolbar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_setDefault", (PyCFunction) _wrap_FXToolbar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_killFocus", (PyCFunction) _wrap_FXToolbar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_setFocus", (PyCFunction) _wrap_FXToolbar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_canFocus", (PyCFunction) _wrap_FXToolbar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_disable", (PyCFunction) _wrap_FXToolbar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_enable", (PyCFunction) _wrap_FXToolbar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_hide", (PyCFunction) _wrap_FXToolbar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_show", (PyCFunction) _wrap_FXToolbar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_getDefaultHeight", (PyCFunction) _wrap_FXToolbar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_getDefaultWidth", (PyCFunction) _wrap_FXToolbar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_resize", (PyCFunction) _wrap_FXToolbar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_detach", (PyCFunction) _wrap_FXToolbar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_destroy", (PyCFunction) _wrap_FXToolbar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_create", (PyCFunction) _wrap_FXToolbar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbar_onDefault", (PyCFunction) _wrap_FXToolbar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXToolbar", (PyCFunction) _wrap_new_FXToolbar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_getDockingSide", (PyCFunction) _wrap_FX_Toolbar_getDockingSide, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_setDockingSide", (PyCFunction) _wrap_FX_Toolbar_setDockingSide, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_undock", (PyCFunction) _wrap_FX_Toolbar_undock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_dock", (PyCFunction) _wrap_FX_Toolbar_dock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_isDocked", (PyCFunction) _wrap_FX_Toolbar_isDocked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_getWetDock", (PyCFunction) _wrap_FX_Toolbar_getWetDock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_getDryDock", (PyCFunction) _wrap_FX_Toolbar_getDryDock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_setWetDock", (PyCFunction) _wrap_FX_Toolbar_setWetDock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_setDryDock", (PyCFunction) _wrap_FX_Toolbar_setDryDock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onDraggedGrip", (PyCFunction) _wrap_FX_Toolbar_onDraggedGrip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onEndDragGrip", (PyCFunction) _wrap_FX_Toolbar_onEndDragGrip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onBeginDragGrip", (PyCFunction) _wrap_FX_Toolbar_onBeginDragGrip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onUpdDockRight", (PyCFunction) _wrap_FX_Toolbar_onUpdDockRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onCmdDockRight", (PyCFunction) _wrap_FX_Toolbar_onCmdDockRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onUpdDockLeft", (PyCFunction) _wrap_FX_Toolbar_onUpdDockLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onCmdDockLeft", (PyCFunction) _wrap_FX_Toolbar_onCmdDockLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onUpdDockBottom", (PyCFunction) _wrap_FX_Toolbar_onUpdDockBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onCmdDockBottom", (PyCFunction) _wrap_FX_Toolbar_onCmdDockBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onUpdDockTop", (PyCFunction) _wrap_FX_Toolbar_onUpdDockTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onCmdDockTop", (PyCFunction) _wrap_FX_Toolbar_onCmdDockTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onUpdUndock", (PyCFunction) _wrap_FX_Toolbar_onUpdUndock, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Toolbar_onCmdUndock", (PyCFunction) _wrap_FX_Toolbar_onCmdUndock, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_setBackColor", (PyCFunction) _wrap_FXToolbarTab_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_reparent", (PyCFunction) _wrap_FXToolbarTab_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_doesSaveUnder", (PyCFunction) _wrap_FXToolbarTab_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_getHeightForWidth", (PyCFunction) _wrap_FXToolbarTab_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_getWidthForHeight", (PyCFunction) _wrap_FXToolbarTab_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_contains", (PyCFunction) _wrap_FXToolbarTab_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_isComposite", (PyCFunction) _wrap_FXToolbarTab_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_position", (PyCFunction) _wrap_FXToolbarTab_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_move", (PyCFunction) _wrap_FXToolbarTab_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_lower", (PyCFunction) _wrap_FXToolbarTab_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_layout", (PyCFunction) _wrap_FXToolbarTab_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_recalc", (PyCFunction) _wrap_FXToolbarTab_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_setDefault", (PyCFunction) _wrap_FXToolbarTab_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_killFocus", (PyCFunction) _wrap_FXToolbarTab_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_setFocus", (PyCFunction) _wrap_FXToolbarTab_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_canFocus", (PyCFunction) _wrap_FXToolbarTab_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_disable", (PyCFunction) _wrap_FXToolbarTab_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_enable", (PyCFunction) _wrap_FXToolbarTab_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_hide", (PyCFunction) _wrap_FXToolbarTab_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_show", (PyCFunction) _wrap_FXToolbarTab_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_getDefaultHeight", (PyCFunction) _wrap_FXToolbarTab_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_getDefaultWidth", (PyCFunction) _wrap_FXToolbarTab_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_resize", (PyCFunction) _wrap_FXToolbarTab_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_detach", (PyCFunction) _wrap_FXToolbarTab_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_destroy", (PyCFunction) _wrap_FXToolbarTab_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_create", (PyCFunction) _wrap_FXToolbarTab_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXToolbarTab_onDefault", (PyCFunction) _wrap_FXToolbarTab_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXToolbarTab", (PyCFunction) _wrap_new_FXToolbarTab, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_setActiveColor", (PyCFunction) _wrap_FX_ToolbarTab_setActiveColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_getActiveColor", (PyCFunction) _wrap_FX_ToolbarTab_getActiveColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_getTabStyle", (PyCFunction) _wrap_FX_ToolbarTab_getTabStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_setTabStyle", (PyCFunction) _wrap_FX_ToolbarTab_setTabStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_isCollapsed", (PyCFunction) _wrap_FX_ToolbarTab_isCollapsed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_collapse", (PyCFunction) _wrap_FX_ToolbarTab_collapse, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ToolbarTab", (PyCFunction) _wrap_new_FX_ToolbarTab, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onUpdUncollapse", (PyCFunction) _wrap_FX_ToolbarTab_onUpdUncollapse, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onCmdUncollapse", (PyCFunction) _wrap_FX_ToolbarTab_onCmdUncollapse, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onUpdCollapse", (PyCFunction) _wrap_FX_ToolbarTab_onUpdCollapse, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onCmdCollapse", (PyCFunction) _wrap_FX_ToolbarTab_onCmdCollapse, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onKeyRelease", (PyCFunction) _wrap_FX_ToolbarTab_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onKeyPress", (PyCFunction) _wrap_FX_ToolbarTab_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onLeftBtnRelease", (PyCFunction) _wrap_FX_ToolbarTab_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onLeftBtnPress", (PyCFunction) _wrap_FX_ToolbarTab_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onUngrabbed", (PyCFunction) _wrap_FX_ToolbarTab_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onLeave", (PyCFunction) _wrap_FX_ToolbarTab_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onEnter", (PyCFunction) _wrap_FX_ToolbarTab_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onUpdate", (PyCFunction) _wrap_FX_ToolbarTab_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToolbarTab_onPaint", (PyCFunction) _wrap_FX_ToolbarTab_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_setBackColor", (PyCFunction) _wrap_FXProgressBar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_reparent", (PyCFunction) _wrap_FXProgressBar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_doesSaveUnder", (PyCFunction) _wrap_FXProgressBar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_getHeightForWidth", (PyCFunction) _wrap_FXProgressBar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_getWidthForHeight", (PyCFunction) _wrap_FXProgressBar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_contains", (PyCFunction) _wrap_FXProgressBar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_isComposite", (PyCFunction) _wrap_FXProgressBar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_position", (PyCFunction) _wrap_FXProgressBar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_move", (PyCFunction) _wrap_FXProgressBar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_lower", (PyCFunction) _wrap_FXProgressBar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_layout", (PyCFunction) _wrap_FXProgressBar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_recalc", (PyCFunction) _wrap_FXProgressBar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_setDefault", (PyCFunction) _wrap_FXProgressBar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_killFocus", (PyCFunction) _wrap_FXProgressBar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_setFocus", (PyCFunction) _wrap_FXProgressBar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_canFocus", (PyCFunction) _wrap_FXProgressBar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_disable", (PyCFunction) _wrap_FXProgressBar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_enable", (PyCFunction) _wrap_FXProgressBar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_hide", (PyCFunction) _wrap_FXProgressBar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_show", (PyCFunction) _wrap_FXProgressBar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_getDefaultHeight", (PyCFunction) _wrap_FXProgressBar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_getDefaultWidth", (PyCFunction) _wrap_FXProgressBar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_resize", (PyCFunction) _wrap_FXProgressBar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_detach", (PyCFunction) _wrap_FXProgressBar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_destroy", (PyCFunction) _wrap_FXProgressBar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_create", (PyCFunction) _wrap_FXProgressBar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXProgressBar_onDefault", (PyCFunction) _wrap_FXProgressBar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXProgressBar", (PyCFunction) _wrap_new_FXProgressBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getBarStyle", (PyCFunction) _wrap_FX_ProgressBar_getBarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setBarStyle", (PyCFunction) _wrap_FX_ProgressBar_setBarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getFont", (PyCFunction) _wrap_FX_ProgressBar_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setFont", (PyCFunction) _wrap_FX_ProgressBar_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getTextAltColor", (PyCFunction) _wrap_FX_ProgressBar_getTextAltColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setTextAltColor", (PyCFunction) _wrap_FX_ProgressBar_setTextAltColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getTextColor", (PyCFunction) _wrap_FX_ProgressBar_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setTextColor", (PyCFunction) _wrap_FX_ProgressBar_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getBarColor", (PyCFunction) _wrap_FX_ProgressBar_getBarColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setBarColor", (PyCFunction) _wrap_FX_ProgressBar_setBarColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getBarBGColor", (PyCFunction) _wrap_FX_ProgressBar_getBarBGColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setBarBGColor", (PyCFunction) _wrap_FX_ProgressBar_setBarBGColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getBarSize", (PyCFunction) _wrap_FX_ProgressBar_getBarSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setBarSize", (PyCFunction) _wrap_FX_ProgressBar_setBarSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_showNumber", (PyCFunction) _wrap_FX_ProgressBar_showNumber, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_hideNumber", (PyCFunction) _wrap_FX_ProgressBar_hideNumber, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_increment", (PyCFunction) _wrap_FX_ProgressBar_increment, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getTotal", (PyCFunction) _wrap_FX_ProgressBar_getTotal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setTotal", (PyCFunction) _wrap_FX_ProgressBar_setTotal, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_getProgress", (PyCFunction) _wrap_FX_ProgressBar_getProgress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_setProgress", (PyCFunction) _wrap_FX_ProgressBar_setProgress, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ProgressBar", (PyCFunction) _wrap_new_FX_ProgressBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_onCmdGetIntValue", (PyCFunction) _wrap_FX_ProgressBar_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_onCmdSetIntValue", (PyCFunction) _wrap_FX_ProgressBar_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_onCmdSetValue", (PyCFunction) _wrap_FX_ProgressBar_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ProgressBar_onPaint", (PyCFunction) _wrap_FX_ProgressBar_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_setBackColor", (PyCFunction) _wrap_FXHeader_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_reparent", (PyCFunction) _wrap_FXHeader_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_doesSaveUnder", (PyCFunction) _wrap_FXHeader_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_getHeightForWidth", (PyCFunction) _wrap_FXHeader_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_getWidthForHeight", (PyCFunction) _wrap_FXHeader_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_contains", (PyCFunction) _wrap_FXHeader_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_isComposite", (PyCFunction) _wrap_FXHeader_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_position", (PyCFunction) _wrap_FXHeader_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_move", (PyCFunction) _wrap_FXHeader_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_lower", (PyCFunction) _wrap_FXHeader_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_layout", (PyCFunction) _wrap_FXHeader_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_recalc", (PyCFunction) _wrap_FXHeader_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_setDefault", (PyCFunction) _wrap_FXHeader_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_killFocus", (PyCFunction) _wrap_FXHeader_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_setFocus", (PyCFunction) _wrap_FXHeader_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_canFocus", (PyCFunction) _wrap_FXHeader_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_disable", (PyCFunction) _wrap_FXHeader_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_enable", (PyCFunction) _wrap_FXHeader_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_hide", (PyCFunction) _wrap_FXHeader_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_show", (PyCFunction) _wrap_FXHeader_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_getDefaultHeight", (PyCFunction) _wrap_FXHeader_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_getDefaultWidth", (PyCFunction) _wrap_FXHeader_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_resize", (PyCFunction) _wrap_FXHeader_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_detach", (PyCFunction) _wrap_FXHeader_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_destroy", (PyCFunction) _wrap_FXHeader_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_create", (PyCFunction) _wrap_FXHeader_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeader_onDefault", (PyCFunction) _wrap_FXHeader_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXHeader", (PyCFunction) _wrap_new_FXHeader, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getHelpText", (PyCFunction) _wrap_FX_Header_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setHelpText", (PyCFunction) _wrap_FX_Header_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getHeaderStyle", (PyCFunction) _wrap_FX_Header_getHeaderStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setHeaderStyle", (PyCFunction) _wrap_FX_Header_setHeaderStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setTextColor", (PyCFunction) _wrap_FX_Header_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getTextColor", (PyCFunction) _wrap_FX_Header_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getFont", (PyCFunction) _wrap_FX_Header_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setFont", (PyCFunction) _wrap_FX_Header_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemData", (PyCFunction) _wrap_FX_Header_getItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setItemData", (PyCFunction) _wrap_FX_Header_setItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemOffset", (PyCFunction) _wrap_FX_Header_getItemOffset, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemSize", (PyCFunction) _wrap_FX_Header_getItemSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setItemSize", (PyCFunction) _wrap_FX_Header_setItemSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemIcon", (PyCFunction) _wrap_FX_Header_getItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setItemIcon", (PyCFunction) _wrap_FX_Header_setItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemText", (PyCFunction) _wrap_FX_Header_getItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_setItemText", (PyCFunction) _wrap_FX_Header_setItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getItemAt", (PyCFunction) _wrap_FX_Header_getItemAt, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_clearItems", (PyCFunction) _wrap_FX_Header_clearItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_removeItem", (PyCFunction) _wrap_FX_Header_removeItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_prependItem2", (PyCFunction) _wrap_FX_Header_prependItem2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_prependItem", (PyCFunction) _wrap_FX_Header_prependItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_appendItem2", (PyCFunction) _wrap_FX_Header_appendItem2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_appendItem", (PyCFunction) _wrap_FX_Header_appendItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_insertItem2", (PyCFunction) _wrap_FX_Header_insertItem2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_insertItem", (PyCFunction) _wrap_FX_Header_insertItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_replaceItem2", (PyCFunction) _wrap_FX_Header_replaceItem2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_replaceItem", (PyCFunction) _wrap_FX_Header_replaceItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_retrieveItem", (PyCFunction) _wrap_FX_Header_retrieveItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_getNumItems", (PyCFunction) _wrap_FX_Header_getNumItems, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Header", (PyCFunction) _wrap_new_FX_Header, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onQueryHelp", (PyCFunction) _wrap_FX_Header_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onQueryTip", (PyCFunction) _wrap_FX_Header_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onTipTimer", (PyCFunction) _wrap_FX_Header_onTipTimer, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onMotion", (PyCFunction) _wrap_FX_Header_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onUngrabbed", (PyCFunction) _wrap_FX_Header_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onLeftBtnRelease", (PyCFunction) _wrap_FX_Header_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onLeftBtnPress", (PyCFunction) _wrap_FX_Header_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Header_onPaint", (PyCFunction) _wrap_FX_Header_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_destroy", (PyCFunction) _wrap_FXHeaderItem_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_detach", (PyCFunction) _wrap_FXHeaderItem_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_create", (PyCFunction) _wrap_FXHeaderItem_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_getHeight", (PyCFunction) _wrap_FXHeaderItem_getHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_getWidth", (PyCFunction) _wrap_FXHeaderItem_getWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_setIcon", (PyCFunction) _wrap_FXHeaderItem_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_setText", (PyCFunction) _wrap_FXHeaderItem_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FXHeaderItem_onDefault", (PyCFunction) _wrap_FXHeaderItem_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXHeaderItem", (PyCFunction) _wrap_new_FXHeaderItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_destroy", (PyCFunction) _wrap_FX_HeaderItem_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_detach", (PyCFunction) _wrap_FX_HeaderItem_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_create", (PyCFunction) _wrap_FX_HeaderItem_create, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getHeight", (PyCFunction) _wrap_FX_HeaderItem_getHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getWidth", (PyCFunction) _wrap_FX_HeaderItem_getWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getArrowDir", (PyCFunction) _wrap_FX_HeaderItem_getArrowDir, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_setArrowDir", (PyCFunction) _wrap_FX_HeaderItem_setArrowDir, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getSize", (PyCFunction) _wrap_FX_HeaderItem_getSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_setSize", (PyCFunction) _wrap_FX_HeaderItem_setSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getData", (PyCFunction) _wrap_FX_HeaderItem_getData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_setData", (PyCFunction) _wrap_FX_HeaderItem_setData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_setIcon", (PyCFunction) _wrap_FX_HeaderItem_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getIcon", (PyCFunction) _wrap_FX_HeaderItem_getIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_setText", (PyCFunction) _wrap_FX_HeaderItem_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_HeaderItem_getText", (PyCFunction) _wrap_FX_HeaderItem_getText, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_HeaderItem", (PyCFunction) _wrap_new_FX_HeaderItem, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_setBackColor", (PyCFunction) _wrap_FXSlider_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_reparent", (PyCFunction) _wrap_FXSlider_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_doesSaveUnder", (PyCFunction) _wrap_FXSlider_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_getHeightForWidth", (PyCFunction) _wrap_FXSlider_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_getWidthForHeight", (PyCFunction) _wrap_FXSlider_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_contains", (PyCFunction) _wrap_FXSlider_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_isComposite", (PyCFunction) _wrap_FXSlider_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_position", (PyCFunction) _wrap_FXSlider_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_move", (PyCFunction) _wrap_FXSlider_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_lower", (PyCFunction) _wrap_FXSlider_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_layout", (PyCFunction) _wrap_FXSlider_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_recalc", (PyCFunction) _wrap_FXSlider_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_setDefault", (PyCFunction) _wrap_FXSlider_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_killFocus", (PyCFunction) _wrap_FXSlider_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_setFocus", (PyCFunction) _wrap_FXSlider_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_canFocus", (PyCFunction) _wrap_FXSlider_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_disable", (PyCFunction) _wrap_FXSlider_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_enable", (PyCFunction) _wrap_FXSlider_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_hide", (PyCFunction) _wrap_FXSlider_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_show", (PyCFunction) _wrap_FXSlider_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_getDefaultHeight", (PyCFunction) _wrap_FXSlider_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_getDefaultWidth", (PyCFunction) _wrap_FXSlider_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_resize", (PyCFunction) _wrap_FXSlider_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_detach", (PyCFunction) _wrap_FXSlider_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_destroy", (PyCFunction) _wrap_FXSlider_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_create", (PyCFunction) _wrap_FXSlider_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXSlider_onDefault", (PyCFunction) _wrap_FXSlider_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXSlider", (PyCFunction) _wrap_new_FXSlider, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setTipText", (PyCFunction) _wrap_FX_Slider_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getTipText", (PyCFunction) _wrap_FX_Slider_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setHelpText", (PyCFunction) _wrap_FX_Slider_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getHelpText", (PyCFunction) _wrap_FX_Slider_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setBaseColor", (PyCFunction) _wrap_FX_Slider_setBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getBaseColor", (PyCFunction) _wrap_FX_Slider_getBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setBorderColor", (PyCFunction) _wrap_FX_Slider_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getBorderColor", (PyCFunction) _wrap_FX_Slider_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setShadowColor", (PyCFunction) _wrap_FX_Slider_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getShadowColor", (PyCFunction) _wrap_FX_Slider_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setHiliteColor", (PyCFunction) _wrap_FX_Slider_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getHiliteColor", (PyCFunction) _wrap_FX_Slider_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setSlotColor", (PyCFunction) _wrap_FX_Slider_setSlotColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getSlotColor", (PyCFunction) _wrap_FX_Slider_getSlotColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getTickDelta", (PyCFunction) _wrap_FX_Slider_getTickDelta, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setTickDelta", (PyCFunction) _wrap_FX_Slider_setTickDelta, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setIncrement", (PyCFunction) _wrap_FX_Slider_setIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getIncrement", (PyCFunction) _wrap_FX_Slider_getIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setSlotSize", (PyCFunction) _wrap_FX_Slider_setSlotSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getSlotSize", (PyCFunction) _wrap_FX_Slider_getSlotSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setHeadSize", (PyCFunction) _wrap_FX_Slider_setHeadSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getHeadSize", (PyCFunction) _wrap_FX_Slider_getHeadSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setSliderStyle", (PyCFunction) _wrap_FX_Slider_setSliderStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getSliderStyle", (PyCFunction) _wrap_FX_Slider_getSliderStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getValue", (PyCFunction) _wrap_FX_Slider_getValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setValue", (PyCFunction) _wrap_FX_Slider_setValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_getRange", (PyCFunction) _wrap_FX_Slider_getRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_setRange", (PyCFunction) _wrap_FX_Slider_setRange, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Slider", (PyCFunction) _wrap_new_FX_Slider, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onQueryTip", (PyCFunction) _wrap_FX_Slider_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onQueryHelp", (PyCFunction) _wrap_FX_Slider_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdGetRealRange", (PyCFunction) _wrap_FX_Slider_onCmdGetRealRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdSetRealRange", (PyCFunction) _wrap_FX_Slider_onCmdSetRealRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdGetIntRange", (PyCFunction) _wrap_FX_Slider_onCmdGetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdSetIntRange", (PyCFunction) _wrap_FX_Slider_onCmdSetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdGetRealValue", (PyCFunction) _wrap_FX_Slider_onCmdGetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdSetRealValue", (PyCFunction) _wrap_FX_Slider_onCmdSetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdGetIntValue", (PyCFunction) _wrap_FX_Slider_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdSetIntValue", (PyCFunction) _wrap_FX_Slider_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onCmdSetValue", (PyCFunction) _wrap_FX_Slider_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onTimeDec", (PyCFunction) _wrap_FX_Slider_onTimeDec, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onTimeInc", (PyCFunction) _wrap_FX_Slider_onTimeInc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onMotion", (PyCFunction) _wrap_FX_Slider_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onUngrabbed", (PyCFunction) _wrap_FX_Slider_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onMiddleBtnRelease", (PyCFunction) _wrap_FX_Slider_onMiddleBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onMiddleBtnPress", (PyCFunction) _wrap_FX_Slider_onMiddleBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onLeftBtnRelease", (PyCFunction) _wrap_FX_Slider_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onLeftBtnPress", (PyCFunction) _wrap_FX_Slider_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Slider_onPaint", (PyCFunction) _wrap_FX_Slider_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_setBackColor", (PyCFunction) _wrap_FXStatusbar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_reparent", (PyCFunction) _wrap_FXStatusbar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_doesSaveUnder", (PyCFunction) _wrap_FXStatusbar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_getHeightForWidth", (PyCFunction) _wrap_FXStatusbar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_getWidthForHeight", (PyCFunction) _wrap_FXStatusbar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_contains", (PyCFunction) _wrap_FXStatusbar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_isComposite", (PyCFunction) _wrap_FXStatusbar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_position", (PyCFunction) _wrap_FXStatusbar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_move", (PyCFunction) _wrap_FXStatusbar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_lower", (PyCFunction) _wrap_FXStatusbar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_layout", (PyCFunction) _wrap_FXStatusbar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_recalc", (PyCFunction) _wrap_FXStatusbar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_setDefault", (PyCFunction) _wrap_FXStatusbar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_killFocus", (PyCFunction) _wrap_FXStatusbar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_setFocus", (PyCFunction) _wrap_FXStatusbar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_canFocus", (PyCFunction) _wrap_FXStatusbar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_disable", (PyCFunction) _wrap_FXStatusbar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_enable", (PyCFunction) _wrap_FXStatusbar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_hide", (PyCFunction) _wrap_FXStatusbar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_show", (PyCFunction) _wrap_FXStatusbar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_getDefaultHeight", (PyCFunction) _wrap_FXStatusbar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_getDefaultWidth", (PyCFunction) _wrap_FXStatusbar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_resize", (PyCFunction) _wrap_FXStatusbar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_detach", (PyCFunction) _wrap_FXStatusbar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_destroy", (PyCFunction) _wrap_FXStatusbar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_create", (PyCFunction) _wrap_FXStatusbar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusbar_onDefault", (PyCFunction) _wrap_FXStatusbar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXStatusbar", (PyCFunction) _wrap_new_FXStatusbar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusbar_getDragCorner", (PyCFunction) _wrap_FX_Statusbar_getDragCorner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusbar_getStatusline", (PyCFunction) _wrap_FX_Statusbar_getStatusline, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusbar_getCornerStyle", (PyCFunction) _wrap_FX_Statusbar_getCornerStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusbar_setCornerStyle", (PyCFunction) _wrap_FX_Statusbar_setCornerStyle, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Statusbar", (PyCFunction) _wrap_new_FX_Statusbar, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_setBackColor", (PyCFunction) _wrap_FXStatusline_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_reparent", (PyCFunction) _wrap_FXStatusline_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_doesSaveUnder", (PyCFunction) _wrap_FXStatusline_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_getHeightForWidth", (PyCFunction) _wrap_FXStatusline_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_getWidthForHeight", (PyCFunction) _wrap_FXStatusline_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_contains", (PyCFunction) _wrap_FXStatusline_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_isComposite", (PyCFunction) _wrap_FXStatusline_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_position", (PyCFunction) _wrap_FXStatusline_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_move", (PyCFunction) _wrap_FXStatusline_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_lower", (PyCFunction) _wrap_FXStatusline_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_layout", (PyCFunction) _wrap_FXStatusline_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_recalc", (PyCFunction) _wrap_FXStatusline_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_setDefault", (PyCFunction) _wrap_FXStatusline_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_killFocus", (PyCFunction) _wrap_FXStatusline_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_setFocus", (PyCFunction) _wrap_FXStatusline_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_canFocus", (PyCFunction) _wrap_FXStatusline_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_disable", (PyCFunction) _wrap_FXStatusline_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_enable", (PyCFunction) _wrap_FXStatusline_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_hide", (PyCFunction) _wrap_FXStatusline_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_show", (PyCFunction) _wrap_FXStatusline_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_getDefaultHeight", (PyCFunction) _wrap_FXStatusline_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_getDefaultWidth", (PyCFunction) _wrap_FXStatusline_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_resize", (PyCFunction) _wrap_FXStatusline_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_detach", (PyCFunction) _wrap_FXStatusline_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_destroy", (PyCFunction) _wrap_FXStatusline_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_create", (PyCFunction) _wrap_FXStatusline_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXStatusline_onDefault", (PyCFunction) _wrap_FXStatusline_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXStatusline", (PyCFunction) _wrap_new_FXStatusline, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_setTextHighlightColor", (PyCFunction) _wrap_FX_Statusline_setTextHighlightColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_getTextHighlightColor", (PyCFunction) _wrap_FX_Statusline_getTextHighlightColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_setTextColor", (PyCFunction) _wrap_FX_Statusline_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_getTextColor", (PyCFunction) _wrap_FX_Statusline_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_getFont", (PyCFunction) _wrap_FX_Statusline_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_setFont", (PyCFunction) _wrap_FX_Statusline_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_getText", (PyCFunction) _wrap_FX_Statusline_getText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_getNormalText", (PyCFunction) _wrap_FX_Statusline_getNormalText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_setNormalText", (PyCFunction) _wrap_FX_Statusline_setNormalText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_setText", (PyCFunction) _wrap_FX_Statusline_setText, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Statusline", (PyCFunction) _wrap_new_FX_Statusline, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_onCmdSetStringValue", (PyCFunction) _wrap_FX_Statusline_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_onCmdGetStringValue", (PyCFunction) _wrap_FX_Statusline_onCmdGetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_onUpdate", (PyCFunction) _wrap_FX_Statusline_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Statusline_onPaint", (PyCFunction) _wrap_FX_Statusline_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_setBackColor", (PyCFunction) _wrap_FXDragCorner_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_reparent", (PyCFunction) _wrap_FXDragCorner_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_doesSaveUnder", (PyCFunction) _wrap_FXDragCorner_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_getHeightForWidth", (PyCFunction) _wrap_FXDragCorner_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_getWidthForHeight", (PyCFunction) _wrap_FXDragCorner_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_contains", (PyCFunction) _wrap_FXDragCorner_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_isComposite", (PyCFunction) _wrap_FXDragCorner_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_position", (PyCFunction) _wrap_FXDragCorner_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_move", (PyCFunction) _wrap_FXDragCorner_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_lower", (PyCFunction) _wrap_FXDragCorner_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_layout", (PyCFunction) _wrap_FXDragCorner_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_recalc", (PyCFunction) _wrap_FXDragCorner_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_setDefault", (PyCFunction) _wrap_FXDragCorner_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_killFocus", (PyCFunction) _wrap_FXDragCorner_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_setFocus", (PyCFunction) _wrap_FXDragCorner_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_canFocus", (PyCFunction) _wrap_FXDragCorner_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_disable", (PyCFunction) _wrap_FXDragCorner_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_enable", (PyCFunction) _wrap_FXDragCorner_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_hide", (PyCFunction) _wrap_FXDragCorner_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_show", (PyCFunction) _wrap_FXDragCorner_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_getDefaultHeight", (PyCFunction) _wrap_FXDragCorner_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_getDefaultWidth", (PyCFunction) _wrap_FXDragCorner_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_resize", (PyCFunction) _wrap_FXDragCorner_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_detach", (PyCFunction) _wrap_FXDragCorner_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_destroy", (PyCFunction) _wrap_FXDragCorner_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_create", (PyCFunction) _wrap_FXDragCorner_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXDragCorner_onDefault", (PyCFunction) _wrap_FXDragCorner_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDragCorner", (PyCFunction) _wrap_new_FXDragCorner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_setShadowColor", (PyCFunction) _wrap_FX_DragCorner_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_getShadowColor", (PyCFunction) _wrap_FX_DragCorner_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_setHiliteColor", (PyCFunction) _wrap_FX_DragCorner_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_getHiliteColor", (PyCFunction) _wrap_FX_DragCorner_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_DragCorner", (PyCFunction) _wrap_new_FX_DragCorner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_onMotion", (PyCFunction) _wrap_FX_DragCorner_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_onLeftBtnRelease", (PyCFunction) _wrap_FX_DragCorner_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_onLeftBtnPress", (PyCFunction) _wrap_FX_DragCorner_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_DragCorner_onPaint", (PyCFunction) _wrap_FX_DragCorner_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_setBackColor", (PyCFunction) _wrap_FXComboBox_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_reparent", (PyCFunction) _wrap_FXComboBox_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_doesSaveUnder", (PyCFunction) _wrap_FXComboBox_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_getHeightForWidth", (PyCFunction) _wrap_FXComboBox_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_getWidthForHeight", (PyCFunction) _wrap_FXComboBox_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_contains", (PyCFunction) _wrap_FXComboBox_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_isComposite", (PyCFunction) _wrap_FXComboBox_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_position", (PyCFunction) _wrap_FXComboBox_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_move", (PyCFunction) _wrap_FXComboBox_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_lower", (PyCFunction) _wrap_FXComboBox_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_layout", (PyCFunction) _wrap_FXComboBox_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_recalc", (PyCFunction) _wrap_FXComboBox_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_setDefault", (PyCFunction) _wrap_FXComboBox_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_killFocus", (PyCFunction) _wrap_FXComboBox_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_setFocus", (PyCFunction) _wrap_FXComboBox_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_canFocus", (PyCFunction) _wrap_FXComboBox_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_disable", (PyCFunction) _wrap_FXComboBox_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_enable", (PyCFunction) _wrap_FXComboBox_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_hide", (PyCFunction) _wrap_FXComboBox_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_show", (PyCFunction) _wrap_FXComboBox_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_getDefaultHeight", (PyCFunction) _wrap_FXComboBox_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_getDefaultWidth", (PyCFunction) _wrap_FXComboBox_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_resize", (PyCFunction) _wrap_FXComboBox_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_detach", (PyCFunction) _wrap_FXComboBox_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_destroy", (PyCFunction) _wrap_FXComboBox_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_create", (PyCFunction) _wrap_FXComboBox_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXComboBox_onDefault", (PyCFunction) _wrap_FXComboBox_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXComboBox", (PyCFunction) _wrap_new_FXComboBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getTipText", (PyCFunction) _wrap_FX_ComboBox_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setTipText", (PyCFunction) _wrap_FX_ComboBox_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getHelpText", (PyCFunction) _wrap_FX_ComboBox_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setHelpText", (PyCFunction) _wrap_FX_ComboBox_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setSortFunc", (PyCFunction) _wrap_FX_ComboBox_setSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getSortFunc", (PyCFunction) _wrap_FX_ComboBox_getSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getSelTextColor", (PyCFunction) _wrap_FX_ComboBox_getSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setSelTextColor", (PyCFunction) _wrap_FX_ComboBox_setSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getSelBackColor", (PyCFunction) _wrap_FX_ComboBox_getSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setSelBackColor", (PyCFunction) _wrap_FX_ComboBox_setSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getTextColor", (PyCFunction) _wrap_FX_ComboBox_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setTextColor", (PyCFunction) _wrap_FX_ComboBox_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getBackColor", (PyCFunction) _wrap_FX_ComboBox_getBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setBackColor", (PyCFunction) _wrap_FX_ComboBox_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getComboStyle", (PyCFunction) _wrap_FX_ComboBox_getComboStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setComboStyle", (PyCFunction) _wrap_FX_ComboBox_setComboStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getFont", (PyCFunction) _wrap_FX_ComboBox_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setFont", (PyCFunction) _wrap_FX_ComboBox_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_sortItems", (PyCFunction) _wrap_FX_ComboBox_sortItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_isPaneShown", (PyCFunction) _wrap_FX_ComboBox_isPaneShown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getItemData", (PyCFunction) _wrap_FX_ComboBox_getItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setItemData", (PyCFunction) _wrap_FX_ComboBox_setItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getItemText", (PyCFunction) _wrap_FX_ComboBox_getItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setItemText", (PyCFunction) _wrap_FX_ComboBox_setItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_clearItems", (PyCFunction) _wrap_FX_ComboBox_clearItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_removeItem", (PyCFunction) _wrap_FX_ComboBox_removeItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_prependItem", (PyCFunction) _wrap_FX_ComboBox_prependItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_appendItem", (PyCFunction) _wrap_FX_ComboBox_appendItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_insertItem", (PyCFunction) _wrap_FX_ComboBox_insertItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_replaceItem", (PyCFunction) _wrap_FX_ComboBox_replaceItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_retrieveItem", (PyCFunction) _wrap_FX_ComboBox_retrieveItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getCurrentItem", (PyCFunction) _wrap_FX_ComboBox_getCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setCurrentItem", (PyCFunction) _wrap_FX_ComboBox_setCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_isItemCurrent", (PyCFunction) _wrap_FX_ComboBox_isItemCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setNumVisible", (PyCFunction) _wrap_FX_ComboBox_setNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getNumVisible", (PyCFunction) _wrap_FX_ComboBox_getNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getNumItems", (PyCFunction) _wrap_FX_ComboBox_getNumItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getNumColumns", (PyCFunction) _wrap_FX_ComboBox_getNumColumns, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setNumColumns", (PyCFunction) _wrap_FX_ComboBox_setNumColumns, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_getText", (PyCFunction) _wrap_FX_ComboBox_getText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setText", (PyCFunction) _wrap_FX_ComboBox_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_setEditable", (PyCFunction) _wrap_FX_ComboBox_setEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_isEditable", (PyCFunction) _wrap_FX_ComboBox_isEditable, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ComboBox", (PyCFunction) _wrap_new_FX_ComboBox, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onUpdFmText", (PyCFunction) _wrap_FX_ComboBox_onUpdFmText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onFwdToText", (PyCFunction) _wrap_FX_ComboBox_onFwdToText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onListClicked", (PyCFunction) _wrap_FX_ComboBox_onListClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onTextCommand", (PyCFunction) _wrap_FX_ComboBox_onTextCommand, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onTextChanged", (PyCFunction) _wrap_FX_ComboBox_onTextChanged, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onTextButton", (PyCFunction) _wrap_FX_ComboBox_onTextButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onFocusDown", (PyCFunction) _wrap_FX_ComboBox_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ComboBox_onFocusUp", (PyCFunction) _wrap_FX_ComboBox_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_moveContents", (PyCFunction) _wrap_FXList_moveContents, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getViewportHeight", (PyCFunction) _wrap_FXList_getViewportHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getViewportWidth", (PyCFunction) _wrap_FXList_getViewportWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getContentHeight", (PyCFunction) _wrap_FXList_getContentHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getContentWidth", (PyCFunction) _wrap_FXList_getContentWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_setBackColor", (PyCFunction) _wrap_FXList_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_reparent", (PyCFunction) _wrap_FXList_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_doesSaveUnder", (PyCFunction) _wrap_FXList_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getHeightForWidth", (PyCFunction) _wrap_FXList_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getWidthForHeight", (PyCFunction) _wrap_FXList_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_contains", (PyCFunction) _wrap_FXList_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_isComposite", (PyCFunction) _wrap_FXList_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_position", (PyCFunction) _wrap_FXList_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_move", (PyCFunction) _wrap_FXList_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_lower", (PyCFunction) _wrap_FXList_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_layout", (PyCFunction) _wrap_FXList_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_recalc", (PyCFunction) _wrap_FXList_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_setDefault", (PyCFunction) _wrap_FXList_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_killFocus", (PyCFunction) _wrap_FXList_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_setFocus", (PyCFunction) _wrap_FXList_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_canFocus", (PyCFunction) _wrap_FXList_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_disable", (PyCFunction) _wrap_FXList_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_enable", (PyCFunction) _wrap_FXList_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_hide", (PyCFunction) _wrap_FXList_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_show", (PyCFunction) _wrap_FXList_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getDefaultHeight", (PyCFunction) _wrap_FXList_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_getDefaultWidth", (PyCFunction) _wrap_FXList_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_resize", (PyCFunction) _wrap_FXList_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_detach", (PyCFunction) _wrap_FXList_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_destroy", (PyCFunction) _wrap_FXList_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_create", (PyCFunction) _wrap_FXList_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXList_onDefault", (PyCFunction) _wrap_FXList_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXList", (PyCFunction) _wrap_new_FXList, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getHelpText", (PyCFunction) _wrap_FX_List_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setHelpText", (PyCFunction) _wrap_FX_List_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setListStyle", (PyCFunction) _wrap_FX_List_setListStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getListStyle", (PyCFunction) _wrap_FX_List_getListStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setSortFunc", (PyCFunction) _wrap_FX_List_setSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getSortFunc", (PyCFunction) _wrap_FX_List_getSortFunc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setSelTextColor", (PyCFunction) _wrap_FX_List_setSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getSelTextColor", (PyCFunction) _wrap_FX_List_getSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setSelBackColor", (PyCFunction) _wrap_FX_List_setSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getSelBackColor", (PyCFunction) _wrap_FX_List_getSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setTextColor", (PyCFunction) _wrap_FX_List_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getTextColor", (PyCFunction) _wrap_FX_List_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getFont", (PyCFunction) _wrap_FX_List_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setFont", (PyCFunction) _wrap_FX_List_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_killSelection", (PyCFunction) _wrap_FX_List_killSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_extendSelection", (PyCFunction) _wrap_FX_List_extendSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getCursorItem", (PyCFunction) _wrap_FX_List_getCursorItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getAnchorItem", (PyCFunction) _wrap_FX_List_getAnchorItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setAnchorItem", (PyCFunction) _wrap_FX_List_setAnchorItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getCurrentItem", (PyCFunction) _wrap_FX_List_getCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setCurrentItem", (PyCFunction) _wrap_FX_List_setCurrentItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_toggleItem", (PyCFunction) _wrap_FX_List_toggleItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_deselectItem", (PyCFunction) _wrap_FX_List_deselectItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_selectItem", (PyCFunction) _wrap_FX_List_selectItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_disableItem", (PyCFunction) _wrap_FX_List_disableItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_enableItem", (PyCFunction) _wrap_FX_List_enableItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_isItemEnabled", (PyCFunction) _wrap_FX_List_isItemEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_isItemVisible", (PyCFunction) _wrap_FX_List_isItemVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_isItemCurrent", (PyCFunction) _wrap_FX_List_isItemCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_isItemSelected", (PyCFunction) _wrap_FX_List_isItemSelected, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemData", (PyCFunction) _wrap_FX_List_getItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setItemData", (PyCFunction) _wrap_FX_List_setItemData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemIcon", (PyCFunction) _wrap_FX_List_getItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setItemIcon", (PyCFunction) _wrap_FX_List_setItemIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemText", (PyCFunction) _wrap_FX_List_getItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setItemText", (PyCFunction) _wrap_FX_List_setItemText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_updateItem", (PyCFunction) _wrap_FX_List_updateItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_makeItemVisible", (PyCFunction) _wrap_FX_List_makeItemVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_findItem", (PyCFunction) _wrap_FX_List_findItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_hitItem", (PyCFunction) _wrap_FX_List_hitItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemAt", (PyCFunction) _wrap_FX_List_getItemAt, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemHeight", (PyCFunction) _wrap_FX_List_getItemHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getItemWidth", (PyCFunction) _wrap_FX_List_getItemWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_clearItems", (PyCFunction) _wrap_FX_List_clearItems, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_removeItem", (PyCFunction) _wrap_FX_List_removeItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_prependItemStr", (PyCFunction) _wrap_FX_List_prependItemStr, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_prependItem", (PyCFunction) _wrap_FX_List_prependItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_appendItemStr", (PyCFunction) _wrap_FX_List_appendItemStr, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_appendItem", (PyCFunction) _wrap_FX_List_appendItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_replaceItemStr", (PyCFunction) _wrap_FX_List_replaceItemStr, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_replaceItem", (PyCFunction) _wrap_FX_List_replaceItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_insertItemStr", (PyCFunction) _wrap_FX_List_insertItemStr, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_insertItem", (PyCFunction) _wrap_FX_List_insertItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_retrieveItem", (PyCFunction) _wrap_FX_List_retrieveItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_setNumVisible", (PyCFunction) _wrap_FX_List_setNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getNumVisible", (PyCFunction) _wrap_FX_List_getNumVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_getNumItems", (PyCFunction) _wrap_FX_List_getNumItems, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_List", (PyCFunction) _wrap_new_FX_List, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onCmdSetIntValue", (PyCFunction) _wrap_FX_List_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onCmdGetIntValue", (PyCFunction) _wrap_FX_List_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onCmdSetValue", (PyCFunction) _wrap_FX_List_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onLookupTimer", (PyCFunction) _wrap_FX_List_onLookupTimer, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onTipTimer", (PyCFunction) _wrap_FX_List_onTipTimer, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onCommand", (PyCFunction) _wrap_FX_List_onCommand, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onQueryHelp", (PyCFunction) _wrap_FX_List_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onQueryTip", (PyCFunction) _wrap_FX_List_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onTripleClicked", (PyCFunction) _wrap_FX_List_onTripleClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onDoubleClicked", (PyCFunction) _wrap_FX_List_onDoubleClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onClicked", (PyCFunction) _wrap_FX_List_onClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onAutoScroll", (PyCFunction) _wrap_FX_List_onAutoScroll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onFocusOut", (PyCFunction) _wrap_FX_List_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onFocusIn", (PyCFunction) _wrap_FX_List_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onMotion", (PyCFunction) _wrap_FX_List_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onRightBtnRelease", (PyCFunction) _wrap_FX_List_onRightBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onRightBtnPress", (PyCFunction) _wrap_FX_List_onRightBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onLeftBtnRelease", (PyCFunction) _wrap_FX_List_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onLeftBtnPress", (PyCFunction) _wrap_FX_List_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onKeyRelease", (PyCFunction) _wrap_FX_List_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onKeyPress", (PyCFunction) _wrap_FX_List_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onUngrabbed", (PyCFunction) _wrap_FX_List_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onLeave", (PyCFunction) _wrap_FX_List_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onEnter", (PyCFunction) _wrap_FX_List_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_List_onPaint", (PyCFunction) _wrap_FX_List_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_destroy", (PyCFunction) _wrap_FXListItem_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_detach", (PyCFunction) _wrap_FXListItem_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_create", (PyCFunction) _wrap_FXListItem_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_getHeight", (PyCFunction) _wrap_FXListItem_getHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_getWidth", (PyCFunction) _wrap_FXListItem_getWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setIconOwned", (PyCFunction) _wrap_FXListItem_setIconOwned, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setDraggable", (PyCFunction) _wrap_FXListItem_setDraggable, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setEnabled", (PyCFunction) _wrap_FXListItem_setEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setSelected", (PyCFunction) _wrap_FXListItem_setSelected, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setFocus", (PyCFunction) _wrap_FXListItem_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setIcon", (PyCFunction) _wrap_FXListItem_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_setText", (PyCFunction) _wrap_FXListItem_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FXListItem_onDefault", (PyCFunction) _wrap_FXListItem_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXListItem", (PyCFunction) _wrap_new_FXListItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_destroy", (PyCFunction) _wrap_FX_ListItem_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_detach", (PyCFunction) _wrap_FX_ListItem_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_create", (PyCFunction) _wrap_FX_ListItem_create, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_getHeight", (PyCFunction) _wrap_FX_ListItem_getHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_getWidth", (PyCFunction) _wrap_FX_ListItem_getWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setIconOwned", (PyCFunction) _wrap_FX_ListItem_setIconOwned, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_isIconOwned", (PyCFunction) _wrap_FX_ListItem_isIconOwned, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setDraggable", (PyCFunction) _wrap_FX_ListItem_setDraggable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_isDraggable", (PyCFunction) _wrap_FX_ListItem_isDraggable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setEnabled", (PyCFunction) _wrap_FX_ListItem_setEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_isEnabled", (PyCFunction) _wrap_FX_ListItem_isEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setSelected", (PyCFunction) _wrap_FX_ListItem_setSelected, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_isSelected", (PyCFunction) _wrap_FX_ListItem_isSelected, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setFocus", (PyCFunction) _wrap_FX_ListItem_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_hasFocus", (PyCFunction) _wrap_FX_ListItem_hasFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_getData", (PyCFunction) _wrap_FX_ListItem_getData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setData", (PyCFunction) _wrap_FX_ListItem_setData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setIcon", (PyCFunction) _wrap_FX_ListItem_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_getIcon", (PyCFunction) _wrap_FX_ListItem_getIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_setText", (PyCFunction) _wrap_FX_ListItem_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ListItem_getText", (PyCFunction) _wrap_FX_ListItem_getText, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ListItem", (PyCFunction) _wrap_new_FX_ListItem, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_setBackColor", (PyCFunction) _wrap_FXScrollCorner_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_reparent", (PyCFunction) _wrap_FXScrollCorner_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_doesSaveUnder", (PyCFunction) _wrap_FXScrollCorner_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_getHeightForWidth", (PyCFunction) _wrap_FXScrollCorner_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_getWidthForHeight", (PyCFunction) _wrap_FXScrollCorner_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_contains", (PyCFunction) _wrap_FXScrollCorner_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_isComposite", (PyCFunction) _wrap_FXScrollCorner_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_position", (PyCFunction) _wrap_FXScrollCorner_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_move", (PyCFunction) _wrap_FXScrollCorner_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_lower", (PyCFunction) _wrap_FXScrollCorner_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_layout", (PyCFunction) _wrap_FXScrollCorner_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_recalc", (PyCFunction) _wrap_FXScrollCorner_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_setDefault", (PyCFunction) _wrap_FXScrollCorner_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_killFocus", (PyCFunction) _wrap_FXScrollCorner_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_setFocus", (PyCFunction) _wrap_FXScrollCorner_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_canFocus", (PyCFunction) _wrap_FXScrollCorner_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_disable", (PyCFunction) _wrap_FXScrollCorner_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_enable", (PyCFunction) _wrap_FXScrollCorner_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_hide", (PyCFunction) _wrap_FXScrollCorner_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_show", (PyCFunction) _wrap_FXScrollCorner_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_getDefaultHeight", (PyCFunction) _wrap_FXScrollCorner_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_getDefaultWidth", (PyCFunction) _wrap_FXScrollCorner_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_resize", (PyCFunction) _wrap_FXScrollCorner_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_detach", (PyCFunction) _wrap_FXScrollCorner_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_destroy", (PyCFunction) _wrap_FXScrollCorner_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_create", (PyCFunction) _wrap_FXScrollCorner_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollCorner_onDefault", (PyCFunction) _wrap_FXScrollCorner_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXScrollCorner", (PyCFunction) _wrap_new_FXScrollCorner, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ScrollCorner", (PyCFunction) _wrap_new_FX_ScrollCorner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ScrollCorner_onPaint", (PyCFunction) _wrap_FX_ScrollCorner_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_setBackColor", (PyCFunction) _wrap_FXScrollbar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_reparent", (PyCFunction) _wrap_FXScrollbar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_doesSaveUnder", (PyCFunction) _wrap_FXScrollbar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_getHeightForWidth", (PyCFunction) _wrap_FXScrollbar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_getWidthForHeight", (PyCFunction) _wrap_FXScrollbar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_contains", (PyCFunction) _wrap_FXScrollbar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_isComposite", (PyCFunction) _wrap_FXScrollbar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_position", (PyCFunction) _wrap_FXScrollbar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_move", (PyCFunction) _wrap_FXScrollbar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_lower", (PyCFunction) _wrap_FXScrollbar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_layout", (PyCFunction) _wrap_FXScrollbar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_recalc", (PyCFunction) _wrap_FXScrollbar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_setDefault", (PyCFunction) _wrap_FXScrollbar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_killFocus", (PyCFunction) _wrap_FXScrollbar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_setFocus", (PyCFunction) _wrap_FXScrollbar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_canFocus", (PyCFunction) _wrap_FXScrollbar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_disable", (PyCFunction) _wrap_FXScrollbar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_enable", (PyCFunction) _wrap_FXScrollbar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_hide", (PyCFunction) _wrap_FXScrollbar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_show", (PyCFunction) _wrap_FXScrollbar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_getDefaultHeight", (PyCFunction) _wrap_FXScrollbar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_getDefaultWidth", (PyCFunction) _wrap_FXScrollbar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_resize", (PyCFunction) _wrap_FXScrollbar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_detach", (PyCFunction) _wrap_FXScrollbar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_destroy", (PyCFunction) _wrap_FXScrollbar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_create", (PyCFunction) _wrap_FXScrollbar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXScrollbar_onDefault", (PyCFunction) _wrap_FXScrollbar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXScrollbar", (PyCFunction) _wrap_new_FXScrollbar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setScrollbarStyle", (PyCFunction) _wrap_FX_Scrollbar_setScrollbarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getScrollbarStyle", (PyCFunction) _wrap_FX_Scrollbar_getScrollbarStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setBorderColor", (PyCFunction) _wrap_FX_Scrollbar_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getBorderColor", (PyCFunction) _wrap_FX_Scrollbar_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getShadowColor", (PyCFunction) _wrap_FX_Scrollbar_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setShadowColor", (PyCFunction) _wrap_FX_Scrollbar_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getHiliteColor", (PyCFunction) _wrap_FX_Scrollbar_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setHiliteColor", (PyCFunction) _wrap_FX_Scrollbar_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getPosition", (PyCFunction) _wrap_FX_Scrollbar_getPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setPosition", (PyCFunction) _wrap_FX_Scrollbar_setPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getLine", (PyCFunction) _wrap_FX_Scrollbar_getLine, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setLine", (PyCFunction) _wrap_FX_Scrollbar_setLine, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getPage", (PyCFunction) _wrap_FX_Scrollbar_getPage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setPage", (PyCFunction) _wrap_FX_Scrollbar_setPage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_getRange", (PyCFunction) _wrap_FX_Scrollbar_getRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_setRange", (PyCFunction) _wrap_FX_Scrollbar_setRange, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Scrollbar", (PyCFunction) _wrap_new_FX_Scrollbar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onCmdGetIntRange", (PyCFunction) _wrap_FX_Scrollbar_onCmdGetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onCmdSetIntRange", (PyCFunction) _wrap_FX_Scrollbar_onCmdSetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onCmdGetIntValue", (PyCFunction) _wrap_FX_Scrollbar_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onCmdSetIntValue", (PyCFunction) _wrap_FX_Scrollbar_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onCmdSetValue", (PyCFunction) _wrap_FX_Scrollbar_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeWheel", (PyCFunction) _wrap_FX_Scrollbar_onTimeWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeDecPage", (PyCFunction) _wrap_FX_Scrollbar_onTimeDecPage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeDecLine", (PyCFunction) _wrap_FX_Scrollbar_onTimeDecLine, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeDecPix", (PyCFunction) _wrap_FX_Scrollbar_onTimeDecPix, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeIncPage", (PyCFunction) _wrap_FX_Scrollbar_onTimeIncPage, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeIncLine", (PyCFunction) _wrap_FX_Scrollbar_onTimeIncLine, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onTimeIncPix", (PyCFunction) _wrap_FX_Scrollbar_onTimeIncPix, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onUngrabbed", (PyCFunction) _wrap_FX_Scrollbar_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onRightBtnRelease", (PyCFunction) _wrap_FX_Scrollbar_onRightBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onRightBtnPress", (PyCFunction) _wrap_FX_Scrollbar_onRightBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onMiddleBtnRelease", (PyCFunction) _wrap_FX_Scrollbar_onMiddleBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onMiddleBtnPress", (PyCFunction) _wrap_FX_Scrollbar_onMiddleBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onLeftBtnRelease", (PyCFunction) _wrap_FX_Scrollbar_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onLeftBtnPress", (PyCFunction) _wrap_FX_Scrollbar_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onMouseWheel", (PyCFunction) _wrap_FX_Scrollbar_onMouseWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onMotion", (PyCFunction) _wrap_FX_Scrollbar_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Scrollbar_onPaint", (PyCFunction) _wrap_FX_Scrollbar_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_setCurrent", (PyCFunction) _wrap_FXTabBook_setCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_setBackColor", (PyCFunction) _wrap_FXTabBook_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_reparent", (PyCFunction) _wrap_FXTabBook_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_doesSaveUnder", (PyCFunction) _wrap_FXTabBook_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_getHeightForWidth", (PyCFunction) _wrap_FXTabBook_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_getWidthForHeight", (PyCFunction) _wrap_FXTabBook_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_contains", (PyCFunction) _wrap_FXTabBook_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_isComposite", (PyCFunction) _wrap_FXTabBook_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_position", (PyCFunction) _wrap_FXTabBook_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_move", (PyCFunction) _wrap_FXTabBook_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_lower", (PyCFunction) _wrap_FXTabBook_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_layout", (PyCFunction) _wrap_FXTabBook_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_recalc", (PyCFunction) _wrap_FXTabBook_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_setDefault", (PyCFunction) _wrap_FXTabBook_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_killFocus", (PyCFunction) _wrap_FXTabBook_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_setFocus", (PyCFunction) _wrap_FXTabBook_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_canFocus", (PyCFunction) _wrap_FXTabBook_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_disable", (PyCFunction) _wrap_FXTabBook_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_enable", (PyCFunction) _wrap_FXTabBook_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_hide", (PyCFunction) _wrap_FXTabBook_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_show", (PyCFunction) _wrap_FXTabBook_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_getDefaultHeight", (PyCFunction) _wrap_FXTabBook_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_getDefaultWidth", (PyCFunction) _wrap_FXTabBook_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_resize", (PyCFunction) _wrap_FXTabBook_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_detach", (PyCFunction) _wrap_FXTabBook_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_destroy", (PyCFunction) _wrap_FXTabBook_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_create", (PyCFunction) _wrap_FXTabBook_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBook_onDefault", (PyCFunction) _wrap_FXTabBook_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTabBook", (PyCFunction) _wrap_new_FXTabBook, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TabBook", (PyCFunction) _wrap_new_FX_TabBook, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onCmdOpenItem", (PyCFunction) _wrap_FX_TabBook_onCmdOpenItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusRight", (PyCFunction) _wrap_FX_TabBook_onFocusRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusLeft", (PyCFunction) _wrap_FX_TabBook_onFocusLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusDown", (PyCFunction) _wrap_FX_TabBook_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusUp", (PyCFunction) _wrap_FX_TabBook_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusPrev", (PyCFunction) _wrap_FX_TabBook_onFocusPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onFocusNext", (PyCFunction) _wrap_FX_TabBook_onFocusNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBook_onPaint", (PyCFunction) _wrap_FX_TabBook_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_setBackColor", (PyCFunction) _wrap_FXTabItem_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_reparent", (PyCFunction) _wrap_FXTabItem_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_doesSaveUnder", (PyCFunction) _wrap_FXTabItem_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_getHeightForWidth", (PyCFunction) _wrap_FXTabItem_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_getWidthForHeight", (PyCFunction) _wrap_FXTabItem_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_contains", (PyCFunction) _wrap_FXTabItem_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_isComposite", (PyCFunction) _wrap_FXTabItem_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_position", (PyCFunction) _wrap_FXTabItem_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_move", (PyCFunction) _wrap_FXTabItem_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_lower", (PyCFunction) _wrap_FXTabItem_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_layout", (PyCFunction) _wrap_FXTabItem_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_recalc", (PyCFunction) _wrap_FXTabItem_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_setDefault", (PyCFunction) _wrap_FXTabItem_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_killFocus", (PyCFunction) _wrap_FXTabItem_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_setFocus", (PyCFunction) _wrap_FXTabItem_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_canFocus", (PyCFunction) _wrap_FXTabItem_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_disable", (PyCFunction) _wrap_FXTabItem_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_enable", (PyCFunction) _wrap_FXTabItem_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_hide", (PyCFunction) _wrap_FXTabItem_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_show", (PyCFunction) _wrap_FXTabItem_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_getDefaultHeight", (PyCFunction) _wrap_FXTabItem_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_getDefaultWidth", (PyCFunction) _wrap_FXTabItem_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_resize", (PyCFunction) _wrap_FXTabItem_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_detach", (PyCFunction) _wrap_FXTabItem_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_destroy", (PyCFunction) _wrap_FXTabItem_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_create", (PyCFunction) _wrap_FXTabItem_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabItem_onDefault", (PyCFunction) _wrap_FXTabItem_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTabItem", (PyCFunction) _wrap_new_FXTabItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_setTabOrientation", (PyCFunction) _wrap_FX_TabItem_setTabOrientation, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_getTabOrientation", (PyCFunction) _wrap_FX_TabItem_getTabOrientation, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TabItem", (PyCFunction) _wrap_new_FX_TabItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onHotKeyRelease", (PyCFunction) _wrap_FX_TabItem_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onHotKeyPress", (PyCFunction) _wrap_FX_TabItem_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onKeyRelease", (PyCFunction) _wrap_FX_TabItem_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onKeyPress", (PyCFunction) _wrap_FX_TabItem_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onLeftBtnRelease", (PyCFunction) _wrap_FX_TabItem_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onLeftBtnPress", (PyCFunction) _wrap_FX_TabItem_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onUngrabbed", (PyCFunction) _wrap_FX_TabItem_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onFocusOut", (PyCFunction) _wrap_FX_TabItem_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onFocusIn", (PyCFunction) _wrap_FX_TabItem_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabItem_onPaint", (PyCFunction) _wrap_FX_TabItem_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_setCurrent", (PyCFunction) _wrap_FXTabBar_setCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_setBackColor", (PyCFunction) _wrap_FXTabBar_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_reparent", (PyCFunction) _wrap_FXTabBar_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_doesSaveUnder", (PyCFunction) _wrap_FXTabBar_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_getHeightForWidth", (PyCFunction) _wrap_FXTabBar_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_getWidthForHeight", (PyCFunction) _wrap_FXTabBar_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_contains", (PyCFunction) _wrap_FXTabBar_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_isComposite", (PyCFunction) _wrap_FXTabBar_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_position", (PyCFunction) _wrap_FXTabBar_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_move", (PyCFunction) _wrap_FXTabBar_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_lower", (PyCFunction) _wrap_FXTabBar_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_layout", (PyCFunction) _wrap_FXTabBar_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_recalc", (PyCFunction) _wrap_FXTabBar_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_setDefault", (PyCFunction) _wrap_FXTabBar_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_killFocus", (PyCFunction) _wrap_FXTabBar_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_setFocus", (PyCFunction) _wrap_FXTabBar_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_canFocus", (PyCFunction) _wrap_FXTabBar_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_disable", (PyCFunction) _wrap_FXTabBar_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_enable", (PyCFunction) _wrap_FXTabBar_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_hide", (PyCFunction) _wrap_FXTabBar_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_show", (PyCFunction) _wrap_FXTabBar_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_getDefaultHeight", (PyCFunction) _wrap_FXTabBar_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_getDefaultWidth", (PyCFunction) _wrap_FXTabBar_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_resize", (PyCFunction) _wrap_FXTabBar_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_detach", (PyCFunction) _wrap_FXTabBar_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_destroy", (PyCFunction) _wrap_FXTabBar_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_create", (PyCFunction) _wrap_FXTabBar_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTabBar_onDefault", (PyCFunction) _wrap_FXTabBar_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTabBar", (PyCFunction) _wrap_new_FXTabBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_setTabStyle", (PyCFunction) _wrap_FX_TabBar_setTabStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_getTabStyle", (PyCFunction) _wrap_FX_TabBar_getTabStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_getCurrent", (PyCFunction) _wrap_FX_TabBar_getCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_setCurrent", (PyCFunction) _wrap_FX_TabBar_setCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TabBar", (PyCFunction) _wrap_new_FX_TabBar, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onUpdOpen", (PyCFunction) _wrap_FX_TabBar_onUpdOpen, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onCmdOpen", (PyCFunction) _wrap_FX_TabBar_onCmdOpen, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onCmdGetIntValue", (PyCFunction) _wrap_FX_TabBar_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onCmdSetIntValue", (PyCFunction) _wrap_FX_TabBar_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onCmdSetValue", (PyCFunction) _wrap_FX_TabBar_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onCmdOpenItem", (PyCFunction) _wrap_FX_TabBar_onCmdOpenItem, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusRight", (PyCFunction) _wrap_FX_TabBar_onFocusRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusLeft", (PyCFunction) _wrap_FX_TabBar_onFocusLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusDown", (PyCFunction) _wrap_FX_TabBar_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusUp", (PyCFunction) _wrap_FX_TabBar_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusPrev", (PyCFunction) _wrap_FX_TabBar_onFocusPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onFocusNext", (PyCFunction) _wrap_FX_TabBar_onFocusNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TabBar_onPaint", (PyCFunction) _wrap_FX_TabBar_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_setBackColor", (PyCFunction) _wrap_FXOptionMenu_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_reparent", (PyCFunction) _wrap_FXOptionMenu_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_doesSaveUnder", (PyCFunction) _wrap_FXOptionMenu_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_getHeightForWidth", (PyCFunction) _wrap_FXOptionMenu_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_getWidthForHeight", (PyCFunction) _wrap_FXOptionMenu_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_contains", (PyCFunction) _wrap_FXOptionMenu_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_isComposite", (PyCFunction) _wrap_FXOptionMenu_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_position", (PyCFunction) _wrap_FXOptionMenu_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_move", (PyCFunction) _wrap_FXOptionMenu_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_lower", (PyCFunction) _wrap_FXOptionMenu_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_layout", (PyCFunction) _wrap_FXOptionMenu_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_recalc", (PyCFunction) _wrap_FXOptionMenu_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_setDefault", (PyCFunction) _wrap_FXOptionMenu_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_killFocus", (PyCFunction) _wrap_FXOptionMenu_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_setFocus", (PyCFunction) _wrap_FXOptionMenu_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_canFocus", (PyCFunction) _wrap_FXOptionMenu_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_disable", (PyCFunction) _wrap_FXOptionMenu_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_enable", (PyCFunction) _wrap_FXOptionMenu_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_hide", (PyCFunction) _wrap_FXOptionMenu_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_show", (PyCFunction) _wrap_FXOptionMenu_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_getDefaultHeight", (PyCFunction) _wrap_FXOptionMenu_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_getDefaultWidth", (PyCFunction) _wrap_FXOptionMenu_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_resize", (PyCFunction) _wrap_FXOptionMenu_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_detach", (PyCFunction) _wrap_FXOptionMenu_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_destroy", (PyCFunction) _wrap_FXOptionMenu_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_create", (PyCFunction) _wrap_FXOptionMenu_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXOptionMenu_onDefault", (PyCFunction) _wrap_FXOptionMenu_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXOptionMenu", (PyCFunction) _wrap_new_FXOptionMenu, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_isPopped", (PyCFunction) _wrap_FX_OptionMenu_isPopped, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_getPopup", (PyCFunction) _wrap_FX_OptionMenu_getPopup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_setPopup", (PyCFunction) _wrap_FX_OptionMenu_setPopup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_getCurrentNo", (PyCFunction) _wrap_FX_OptionMenu_getCurrentNo, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_setCurrentNo", (PyCFunction) _wrap_FX_OptionMenu_setCurrentNo, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_getCurrent", (PyCFunction) _wrap_FX_OptionMenu_getCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_setCurrent", (PyCFunction) _wrap_FX_OptionMenu_setCurrent, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_OptionMenu", (PyCFunction) _wrap_new_FX_OptionMenu, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onCmdGetIntValue", (PyCFunction) _wrap_FX_OptionMenu_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onCmdSetIntValue", (PyCFunction) _wrap_FX_OptionMenu_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onCmdSetValue", (PyCFunction) _wrap_FX_OptionMenu_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onQueryTip", (PyCFunction) _wrap_FX_OptionMenu_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onQueryHelp", (PyCFunction) _wrap_FX_OptionMenu_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onCmdUnpost", (PyCFunction) _wrap_FX_OptionMenu_onCmdUnpost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onCmdPost", (PyCFunction) _wrap_FX_OptionMenu_onCmdPost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onKeyRelease", (PyCFunction) _wrap_FX_OptionMenu_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onKeyPress", (PyCFunction) _wrap_FX_OptionMenu_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onMotion", (PyCFunction) _wrap_FX_OptionMenu_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onFocusOut", (PyCFunction) _wrap_FX_OptionMenu_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onFocusIn", (PyCFunction) _wrap_FX_OptionMenu_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onLeftBtnRelease", (PyCFunction) _wrap_FX_OptionMenu_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onLeftBtnPress", (PyCFunction) _wrap_FX_OptionMenu_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_OptionMenu_onPaint", (PyCFunction) _wrap_FX_OptionMenu_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_setBackColor", (PyCFunction) _wrap_FXOption_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_reparent", (PyCFunction) _wrap_FXOption_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_doesSaveUnder", (PyCFunction) _wrap_FXOption_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_getHeightForWidth", (PyCFunction) _wrap_FXOption_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_getWidthForHeight", (PyCFunction) _wrap_FXOption_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_contains", (PyCFunction) _wrap_FXOption_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_isComposite", (PyCFunction) _wrap_FXOption_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_position", (PyCFunction) _wrap_FXOption_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_move", (PyCFunction) _wrap_FXOption_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_lower", (PyCFunction) _wrap_FXOption_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_layout", (PyCFunction) _wrap_FXOption_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_recalc", (PyCFunction) _wrap_FXOption_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_setDefault", (PyCFunction) _wrap_FXOption_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_killFocus", (PyCFunction) _wrap_FXOption_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_setFocus", (PyCFunction) _wrap_FXOption_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_canFocus", (PyCFunction) _wrap_FXOption_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_disable", (PyCFunction) _wrap_FXOption_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_enable", (PyCFunction) _wrap_FXOption_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_hide", (PyCFunction) _wrap_FXOption_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_show", (PyCFunction) _wrap_FXOption_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_getDefaultHeight", (PyCFunction) _wrap_FXOption_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_getDefaultWidth", (PyCFunction) _wrap_FXOption_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_resize", (PyCFunction) _wrap_FXOption_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_detach", (PyCFunction) _wrap_FXOption_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_destroy", (PyCFunction) _wrap_FXOption_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_create", (PyCFunction) _wrap_FXOption_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXOption_onDefault", (PyCFunction) _wrap_FXOption_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXOption", (PyCFunction) _wrap_new_FXOption, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Option", (PyCFunction) _wrap_new_FX_Option, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onHotKeyRelease", (PyCFunction) _wrap_FX_Option_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onHotKeyPress", (PyCFunction) _wrap_FX_Option_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onKeyRelease", (PyCFunction) _wrap_FX_Option_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onKeyPress", (PyCFunction) _wrap_FX_Option_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onLeftBtnRelease", (PyCFunction) _wrap_FX_Option_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onLeftBtnPress", (PyCFunction) _wrap_FX_Option_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onLeave", (PyCFunction) _wrap_FX_Option_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onEnter", (PyCFunction) _wrap_FX_Option_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Option_onPaint", (PyCFunction) _wrap_FX_Option_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_setBackColor", (PyCFunction) _wrap_FXTooltip_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_reparent", (PyCFunction) _wrap_FXTooltip_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_doesSaveUnder", (PyCFunction) _wrap_FXTooltip_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_getHeightForWidth", (PyCFunction) _wrap_FXTooltip_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_getWidthForHeight", (PyCFunction) _wrap_FXTooltip_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_contains", (PyCFunction) _wrap_FXTooltip_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_isComposite", (PyCFunction) _wrap_FXTooltip_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_position", (PyCFunction) _wrap_FXTooltip_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_move", (PyCFunction) _wrap_FXTooltip_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_lower", (PyCFunction) _wrap_FXTooltip_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_layout", (PyCFunction) _wrap_FXTooltip_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_recalc", (PyCFunction) _wrap_FXTooltip_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_setDefault", (PyCFunction) _wrap_FXTooltip_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_killFocus", (PyCFunction) _wrap_FXTooltip_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_setFocus", (PyCFunction) _wrap_FXTooltip_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_canFocus", (PyCFunction) _wrap_FXTooltip_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_disable", (PyCFunction) _wrap_FXTooltip_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_enable", (PyCFunction) _wrap_FXTooltip_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_hide", (PyCFunction) _wrap_FXTooltip_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_show", (PyCFunction) _wrap_FXTooltip_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_getDefaultHeight", (PyCFunction) _wrap_FXTooltip_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_getDefaultWidth", (PyCFunction) _wrap_FXTooltip_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_resize", (PyCFunction) _wrap_FXTooltip_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_detach", (PyCFunction) _wrap_FXTooltip_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_destroy", (PyCFunction) _wrap_FXTooltip_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_create", (PyCFunction) _wrap_FXTooltip_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTooltip_onDefault", (PyCFunction) _wrap_FXTooltip_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTooltip", (PyCFunction) _wrap_new_FXTooltip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_setTextColor", (PyCFunction) _wrap_FX_Tooltip_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_getTextColor", (PyCFunction) _wrap_FX_Tooltip_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_getFont", (PyCFunction) _wrap_FX_Tooltip_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_setFont", (PyCFunction) _wrap_FX_Tooltip_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_getText", (PyCFunction) _wrap_FX_Tooltip_getText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_setText", (PyCFunction) _wrap_FX_Tooltip_setText, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Tooltip", (PyCFunction) _wrap_new_FX_Tooltip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onCmdSetStringValue", (PyCFunction) _wrap_FX_Tooltip_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onCmdGetStringValue", (PyCFunction) _wrap_FX_Tooltip_onCmdGetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onTipHide", (PyCFunction) _wrap_FX_Tooltip_onTipHide, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onTipShow", (PyCFunction) _wrap_FX_Tooltip_onTipShow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onUpdate", (PyCFunction) _wrap_FX_Tooltip_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Tooltip_onPaint", (PyCFunction) _wrap_FX_Tooltip_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_setBackColor", (PyCFunction) _wrap_FXSpinner_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_reparent", (PyCFunction) _wrap_FXSpinner_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_doesSaveUnder", (PyCFunction) _wrap_FXSpinner_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_getHeightForWidth", (PyCFunction) _wrap_FXSpinner_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_getWidthForHeight", (PyCFunction) _wrap_FXSpinner_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_contains", (PyCFunction) _wrap_FXSpinner_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_isComposite", (PyCFunction) _wrap_FXSpinner_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_position", (PyCFunction) _wrap_FXSpinner_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_move", (PyCFunction) _wrap_FXSpinner_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_lower", (PyCFunction) _wrap_FXSpinner_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_layout", (PyCFunction) _wrap_FXSpinner_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_recalc", (PyCFunction) _wrap_FXSpinner_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_setDefault", (PyCFunction) _wrap_FXSpinner_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_killFocus", (PyCFunction) _wrap_FXSpinner_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_setFocus", (PyCFunction) _wrap_FXSpinner_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_canFocus", (PyCFunction) _wrap_FXSpinner_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_disable", (PyCFunction) _wrap_FXSpinner_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_enable", (PyCFunction) _wrap_FXSpinner_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_hide", (PyCFunction) _wrap_FXSpinner_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_show", (PyCFunction) _wrap_FXSpinner_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_getDefaultHeight", (PyCFunction) _wrap_FXSpinner_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_getDefaultWidth", (PyCFunction) _wrap_FXSpinner_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_resize", (PyCFunction) _wrap_FXSpinner_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_detach", (PyCFunction) _wrap_FXSpinner_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_destroy", (PyCFunction) _wrap_FXSpinner_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_create", (PyCFunction) _wrap_FXSpinner_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXSpinner_onDefault", (PyCFunction) _wrap_FXSpinner_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXSpinner", (PyCFunction) _wrap_new_FXSpinner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_isEditable", (PyCFunction) _wrap_FX_Spinner_isEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setEditable", (PyCFunction) _wrap_FX_Spinner_setEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getSpinnerStyle", (PyCFunction) _wrap_FX_Spinner_getSpinnerStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setSpinnerStyle", (PyCFunction) _wrap_FX_Spinner_setSpinnerStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getTipText", (PyCFunction) _wrap_FX_Spinner_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setTipText", (PyCFunction) _wrap_FX_Spinner_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getHelpText", (PyCFunction) _wrap_FX_Spinner_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setHelpText", (PyCFunction) _wrap_FX_Spinner_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getFont", (PyCFunction) _wrap_FX_Spinner_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setFont", (PyCFunction) _wrap_FX_Spinner_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getIncrement", (PyCFunction) _wrap_FX_Spinner_getIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setIncrement", (PyCFunction) _wrap_FX_Spinner_setIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getRange", (PyCFunction) _wrap_FX_Spinner_getRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setRange", (PyCFunction) _wrap_FX_Spinner_setRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_getValue", (PyCFunction) _wrap_FX_Spinner_getValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setValue", (PyCFunction) _wrap_FX_Spinner_setValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setTextVisible", (PyCFunction) _wrap_FX_Spinner_setTextVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_isTextVisible", (PyCFunction) _wrap_FX_Spinner_isTextVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_setCyclic", (PyCFunction) _wrap_FX_Spinner_setCyclic, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_isCyclic", (PyCFunction) _wrap_FX_Spinner_isCyclic, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_decrement", (PyCFunction) _wrap_FX_Spinner_decrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_increment", (PyCFunction) _wrap_FX_Spinner_increment, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Spinner", (PyCFunction) _wrap_new_FX_Spinner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdGetIntRange", (PyCFunction) _wrap_FX_Spinner_onCmdGetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdSetIntRange", (PyCFunction) _wrap_FX_Spinner_onCmdSetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdGetIntValue", (PyCFunction) _wrap_FX_Spinner_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdSetIntValue", (PyCFunction) _wrap_FX_Spinner_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdSetValue", (PyCFunction) _wrap_FX_Spinner_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onKeyRelease", (PyCFunction) _wrap_FX_Spinner_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onKeyPress", (PyCFunction) _wrap_FX_Spinner_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onChgEntry", (PyCFunction) _wrap_FX_Spinner_onChgEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdEntry", (PyCFunction) _wrap_FX_Spinner_onCmdEntry, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdDecrement", (PyCFunction) _wrap_FX_Spinner_onCmdDecrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onUpdDecrement", (PyCFunction) _wrap_FX_Spinner_onUpdDecrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onCmdIncrement", (PyCFunction) _wrap_FX_Spinner_onCmdIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Spinner_onUpdIncrement", (PyCFunction) _wrap_FX_Spinner_onUpdIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_setBackColor", (PyCFunction) _wrap_FXPicker_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_reparent", (PyCFunction) _wrap_FXPicker_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_doesSaveUnder", (PyCFunction) _wrap_FXPicker_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_getHeightForWidth", (PyCFunction) _wrap_FXPicker_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_getWidthForHeight", (PyCFunction) _wrap_FXPicker_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_contains", (PyCFunction) _wrap_FXPicker_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_isComposite", (PyCFunction) _wrap_FXPicker_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_position", (PyCFunction) _wrap_FXPicker_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_move", (PyCFunction) _wrap_FXPicker_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_lower", (PyCFunction) _wrap_FXPicker_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_layout", (PyCFunction) _wrap_FXPicker_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_recalc", (PyCFunction) _wrap_FXPicker_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_setDefault", (PyCFunction) _wrap_FXPicker_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_killFocus", (PyCFunction) _wrap_FXPicker_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_setFocus", (PyCFunction) _wrap_FXPicker_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_canFocus", (PyCFunction) _wrap_FXPicker_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_disable", (PyCFunction) _wrap_FXPicker_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_enable", (PyCFunction) _wrap_FXPicker_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_hide", (PyCFunction) _wrap_FXPicker_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_show", (PyCFunction) _wrap_FXPicker_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_getDefaultHeight", (PyCFunction) _wrap_FXPicker_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_getDefaultWidth", (PyCFunction) _wrap_FXPicker_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_resize", (PyCFunction) _wrap_FXPicker_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_detach", (PyCFunction) _wrap_FXPicker_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_destroy", (PyCFunction) _wrap_FXPicker_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_create", (PyCFunction) _wrap_FXPicker_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPicker_onDefault", (PyCFunction) _wrap_FXPicker_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPicker", (PyCFunction) _wrap_new_FXPicker, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Picker", (PyCFunction) _wrap_new_FX_Picker, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Picker_onLeave", (PyCFunction) _wrap_FX_Picker_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Picker_onEnter", (PyCFunction) _wrap_FX_Picker_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Picker_onLeftBtnRelease", (PyCFunction) _wrap_FX_Picker_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Picker_onLeftBtnPress", (PyCFunction) _wrap_FX_Picker_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Picker_onMotion", (PyCFunction) _wrap_FX_Picker_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_setBackColor", (PyCFunction) _wrap_FXArrowButton_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_reparent", (PyCFunction) _wrap_FXArrowButton_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_doesSaveUnder", (PyCFunction) _wrap_FXArrowButton_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_getHeightForWidth", (PyCFunction) _wrap_FXArrowButton_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_getWidthForHeight", (PyCFunction) _wrap_FXArrowButton_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_contains", (PyCFunction) _wrap_FXArrowButton_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_isComposite", (PyCFunction) _wrap_FXArrowButton_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_position", (PyCFunction) _wrap_FXArrowButton_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_move", (PyCFunction) _wrap_FXArrowButton_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_lower", (PyCFunction) _wrap_FXArrowButton_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_layout", (PyCFunction) _wrap_FXArrowButton_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_recalc", (PyCFunction) _wrap_FXArrowButton_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_setDefault", (PyCFunction) _wrap_FXArrowButton_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_killFocus", (PyCFunction) _wrap_FXArrowButton_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_setFocus", (PyCFunction) _wrap_FXArrowButton_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_canFocus", (PyCFunction) _wrap_FXArrowButton_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_disable", (PyCFunction) _wrap_FXArrowButton_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_enable", (PyCFunction) _wrap_FXArrowButton_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_hide", (PyCFunction) _wrap_FXArrowButton_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_show", (PyCFunction) _wrap_FXArrowButton_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_getDefaultHeight", (PyCFunction) _wrap_FXArrowButton_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_getDefaultWidth", (PyCFunction) _wrap_FXArrowButton_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_resize", (PyCFunction) _wrap_FXArrowButton_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_detach", (PyCFunction) _wrap_FXArrowButton_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_destroy", (PyCFunction) _wrap_FXArrowButton_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_create", (PyCFunction) _wrap_FXArrowButton_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXArrowButton_onDefault", (PyCFunction) _wrap_FXArrowButton_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXArrowButton", (PyCFunction) _wrap_new_FXArrowButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setArrowColor", (PyCFunction) _wrap_FX_ArrowButton_setArrowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getArrowColor", (PyCFunction) _wrap_FX_ArrowButton_getArrowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getJustify", (PyCFunction) _wrap_FX_ArrowButton_getJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setJustify", (PyCFunction) _wrap_FX_ArrowButton_setJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getArrowSize", (PyCFunction) _wrap_FX_ArrowButton_getArrowSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setArrowSize", (PyCFunction) _wrap_FX_ArrowButton_setArrowSize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getArrowStyle", (PyCFunction) _wrap_FX_ArrowButton_getArrowStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setArrowStyle", (PyCFunction) _wrap_FX_ArrowButton_setArrowStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getTipText", (PyCFunction) _wrap_FX_ArrowButton_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setTipText", (PyCFunction) _wrap_FX_ArrowButton_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getHelpText", (PyCFunction) _wrap_FX_ArrowButton_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setHelpText", (PyCFunction) _wrap_FX_ArrowButton_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_getState", (PyCFunction) _wrap_FX_ArrowButton_getState, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_setState", (PyCFunction) _wrap_FX_ArrowButton_setState, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ArrowButton", (PyCFunction) _wrap_new_FX_ArrowButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onQueryTip", (PyCFunction) _wrap_FX_ArrowButton_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onQueryHelp", (PyCFunction) _wrap_FX_ArrowButton_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onHotKeyRelease", (PyCFunction) _wrap_FX_ArrowButton_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onHotKeyPress", (PyCFunction) _wrap_FX_ArrowButton_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onKeyRelease", (PyCFunction) _wrap_FX_ArrowButton_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onKeyPress", (PyCFunction) _wrap_FX_ArrowButton_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onRepeat", (PyCFunction) _wrap_FX_ArrowButton_onRepeat, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onUngrabbed", (PyCFunction) _wrap_FX_ArrowButton_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onLeftBtnRelease", (PyCFunction) _wrap_FX_ArrowButton_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onLeftBtnPress", (PyCFunction) _wrap_FX_ArrowButton_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onLeave", (PyCFunction) _wrap_FX_ArrowButton_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onEnter", (PyCFunction) _wrap_FX_ArrowButton_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onUpdate", (PyCFunction) _wrap_FX_ArrowButton_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ArrowButton_onPaint", (PyCFunction) _wrap_FX_ArrowButton_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_setBackColor", (PyCFunction) _wrap_FXCheckButton_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_reparent", (PyCFunction) _wrap_FXCheckButton_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_doesSaveUnder", (PyCFunction) _wrap_FXCheckButton_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_getHeightForWidth", (PyCFunction) _wrap_FXCheckButton_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_getWidthForHeight", (PyCFunction) _wrap_FXCheckButton_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_contains", (PyCFunction) _wrap_FXCheckButton_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_isComposite", (PyCFunction) _wrap_FXCheckButton_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_position", (PyCFunction) _wrap_FXCheckButton_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_move", (PyCFunction) _wrap_FXCheckButton_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_lower", (PyCFunction) _wrap_FXCheckButton_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_layout", (PyCFunction) _wrap_FXCheckButton_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_recalc", (PyCFunction) _wrap_FXCheckButton_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_setDefault", (PyCFunction) _wrap_FXCheckButton_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_killFocus", (PyCFunction) _wrap_FXCheckButton_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_setFocus", (PyCFunction) _wrap_FXCheckButton_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_canFocus", (PyCFunction) _wrap_FXCheckButton_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_disable", (PyCFunction) _wrap_FXCheckButton_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_enable", (PyCFunction) _wrap_FXCheckButton_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_hide", (PyCFunction) _wrap_FXCheckButton_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_show", (PyCFunction) _wrap_FXCheckButton_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_getDefaultHeight", (PyCFunction) _wrap_FXCheckButton_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_getDefaultWidth", (PyCFunction) _wrap_FXCheckButton_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_resize", (PyCFunction) _wrap_FXCheckButton_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_detach", (PyCFunction) _wrap_FXCheckButton_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_destroy", (PyCFunction) _wrap_FXCheckButton_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_create", (PyCFunction) _wrap_FXCheckButton_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXCheckButton_onDefault", (PyCFunction) _wrap_FXCheckButton_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXCheckButton", (PyCFunction) _wrap_new_FXCheckButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_getCheckButtonStyle", (PyCFunction) _wrap_FX_CheckButton_getCheckButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_setCheckButtonStyle", (PyCFunction) _wrap_FX_CheckButton_setCheckButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_setBoxColor", (PyCFunction) _wrap_FX_CheckButton_setBoxColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_getBoxColor", (PyCFunction) _wrap_FX_CheckButton_getBoxColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_getCheck", (PyCFunction) _wrap_FX_CheckButton_getCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_setCheck", (PyCFunction) _wrap_FX_CheckButton_setCheck, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_CheckButton", (PyCFunction) _wrap_new_FX_CheckButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onCmdGetIntValue", (PyCFunction) _wrap_FX_CheckButton_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onCmdSetIntValue", (PyCFunction) _wrap_FX_CheckButton_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onCmdSetValue", (PyCFunction) _wrap_FX_CheckButton_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onUnknown", (PyCFunction) _wrap_FX_CheckButton_onUnknown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onUncheck", (PyCFunction) _wrap_FX_CheckButton_onUncheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onCheck", (PyCFunction) _wrap_FX_CheckButton_onCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onHotKeyRelease", (PyCFunction) _wrap_FX_CheckButton_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onHotKeyPress", (PyCFunction) _wrap_FX_CheckButton_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onKeyRelease", (PyCFunction) _wrap_FX_CheckButton_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onKeyPress", (PyCFunction) _wrap_FX_CheckButton_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onLeftBtnRelease", (PyCFunction) _wrap_FX_CheckButton_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onLeftBtnPress", (PyCFunction) _wrap_FX_CheckButton_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onUngrabbed", (PyCFunction) _wrap_FX_CheckButton_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onFocusOut", (PyCFunction) _wrap_FX_CheckButton_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onFocusIn", (PyCFunction) _wrap_FX_CheckButton_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onLeave", (PyCFunction) _wrap_FX_CheckButton_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onEnter", (PyCFunction) _wrap_FX_CheckButton_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onUpdate", (PyCFunction) _wrap_FX_CheckButton_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_CheckButton_onPaint", (PyCFunction) _wrap_FX_CheckButton_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_setBackColor", (PyCFunction) _wrap_FXRadioButton_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_reparent", (PyCFunction) _wrap_FXRadioButton_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_doesSaveUnder", (PyCFunction) _wrap_FXRadioButton_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_getHeightForWidth", (PyCFunction) _wrap_FXRadioButton_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_getWidthForHeight", (PyCFunction) _wrap_FXRadioButton_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_contains", (PyCFunction) _wrap_FXRadioButton_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_isComposite", (PyCFunction) _wrap_FXRadioButton_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_position", (PyCFunction) _wrap_FXRadioButton_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_move", (PyCFunction) _wrap_FXRadioButton_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_lower", (PyCFunction) _wrap_FXRadioButton_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_layout", (PyCFunction) _wrap_FXRadioButton_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_recalc", (PyCFunction) _wrap_FXRadioButton_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_setDefault", (PyCFunction) _wrap_FXRadioButton_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_killFocus", (PyCFunction) _wrap_FXRadioButton_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_setFocus", (PyCFunction) _wrap_FXRadioButton_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_canFocus", (PyCFunction) _wrap_FXRadioButton_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_disable", (PyCFunction) _wrap_FXRadioButton_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_enable", (PyCFunction) _wrap_FXRadioButton_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_hide", (PyCFunction) _wrap_FXRadioButton_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_show", (PyCFunction) _wrap_FXRadioButton_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_getDefaultHeight", (PyCFunction) _wrap_FXRadioButton_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_getDefaultWidth", (PyCFunction) _wrap_FXRadioButton_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_resize", (PyCFunction) _wrap_FXRadioButton_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_detach", (PyCFunction) _wrap_FXRadioButton_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_destroy", (PyCFunction) _wrap_FXRadioButton_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_create", (PyCFunction) _wrap_FXRadioButton_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXRadioButton_onDefault", (PyCFunction) _wrap_FXRadioButton_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXRadioButton", (PyCFunction) _wrap_new_FXRadioButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_setRadioColor", (PyCFunction) _wrap_FX_RadioButton_setRadioColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_getRadioColor", (PyCFunction) _wrap_FX_RadioButton_getRadioColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_getRadioButtonStyle", (PyCFunction) _wrap_FX_RadioButton_getRadioButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_setRadioButtonStyle", (PyCFunction) _wrap_FX_RadioButton_setRadioButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_getCheck", (PyCFunction) _wrap_FX_RadioButton_getCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_setCheck", (PyCFunction) _wrap_FX_RadioButton_setCheck, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_RadioButton", (PyCFunction) _wrap_new_FX_RadioButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onCmdGetIntValue", (PyCFunction) _wrap_FX_RadioButton_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onCmdSetIntValue", (PyCFunction) _wrap_FX_RadioButton_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onCmdSetValue", (PyCFunction) _wrap_FX_RadioButton_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onUnknown", (PyCFunction) _wrap_FX_RadioButton_onUnknown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onUncheck", (PyCFunction) _wrap_FX_RadioButton_onUncheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onCheck", (PyCFunction) _wrap_FX_RadioButton_onCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onUncheckRadio", (PyCFunction) _wrap_FX_RadioButton_onUncheckRadio, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onHotKeyRelease", (PyCFunction) _wrap_FX_RadioButton_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onHotKeyPress", (PyCFunction) _wrap_FX_RadioButton_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onKeyRelease", (PyCFunction) _wrap_FX_RadioButton_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onKeyPress", (PyCFunction) _wrap_FX_RadioButton_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onLeftBtnRelease", (PyCFunction) _wrap_FX_RadioButton_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onLeftBtnPress", (PyCFunction) _wrap_FX_RadioButton_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onUngrabbed", (PyCFunction) _wrap_FX_RadioButton_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onFocusOut", (PyCFunction) _wrap_FX_RadioButton_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onFocusIn", (PyCFunction) _wrap_FX_RadioButton_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onLeave", (PyCFunction) _wrap_FX_RadioButton_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onEnter", (PyCFunction) _wrap_FX_RadioButton_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onUpdate", (PyCFunction) _wrap_FX_RadioButton_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_RadioButton_onPaint", (PyCFunction) _wrap_FX_RadioButton_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_setBackColor", (PyCFunction) _wrap_FXToggleButton_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_reparent", (PyCFunction) _wrap_FXToggleButton_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_doesSaveUnder", (PyCFunction) _wrap_FXToggleButton_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_getHeightForWidth", (PyCFunction) _wrap_FXToggleButton_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_getWidthForHeight", (PyCFunction) _wrap_FXToggleButton_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_contains", (PyCFunction) _wrap_FXToggleButton_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_isComposite", (PyCFunction) _wrap_FXToggleButton_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_position", (PyCFunction) _wrap_FXToggleButton_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_move", (PyCFunction) _wrap_FXToggleButton_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_lower", (PyCFunction) _wrap_FXToggleButton_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_layout", (PyCFunction) _wrap_FXToggleButton_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_recalc", (PyCFunction) _wrap_FXToggleButton_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_setDefault", (PyCFunction) _wrap_FXToggleButton_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_killFocus", (PyCFunction) _wrap_FXToggleButton_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_setFocus", (PyCFunction) _wrap_FXToggleButton_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_canFocus", (PyCFunction) _wrap_FXToggleButton_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_disable", (PyCFunction) _wrap_FXToggleButton_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_enable", (PyCFunction) _wrap_FXToggleButton_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_hide", (PyCFunction) _wrap_FXToggleButton_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_show", (PyCFunction) _wrap_FXToggleButton_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_getDefaultHeight", (PyCFunction) _wrap_FXToggleButton_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_getDefaultWidth", (PyCFunction) _wrap_FXToggleButton_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_resize", (PyCFunction) _wrap_FXToggleButton_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_detach", (PyCFunction) _wrap_FXToggleButton_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_destroy", (PyCFunction) _wrap_FXToggleButton_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_create", (PyCFunction) _wrap_FXToggleButton_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXToggleButton_onDefault", (PyCFunction) _wrap_FXToggleButton_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXToggleButton", (PyCFunction) _wrap_new_FXToggleButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_getAltTipText", (PyCFunction) _wrap_FX_ToggleButton_getAltTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_setAltTipText", (PyCFunction) _wrap_FX_ToggleButton_setAltTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_getAltHelpText", (PyCFunction) _wrap_FX_ToggleButton_getAltHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_setAltHelpText", (PyCFunction) _wrap_FX_ToggleButton_setAltHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_getAltIcon", (PyCFunction) _wrap_FX_ToggleButton_getAltIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_setAltIcon", (PyCFunction) _wrap_FX_ToggleButton_setAltIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_getAltText", (PyCFunction) _wrap_FX_ToggleButton_getAltText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_setAltText", (PyCFunction) _wrap_FX_ToggleButton_setAltText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_getState", (PyCFunction) _wrap_FX_ToggleButton_getState, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_setState", (PyCFunction) _wrap_FX_ToggleButton_setState, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ToggleButton", (PyCFunction) _wrap_new_FX_ToggleButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onCmdGetIntValue", (PyCFunction) _wrap_FX_ToggleButton_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onCmdSetIntValue", (PyCFunction) _wrap_FX_ToggleButton_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onCmdSetValue", (PyCFunction) _wrap_FX_ToggleButton_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onQueryTip", (PyCFunction) _wrap_FX_ToggleButton_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onQueryHelp", (PyCFunction) _wrap_FX_ToggleButton_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onUncheck", (PyCFunction) _wrap_FX_ToggleButton_onUncheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onCheck", (PyCFunction) _wrap_FX_ToggleButton_onCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onHotKeyRelease", (PyCFunction) _wrap_FX_ToggleButton_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onHotKeyPress", (PyCFunction) _wrap_FX_ToggleButton_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onKeyRelease", (PyCFunction) _wrap_FX_ToggleButton_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onKeyPress", (PyCFunction) _wrap_FX_ToggleButton_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onLeftBtnRelease", (PyCFunction) _wrap_FX_ToggleButton_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onLeftBtnPress", (PyCFunction) _wrap_FX_ToggleButton_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onUngrabbed", (PyCFunction) _wrap_FX_ToggleButton_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onFocusOut", (PyCFunction) _wrap_FX_ToggleButton_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onFocusIn", (PyCFunction) _wrap_FX_ToggleButton_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onLeave", (PyCFunction) _wrap_FX_ToggleButton_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onEnter", (PyCFunction) _wrap_FX_ToggleButton_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onUpdate", (PyCFunction) _wrap_FX_ToggleButton_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ToggleButton_onPaint", (PyCFunction) _wrap_FX_ToggleButton_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_setBackColor", (PyCFunction) _wrap_FXButton_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_reparent", (PyCFunction) _wrap_FXButton_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_doesSaveUnder", (PyCFunction) _wrap_FXButton_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_getHeightForWidth", (PyCFunction) _wrap_FXButton_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_getWidthForHeight", (PyCFunction) _wrap_FXButton_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_contains", (PyCFunction) _wrap_FXButton_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_isComposite", (PyCFunction) _wrap_FXButton_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_position", (PyCFunction) _wrap_FXButton_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_move", (PyCFunction) _wrap_FXButton_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_lower", (PyCFunction) _wrap_FXButton_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_layout", (PyCFunction) _wrap_FXButton_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_recalc", (PyCFunction) _wrap_FXButton_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_setDefault", (PyCFunction) _wrap_FXButton_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_killFocus", (PyCFunction) _wrap_FXButton_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_setFocus", (PyCFunction) _wrap_FXButton_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_canFocus", (PyCFunction) _wrap_FXButton_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_disable", (PyCFunction) _wrap_FXButton_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_enable", (PyCFunction) _wrap_FXButton_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_hide", (PyCFunction) _wrap_FXButton_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_show", (PyCFunction) _wrap_FXButton_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_getDefaultHeight", (PyCFunction) _wrap_FXButton_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_getDefaultWidth", (PyCFunction) _wrap_FXButton_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_resize", (PyCFunction) _wrap_FXButton_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_detach", (PyCFunction) _wrap_FXButton_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_destroy", (PyCFunction) _wrap_FXButton_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_create", (PyCFunction) _wrap_FXButton_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXButton_onDefault", (PyCFunction) _wrap_FXButton_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXButton", (PyCFunction) _wrap_new_FXButton, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_getButtonStyle", (PyCFunction) _wrap_FX_Button_getButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_setButtonStyle", (PyCFunction) _wrap_FX_Button_setButtonStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_getState", (PyCFunction) _wrap_FX_Button_getState, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_setState", (PyCFunction) _wrap_FX_Button_setState, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Button", (PyCFunction) _wrap_new_FX_Button, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onCmdGetIntValue", (PyCFunction) _wrap_FX_Button_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onCmdSetIntValue", (PyCFunction) _wrap_FX_Button_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onCmdSetValue", (PyCFunction) _wrap_FX_Button_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onUncheck", (PyCFunction) _wrap_FX_Button_onUncheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onCheck", (PyCFunction) _wrap_FX_Button_onCheck, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onHotKeyRelease", (PyCFunction) _wrap_FX_Button_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onHotKeyPress", (PyCFunction) _wrap_FX_Button_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onKeyRelease", (PyCFunction) _wrap_FX_Button_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onKeyPress", (PyCFunction) _wrap_FX_Button_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onLeftBtnRelease", (PyCFunction) _wrap_FX_Button_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onLeftBtnPress", (PyCFunction) _wrap_FX_Button_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onUngrabbed", (PyCFunction) _wrap_FX_Button_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onFocusOut", (PyCFunction) _wrap_FX_Button_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onFocusIn", (PyCFunction) _wrap_FX_Button_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onLeave", (PyCFunction) _wrap_FX_Button_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onEnter", (PyCFunction) _wrap_FX_Button_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onUpdate", (PyCFunction) _wrap_FX_Button_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Button_onPaint", (PyCFunction) _wrap_FX_Button_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_setBackColor", (PyCFunction) _wrap_FXTextField_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_reparent", (PyCFunction) _wrap_FXTextField_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_doesSaveUnder", (PyCFunction) _wrap_FXTextField_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_getHeightForWidth", (PyCFunction) _wrap_FXTextField_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_getWidthForHeight", (PyCFunction) _wrap_FXTextField_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_contains", (PyCFunction) _wrap_FXTextField_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_isComposite", (PyCFunction) _wrap_FXTextField_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_position", (PyCFunction) _wrap_FXTextField_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_move", (PyCFunction) _wrap_FXTextField_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_lower", (PyCFunction) _wrap_FXTextField_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_layout", (PyCFunction) _wrap_FXTextField_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_recalc", (PyCFunction) _wrap_FXTextField_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_setDefault", (PyCFunction) _wrap_FXTextField_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_killFocus", (PyCFunction) _wrap_FXTextField_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_setFocus", (PyCFunction) _wrap_FXTextField_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_canFocus", (PyCFunction) _wrap_FXTextField_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_disable", (PyCFunction) _wrap_FXTextField_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_enable", (PyCFunction) _wrap_FXTextField_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_hide", (PyCFunction) _wrap_FXTextField_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_show", (PyCFunction) _wrap_FXTextField_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_getDefaultHeight", (PyCFunction) _wrap_FXTextField_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_getDefaultWidth", (PyCFunction) _wrap_FXTextField_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_resize", (PyCFunction) _wrap_FXTextField_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_detach", (PyCFunction) _wrap_FXTextField_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_destroy", (PyCFunction) _wrap_FXTextField_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_create", (PyCFunction) _wrap_FXTextField_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTextField_onDefault", (PyCFunction) _wrap_FXTextField_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXTextField", (PyCFunction) _wrap_new_FXTextField, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_makePositionVisible", (PyCFunction) _wrap_FX_TextField_makePositionVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_isPosVisible", (PyCFunction) _wrap_FX_TextField_isPosVisible, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_isPosSelected", (PyCFunction) _wrap_FX_TextField_isPosSelected, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_killSelection", (PyCFunction) _wrap_FX_TextField_killSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_extendSelection", (PyCFunction) _wrap_FX_TextField_extendSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setSelection", (PyCFunction) _wrap_FX_TextField_setSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_selectAll", (PyCFunction) _wrap_FX_TextField_selectAll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getTextStyle", (PyCFunction) _wrap_FX_TextField_getTextStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setTextStyle", (PyCFunction) _wrap_FX_TextField_setTextStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getTipText", (PyCFunction) _wrap_FX_TextField_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setTipText", (PyCFunction) _wrap_FX_TextField_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getHelpText", (PyCFunction) _wrap_FX_TextField_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setHelpText", (PyCFunction) _wrap_FX_TextField_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getJustify", (PyCFunction) _wrap_FX_TextField_getJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setJustify", (PyCFunction) _wrap_FX_TextField_setJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getNumColumns", (PyCFunction) _wrap_FX_TextField_getNumColumns, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setNumColumns", (PyCFunction) _wrap_FX_TextField_setNumColumns, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getSelTextColor", (PyCFunction) _wrap_FX_TextField_getSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setSelTextColor", (PyCFunction) _wrap_FX_TextField_setSelTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getSelBackColor", (PyCFunction) _wrap_FX_TextField_getSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setSelBackColor", (PyCFunction) _wrap_FX_TextField_setSelBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getTextColor", (PyCFunction) _wrap_FX_TextField_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setTextColor", (PyCFunction) _wrap_FX_TextField_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getFont", (PyCFunction) _wrap_FX_TextField_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setFont", (PyCFunction) _wrap_FX_TextField_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getText", (PyCFunction) _wrap_FX_TextField_getText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setText", (PyCFunction) _wrap_FX_TextField_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getAnchorPos", (PyCFunction) _wrap_FX_TextField_getAnchorPos, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setAnchorPos", (PyCFunction) _wrap_FX_TextField_setAnchorPos, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_getCursorPos", (PyCFunction) _wrap_FX_TextField_getCursorPos, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setCursorPos", (PyCFunction) _wrap_FX_TextField_setCursorPos, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_setEditable", (PyCFunction) _wrap_FX_TextField_setEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_isEditable", (PyCFunction) _wrap_FX_TextField_isEditable, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_TextField", (PyCFunction) _wrap_new_FX_TextField, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onUpdToggleOverstrike", (PyCFunction) _wrap_FX_TextField_onUpdToggleOverstrike, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdToggleOverstrike", (PyCFunction) _wrap_FX_TextField_onCmdToggleOverstrike, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onUpdToggleEditable", (PyCFunction) _wrap_FX_TextField_onUpdToggleEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdToggleEditable", (PyCFunction) _wrap_FX_TextField_onCmdToggleEditable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdDelete", (PyCFunction) _wrap_FX_TextField_onCmdDelete, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdBackspace", (PyCFunction) _wrap_FX_TextField_onCmdBackspace, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdInsertString", (PyCFunction) _wrap_FX_TextField_onCmdInsertString, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdOverstString", (PyCFunction) _wrap_FX_TextField_onCmdOverstString, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdDeleteSel", (PyCFunction) _wrap_FX_TextField_onCmdDeleteSel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdPasteSel", (PyCFunction) _wrap_FX_TextField_onCmdPasteSel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCopySel", (PyCFunction) _wrap_FX_TextField_onCmdCopySel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCutSel", (PyCFunction) _wrap_FX_TextField_onCmdCutSel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdDeselectAll", (PyCFunction) _wrap_FX_TextField_onCmdDeselectAll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdSelectAll", (PyCFunction) _wrap_FX_TextField_onCmdSelectAll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdExtend", (PyCFunction) _wrap_FX_TextField_onCmdExtend, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdMark", (PyCFunction) _wrap_FX_TextField_onCmdMark, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCursorLeft", (PyCFunction) _wrap_FX_TextField_onCmdCursorLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCursorRight", (PyCFunction) _wrap_FX_TextField_onCmdCursorRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCursorEnd", (PyCFunction) _wrap_FX_TextField_onCmdCursorEnd, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdCursorHome", (PyCFunction) _wrap_FX_TextField_onCmdCursorHome, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdGetStringValue", (PyCFunction) _wrap_FX_TextField_onCmdGetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdGetRealValue", (PyCFunction) _wrap_FX_TextField_onCmdGetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdGetIntValue", (PyCFunction) _wrap_FX_TextField_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdSetStringValue", (PyCFunction) _wrap_FX_TextField_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdSetRealValue", (PyCFunction) _wrap_FX_TextField_onCmdSetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdSetIntValue", (PyCFunction) _wrap_FX_TextField_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onCmdSetValue", (PyCFunction) _wrap_FX_TextField_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onQueryTip", (PyCFunction) _wrap_FX_TextField_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onQueryHelp", (PyCFunction) _wrap_FX_TextField_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onAutoScroll", (PyCFunction) _wrap_FX_TextField_onAutoScroll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onBlink", (PyCFunction) _wrap_FX_TextField_onBlink, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onFocusOut", (PyCFunction) _wrap_FX_TextField_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onFocusIn", (PyCFunction) _wrap_FX_TextField_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onFocusSelf", (PyCFunction) _wrap_FX_TextField_onFocusSelf, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onClipboardRequest", (PyCFunction) _wrap_FX_TextField_onClipboardRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onClipboardGained", (PyCFunction) _wrap_FX_TextField_onClipboardGained, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onClipboardLost", (PyCFunction) _wrap_FX_TextField_onClipboardLost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onSelectionRequest", (PyCFunction) _wrap_FX_TextField_onSelectionRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onSelectionGained", (PyCFunction) _wrap_FX_TextField_onSelectionGained, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onSelectionLost", (PyCFunction) _wrap_FX_TextField_onSelectionLost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onMotion", (PyCFunction) _wrap_FX_TextField_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onVerify", (PyCFunction) _wrap_FX_TextField_onVerify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onMiddleBtnRelease", (PyCFunction) _wrap_FX_TextField_onMiddleBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onMiddleBtnPress", (PyCFunction) _wrap_FX_TextField_onMiddleBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onLeftBtnRelease", (PyCFunction) _wrap_FX_TextField_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onLeftBtnPress", (PyCFunction) _wrap_FX_TextField_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onKeyRelease", (PyCFunction) _wrap_FX_TextField_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onKeyPress", (PyCFunction) _wrap_FX_TextField_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TextField_onPaint", (PyCFunction) _wrap_FX_TextField_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_setBackColor", (PyCFunction) _wrap_FXColorWell_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_reparent", (PyCFunction) _wrap_FXColorWell_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_doesSaveUnder", (PyCFunction) _wrap_FXColorWell_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_getHeightForWidth", (PyCFunction) _wrap_FXColorWell_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_getWidthForHeight", (PyCFunction) _wrap_FXColorWell_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_contains", (PyCFunction) _wrap_FXColorWell_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_isComposite", (PyCFunction) _wrap_FXColorWell_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_position", (PyCFunction) _wrap_FXColorWell_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_move", (PyCFunction) _wrap_FXColorWell_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_lower", (PyCFunction) _wrap_FXColorWell_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_layout", (PyCFunction) _wrap_FXColorWell_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_recalc", (PyCFunction) _wrap_FXColorWell_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_setDefault", (PyCFunction) _wrap_FXColorWell_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_killFocus", (PyCFunction) _wrap_FXColorWell_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_setFocus", (PyCFunction) _wrap_FXColorWell_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_canFocus", (PyCFunction) _wrap_FXColorWell_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_disable", (PyCFunction) _wrap_FXColorWell_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_enable", (PyCFunction) _wrap_FXColorWell_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_hide", (PyCFunction) _wrap_FXColorWell_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_show", (PyCFunction) _wrap_FXColorWell_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_getDefaultHeight", (PyCFunction) _wrap_FXColorWell_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_getDefaultWidth", (PyCFunction) _wrap_FXColorWell_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_resize", (PyCFunction) _wrap_FXColorWell_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_detach", (PyCFunction) _wrap_FXColorWell_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_destroy", (PyCFunction) _wrap_FXColorWell_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_create", (PyCFunction) _wrap_FXColorWell_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXColorWell_onDefault", (PyCFunction) _wrap_FXColorWell_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXColorWell", (PyCFunction) _wrap_new_FXColorWell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_setOpaqueOnly", (PyCFunction) _wrap_FX_ColorWell_setOpaqueOnly, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_isOpaqueOnly", (PyCFunction) _wrap_FX_ColorWell_isOpaqueOnly, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_getTipText", (PyCFunction) _wrap_FX_ColorWell_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_setTipText", (PyCFunction) _wrap_FX_ColorWell_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_getHelpText", (PyCFunction) _wrap_FX_ColorWell_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_setHelpText", (PyCFunction) _wrap_FX_ColorWell_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_getRGBA", (PyCFunction) _wrap_FX_ColorWell_getRGBA, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_setRGBA", (PyCFunction) _wrap_FX_ColorWell_setRGBA, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_ColorWell", (PyCFunction) _wrap_new_FX_ColorWell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onCmdGetIntValue", (PyCFunction) _wrap_FX_ColorWell_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onCmdSetIntValue", (PyCFunction) _wrap_FX_ColorWell_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onChgColorWell", (PyCFunction) _wrap_FX_ColorWell_onChgColorWell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onCmdColorWell", (PyCFunction) _wrap_FX_ColorWell_onCmdColorWell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onCmdSetValue", (PyCFunction) _wrap_FX_ColorWell_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onQueryTip", (PyCFunction) _wrap_FX_ColorWell_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onQueryHelp", (PyCFunction) _wrap_FX_ColorWell_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onTripleClicked", (PyCFunction) _wrap_FX_ColorWell_onTripleClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDoubleClicked", (PyCFunction) _wrap_FX_ColorWell_onDoubleClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onClicked", (PyCFunction) _wrap_FX_ColorWell_onClicked, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onSelectionRequest", (PyCFunction) _wrap_FX_ColorWell_onSelectionRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onSelectionGained", (PyCFunction) _wrap_FX_ColorWell_onSelectionGained, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onSelectionLost", (PyCFunction) _wrap_FX_ColorWell_onSelectionLost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDNDRequest", (PyCFunction) _wrap_FX_ColorWell_onDNDRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDNDDrop", (PyCFunction) _wrap_FX_ColorWell_onDNDDrop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDNDMotion", (PyCFunction) _wrap_FX_ColorWell_onDNDMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDNDLeave", (PyCFunction) _wrap_FX_ColorWell_onDNDLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDNDEnter", (PyCFunction) _wrap_FX_ColorWell_onDNDEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onFocusOut", (PyCFunction) _wrap_FX_ColorWell_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onFocusIn", (PyCFunction) _wrap_FX_ColorWell_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onDragged", (PyCFunction) _wrap_FX_ColorWell_onDragged, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onEndDrag", (PyCFunction) _wrap_FX_ColorWell_onEndDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onBeginDrag", (PyCFunction) _wrap_FX_ColorWell_onBeginDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onMotion", (PyCFunction) _wrap_FX_ColorWell_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onUngrabbed", (PyCFunction) _wrap_FX_ColorWell_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onKeyRelease", (PyCFunction) _wrap_FX_ColorWell_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onKeyPress", (PyCFunction) _wrap_FX_ColorWell_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onMiddleBtnRelease", (PyCFunction) _wrap_FX_ColorWell_onMiddleBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onMiddleBtnPress", (PyCFunction) _wrap_FX_ColorWell_onMiddleBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onLeftBtnRelease", (PyCFunction) _wrap_FX_ColorWell_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onLeftBtnPress", (PyCFunction) _wrap_FX_ColorWell_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_ColorWell_onPaint", (PyCFunction) _wrap_FX_ColorWell_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_setBackColor", (PyCFunction) _wrap_FXDial_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_reparent", (PyCFunction) _wrap_FXDial_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_doesSaveUnder", (PyCFunction) _wrap_FXDial_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_getHeightForWidth", (PyCFunction) _wrap_FXDial_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_getWidthForHeight", (PyCFunction) _wrap_FXDial_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_contains", (PyCFunction) _wrap_FXDial_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_isComposite", (PyCFunction) _wrap_FXDial_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_position", (PyCFunction) _wrap_FXDial_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_move", (PyCFunction) _wrap_FXDial_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_lower", (PyCFunction) _wrap_FXDial_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_layout", (PyCFunction) _wrap_FXDial_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_recalc", (PyCFunction) _wrap_FXDial_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_setDefault", (PyCFunction) _wrap_FXDial_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_killFocus", (PyCFunction) _wrap_FXDial_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_setFocus", (PyCFunction) _wrap_FXDial_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_canFocus", (PyCFunction) _wrap_FXDial_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_disable", (PyCFunction) _wrap_FXDial_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_enable", (PyCFunction) _wrap_FXDial_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_hide", (PyCFunction) _wrap_FXDial_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_show", (PyCFunction) _wrap_FXDial_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_getDefaultHeight", (PyCFunction) _wrap_FXDial_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_getDefaultWidth", (PyCFunction) _wrap_FXDial_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_resize", (PyCFunction) _wrap_FXDial_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_detach", (PyCFunction) _wrap_FXDial_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_destroy", (PyCFunction) _wrap_FXDial_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_create", (PyCFunction) _wrap_FXDial_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXDial_onDefault", (PyCFunction) _wrap_FXDial_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXDial", (PyCFunction) _wrap_new_FXDial, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getTipText", (PyCFunction) _wrap_FX_Dial_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setTipText", (PyCFunction) _wrap_FX_Dial_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getHelpText", (PyCFunction) _wrap_FX_Dial_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setHelpText", (PyCFunction) _wrap_FX_Dial_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setDialStyle", (PyCFunction) _wrap_FX_Dial_setDialStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getDialStyle", (PyCFunction) _wrap_FX_Dial_getDialStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getNotchOffset", (PyCFunction) _wrap_FX_Dial_getNotchOffset, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setNotchOffset", (PyCFunction) _wrap_FX_Dial_setNotchOffset, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getNotchSpacing", (PyCFunction) _wrap_FX_Dial_getNotchSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setNotchSpacing", (PyCFunction) _wrap_FX_Dial_setNotchSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getRevolutionIncrement", (PyCFunction) _wrap_FX_Dial_getRevolutionIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setRevolutionIncrement", (PyCFunction) _wrap_FX_Dial_setRevolutionIncrement, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getValue", (PyCFunction) _wrap_FX_Dial_getValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setValue", (PyCFunction) _wrap_FX_Dial_setValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_getRange", (PyCFunction) _wrap_FX_Dial_getRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_setRange", (PyCFunction) _wrap_FX_Dial_setRange, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Dial", (PyCFunction) _wrap_new_FX_Dial, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onQueryTip", (PyCFunction) _wrap_FX_Dial_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onQueryHelp", (PyCFunction) _wrap_FX_Dial_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdGetRealRange", (PyCFunction) _wrap_FX_Dial_onCmdGetRealRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdSetRealRange", (PyCFunction) _wrap_FX_Dial_onCmdSetRealRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdGetIntRange", (PyCFunction) _wrap_FX_Dial_onCmdGetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdSetIntRange", (PyCFunction) _wrap_FX_Dial_onCmdSetIntRange, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdGetRealValue", (PyCFunction) _wrap_FX_Dial_onCmdGetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdSetRealValue", (PyCFunction) _wrap_FX_Dial_onCmdSetRealValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdGetIntValue", (PyCFunction) _wrap_FX_Dial_onCmdGetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdSetIntValue", (PyCFunction) _wrap_FX_Dial_onCmdSetIntValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onCmdSetValue", (PyCFunction) _wrap_FX_Dial_onCmdSetValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onUngrabbed", (PyCFunction) _wrap_FX_Dial_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onLeftBtnRelease", (PyCFunction) _wrap_FX_Dial_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onLeftBtnPress", (PyCFunction) _wrap_FX_Dial_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onMouseWheel", (PyCFunction) _wrap_FX_Dial_onMouseWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onMotion", (PyCFunction) _wrap_FX_Dial_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Dial_onPaint", (PyCFunction) _wrap_FX_Dial_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_setBackColor", (PyCFunction) _wrap_FXLabel_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_reparent", (PyCFunction) _wrap_FXLabel_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_doesSaveUnder", (PyCFunction) _wrap_FXLabel_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_getHeightForWidth", (PyCFunction) _wrap_FXLabel_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_getWidthForHeight", (PyCFunction) _wrap_FXLabel_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_contains", (PyCFunction) _wrap_FXLabel_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_isComposite", (PyCFunction) _wrap_FXLabel_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_position", (PyCFunction) _wrap_FXLabel_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_move", (PyCFunction) _wrap_FXLabel_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_lower", (PyCFunction) _wrap_FXLabel_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_layout", (PyCFunction) _wrap_FXLabel_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_recalc", (PyCFunction) _wrap_FXLabel_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_setDefault", (PyCFunction) _wrap_FXLabel_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_killFocus", (PyCFunction) _wrap_FXLabel_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_setFocus", (PyCFunction) _wrap_FXLabel_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_canFocus", (PyCFunction) _wrap_FXLabel_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_disable", (PyCFunction) _wrap_FXLabel_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_enable", (PyCFunction) _wrap_FXLabel_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_hide", (PyCFunction) _wrap_FXLabel_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_show", (PyCFunction) _wrap_FXLabel_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_getDefaultHeight", (PyCFunction) _wrap_FXLabel_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_getDefaultWidth", (PyCFunction) _wrap_FXLabel_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_resize", (PyCFunction) _wrap_FXLabel_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_detach", (PyCFunction) _wrap_FXLabel_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_destroy", (PyCFunction) _wrap_FXLabel_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_create", (PyCFunction) _wrap_FXLabel_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXLabel_onDefault", (PyCFunction) _wrap_FXLabel_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXLabel", (PyCFunction) _wrap_new_FXLabel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getTipText", (PyCFunction) _wrap_FX_Label_getTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setTipText", (PyCFunction) _wrap_FX_Label_setTipText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getHelpText", (PyCFunction) _wrap_FX_Label_getHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setHelpText", (PyCFunction) _wrap_FX_Label_setHelpText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getIconPosition", (PyCFunction) _wrap_FX_Label_getIconPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setIconPosition", (PyCFunction) _wrap_FX_Label_setIconPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getJustify", (PyCFunction) _wrap_FX_Label_getJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setJustify", (PyCFunction) _wrap_FX_Label_setJustify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setTextColor", (PyCFunction) _wrap_FX_Label_setTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getTextColor", (PyCFunction) _wrap_FX_Label_getTextColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getFont", (PyCFunction) _wrap_FX_Label_getFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setFont", (PyCFunction) _wrap_FX_Label_setFont, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getIcon", (PyCFunction) _wrap_FX_Label_getIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setIcon", (PyCFunction) _wrap_FX_Label_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_setText", (PyCFunction) _wrap_FX_Label_setText, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_getText", (PyCFunction) _wrap_FX_Label_getText, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Label", (PyCFunction) _wrap_new_FX_Label, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onQueryTip", (PyCFunction) _wrap_FX_Label_onQueryTip, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onQueryHelp", (PyCFunction) _wrap_FX_Label_onQueryHelp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onCmdSetStringValue", (PyCFunction) _wrap_FX_Label_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onCmdGetStringValue", (PyCFunction) _wrap_FX_Label_onCmdGetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onHotKeyRelease", (PyCFunction) _wrap_FX_Label_onHotKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onHotKeyPress", (PyCFunction) _wrap_FX_Label_onHotKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Label_onPaint", (PyCFunction) _wrap_FX_Label_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "CreateNonFloatingToolbar", (PyCFunction) _wrap_CreateNonFloatingToolbar, METH_VARARGS | METH_KEYWORDS },
	 { "CreateFloatingToolbar", (PyCFunction) _wrap_CreateFloatingToolbar, METH_VARARGS | METH_KEYWORDS },
	 { NULL, NULL }
};
#ifdef __cplusplus
}
#endif
/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "_class_FXPyBMPImage","_FXPyBMPImage",0},
    { "_class_FXPyICOImage","_FXPyICOImage",0},
    { "_FXPyDelegator","_class_FXPyDelegator",0},
    { "_FX4Splitter","_class_FX4Splitter",0},
    { "_class_FXButton","_class_FXPyPicker",SwigFXPyPickerToFXButton},
    { "_class_FXButton","_FXPyPicker",SwigFXPyPickerToFXButton},
    { "_class_FXButton","_class_FXPicker",SwigFXPickerToFXButton},
    { "_class_FXButton","_FXPicker",SwigFXPickerToFXButton},
    { "_class_FXButton","_class_FXPyButton",SwigFXPyButtonToFXButton},
    { "_class_FXButton","_FXPyButton",SwigFXPyButtonToFXButton},
    { "_class_FXButton","_FXButton",0},
    { "_FXPyRadioButton","_class_FXPyRadioButton",0},
    { "_FXOption","_class_FXPyOption",SwigFXPyOptionToFXOption},
    { "_FXOption","_FXPyOption",SwigFXPyOptionToFXOption},
    { "_FXOption","_class_FXOption",0},
    { "_class_FXPyStatusbar","_FXPyStatusbar",0},
    { "_signed_long","_FXTime",0},
    { "_signed_long","_long",0},
    { "_class_FXPyPCXImage","_FXPyPCXImage",0},
    { "_class_FXPyToolbarTab","_FXPyToolbarTab",0},
    { "_class_FXTIFIcon","_FXTIFIcon",0},
    { "_FXPyHorizontalFrame","_class_FXPyHorizontalFrame",0},
    { "_double","_FXdouble",0},
    { "_FXPyObject","_class_FXPyObject",0},
    { "_FXPyGIFIcon","_class_FXPyGIFIcon",0},
    { "_FXBMPIcon","_class_FXBMPIcon",0},
    { "_FXICOIcon","_class_FXICOIcon",0},
    { "_class_FXList","_class_FXPyList",SwigFXPyListToFXList},
    { "_class_FXList","_FXPyList",SwigFXPyListToFXList},
    { "_class_FXList","_FXList",0},
    { "_class_FXSettings","_FXSettings",0},
    { "_class_FXRegistry","_FXRegistry",0},
    { "_class_FXMainWindow","_FXMainWindow",0},
    { "_class_FXPyOption","_FXPyOption",0},
    { "_FXPySpinner","_class_FXPySpinner",0},
    { "_class_FXColorBar","_class_FXPyColorBar",SwigFXPyColorBarToFXColorBar},
    { "_class_FXColorBar","_FXPyColorBar",SwigFXPyColorBarToFXColorBar},
    { "_class_FXColorBar","_FXColorBar",0},
    { "_FXTopWindow","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXTopWindow},
    { "_FXTopWindow","_FXPyToolbarShell",SwigFXPyToolbarShellToFXTopWindow},
    { "_FXTopWindow","_class_FXToolbarShell",SwigFXToolbarShellToFXTopWindow},
    { "_FXTopWindow","_FXToolbarShell",SwigFXToolbarShellToFXTopWindow},
    { "_FXTopWindow","_class_FXTopWindow",0},
    { "_FXPySwitcher","_class_FXPySwitcher",0},
    { "_FXShutterItem","_class_FXShutterItem",0},
    { "_FXTextField","_class_FXPyTextField",SwigFXPyTextFieldToFXTextField},
    { "_FXTextField","_FXPyTextField",SwigFXPyTextFieldToFXTextField},
    { "_FXTextField","_class_FXTextField",0},
    { "_class_FXTooltip","_class_FXPyTooltip",SwigFXPyTooltipToFXTooltip},
    { "_class_FXTooltip","_FXPyTooltip",SwigFXPyTooltipToFXTooltip},
    { "_class_FXTooltip","_FXTooltip",0},
    { "_class_FXVisual","_FXVisual",0},
    { "_FXIcon","_class_FXIcon",0},
    { "_FXPyMatrix","_class_FXPyMatrix",0},
    { "_class_FXStatusbar","_class_FXPyStatusbar",SwigFXPyStatusbarToFXStatusbar},
    { "_class_FXStatusbar","_FXPyStatusbar",SwigFXPyStatusbarToFXStatusbar},
    { "_class_FXStatusbar","_FXStatusbar",0},
    { "_class_FXDCPrint","_FXDCPrint",0},
    { "_class_FXGroupBox","_FXGroupBox",0},
    { "_FXToolbar","_class_FXPyToolbar",SwigFXPyToolbarToFXToolbar},
    { "_FXToolbar","_FXPyToolbar",SwigFXPyToolbarToFXToolbar},
    { "_FXToolbar","_class_FXToolbar",0},
    { "_FXTGAImage","_class_FXTGAImage",0},
    { "_class_FXPyTGAIcon","_FXPyTGAIcon",0},
    { "_FXPyStream","_class_FXPyStream",0},
    { "_class_FXPyDict","_FXPyDict",0},
    { "_class_FXRegion","_FXRegion",0},
    { "_FXShutter","_class_FXShutter",0},
    { "_class_FXPyToggleButton","_FXPyToggleButton",0},
    { "_class_FXTabBook","_class_FXPyTabBook",SwigFXPyTabBookToFXTabBook},
    { "_class_FXTabBook","_FXPyTabBook",SwigFXPyTabBookToFXTabBook},
    { "_class_FXTabBook","_FXTabBook",0},
    { "_FXPyPNGImage","_class_FXPyPNGImage",0},
    { "_class_FXAccelTable","_FXAccelTable",0},
    { "_class_FXToggleButton","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXToggleButton},
    { "_class_FXToggleButton","_FXPyToggleButton",SwigFXPyToggleButtonToFXToggleButton},
    { "_class_FXToggleButton","_FXToggleButton",0},
    { "_FXPyApp","_class_FXPyApp",0},
    { "_FXDCWindow","_class_FXDCWindow",0},
    { "_FXPyScrollArea","_class_FXPyScrollArea",0},
    { "_class_FXDragCorner","_class_FXPyDragCorner",SwigFXPyDragCornerToFXDragCorner},
    { "_class_FXDragCorner","_FXPyDragCorner",SwigFXPyDragCornerToFXDragCorner},
    { "_class_FXDragCorner","_FXDragCorner",0},
    { "_class_FXHeader","_class_FXPyHeader",SwigFXPyHeaderToFXHeader},
    { "_class_FXHeader","_FXPyHeader",SwigFXPyHeaderToFXHeader},
    { "_class_FXHeader","_FXHeader",0},
    { "_class_FXPyId","_FXPyId",0},
    { "_class_FXCanvas","_FXCanvas",0},
    { "_FXApp","_class_FXApp",0},
    { "_class_FXPyRecentFiles","_FXPyRecentFiles",0},
    { "_class_FXPyDebugTarget","_FXPyDebugTarget",0},
    { "_class_FXCommand","_FXCommand",0},
    { "_class_FXPyFrame","_FXPyFrame",0},
    { "_class_FXListItem","_class_FXPyListItem",SwigFXPyListItemToFXListItem},
    { "_class_FXListItem","_FXPyListItem",SwigFXPyListItemToFXListItem},
    { "_class_FXListItem","_FXListItem",0},
    { "_long","_FXPixel",0},
    { "_long","_FXTime",0},
    { "_long","_unsigned_long",0},
    { "_long","_signed_long",0},
    { "_FXComposite","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXComposite},
    { "_FXComposite","_FXPyDriveBox",SwigFXPyDriveBoxToFXComposite},
    { "_FXComposite","_class_FXDriveBox",SwigFXDriveBoxToFXComposite},
    { "_FXComposite","_FXDriveBox",SwigFXDriveBoxToFXComposite},
    { "_FXComposite","_class_FXPyListBox",SwigFXPyListBoxToFXComposite},
    { "_FXComposite","_FXPyListBox",SwigFXPyListBoxToFXComposite},
    { "_FXComposite","_class_FXListBox",SwigFXListBoxToFXComposite},
    { "_FXComposite","_FXListBox",SwigFXListBoxToFXComposite},
    { "_FXComposite","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXComposite},
    { "_FXComposite","_FXPyToolbarShell",SwigFXPyToolbarShellToFXComposite},
    { "_FXComposite","_class_FXToolbarShell",SwigFXToolbarShellToFXComposite},
    { "_FXComposite","_FXToolbarShell",SwigFXToolbarShellToFXComposite},
    { "_FXComposite","_class_FXPyToolbar",SwigFXPyToolbarToFXComposite},
    { "_FXComposite","_FXPyToolbar",SwigFXPyToolbarToFXComposite},
    { "_FXComposite","_class_FXToolbar",SwigFXToolbarToFXComposite},
    { "_FXComposite","_FXToolbar",SwigFXToolbarToFXComposite},
    { "_FXComposite","_class_FXPyStatusbar",SwigFXPyStatusbarToFXComposite},
    { "_FXComposite","_FXPyStatusbar",SwigFXPyStatusbarToFXComposite},
    { "_FXComposite","_class_FXStatusbar",SwigFXStatusbarToFXComposite},
    { "_FXComposite","_FXStatusbar",SwigFXStatusbarToFXComposite},
    { "_FXComposite","_class_FXPyComboBox",SwigFXPyComboBoxToFXComposite},
    { "_FXComposite","_FXPyComboBox",SwigFXPyComboBoxToFXComposite},
    { "_FXComposite","_class_FXComboBox",SwigFXComboBoxToFXComposite},
    { "_FXComposite","_FXComboBox",SwigFXComboBoxToFXComposite},
    { "_FXComposite","_class_FXPyList",SwigFXPyListToFXComposite},
    { "_FXComposite","_FXPyList",SwigFXPyListToFXComposite},
    { "_FXComposite","_class_FXList",SwigFXListToFXComposite},
    { "_FXComposite","_FXList",SwigFXListToFXComposite},
    { "_FXComposite","_class_FXPyTabBook",SwigFXPyTabBookToFXComposite},
    { "_FXComposite","_FXPyTabBook",SwigFXPyTabBookToFXComposite},
    { "_FXComposite","_class_FXTabBook",SwigFXTabBookToFXComposite},
    { "_FXComposite","_FXTabBook",SwigFXTabBookToFXComposite},
    { "_FXComposite","_class_FXPyTabBar",SwigFXPyTabBarToFXComposite},
    { "_FXComposite","_FXPyTabBar",SwigFXPyTabBarToFXComposite},
    { "_FXComposite","_class_FXTabBar",SwigFXTabBarToFXComposite},
    { "_FXComposite","_FXTabBar",SwigFXTabBarToFXComposite},
    { "_FXComposite","_class_FXPyTooltip",SwigFXPyTooltipToFXComposite},
    { "_FXComposite","_FXPyTooltip",SwigFXPyTooltipToFXComposite},
    { "_FXComposite","_class_FXTooltip",SwigFXTooltipToFXComposite},
    { "_FXComposite","_FXTooltip",SwigFXTooltipToFXComposite},
    { "_FXComposite","_class_FXPySpinner",SwigFXPySpinnerToFXComposite},
    { "_FXComposite","_FXPySpinner",SwigFXPySpinnerToFXComposite},
    { "_FXComposite","_class_FXSpinner",SwigFXSpinnerToFXComposite},
    { "_FXComposite","_FXSpinner",SwigFXSpinnerToFXComposite},
    { "_FXComposite","_class_FXComposite",0},
    { "_struct_FXArc","_FXArc",0},
    { "_FXRGBIcon","_class_FXRGBIcon",0},
    { "_FXScrollArea","_class_FXPyList",SwigFXPyListToFXScrollArea},
    { "_FXScrollArea","_FXPyList",SwigFXPyListToFXScrollArea},
    { "_FXScrollArea","_class_FXList",SwigFXListToFXScrollArea},
    { "_FXScrollArea","_FXList",SwigFXListToFXScrollArea},
    { "_FXScrollArea","_class_FXScrollArea",0},
    { "_FXLabel","_class_FXPyTabItem",SwigFXPyTabItemToFXLabel},
    { "_FXLabel","_FXPyTabItem",SwigFXPyTabItemToFXLabel},
    { "_FXLabel","_class_FXTabItem",SwigFXTabItemToFXLabel},
    { "_FXLabel","_FXTabItem",SwigFXTabItemToFXLabel},
    { "_FXLabel","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXLabel},
    { "_FXLabel","_FXPyOptionMenu",SwigFXPyOptionMenuToFXLabel},
    { "_FXLabel","_class_FXOptionMenu",SwigFXOptionMenuToFXLabel},
    { "_FXLabel","_FXOptionMenu",SwigFXOptionMenuToFXLabel},
    { "_FXLabel","_class_FXPyOption",SwigFXPyOptionToFXLabel},
    { "_FXLabel","_FXPyOption",SwigFXPyOptionToFXLabel},
    { "_FXLabel","_class_FXOption",SwigFXOptionToFXLabel},
    { "_FXLabel","_FXOption",SwigFXOptionToFXLabel},
    { "_FXLabel","_class_FXPyPicker",SwigFXPyPickerToFXLabel},
    { "_FXLabel","_FXPyPicker",SwigFXPyPickerToFXLabel},
    { "_FXLabel","_class_FXPicker",SwigFXPickerToFXLabel},
    { "_FXLabel","_FXPicker",SwigFXPickerToFXLabel},
    { "_FXLabel","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXLabel},
    { "_FXLabel","_FXPyCheckButton",SwigFXPyCheckButtonToFXLabel},
    { "_FXLabel","_class_FXCheckButton",SwigFXCheckButtonToFXLabel},
    { "_FXLabel","_FXCheckButton",SwigFXCheckButtonToFXLabel},
    { "_FXLabel","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXLabel},
    { "_FXLabel","_FXPyRadioButton",SwigFXPyRadioButtonToFXLabel},
    { "_FXLabel","_class_FXRadioButton",SwigFXRadioButtonToFXLabel},
    { "_FXLabel","_FXRadioButton",SwigFXRadioButtonToFXLabel},
    { "_FXLabel","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXLabel},
    { "_FXLabel","_FXPyToggleButton",SwigFXPyToggleButtonToFXLabel},
    { "_FXLabel","_class_FXToggleButton",SwigFXToggleButtonToFXLabel},
    { "_FXLabel","_FXToggleButton",SwigFXToggleButtonToFXLabel},
    { "_FXLabel","_class_FXPyButton",SwigFXPyButtonToFXLabel},
    { "_FXLabel","_FXPyButton",SwigFXPyButtonToFXLabel},
    { "_FXLabel","_class_FXButton",SwigFXButtonToFXLabel},
    { "_FXLabel","_FXButton",SwigFXButtonToFXLabel},
    { "_FXLabel","_class_FXPyLabel",SwigFXPyLabelToFXLabel},
    { "_FXLabel","_FXPyLabel",SwigFXPyLabelToFXLabel},
    { "_FXLabel","_class_FXLabel",0},
    { "_class_FXPyColorWell","_FXPyColorWell",0},
    { "_FXPrinter","_struct_FXPrinter",0},
    { "_class_FXId","_class_FXPyColorWheel",SwigFXPyColorWheelToFXId},
    { "_class_FXId","_FXPyColorWheel",SwigFXPyColorWheelToFXId},
    { "_class_FXId","_class_FXColorWheel",SwigFXColorWheelToFXId},
    { "_class_FXId","_FXColorWheel",SwigFXColorWheelToFXId},
    { "_class_FXId","_class_FXPyColorBar",SwigFXPyColorBarToFXId},
    { "_class_FXId","_FXPyColorBar",SwigFXPyColorBarToFXId},
    { "_class_FXId","_class_FXColorBar",SwigFXColorBarToFXId},
    { "_class_FXId","_FXColorBar",SwigFXColorBarToFXId},
    { "_class_FXId","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXId},
    { "_class_FXId","_FXPyDriveBox",SwigFXPyDriveBoxToFXId},
    { "_class_FXId","_class_FXDriveBox",SwigFXDriveBoxToFXId},
    { "_class_FXId","_FXDriveBox",SwigFXDriveBoxToFXId},
    { "_class_FXId","_class_FXPyListBox",SwigFXPyListBoxToFXId},
    { "_class_FXId","_FXPyListBox",SwigFXPyListBoxToFXId},
    { "_class_FXId","_class_FXListBox",SwigFXListBoxToFXId},
    { "_class_FXId","_FXListBox",SwigFXListBoxToFXId},
    { "_class_FXId","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXId},
    { "_class_FXId","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXId},
    { "_class_FXId","_class_FXToolbarGrip",SwigFXToolbarGripToFXId},
    { "_class_FXId","_FXToolbarGrip",SwigFXToolbarGripToFXId},
    { "_class_FXId","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXId},
    { "_class_FXId","_FXPyToolbarShell",SwigFXPyToolbarShellToFXId},
    { "_class_FXId","_class_FXToolbarShell",SwigFXToolbarShellToFXId},
    { "_class_FXId","_FXToolbarShell",SwigFXToolbarShellToFXId},
    { "_class_FXId","_class_FXPyToolbar",SwigFXPyToolbarToFXId},
    { "_class_FXId","_FXPyToolbar",SwigFXPyToolbarToFXId},
    { "_class_FXId","_class_FXToolbar",SwigFXToolbarToFXId},
    { "_class_FXId","_FXToolbar",SwigFXToolbarToFXId},
    { "_class_FXId","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXId},
    { "_class_FXId","_FXPyToolbarTab",SwigFXPyToolbarTabToFXId},
    { "_class_FXId","_class_FXToolbarTab",SwigFXToolbarTabToFXId},
    { "_class_FXId","_FXToolbarTab",SwigFXToolbarTabToFXId},
    { "_class_FXId","_class_FXPyProgressBar",SwigFXPyProgressBarToFXId},
    { "_class_FXId","_FXPyProgressBar",SwigFXPyProgressBarToFXId},
    { "_class_FXId","_class_FXProgressBar",SwigFXProgressBarToFXId},
    { "_class_FXId","_FXProgressBar",SwigFXProgressBarToFXId},
    { "_class_FXId","_class_FXPyHeader",SwigFXPyHeaderToFXId},
    { "_class_FXId","_FXPyHeader",SwigFXPyHeaderToFXId},
    { "_class_FXId","_class_FXHeader",SwigFXHeaderToFXId},
    { "_class_FXId","_FXHeader",SwigFXHeaderToFXId},
    { "_class_FXId","_class_FXPySlider",SwigFXPySliderToFXId},
    { "_class_FXId","_FXPySlider",SwigFXPySliderToFXId},
    { "_class_FXId","_class_FXSlider",SwigFXSliderToFXId},
    { "_class_FXId","_FXSlider",SwigFXSliderToFXId},
    { "_class_FXId","_class_FXPyStatusbar",SwigFXPyStatusbarToFXId},
    { "_class_FXId","_FXPyStatusbar",SwigFXPyStatusbarToFXId},
    { "_class_FXId","_class_FXStatusbar",SwigFXStatusbarToFXId},
    { "_class_FXId","_FXStatusbar",SwigFXStatusbarToFXId},
    { "_class_FXId","_class_FXPyStatusline",SwigFXPyStatuslineToFXId},
    { "_class_FXId","_FXPyStatusline",SwigFXPyStatuslineToFXId},
    { "_class_FXId","_class_FXStatusline",SwigFXStatuslineToFXId},
    { "_class_FXId","_FXStatusline",SwigFXStatuslineToFXId},
    { "_class_FXId","_class_FXPyDragCorner",SwigFXPyDragCornerToFXId},
    { "_class_FXId","_FXPyDragCorner",SwigFXPyDragCornerToFXId},
    { "_class_FXId","_class_FXDragCorner",SwigFXDragCornerToFXId},
    { "_class_FXId","_FXDragCorner",SwigFXDragCornerToFXId},
    { "_class_FXId","_class_FXPyComboBox",SwigFXPyComboBoxToFXId},
    { "_class_FXId","_FXPyComboBox",SwigFXPyComboBoxToFXId},
    { "_class_FXId","_class_FXComboBox",SwigFXComboBoxToFXId},
    { "_class_FXId","_FXComboBox",SwigFXComboBoxToFXId},
    { "_class_FXId","_class_FXPyList",SwigFXPyListToFXId},
    { "_class_FXId","_FXPyList",SwigFXPyListToFXId},
    { "_class_FXId","_class_FXList",SwigFXListToFXId},
    { "_class_FXId","_FXList",SwigFXListToFXId},
    { "_class_FXId","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXId},
    { "_class_FXId","_FXPyScrollCorner",SwigFXPyScrollCornerToFXId},
    { "_class_FXId","_class_FXScrollCorner",SwigFXScrollCornerToFXId},
    { "_class_FXId","_FXScrollCorner",SwigFXScrollCornerToFXId},
    { "_class_FXId","_class_FXPyScrollbar",SwigFXPyScrollbarToFXId},
    { "_class_FXId","_FXPyScrollbar",SwigFXPyScrollbarToFXId},
    { "_class_FXId","_class_FXScrollbar",SwigFXScrollbarToFXId},
    { "_class_FXId","_FXScrollbar",SwigFXScrollbarToFXId},
    { "_class_FXId","_class_FXPyTabBook",SwigFXPyTabBookToFXId},
    { "_class_FXId","_FXPyTabBook",SwigFXPyTabBookToFXId},
    { "_class_FXId","_class_FXTabBook",SwigFXTabBookToFXId},
    { "_class_FXId","_FXTabBook",SwigFXTabBookToFXId},
    { "_class_FXId","_class_FXPyTabItem",SwigFXPyTabItemToFXId},
    { "_class_FXId","_FXPyTabItem",SwigFXPyTabItemToFXId},
    { "_class_FXId","_class_FXTabItem",SwigFXTabItemToFXId},
    { "_class_FXId","_FXTabItem",SwigFXTabItemToFXId},
    { "_class_FXId","_class_FXPyTabBar",SwigFXPyTabBarToFXId},
    { "_class_FXId","_FXPyTabBar",SwigFXPyTabBarToFXId},
    { "_class_FXId","_class_FXTabBar",SwigFXTabBarToFXId},
    { "_class_FXId","_FXTabBar",SwigFXTabBarToFXId},
    { "_class_FXId","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXId},
    { "_class_FXId","_FXPyOptionMenu",SwigFXPyOptionMenuToFXId},
    { "_class_FXId","_class_FXOptionMenu",SwigFXOptionMenuToFXId},
    { "_class_FXId","_FXOptionMenu",SwigFXOptionMenuToFXId},
    { "_class_FXId","_class_FXPyOption",SwigFXPyOptionToFXId},
    { "_class_FXId","_FXPyOption",SwigFXPyOptionToFXId},
    { "_class_FXId","_class_FXOption",SwigFXOptionToFXId},
    { "_class_FXId","_FXOption",SwigFXOptionToFXId},
    { "_class_FXId","_class_FXPyTooltip",SwigFXPyTooltipToFXId},
    { "_class_FXId","_FXPyTooltip",SwigFXPyTooltipToFXId},
    { "_class_FXId","_class_FXTooltip",SwigFXTooltipToFXId},
    { "_class_FXId","_FXTooltip",SwigFXTooltipToFXId},
    { "_class_FXId","_class_FXPySpinner",SwigFXPySpinnerToFXId},
    { "_class_FXId","_FXPySpinner",SwigFXPySpinnerToFXId},
    { "_class_FXId","_class_FXSpinner",SwigFXSpinnerToFXId},
    { "_class_FXId","_FXSpinner",SwigFXSpinnerToFXId},
    { "_class_FXId","_class_FXPyPicker",SwigFXPyPickerToFXId},
    { "_class_FXId","_FXPyPicker",SwigFXPyPickerToFXId},
    { "_class_FXId","_class_FXPicker",SwigFXPickerToFXId},
    { "_class_FXId","_FXPicker",SwigFXPickerToFXId},
    { "_class_FXId","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXId},
    { "_class_FXId","_FXPyArrowButton",SwigFXPyArrowButtonToFXId},
    { "_class_FXId","_class_FXArrowButton",SwigFXArrowButtonToFXId},
    { "_class_FXId","_FXArrowButton",SwigFXArrowButtonToFXId},
    { "_class_FXId","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXId},
    { "_class_FXId","_FXPyCheckButton",SwigFXPyCheckButtonToFXId},
    { "_class_FXId","_class_FXCheckButton",SwigFXCheckButtonToFXId},
    { "_class_FXId","_FXCheckButton",SwigFXCheckButtonToFXId},
    { "_class_FXId","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXId},
    { "_class_FXId","_FXPyRadioButton",SwigFXPyRadioButtonToFXId},
    { "_class_FXId","_class_FXRadioButton",SwigFXRadioButtonToFXId},
    { "_class_FXId","_FXRadioButton",SwigFXRadioButtonToFXId},
    { "_class_FXId","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXId},
    { "_class_FXId","_FXPyToggleButton",SwigFXPyToggleButtonToFXId},
    { "_class_FXId","_class_FXToggleButton",SwigFXToggleButtonToFXId},
    { "_class_FXId","_FXToggleButton",SwigFXToggleButtonToFXId},
    { "_class_FXId","_class_FXPyButton",SwigFXPyButtonToFXId},
    { "_class_FXId","_FXPyButton",SwigFXPyButtonToFXId},
    { "_class_FXId","_class_FXButton",SwigFXButtonToFXId},
    { "_class_FXId","_FXButton",SwigFXButtonToFXId},
    { "_class_FXId","_class_FXPyTextField",SwigFXPyTextFieldToFXId},
    { "_class_FXId","_FXPyTextField",SwigFXPyTextFieldToFXId},
    { "_class_FXId","_class_FXTextField",SwigFXTextFieldToFXId},
    { "_class_FXId","_FXTextField",SwigFXTextFieldToFXId},
    { "_class_FXId","_class_FXPyColorWell",SwigFXPyColorWellToFXId},
    { "_class_FXId","_FXPyColorWell",SwigFXPyColorWellToFXId},
    { "_class_FXId","_class_FXColorWell",SwigFXColorWellToFXId},
    { "_class_FXId","_FXColorWell",SwigFXColorWellToFXId},
    { "_class_FXId","_class_FXPyDial",SwigFXPyDialToFXId},
    { "_class_FXId","_FXPyDial",SwigFXPyDialToFXId},
    { "_class_FXId","_class_FXDial",SwigFXDialToFXId},
    { "_class_FXId","_FXDial",SwigFXDialToFXId},
    { "_class_FXId","_class_FXPyLabel",SwigFXPyLabelToFXId},
    { "_class_FXId","_FXPyLabel",SwigFXPyLabelToFXId},
    { "_class_FXId","_class_FXLabel",SwigFXLabelToFXId},
    { "_class_FXId","_FXLabel",SwigFXLabelToFXId},
    { "_class_FXId","_FXId",0},
    { "_FXPyHorizontalSeparator","_class_FXPyHorizontalSeparator",0},
    { "_class_FXPyRadioButton","_FXPyRadioButton",0},
    { "_FXProgressBar","_class_FXPyProgressBar",SwigFXPyProgressBarToFXProgressBar},
    { "_FXProgressBar","_FXPyProgressBar",SwigFXPyProgressBarToFXProgressBar},
    { "_FXProgressBar","_class_FXProgressBar",0},
    { "_float","_FXfloat",0},
    { "_FXPyDrawable","_class_FXPyDrawable",0},
    { "_class_FXPyXPMIcon","_FXPyXPMIcon",0},
    { "_FXPyScrollWindow","_class_FXPyScrollWindow",0},
    { "_FXPyHeaderItem","_class_FXPyHeaderItem",0},
    { "_FXshort","_short",0},
    { "_FXshort","_signed_short",0},
    { "_FXshort","_unsigned_short",0},
    { "_FXshort","_FXushort",0},
    { "_FXFontDesc","_struct_FXFontDesc",0},
    { "_FXArc","_struct_FXArc",0},
    { "_FXSize","_class_FXSize",0},
    { "_class_FXBMPIcon","_FXBMPIcon",0},
    { "_class_FXICOIcon","_FXICOIcon",0},
    { "_FXPyShell","_class_FXPyShell",0},
    { "_class_FXPyTIFIcon","_FXPyTIFIcon",0},
    { "_FXSegment","_struct_FXSegment",0},
    { "_FXPyButton","_class_FXPyButton",0},
    { "_FXHeaderItem","_class_FXPyHeaderItem",SwigFXPyHeaderItemToFXHeaderItem},
    { "_FXHeaderItem","_FXPyHeaderItem",SwigFXPyHeaderItemToFXHeaderItem},
    { "_FXHeaderItem","_class_FXHeaderItem",0},
    { "_FXJPGImage","_class_FXJPGImage",0},
    { "_class_FXPySwitcher","_FXPySwitcher",0},
    { "_FXTabBar","_class_FXPyTabBook",SwigFXPyTabBookToFXTabBar},
    { "_FXTabBar","_FXPyTabBook",SwigFXPyTabBookToFXTabBar},
    { "_FXTabBar","_class_FXTabBook",SwigFXTabBookToFXTabBar},
    { "_FXTabBar","_FXTabBook",SwigFXTabBookToFXTabBar},
    { "_FXTabBar","_class_FXPyTabBar",SwigFXPyTabBarToFXTabBar},
    { "_FXTabBar","_FXPyTabBar",SwigFXPyTabBarToFXTabBar},
    { "_FXTabBar","_class_FXTabBar",0},
    { "_class_FXTIFImage","_FXTIFImage",0},
    { "_FXPyPCXIcon","_class_FXPyPCXIcon",0},
    { "_FXDC","_class_FXDC",0},
    { "_class_FXColorWell","_class_FXPyColorWell",SwigFXPyColorWellToFXColorWell},
    { "_class_FXColorWell","_FXPyColorWell",SwigFXPyColorWellToFXColorWell},
    { "_class_FXColorWell","_FXColorWell",0},
    { "_FXPyArrowButton","_class_FXPyArrowButton",0},
    { "_class_FXPyColorWheel","_FXPyColorWheel",0},
    { "_class_FXIcon","_FXIcon",0},
    { "_FXPopup","_class_FXPopup",0},
    { "_FXScrollbar","_class_FXPyScrollbar",SwigFXPyScrollbarToFXScrollbar},
    { "_FXScrollbar","_FXPyScrollbar",SwigFXPyScrollbarToFXScrollbar},
    { "_FXScrollbar","_class_FXScrollbar",0},
    { "_FXPy4Splitter","_class_FXPy4Splitter",0},
    { "_class_FXPyTooltip","_FXPyTooltip",0},
    { "_FXPyTabItem","_class_FXPyTabItem",0},
    { "_class_FXToolbar","_class_FXPyToolbar",SwigFXPyToolbarToFXToolbar},
    { "_class_FXToolbar","_FXPyToolbar",SwigFXPyToolbarToFXToolbar},
    { "_class_FXToolbar","_FXToolbar",0},
    { "_FXint","_FXInputHandle",0},
    { "_FXint","_FXDragType",0},
    { "_FXint","_FXHotKey",0},
    { "_FXint","_FXColor",0},
    { "_FXint","_FXID",0},
    { "_FXint","_FXSelector",0},
    { "_FXint","_int",0},
    { "_FXint","_signed_int",0},
    { "_FXint","_unsigned_int",0},
    { "_FXint","_FXuint",0},
    { "_FXPyPNGIcon","_class_FXPyPNGIcon",0},
    { "_class_FXWindow","_class_FXPyColorWheel",SwigFXPyColorWheelToFXWindow},
    { "_class_FXWindow","_FXPyColorWheel",SwigFXPyColorWheelToFXWindow},
    { "_class_FXWindow","_class_FXColorWheel",SwigFXColorWheelToFXWindow},
    { "_class_FXWindow","_FXColorWheel",SwigFXColorWheelToFXWindow},
    { "_class_FXWindow","_class_FXPyColorBar",SwigFXPyColorBarToFXWindow},
    { "_class_FXWindow","_FXPyColorBar",SwigFXPyColorBarToFXWindow},
    { "_class_FXWindow","_class_FXColorBar",SwigFXColorBarToFXWindow},
    { "_class_FXWindow","_FXColorBar",SwigFXColorBarToFXWindow},
    { "_class_FXWindow","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXWindow},
    { "_class_FXWindow","_FXPyDriveBox",SwigFXPyDriveBoxToFXWindow},
    { "_class_FXWindow","_class_FXDriveBox",SwigFXDriveBoxToFXWindow},
    { "_class_FXWindow","_FXDriveBox",SwigFXDriveBoxToFXWindow},
    { "_class_FXWindow","_class_FXPyListBox",SwigFXPyListBoxToFXWindow},
    { "_class_FXWindow","_FXPyListBox",SwigFXPyListBoxToFXWindow},
    { "_class_FXWindow","_class_FXListBox",SwigFXListBoxToFXWindow},
    { "_class_FXWindow","_FXListBox",SwigFXListBoxToFXWindow},
    { "_class_FXWindow","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXWindow},
    { "_class_FXWindow","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXWindow},
    { "_class_FXWindow","_class_FXToolbarGrip",SwigFXToolbarGripToFXWindow},
    { "_class_FXWindow","_FXToolbarGrip",SwigFXToolbarGripToFXWindow},
    { "_class_FXWindow","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXWindow},
    { "_class_FXWindow","_FXPyToolbarShell",SwigFXPyToolbarShellToFXWindow},
    { "_class_FXWindow","_class_FXToolbarShell",SwigFXToolbarShellToFXWindow},
    { "_class_FXWindow","_FXToolbarShell",SwigFXToolbarShellToFXWindow},
    { "_class_FXWindow","_class_FXPyToolbar",SwigFXPyToolbarToFXWindow},
    { "_class_FXWindow","_FXPyToolbar",SwigFXPyToolbarToFXWindow},
    { "_class_FXWindow","_class_FXToolbar",SwigFXToolbarToFXWindow},
    { "_class_FXWindow","_FXToolbar",SwigFXToolbarToFXWindow},
    { "_class_FXWindow","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXWindow},
    { "_class_FXWindow","_FXPyToolbarTab",SwigFXPyToolbarTabToFXWindow},
    { "_class_FXWindow","_class_FXToolbarTab",SwigFXToolbarTabToFXWindow},
    { "_class_FXWindow","_FXToolbarTab",SwigFXToolbarTabToFXWindow},
    { "_class_FXWindow","_class_FXPyProgressBar",SwigFXPyProgressBarToFXWindow},
    { "_class_FXWindow","_FXPyProgressBar",SwigFXPyProgressBarToFXWindow},
    { "_class_FXWindow","_class_FXProgressBar",SwigFXProgressBarToFXWindow},
    { "_class_FXWindow","_FXProgressBar",SwigFXProgressBarToFXWindow},
    { "_class_FXWindow","_class_FXPyHeader",SwigFXPyHeaderToFXWindow},
    { "_class_FXWindow","_FXPyHeader",SwigFXPyHeaderToFXWindow},
    { "_class_FXWindow","_class_FXHeader",SwigFXHeaderToFXWindow},
    { "_class_FXWindow","_FXHeader",SwigFXHeaderToFXWindow},
    { "_class_FXWindow","_class_FXPySlider",SwigFXPySliderToFXWindow},
    { "_class_FXWindow","_FXPySlider",SwigFXPySliderToFXWindow},
    { "_class_FXWindow","_class_FXSlider",SwigFXSliderToFXWindow},
    { "_class_FXWindow","_FXSlider",SwigFXSliderToFXWindow},
    { "_class_FXWindow","_class_FXPyStatusbar",SwigFXPyStatusbarToFXWindow},
    { "_class_FXWindow","_FXPyStatusbar",SwigFXPyStatusbarToFXWindow},
    { "_class_FXWindow","_class_FXStatusbar",SwigFXStatusbarToFXWindow},
    { "_class_FXWindow","_FXStatusbar",SwigFXStatusbarToFXWindow},
    { "_class_FXWindow","_class_FXPyStatusline",SwigFXPyStatuslineToFXWindow},
    { "_class_FXWindow","_FXPyStatusline",SwigFXPyStatuslineToFXWindow},
    { "_class_FXWindow","_class_FXStatusline",SwigFXStatuslineToFXWindow},
    { "_class_FXWindow","_FXStatusline",SwigFXStatuslineToFXWindow},
    { "_class_FXWindow","_class_FXPyDragCorner",SwigFXPyDragCornerToFXWindow},
    { "_class_FXWindow","_FXPyDragCorner",SwigFXPyDragCornerToFXWindow},
    { "_class_FXWindow","_class_FXDragCorner",SwigFXDragCornerToFXWindow},
    { "_class_FXWindow","_FXDragCorner",SwigFXDragCornerToFXWindow},
    { "_class_FXWindow","_class_FXPyComboBox",SwigFXPyComboBoxToFXWindow},
    { "_class_FXWindow","_FXPyComboBox",SwigFXPyComboBoxToFXWindow},
    { "_class_FXWindow","_class_FXComboBox",SwigFXComboBoxToFXWindow},
    { "_class_FXWindow","_FXComboBox",SwigFXComboBoxToFXWindow},
    { "_class_FXWindow","_class_FXPyList",SwigFXPyListToFXWindow},
    { "_class_FXWindow","_FXPyList",SwigFXPyListToFXWindow},
    { "_class_FXWindow","_class_FXList",SwigFXListToFXWindow},
    { "_class_FXWindow","_FXList",SwigFXListToFXWindow},
    { "_class_FXWindow","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXWindow},
    { "_class_FXWindow","_FXPyScrollCorner",SwigFXPyScrollCornerToFXWindow},
    { "_class_FXWindow","_class_FXScrollCorner",SwigFXScrollCornerToFXWindow},
    { "_class_FXWindow","_FXScrollCorner",SwigFXScrollCornerToFXWindow},
    { "_class_FXWindow","_class_FXPyScrollbar",SwigFXPyScrollbarToFXWindow},
    { "_class_FXWindow","_FXPyScrollbar",SwigFXPyScrollbarToFXWindow},
    { "_class_FXWindow","_class_FXScrollbar",SwigFXScrollbarToFXWindow},
    { "_class_FXWindow","_FXScrollbar",SwigFXScrollbarToFXWindow},
    { "_class_FXWindow","_class_FXPyTabBook",SwigFXPyTabBookToFXWindow},
    { "_class_FXWindow","_FXPyTabBook",SwigFXPyTabBookToFXWindow},
    { "_class_FXWindow","_class_FXTabBook",SwigFXTabBookToFXWindow},
    { "_class_FXWindow","_FXTabBook",SwigFXTabBookToFXWindow},
    { "_class_FXWindow","_class_FXPyTabItem",SwigFXPyTabItemToFXWindow},
    { "_class_FXWindow","_FXPyTabItem",SwigFXPyTabItemToFXWindow},
    { "_class_FXWindow","_class_FXTabItem",SwigFXTabItemToFXWindow},
    { "_class_FXWindow","_FXTabItem",SwigFXTabItemToFXWindow},
    { "_class_FXWindow","_class_FXPyTabBar",SwigFXPyTabBarToFXWindow},
    { "_class_FXWindow","_FXPyTabBar",SwigFXPyTabBarToFXWindow},
    { "_class_FXWindow","_class_FXTabBar",SwigFXTabBarToFXWindow},
    { "_class_FXWindow","_FXTabBar",SwigFXTabBarToFXWindow},
    { "_class_FXWindow","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXWindow},
    { "_class_FXWindow","_FXPyOptionMenu",SwigFXPyOptionMenuToFXWindow},
    { "_class_FXWindow","_class_FXOptionMenu",SwigFXOptionMenuToFXWindow},
    { "_class_FXWindow","_FXOptionMenu",SwigFXOptionMenuToFXWindow},
    { "_class_FXWindow","_class_FXPyOption",SwigFXPyOptionToFXWindow},
    { "_class_FXWindow","_FXPyOption",SwigFXPyOptionToFXWindow},
    { "_class_FXWindow","_class_FXOption",SwigFXOptionToFXWindow},
    { "_class_FXWindow","_FXOption",SwigFXOptionToFXWindow},
    { "_class_FXWindow","_class_FXPyTooltip",SwigFXPyTooltipToFXWindow},
    { "_class_FXWindow","_FXPyTooltip",SwigFXPyTooltipToFXWindow},
    { "_class_FXWindow","_class_FXTooltip",SwigFXTooltipToFXWindow},
    { "_class_FXWindow","_FXTooltip",SwigFXTooltipToFXWindow},
    { "_class_FXWindow","_class_FXPySpinner",SwigFXPySpinnerToFXWindow},
    { "_class_FXWindow","_FXPySpinner",SwigFXPySpinnerToFXWindow},
    { "_class_FXWindow","_class_FXSpinner",SwigFXSpinnerToFXWindow},
    { "_class_FXWindow","_FXSpinner",SwigFXSpinnerToFXWindow},
    { "_class_FXWindow","_class_FXPyPicker",SwigFXPyPickerToFXWindow},
    { "_class_FXWindow","_FXPyPicker",SwigFXPyPickerToFXWindow},
    { "_class_FXWindow","_class_FXPicker",SwigFXPickerToFXWindow},
    { "_class_FXWindow","_FXPicker",SwigFXPickerToFXWindow},
    { "_class_FXWindow","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXWindow},
    { "_class_FXWindow","_FXPyArrowButton",SwigFXPyArrowButtonToFXWindow},
    { "_class_FXWindow","_class_FXArrowButton",SwigFXArrowButtonToFXWindow},
    { "_class_FXWindow","_FXArrowButton",SwigFXArrowButtonToFXWindow},
    { "_class_FXWindow","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXWindow},
    { "_class_FXWindow","_FXPyCheckButton",SwigFXPyCheckButtonToFXWindow},
    { "_class_FXWindow","_class_FXCheckButton",SwigFXCheckButtonToFXWindow},
    { "_class_FXWindow","_FXCheckButton",SwigFXCheckButtonToFXWindow},
    { "_class_FXWindow","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXWindow},
    { "_class_FXWindow","_FXPyRadioButton",SwigFXPyRadioButtonToFXWindow},
    { "_class_FXWindow","_class_FXRadioButton",SwigFXRadioButtonToFXWindow},
    { "_class_FXWindow","_FXRadioButton",SwigFXRadioButtonToFXWindow},
    { "_class_FXWindow","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXWindow},
    { "_class_FXWindow","_FXPyToggleButton",SwigFXPyToggleButtonToFXWindow},
    { "_class_FXWindow","_class_FXToggleButton",SwigFXToggleButtonToFXWindow},
    { "_class_FXWindow","_FXToggleButton",SwigFXToggleButtonToFXWindow},
    { "_class_FXWindow","_class_FXPyButton",SwigFXPyButtonToFXWindow},
    { "_class_FXWindow","_FXPyButton",SwigFXPyButtonToFXWindow},
    { "_class_FXWindow","_class_FXButton",SwigFXButtonToFXWindow},
    { "_class_FXWindow","_FXButton",SwigFXButtonToFXWindow},
    { "_class_FXWindow","_class_FXPyTextField",SwigFXPyTextFieldToFXWindow},
    { "_class_FXWindow","_FXPyTextField",SwigFXPyTextFieldToFXWindow},
    { "_class_FXWindow","_class_FXTextField",SwigFXTextFieldToFXWindow},
    { "_class_FXWindow","_FXTextField",SwigFXTextFieldToFXWindow},
    { "_class_FXWindow","_class_FXPyColorWell",SwigFXPyColorWellToFXWindow},
    { "_class_FXWindow","_FXPyColorWell",SwigFXPyColorWellToFXWindow},
    { "_class_FXWindow","_class_FXColorWell",SwigFXColorWellToFXWindow},
    { "_class_FXWindow","_FXColorWell",SwigFXColorWellToFXWindow},
    { "_class_FXWindow","_class_FXPyDial",SwigFXPyDialToFXWindow},
    { "_class_FXWindow","_FXPyDial",SwigFXPyDialToFXWindow},
    { "_class_FXWindow","_class_FXDial",SwigFXDialToFXWindow},
    { "_class_FXWindow","_FXDial",SwigFXDialToFXWindow},
    { "_class_FXWindow","_class_FXPyLabel",SwigFXPyLabelToFXWindow},
    { "_class_FXWindow","_FXPyLabel",SwigFXPyLabelToFXWindow},
    { "_class_FXWindow","_class_FXLabel",SwigFXLabelToFXWindow},
    { "_class_FXWindow","_FXLabel",SwigFXLabelToFXWindow},
    { "_class_FXWindow","_FXWindow",0},
    { "_FXPyRootWindow","_class_FXPyRootWindow",0},
    { "_class_FXShutter","_FXShutter",0},
    { "_class_FXPyTabBar","_FXPyTabBar",0},
    { "_FXDriveBox","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXDriveBox},
    { "_FXDriveBox","_FXPyDriveBox",SwigFXPyDriveBoxToFXDriveBox},
    { "_FXDriveBox","_class_FXDriveBox",0},
    { "_FXushort","_FXshort",0},
    { "_FXushort","_unsigned_short",0},
    { "_FXushort","_short",0},
    { "_class_FXPoint","_FXPoint",0},
    { "_class_FXPyPNGImage","_FXPyPNGImage",0},
    { "_class_FXPyDCPrint","_FXPyDCPrint",0},
    { "_FXPyCheckButton","_class_FXPyCheckButton",0},
    { "_class_FXComboBox","_class_FXPyComboBox",SwigFXPyComboBoxToFXComboBox},
    { "_class_FXComboBox","_FXPyComboBox",SwigFXPyComboBoxToFXComboBox},
    { "_class_FXComboBox","_FXComboBox",0},
    { "_FXPyVisual","_class_FXPyVisual",0},
    { "_class_FXPyTabBook","_FXPyTabBook",0},
    { "_class_FXRectangle","_FXRectangle",0},
    { "_class_FXPyFont","_FXPyFont",0},
    { "_FXPyFileStream","_class_FXPyFileStream",0},
    { "_class_FXPyStatusline","_FXPyStatusline",0},
    { "_FXRGBImage","_class_FXRGBImage",0},
    { "_FXRootWindow","_class_FXRootWindow",0},
    { "_class_FXPacker","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXPacker},
    { "_class_FXPacker","_FXPyDriveBox",SwigFXPyDriveBoxToFXPacker},
    { "_class_FXPacker","_class_FXDriveBox",SwigFXDriveBoxToFXPacker},
    { "_class_FXPacker","_FXDriveBox",SwigFXDriveBoxToFXPacker},
    { "_class_FXPacker","_class_FXPyListBox",SwigFXPyListBoxToFXPacker},
    { "_class_FXPacker","_FXPyListBox",SwigFXPyListBoxToFXPacker},
    { "_class_FXPacker","_class_FXListBox",SwigFXListBoxToFXPacker},
    { "_class_FXPacker","_FXListBox",SwigFXListBoxToFXPacker},
    { "_class_FXPacker","_class_FXPyToolbar",SwigFXPyToolbarToFXPacker},
    { "_class_FXPacker","_FXPyToolbar",SwigFXPyToolbarToFXPacker},
    { "_class_FXPacker","_class_FXToolbar",SwigFXToolbarToFXPacker},
    { "_class_FXPacker","_FXToolbar",SwigFXToolbarToFXPacker},
    { "_class_FXPacker","_class_FXPyStatusbar",SwigFXPyStatusbarToFXPacker},
    { "_class_FXPacker","_FXPyStatusbar",SwigFXPyStatusbarToFXPacker},
    { "_class_FXPacker","_class_FXStatusbar",SwigFXStatusbarToFXPacker},
    { "_class_FXPacker","_FXStatusbar",SwigFXStatusbarToFXPacker},
    { "_class_FXPacker","_class_FXPyComboBox",SwigFXPyComboBoxToFXPacker},
    { "_class_FXPacker","_FXPyComboBox",SwigFXPyComboBoxToFXPacker},
    { "_class_FXPacker","_class_FXComboBox",SwigFXComboBoxToFXPacker},
    { "_class_FXPacker","_FXComboBox",SwigFXComboBoxToFXPacker},
    { "_class_FXPacker","_class_FXPyTabBook",SwigFXPyTabBookToFXPacker},
    { "_class_FXPacker","_FXPyTabBook",SwigFXPyTabBookToFXPacker},
    { "_class_FXPacker","_class_FXTabBook",SwigFXTabBookToFXPacker},
    { "_class_FXPacker","_FXTabBook",SwigFXTabBookToFXPacker},
    { "_class_FXPacker","_class_FXPyTabBar",SwigFXPyTabBarToFXPacker},
    { "_class_FXPacker","_FXPyTabBar",SwigFXPyTabBarToFXPacker},
    { "_class_FXPacker","_class_FXTabBar",SwigFXTabBarToFXPacker},
    { "_class_FXPacker","_FXTabBar",SwigFXTabBarToFXPacker},
    { "_class_FXPacker","_class_FXPySpinner",SwigFXPySpinnerToFXPacker},
    { "_class_FXPacker","_FXPySpinner",SwigFXPySpinnerToFXPacker},
    { "_class_FXPacker","_class_FXSpinner",SwigFXSpinnerToFXPacker},
    { "_class_FXPacker","_FXSpinner",SwigFXSpinnerToFXPacker},
    { "_class_FXPacker","_FXPacker",0},
    { "_FXPyToolbarShell","_class_FXPyToolbarShell",0},
    { "_FXPyXPMImage","_class_FXPyXPMImage",0},
    { "_FXPyDataTarget","_class_FXPyDataTarget",0},
    { "_FXPyTopWindow","_class_FXPyTopWindow",0},
    { "_FXPyScrollCorner","_class_FXPyScrollCorner",0},
    { "_FXObject","_class_FXPyColorWheel",SwigFXPyColorWheelToFXObject},
    { "_FXObject","_FXPyColorWheel",SwigFXPyColorWheelToFXObject},
    { "_FXObject","_class_FXColorWheel",SwigFXColorWheelToFXObject},
    { "_FXObject","_FXColorWheel",SwigFXColorWheelToFXObject},
    { "_FXObject","_class_FXPyColorBar",SwigFXPyColorBarToFXObject},
    { "_FXObject","_FXPyColorBar",SwigFXPyColorBarToFXObject},
    { "_FXObject","_class_FXColorBar",SwigFXColorBarToFXObject},
    { "_FXObject","_FXColorBar",SwigFXColorBarToFXObject},
    { "_FXObject","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXObject},
    { "_FXObject","_FXPyDriveBox",SwigFXPyDriveBoxToFXObject},
    { "_FXObject","_class_FXDriveBox",SwigFXDriveBoxToFXObject},
    { "_FXObject","_FXDriveBox",SwigFXDriveBoxToFXObject},
    { "_FXObject","_class_FXPyListBox",SwigFXPyListBoxToFXObject},
    { "_FXObject","_FXPyListBox",SwigFXPyListBoxToFXObject},
    { "_FXObject","_class_FXListBox",SwigFXListBoxToFXObject},
    { "_FXObject","_FXListBox",SwigFXListBoxToFXObject},
    { "_FXObject","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXObject},
    { "_FXObject","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXObject},
    { "_FXObject","_class_FXToolbarGrip",SwigFXToolbarGripToFXObject},
    { "_FXObject","_FXToolbarGrip",SwigFXToolbarGripToFXObject},
    { "_FXObject","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXObject},
    { "_FXObject","_FXPyToolbarShell",SwigFXPyToolbarShellToFXObject},
    { "_FXObject","_class_FXToolbarShell",SwigFXToolbarShellToFXObject},
    { "_FXObject","_FXToolbarShell",SwigFXToolbarShellToFXObject},
    { "_FXObject","_class_FXPyToolbar",SwigFXPyToolbarToFXObject},
    { "_FXObject","_FXPyToolbar",SwigFXPyToolbarToFXObject},
    { "_FXObject","_class_FXToolbar",SwigFXToolbarToFXObject},
    { "_FXObject","_FXToolbar",SwigFXToolbarToFXObject},
    { "_FXObject","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXObject},
    { "_FXObject","_FXPyToolbarTab",SwigFXPyToolbarTabToFXObject},
    { "_FXObject","_class_FXToolbarTab",SwigFXToolbarTabToFXObject},
    { "_FXObject","_FXToolbarTab",SwigFXToolbarTabToFXObject},
    { "_FXObject","_class_FXPyProgressBar",SwigFXPyProgressBarToFXObject},
    { "_FXObject","_FXPyProgressBar",SwigFXPyProgressBarToFXObject},
    { "_FXObject","_class_FXProgressBar",SwigFXProgressBarToFXObject},
    { "_FXObject","_FXProgressBar",SwigFXProgressBarToFXObject},
    { "_FXObject","_class_FXPyHeader",SwigFXPyHeaderToFXObject},
    { "_FXObject","_FXPyHeader",SwigFXPyHeaderToFXObject},
    { "_FXObject","_class_FXHeader",SwigFXHeaderToFXObject},
    { "_FXObject","_FXHeader",SwigFXHeaderToFXObject},
    { "_FXObject","_class_FXPyHeaderItem",SwigFXPyHeaderItemToFXObject},
    { "_FXObject","_FXPyHeaderItem",SwigFXPyHeaderItemToFXObject},
    { "_FXObject","_class_FXHeaderItem",SwigFXHeaderItemToFXObject},
    { "_FXObject","_FXHeaderItem",SwigFXHeaderItemToFXObject},
    { "_FXObject","_class_FXPySlider",SwigFXPySliderToFXObject},
    { "_FXObject","_FXPySlider",SwigFXPySliderToFXObject},
    { "_FXObject","_class_FXSlider",SwigFXSliderToFXObject},
    { "_FXObject","_FXSlider",SwigFXSliderToFXObject},
    { "_FXObject","_class_FXPyStatusbar",SwigFXPyStatusbarToFXObject},
    { "_FXObject","_FXPyStatusbar",SwigFXPyStatusbarToFXObject},
    { "_FXObject","_class_FXStatusbar",SwigFXStatusbarToFXObject},
    { "_FXObject","_FXStatusbar",SwigFXStatusbarToFXObject},
    { "_FXObject","_class_FXPyStatusline",SwigFXPyStatuslineToFXObject},
    { "_FXObject","_FXPyStatusline",SwigFXPyStatuslineToFXObject},
    { "_FXObject","_class_FXStatusline",SwigFXStatuslineToFXObject},
    { "_FXObject","_FXStatusline",SwigFXStatuslineToFXObject},
    { "_FXObject","_class_FXPyDragCorner",SwigFXPyDragCornerToFXObject},
    { "_FXObject","_FXPyDragCorner",SwigFXPyDragCornerToFXObject},
    { "_FXObject","_class_FXDragCorner",SwigFXDragCornerToFXObject},
    { "_FXObject","_FXDragCorner",SwigFXDragCornerToFXObject},
    { "_FXObject","_class_FXPyComboBox",SwigFXPyComboBoxToFXObject},
    { "_FXObject","_FXPyComboBox",SwigFXPyComboBoxToFXObject},
    { "_FXObject","_class_FXComboBox",SwigFXComboBoxToFXObject},
    { "_FXObject","_FXComboBox",SwigFXComboBoxToFXObject},
    { "_FXObject","_class_FXPyList",SwigFXPyListToFXObject},
    { "_FXObject","_FXPyList",SwigFXPyListToFXObject},
    { "_FXObject","_class_FXList",SwigFXListToFXObject},
    { "_FXObject","_FXList",SwigFXListToFXObject},
    { "_FXObject","_class_FXPyListItem",SwigFXPyListItemToFXObject},
    { "_FXObject","_FXPyListItem",SwigFXPyListItemToFXObject},
    { "_FXObject","_class_FXListItem",SwigFXListItemToFXObject},
    { "_FXObject","_FXListItem",SwigFXListItemToFXObject},
    { "_FXObject","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXObject},
    { "_FXObject","_FXPyScrollCorner",SwigFXPyScrollCornerToFXObject},
    { "_FXObject","_class_FXScrollCorner",SwigFXScrollCornerToFXObject},
    { "_FXObject","_FXScrollCorner",SwigFXScrollCornerToFXObject},
    { "_FXObject","_class_FXPyScrollbar",SwigFXPyScrollbarToFXObject},
    { "_FXObject","_FXPyScrollbar",SwigFXPyScrollbarToFXObject},
    { "_FXObject","_class_FXScrollbar",SwigFXScrollbarToFXObject},
    { "_FXObject","_FXScrollbar",SwigFXScrollbarToFXObject},
    { "_FXObject","_class_FXPyTabBook",SwigFXPyTabBookToFXObject},
    { "_FXObject","_FXPyTabBook",SwigFXPyTabBookToFXObject},
    { "_FXObject","_class_FXTabBook",SwigFXTabBookToFXObject},
    { "_FXObject","_FXTabBook",SwigFXTabBookToFXObject},
    { "_FXObject","_class_FXPyTabItem",SwigFXPyTabItemToFXObject},
    { "_FXObject","_FXPyTabItem",SwigFXPyTabItemToFXObject},
    { "_FXObject","_class_FXTabItem",SwigFXTabItemToFXObject},
    { "_FXObject","_FXTabItem",SwigFXTabItemToFXObject},
    { "_FXObject","_class_FXPyTabBar",SwigFXPyTabBarToFXObject},
    { "_FXObject","_FXPyTabBar",SwigFXPyTabBarToFXObject},
    { "_FXObject","_class_FXTabBar",SwigFXTabBarToFXObject},
    { "_FXObject","_FXTabBar",SwigFXTabBarToFXObject},
    { "_FXObject","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXObject},
    { "_FXObject","_FXPyOptionMenu",SwigFXPyOptionMenuToFXObject},
    { "_FXObject","_class_FXOptionMenu",SwigFXOptionMenuToFXObject},
    { "_FXObject","_FXOptionMenu",SwigFXOptionMenuToFXObject},
    { "_FXObject","_class_FXPyOption",SwigFXPyOptionToFXObject},
    { "_FXObject","_FXPyOption",SwigFXPyOptionToFXObject},
    { "_FXObject","_class_FXOption",SwigFXOptionToFXObject},
    { "_FXObject","_FXOption",SwigFXOptionToFXObject},
    { "_FXObject","_class_FXPyTooltip",SwigFXPyTooltipToFXObject},
    { "_FXObject","_FXPyTooltip",SwigFXPyTooltipToFXObject},
    { "_FXObject","_class_FXTooltip",SwigFXTooltipToFXObject},
    { "_FXObject","_FXTooltip",SwigFXTooltipToFXObject},
    { "_FXObject","_class_FXPySpinner",SwigFXPySpinnerToFXObject},
    { "_FXObject","_FXPySpinner",SwigFXPySpinnerToFXObject},
    { "_FXObject","_class_FXSpinner",SwigFXSpinnerToFXObject},
    { "_FXObject","_FXSpinner",SwigFXSpinnerToFXObject},
    { "_FXObject","_class_FXPyPicker",SwigFXPyPickerToFXObject},
    { "_FXObject","_FXPyPicker",SwigFXPyPickerToFXObject},
    { "_FXObject","_class_FXPicker",SwigFXPickerToFXObject},
    { "_FXObject","_FXPicker",SwigFXPickerToFXObject},
    { "_FXObject","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXObject},
    { "_FXObject","_FXPyArrowButton",SwigFXPyArrowButtonToFXObject},
    { "_FXObject","_class_FXArrowButton",SwigFXArrowButtonToFXObject},
    { "_FXObject","_FXArrowButton",SwigFXArrowButtonToFXObject},
    { "_FXObject","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXObject},
    { "_FXObject","_FXPyCheckButton",SwigFXPyCheckButtonToFXObject},
    { "_FXObject","_class_FXCheckButton",SwigFXCheckButtonToFXObject},
    { "_FXObject","_FXCheckButton",SwigFXCheckButtonToFXObject},
    { "_FXObject","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXObject},
    { "_FXObject","_FXPyRadioButton",SwigFXPyRadioButtonToFXObject},
    { "_FXObject","_class_FXRadioButton",SwigFXRadioButtonToFXObject},
    { "_FXObject","_FXRadioButton",SwigFXRadioButtonToFXObject},
    { "_FXObject","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXObject},
    { "_FXObject","_FXPyToggleButton",SwigFXPyToggleButtonToFXObject},
    { "_FXObject","_class_FXToggleButton",SwigFXToggleButtonToFXObject},
    { "_FXObject","_FXToggleButton",SwigFXToggleButtonToFXObject},
    { "_FXObject","_class_FXPyButton",SwigFXPyButtonToFXObject},
    { "_FXObject","_FXPyButton",SwigFXPyButtonToFXObject},
    { "_FXObject","_class_FXButton",SwigFXButtonToFXObject},
    { "_FXObject","_FXButton",SwigFXButtonToFXObject},
    { "_FXObject","_class_FXPyTextField",SwigFXPyTextFieldToFXObject},
    { "_FXObject","_FXPyTextField",SwigFXPyTextFieldToFXObject},
    { "_FXObject","_class_FXTextField",SwigFXTextFieldToFXObject},
    { "_FXObject","_FXTextField",SwigFXTextFieldToFXObject},
    { "_FXObject","_class_FXPyColorWell",SwigFXPyColorWellToFXObject},
    { "_FXObject","_FXPyColorWell",SwigFXPyColorWellToFXObject},
    { "_FXObject","_class_FXColorWell",SwigFXColorWellToFXObject},
    { "_FXObject","_FXColorWell",SwigFXColorWellToFXObject},
    { "_FXObject","_class_FXPyDial",SwigFXPyDialToFXObject},
    { "_FXObject","_FXPyDial",SwigFXPyDialToFXObject},
    { "_FXObject","_class_FXDial",SwigFXDialToFXObject},
    { "_FXObject","_FXDial",SwigFXDialToFXObject},
    { "_FXObject","_class_FXPyLabel",SwigFXPyLabelToFXObject},
    { "_FXObject","_FXPyLabel",SwigFXPyLabelToFXObject},
    { "_FXObject","_class_FXLabel",SwigFXLabelToFXObject},
    { "_FXObject","_FXLabel",SwigFXLabelToFXObject},
    { "_FXObject","_class_FXObject",0},
    { "_FXPyGIFImage","_class_FXPyGIFImage",0},
    { "_FXBMPImage","_class_FXBMPImage",0},
    { "_FXICOImage","_class_FXICOImage",0},
    { "_class_FXRGBIcon","_FXRGBIcon",0},
    { "_FXRecentFiles","_class_FXRecentFiles",0},
    { "_FXDebugTarget","_class_FXDebugTarget",0},
    { "_class_FXPyCommand","_FXPyCommand",0},
    { "_class_FXScrollArea","_class_FXPyList",SwigFXPyListToFXScrollArea},
    { "_class_FXScrollArea","_FXPyList",SwigFXPyListToFXScrollArea},
    { "_class_FXScrollArea","_class_FXList",SwigFXListToFXScrollArea},
    { "_class_FXScrollArea","_FXList",SwigFXListToFXScrollArea},
    { "_class_FXScrollArea","_FXScrollArea",0},
    { "_FXPySplitter","_class_FXPySplitter",0},
    { "_FXPyTextField","_class_FXPyTextField",0},
    { "_FXPyHeader","_class_FXPyHeader",0},
    { "_FXPCXImage","_class_FXPCXImage",0},
    { "_FXFileStream","_class_FXFileStream",0},
    { "_class_FXPyDelegator","_FXPyDelegator",0},
    { "_FXPyCanvas","_class_FXPyCanvas",0},
    { "_class_FXPyDrawable","_FXPyDrawable",0},
    { "_FXPyImage","_class_FXPyImage",0},
    { "_FXGIFIcon","_class_FXGIFIcon",0},
    { "_FXPyDial","_class_FXPyDial",0},
    { "_class_FXPyOptionMenu","_FXPyOptionMenu",0},
    { "_FXPyListBox","_class_FXPyListBox",0},
    { "_FXColor","_FXInputHandle",0},
    { "_FXColor","_FXDragType",0},
    { "_FXColor","_FXHotKey",0},
    { "_FXColor","_FXuint",0},
    { "_FXColor","_int",0},
    { "_FXColor","_unsigned_int",0},
    { "_FXColor","_FXint",0},
    { "_FXColor","_FXSelector",0},
    { "_FXColor","_FXID",0},
    { "_FXPyJPGIcon","_class_FXPyJPGIcon",0},
    { "_FXDataTarget","_class_FXDataTarget",0},
    { "_class_FXPyHorizontalFrame","_FXPyHorizontalFrame",0},
    { "_FXRadioButton","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXRadioButton},
    { "_FXRadioButton","_FXPyRadioButton",SwigFXPyRadioButtonToFXRadioButton},
    { "_FXRadioButton","_class_FXRadioButton",0},
    { "_class_FXPyList","_FXPyList",0},
    { "_FXTime","_FXPixel",0},
    { "_FXTime","_long",0},
    { "_FXTime","_signed_long",0},
    { "_FXTime","_unsigned_long",0},
    { "_FXHotKey","_FXInputHandle",0},
    { "_FXHotKey","_FXDragType",0},
    { "_FXHotKey","_FXuint",0},
    { "_FXHotKey","_int",0},
    { "_FXHotKey","_unsigned_int",0},
    { "_FXHotKey","_FXint",0},
    { "_FXHotKey","_FXSelector",0},
    { "_FXHotKey","_FXID",0},
    { "_FXHotKey","_FXColor",0},
    { "_class_FXSize","_FXSize",0},
    { "_class_FXPyObject","_FXPyObject",0},
    { "_class_FXPyShell","_FXPyShell",0},
    { "_FXPyDC","_class_FXPyDC",0},
    { "_FXSpinner","_class_FXPySpinner",SwigFXPySpinnerToFXSpinner},
    { "_FXSpinner","_FXPySpinner",SwigFXPySpinnerToFXSpinner},
    { "_FXSpinner","_class_FXSpinner",0},
    { "_struct_FXFontDesc","_FXFontDesc",0},
    { "_FXMatrix","_class_FXMatrix",0},
    { "_class_FXPyBMPIcon","_FXPyBMPIcon",0},
    { "_class_FXPyICOIcon","_FXPyICOIcon",0},
    { "_class_FXHeaderItem","_class_FXPyHeaderItem",SwigFXPyHeaderItemToFXHeaderItem},
    { "_class_FXHeaderItem","_FXPyHeaderItem",SwigFXPyHeaderItemToFXHeaderItem},
    { "_class_FXHeaderItem","_FXHeaderItem",0},
    { "_char","_FXchar",0},
    { "_FXdouble","_double",0},
    { "_FXStream","_class_FXStream",0},
    { "_FXPyStringDict","_class_FXPyStringDict",0},
    { "_FXFrame","_class_FXPyColorWheel",SwigFXPyColorWheelToFXFrame},
    { "_FXFrame","_FXPyColorWheel",SwigFXPyColorWheelToFXFrame},
    { "_FXFrame","_class_FXColorWheel",SwigFXColorWheelToFXFrame},
    { "_FXFrame","_FXColorWheel",SwigFXColorWheelToFXFrame},
    { "_FXFrame","_class_FXPyColorBar",SwigFXPyColorBarToFXFrame},
    { "_FXFrame","_FXPyColorBar",SwigFXPyColorBarToFXFrame},
    { "_FXFrame","_class_FXColorBar",SwigFXColorBarToFXFrame},
    { "_FXFrame","_FXColorBar",SwigFXColorBarToFXFrame},
    { "_FXFrame","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXFrame},
    { "_FXFrame","_FXPyToolbarTab",SwigFXPyToolbarTabToFXFrame},
    { "_FXFrame","_class_FXToolbarTab",SwigFXToolbarTabToFXFrame},
    { "_FXFrame","_FXToolbarTab",SwigFXToolbarTabToFXFrame},
    { "_FXFrame","_class_FXPyProgressBar",SwigFXPyProgressBarToFXFrame},
    { "_FXFrame","_FXPyProgressBar",SwigFXPyProgressBarToFXFrame},
    { "_FXFrame","_class_FXProgressBar",SwigFXProgressBarToFXFrame},
    { "_FXFrame","_FXProgressBar",SwigFXProgressBarToFXFrame},
    { "_FXFrame","_class_FXPyHeader",SwigFXPyHeaderToFXFrame},
    { "_FXFrame","_FXPyHeader",SwigFXPyHeaderToFXFrame},
    { "_FXFrame","_class_FXHeader",SwigFXHeaderToFXFrame},
    { "_FXFrame","_FXHeader",SwigFXHeaderToFXFrame},
    { "_FXFrame","_class_FXPySlider",SwigFXPySliderToFXFrame},
    { "_FXFrame","_FXPySlider",SwigFXPySliderToFXFrame},
    { "_FXFrame","_class_FXSlider",SwigFXSliderToFXFrame},
    { "_FXFrame","_FXSlider",SwigFXSliderToFXFrame},
    { "_FXFrame","_class_FXPyStatusline",SwigFXPyStatuslineToFXFrame},
    { "_FXFrame","_FXPyStatusline",SwigFXPyStatuslineToFXFrame},
    { "_FXFrame","_class_FXStatusline",SwigFXStatuslineToFXFrame},
    { "_FXFrame","_FXStatusline",SwigFXStatuslineToFXFrame},
    { "_FXFrame","_class_FXPyTabItem",SwigFXPyTabItemToFXFrame},
    { "_FXFrame","_FXPyTabItem",SwigFXPyTabItemToFXFrame},
    { "_FXFrame","_class_FXTabItem",SwigFXTabItemToFXFrame},
    { "_FXFrame","_FXTabItem",SwigFXTabItemToFXFrame},
    { "_FXFrame","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXFrame},
    { "_FXFrame","_FXPyOptionMenu",SwigFXPyOptionMenuToFXFrame},
    { "_FXFrame","_class_FXOptionMenu",SwigFXOptionMenuToFXFrame},
    { "_FXFrame","_FXOptionMenu",SwigFXOptionMenuToFXFrame},
    { "_FXFrame","_class_FXPyOption",SwigFXPyOptionToFXFrame},
    { "_FXFrame","_FXPyOption",SwigFXPyOptionToFXFrame},
    { "_FXFrame","_class_FXOption",SwigFXOptionToFXFrame},
    { "_FXFrame","_FXOption",SwigFXOptionToFXFrame},
    { "_FXFrame","_class_FXPyPicker",SwigFXPyPickerToFXFrame},
    { "_FXFrame","_FXPyPicker",SwigFXPyPickerToFXFrame},
    { "_FXFrame","_class_FXPicker",SwigFXPickerToFXFrame},
    { "_FXFrame","_FXPicker",SwigFXPickerToFXFrame},
    { "_FXFrame","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXFrame},
    { "_FXFrame","_FXPyArrowButton",SwigFXPyArrowButtonToFXFrame},
    { "_FXFrame","_class_FXArrowButton",SwigFXArrowButtonToFXFrame},
    { "_FXFrame","_FXArrowButton",SwigFXArrowButtonToFXFrame},
    { "_FXFrame","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXFrame},
    { "_FXFrame","_FXPyCheckButton",SwigFXPyCheckButtonToFXFrame},
    { "_FXFrame","_class_FXCheckButton",SwigFXCheckButtonToFXFrame},
    { "_FXFrame","_FXCheckButton",SwigFXCheckButtonToFXFrame},
    { "_FXFrame","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXFrame},
    { "_FXFrame","_FXPyRadioButton",SwigFXPyRadioButtonToFXFrame},
    { "_FXFrame","_class_FXRadioButton",SwigFXRadioButtonToFXFrame},
    { "_FXFrame","_FXRadioButton",SwigFXRadioButtonToFXFrame},
    { "_FXFrame","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXFrame},
    { "_FXFrame","_FXPyToggleButton",SwigFXPyToggleButtonToFXFrame},
    { "_FXFrame","_class_FXToggleButton",SwigFXToggleButtonToFXFrame},
    { "_FXFrame","_FXToggleButton",SwigFXToggleButtonToFXFrame},
    { "_FXFrame","_class_FXPyButton",SwigFXPyButtonToFXFrame},
    { "_FXFrame","_FXPyButton",SwigFXPyButtonToFXFrame},
    { "_FXFrame","_class_FXButton",SwigFXButtonToFXFrame},
    { "_FXFrame","_FXButton",SwigFXButtonToFXFrame},
    { "_FXFrame","_class_FXPyTextField",SwigFXPyTextFieldToFXFrame},
    { "_FXFrame","_FXPyTextField",SwigFXPyTextFieldToFXFrame},
    { "_FXFrame","_class_FXTextField",SwigFXTextFieldToFXFrame},
    { "_FXFrame","_FXTextField",SwigFXTextFieldToFXFrame},
    { "_FXFrame","_class_FXPyColorWell",SwigFXPyColorWellToFXFrame},
    { "_FXFrame","_FXPyColorWell",SwigFXPyColorWellToFXFrame},
    { "_FXFrame","_class_FXColorWell",SwigFXColorWellToFXFrame},
    { "_FXFrame","_FXColorWell",SwigFXColorWellToFXFrame},
    { "_FXFrame","_class_FXPyDial",SwigFXPyDialToFXFrame},
    { "_FXFrame","_FXPyDial",SwigFXPyDialToFXFrame},
    { "_FXFrame","_class_FXDial",SwigFXDialToFXFrame},
    { "_FXFrame","_FXDial",SwigFXDialToFXFrame},
    { "_FXFrame","_class_FXPyLabel",SwigFXPyLabelToFXFrame},
    { "_FXFrame","_FXPyLabel",SwigFXPyLabelToFXFrame},
    { "_FXFrame","_class_FXLabel",SwigFXLabelToFXFrame},
    { "_FXFrame","_FXLabel",SwigFXLabelToFXFrame},
    { "_FXFrame","_class_FXFrame",0},
    { "_class_FXPicker","_class_FXPyPicker",SwigFXPyPickerToFXPicker},
    { "_class_FXPicker","_FXPyPicker",SwigFXPyPickerToFXPicker},
    { "_class_FXPicker","_FXPicker",0},
    { "_FXPyToolbarGrip","_class_FXPyToolbarGrip",0},
    { "_FXPyColorBar","_class_FXPyColorBar",0},
    { "_FXObjectPtr","_FXObject_p",0},
    { "_FXPyComposite","_class_FXPyComposite",0},
    { "_class_FXShutterItem","_FXShutterItem",0},
    { "_class_FXPyArrowButton","_FXPyArrowButton",0},
    { "_class_FXDelegator","_FXDelegator",0},
    { "_FXVerticalFrame","_class_FXVerticalFrame",0},
    { "_class_FXPyMatrix","_FXPyMatrix",0},
    { "_class_FXSlider","_class_FXPySlider",SwigFXPySliderToFXSlider},
    { "_class_FXSlider","_FXPySlider",SwigFXPySliderToFXSlider},
    { "_class_FXSlider","_FXSlider",0},
    { "_FXbool","_FXuchar",0},
    { "_FXbool","_unsigned_char",0},
    { "_class_FXTGAImage","_FXTGAImage",0},
    { "_class_FXPyStream","_FXPyStream",0},
    { "_FXStringDict","_class_FXStringDict",0},
    { "_FXPyGroupBox","_class_FXPyGroupBox",0},
    { "_class_FXPyCheckButton","_FXPyCheckButton",0},
    { "_class_FXPyToolbar","_FXPyToolbar",0},
    { "_class_FXPyApp","_FXPyApp",0},
    { "_class_FXDCWindow","_FXDCWindow",0},
    { "_class_FXPyShutter","_FXPyShutter",0},
    { "_FXPyWindow","_class_FXPyWindow",0},
    { "_class_FXRootWindow","_FXRootWindow",0},
    { "_class_FXPyXPMImage","_FXPyXPMImage",0},
    { "_FXPyListItem","_class_FXPyListItem",0},
    { "_class_FXPyGIFImage","_FXPyGIFImage",0},
    { "_class_FXPyVerticalFrame","_FXPyVerticalFrame",0},
    { "_class_FXPySplitter","_FXPySplitter",0},
    { "_class_FXLabel","_class_FXPyTabItem",SwigFXPyTabItemToFXLabel},
    { "_class_FXLabel","_FXPyTabItem",SwigFXPyTabItemToFXLabel},
    { "_class_FXLabel","_class_FXTabItem",SwigFXTabItemToFXLabel},
    { "_class_FXLabel","_FXTabItem",SwigFXTabItemToFXLabel},
    { "_class_FXLabel","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXLabel},
    { "_class_FXLabel","_FXPyOptionMenu",SwigFXPyOptionMenuToFXLabel},
    { "_class_FXLabel","_class_FXOptionMenu",SwigFXOptionMenuToFXLabel},
    { "_class_FXLabel","_FXOptionMenu",SwigFXOptionMenuToFXLabel},
    { "_class_FXLabel","_class_FXPyOption",SwigFXPyOptionToFXLabel},
    { "_class_FXLabel","_FXPyOption",SwigFXPyOptionToFXLabel},
    { "_class_FXLabel","_class_FXOption",SwigFXOptionToFXLabel},
    { "_class_FXLabel","_FXOption",SwigFXOptionToFXLabel},
    { "_class_FXLabel","_class_FXPyPicker",SwigFXPyPickerToFXLabel},
    { "_class_FXLabel","_FXPyPicker",SwigFXPyPickerToFXLabel},
    { "_class_FXLabel","_class_FXPicker",SwigFXPickerToFXLabel},
    { "_class_FXLabel","_FXPicker",SwigFXPickerToFXLabel},
    { "_class_FXLabel","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXLabel},
    { "_class_FXLabel","_FXPyCheckButton",SwigFXPyCheckButtonToFXLabel},
    { "_class_FXLabel","_class_FXCheckButton",SwigFXCheckButtonToFXLabel},
    { "_class_FXLabel","_FXCheckButton",SwigFXCheckButtonToFXLabel},
    { "_class_FXLabel","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXLabel},
    { "_class_FXLabel","_FXPyRadioButton",SwigFXPyRadioButtonToFXLabel},
    { "_class_FXLabel","_class_FXRadioButton",SwigFXRadioButtonToFXLabel},
    { "_class_FXLabel","_FXRadioButton",SwigFXRadioButtonToFXLabel},
    { "_class_FXLabel","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXLabel},
    { "_class_FXLabel","_FXPyToggleButton",SwigFXPyToggleButtonToFXLabel},
    { "_class_FXLabel","_class_FXToggleButton",SwigFXToggleButtonToFXLabel},
    { "_class_FXLabel","_FXToggleButton",SwigFXToggleButtonToFXLabel},
    { "_class_FXLabel","_class_FXPyButton",SwigFXPyButtonToFXLabel},
    { "_class_FXLabel","_FXPyButton",SwigFXPyButtonToFXLabel},
    { "_class_FXLabel","_class_FXButton",SwigFXButtonToFXLabel},
    { "_class_FXLabel","_FXButton",SwigFXButtonToFXLabel},
    { "_class_FXLabel","_class_FXPyLabel",SwigFXPyLabelToFXLabel},
    { "_class_FXLabel","_FXPyLabel",SwigFXPyLabelToFXLabel},
    { "_class_FXLabel","_FXLabel",0},
    { "_class_FXFileStream","_FXFileStream",0},
    { "_class_FXPyMainWindow","_FXPyMainWindow",0},
    { "_class_FXHorizontalFrame","_class_FXPyStatusbar",SwigFXPyStatusbarToFXHorizontalFrame},
    { "_class_FXHorizontalFrame","_FXPyStatusbar",SwigFXPyStatusbarToFXHorizontalFrame},
    { "_class_FXHorizontalFrame","_class_FXStatusbar",SwigFXStatusbarToFXHorizontalFrame},
    { "_class_FXHorizontalFrame","_FXStatusbar",SwigFXStatusbarToFXHorizontalFrame},
    { "_class_FXHorizontalFrame","_FXHorizontalFrame",0},
    { "_FXButton","_class_FXPyPicker",SwigFXPyPickerToFXButton},
    { "_FXButton","_FXPyPicker",SwigFXPyPickerToFXButton},
    { "_FXButton","_class_FXPicker",SwigFXPickerToFXButton},
    { "_FXButton","_FXPicker",SwigFXPickerToFXButton},
    { "_FXButton","_class_FXPyButton",SwigFXPyButtonToFXButton},
    { "_FXButton","_FXPyButton",SwigFXPyButtonToFXButton},
    { "_FXButton","_class_FXButton",0},
    { "_FXPyScrollbar","_class_FXPyScrollbar",0},
    { "_class_FXProgressBar","_class_FXPyProgressBar",SwigFXPyProgressBarToFXProgressBar},
    { "_class_FXProgressBar","_FXPyProgressBar",SwigFXPyProgressBarToFXProgressBar},
    { "_class_FXProgressBar","_FXProgressBar",0},
    { "_class_FXPyImage","_FXPyImage",0},
    { "_class_FXGIFIcon","_FXGIFIcon",0},
    { "_class_FXPyRGBIcon","_FXPyRGBIcon",0},
    { "_FXPyPacker","_class_FXPyPacker",0},
    { "_class_FXPyScrollWindow","_FXPyScrollWindow",0},
    { "_FXPyToolbarTab","_class_FXPyToolbarTab",0},
    { "_unsigned_long","_FXPixel",0},
    { "_unsigned_long","_FXTime",0},
    { "_unsigned_long","_long",0},
    { "_class_FXDataTarget","_FXDataTarget",0},
    { "_class_FXScrollWindow","_FXScrollWindow",0},
    { "_FXDial","_class_FXPyDial",SwigFXPyDialToFXDial},
    { "_FXDial","_FXPyDial",SwigFXPyDialToFXDial},
    { "_FXDial","_class_FXDial",0},
    { "_class_FXPyDC","_FXPyDC",0},
    { "_FXPyVerticalSeparator","_class_FXPyVerticalSeparator",0},
    { "_class_FXSpinner","_class_FXPySpinner",SwigFXPySpinnerToFXSpinner},
    { "_class_FXSpinner","_FXPySpinner",SwigFXPySpinnerToFXSpinner},
    { "_class_FXSpinner","_FXSpinner",0},
    { "_class_FXPyButton","_FXPyButton",0},
    { "_FXPCXIcon","_class_FXPCXIcon",0},
    { "_FXSwitcher","_class_FXSwitcher",0},
    { "_FXToolbarTab","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXToolbarTab},
    { "_FXToolbarTab","_FXPyToolbarTab",SwigFXPyToolbarTabToFXToolbarTab},
    { "_FXToolbarTab","_class_FXToolbarTab",0},
    { "_class_FXJPGImage","_FXJPGImage",0},
    { "_class_FXPyToolbarGrip","_FXPyToolbarGrip",0},
    { "_class_FXPyColorBar","_FXPyColorBar",0},
    { "_class_FXPyIcon","_FXPyIcon",0},
    { "_class_FXPyAccelTable","_FXPyAccelTable",0},
    { "_class_FXDC","_FXDC",0},
    { "_FXTabItem","_class_FXPyTabItem",SwigFXPyTabItemToFXTabItem},
    { "_FXTabItem","_FXPyTabItem",SwigFXPyTabItemToFXTabItem},
    { "_FXTabItem","_class_FXTabItem",0},
    { "_FXVisual","_class_FXVisual",0},
    { "_FXPyTIFImage","_class_FXPyTIFImage",0},
    { "_FXPNGIcon","_class_FXPNGIcon",0},
    { "_class_FXPopup","_FXPopup",0},
    { "_class_FXVerticalFrame","_FXVerticalFrame",0},
    { "_class_FXPyDragCorner","_FXPyDragCorner",0},
    { "_FXStatusbar","_class_FXPyStatusbar",SwigFXPyStatusbarToFXStatusbar},
    { "_FXStatusbar","_FXPyStatusbar",SwigFXPyStatusbarToFXStatusbar},
    { "_FXStatusbar","_class_FXStatusbar",0},
    { "_signed_int","_FXInputHandle",0},
    { "_signed_int","_FXint",0},
    { "_signed_int","_int",0},
    { "_class_FXPy4Splitter","_FXPy4Splitter",0},
    { "_FXArrowButton","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXArrowButton},
    { "_FXArrowButton","_FXPyArrowButton",SwigFXPyArrowButtonToFXArrowButton},
    { "_FXArrowButton","_class_FXArrowButton",0},
    { "_FXPNGImage","_class_FXPNGImage",0},
    { "_FXPyTGAIcon","_class_FXPyTGAIcon",0},
    { "_FXPyDict","_class_FXPyDict",0},
    { "_class_FXStringDict","_FXStringDict",0},
    { "_FXRegion","_class_FXRegion",0},
    { "_class_FXPyGroupBox","_FXPyGroupBox",0},
    { "_FXPyPicker","_class_FXPyPicker",0},
    { "_class_FXDriveBox","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXDriveBox},
    { "_class_FXDriveBox","_FXPyDriveBox",SwigFXPyDriveBoxToFXDriveBox},
    { "_class_FXDriveBox","_FXDriveBox",0},
    { "_FXVerticalSeparator","_class_FXVerticalSeparator",0},
    { "_FXToggleButton","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXToggleButton},
    { "_FXToggleButton","_FXPyToggleButton",SwigFXPyToggleButtonToFXToggleButton},
    { "_FXToggleButton","_class_FXToggleButton",0},
    { "_FXRawEvent","__XEvent",0},
    { "_class_FXPyVisual","_FXPyVisual",0},
    { "_FXShell","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXShell},
    { "_FXShell","_FXPyToolbarShell",SwigFXPyToolbarShellToFXShell},
    { "_FXShell","_class_FXToolbarShell",SwigFXToolbarShellToFXShell},
    { "_FXShell","_FXToolbarShell",SwigFXToolbarShellToFXShell},
    { "_FXShell","_class_FXPyTooltip",SwigFXPyTooltipToFXShell},
    { "_FXShell","_FXPyTooltip",SwigFXPyTooltipToFXShell},
    { "_FXShell","_class_FXTooltip",SwigFXTooltipToFXShell},
    { "_FXShell","_FXTooltip",SwigFXTooltipToFXShell},
    { "_FXShell","_class_FXShell",0},
    { "_FXPyComboBox","_class_FXPyComboBox",0},
    { "_FXHeader","_class_FXPyHeader",SwigFXPyHeaderToFXHeader},
    { "_FXHeader","_FXPyHeader",SwigFXPyHeaderToFXHeader},
    { "_FXHeader","_class_FXHeader",0},
    { "_FXCanvas","_class_FXCanvas",0},
    { "_FXCheckButton","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXCheckButton},
    { "_FXCheckButton","_FXPyCheckButton",SwigFXPyCheckButtonToFXCheckButton},
    { "_FXCheckButton","_class_FXCheckButton",0},
    { "_FXPySlider","_class_FXPySlider",0},
    { "_class_FXRGBImage","_FXRGBImage",0},
    { "_class_FXPyToolbarShell","_FXPyToolbarShell",0},
    { "_unsigned_short","_FXshort",0},
    { "_unsigned_short","_FXushort",0},
    { "_unsigned_short","_short",0},
    { "_class_FXPyTopWindow","_FXPyTopWindow",0},
    { "_class_FXPyScrollCorner","_FXPyScrollCorner",0},
    { "_class_FXPyListItem","_FXPyListItem",0},
    { "_class_FXToolbarShell","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXToolbarShell},
    { "_class_FXToolbarShell","_FXPyToolbarShell",SwigFXPyToolbarShellToFXToolbarShell},
    { "_class_FXToolbarShell","_FXToolbarShell",0},
    { "_class_FXBMPImage","_FXBMPImage",0},
    { "_class_FXICOImage","_FXICOImage",0},
    { "_class_FXRecentFiles","_FXRecentFiles",0},
    { "_class_FXDebugTarget","_FXDebugTarget",0},
    { "_class_FXPyTextField","_FXPyTextField",0},
    { "_class_FXScrollCorner","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXScrollCorner},
    { "_class_FXScrollCorner","_FXPyScrollCorner",SwigFXPyScrollCornerToFXScrollCorner},
    { "_class_FXScrollCorner","_FXScrollCorner",0},
    { "_class_FXPyHeader","_FXPyHeader",0},
    { "_FXListBox","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXListBox},
    { "_FXListBox","_FXPyDriveBox",SwigFXPyDriveBoxToFXListBox},
    { "_FXListBox","_class_FXDriveBox",SwigFXDriveBoxToFXListBox},
    { "_FXListBox","_FXDriveBox",SwigFXDriveBoxToFXListBox},
    { "_FXListBox","_class_FXPyListBox",SwigFXPyListBoxToFXListBox},
    { "_FXListBox","_FXPyListBox",SwigFXPyListBoxToFXListBox},
    { "_FXListBox","_class_FXListBox",0},
    { "_FXDrawable","_class_FXPyColorWheel",SwigFXPyColorWheelToFXDrawable},
    { "_FXDrawable","_FXPyColorWheel",SwigFXPyColorWheelToFXDrawable},
    { "_FXDrawable","_class_FXColorWheel",SwigFXColorWheelToFXDrawable},
    { "_FXDrawable","_FXColorWheel",SwigFXColorWheelToFXDrawable},
    { "_FXDrawable","_class_FXPyColorBar",SwigFXPyColorBarToFXDrawable},
    { "_FXDrawable","_FXPyColorBar",SwigFXPyColorBarToFXDrawable},
    { "_FXDrawable","_class_FXColorBar",SwigFXColorBarToFXDrawable},
    { "_FXDrawable","_FXColorBar",SwigFXColorBarToFXDrawable},
    { "_FXDrawable","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXDrawable},
    { "_FXDrawable","_FXPyDriveBox",SwigFXPyDriveBoxToFXDrawable},
    { "_FXDrawable","_class_FXDriveBox",SwigFXDriveBoxToFXDrawable},
    { "_FXDrawable","_FXDriveBox",SwigFXDriveBoxToFXDrawable},
    { "_FXDrawable","_class_FXPyListBox",SwigFXPyListBoxToFXDrawable},
    { "_FXDrawable","_FXPyListBox",SwigFXPyListBoxToFXDrawable},
    { "_FXDrawable","_class_FXListBox",SwigFXListBoxToFXDrawable},
    { "_FXDrawable","_FXListBox",SwigFXListBoxToFXDrawable},
    { "_FXDrawable","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXDrawable},
    { "_FXDrawable","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXDrawable},
    { "_FXDrawable","_class_FXToolbarGrip",SwigFXToolbarGripToFXDrawable},
    { "_FXDrawable","_FXToolbarGrip",SwigFXToolbarGripToFXDrawable},
    { "_FXDrawable","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXDrawable},
    { "_FXDrawable","_FXPyToolbarShell",SwigFXPyToolbarShellToFXDrawable},
    { "_FXDrawable","_class_FXToolbarShell",SwigFXToolbarShellToFXDrawable},
    { "_FXDrawable","_FXToolbarShell",SwigFXToolbarShellToFXDrawable},
    { "_FXDrawable","_class_FXPyToolbar",SwigFXPyToolbarToFXDrawable},
    { "_FXDrawable","_FXPyToolbar",SwigFXPyToolbarToFXDrawable},
    { "_FXDrawable","_class_FXToolbar",SwigFXToolbarToFXDrawable},
    { "_FXDrawable","_FXToolbar",SwigFXToolbarToFXDrawable},
    { "_FXDrawable","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXDrawable},
    { "_FXDrawable","_FXPyToolbarTab",SwigFXPyToolbarTabToFXDrawable},
    { "_FXDrawable","_class_FXToolbarTab",SwigFXToolbarTabToFXDrawable},
    { "_FXDrawable","_FXToolbarTab",SwigFXToolbarTabToFXDrawable},
    { "_FXDrawable","_class_FXPyProgressBar",SwigFXPyProgressBarToFXDrawable},
    { "_FXDrawable","_FXPyProgressBar",SwigFXPyProgressBarToFXDrawable},
    { "_FXDrawable","_class_FXProgressBar",SwigFXProgressBarToFXDrawable},
    { "_FXDrawable","_FXProgressBar",SwigFXProgressBarToFXDrawable},
    { "_FXDrawable","_class_FXPyHeader",SwigFXPyHeaderToFXDrawable},
    { "_FXDrawable","_FXPyHeader",SwigFXPyHeaderToFXDrawable},
    { "_FXDrawable","_class_FXHeader",SwigFXHeaderToFXDrawable},
    { "_FXDrawable","_FXHeader",SwigFXHeaderToFXDrawable},
    { "_FXDrawable","_class_FXPySlider",SwigFXPySliderToFXDrawable},
    { "_FXDrawable","_FXPySlider",SwigFXPySliderToFXDrawable},
    { "_FXDrawable","_class_FXSlider",SwigFXSliderToFXDrawable},
    { "_FXDrawable","_FXSlider",SwigFXSliderToFXDrawable},
    { "_FXDrawable","_class_FXPyStatusbar",SwigFXPyStatusbarToFXDrawable},
    { "_FXDrawable","_FXPyStatusbar",SwigFXPyStatusbarToFXDrawable},
    { "_FXDrawable","_class_FXStatusbar",SwigFXStatusbarToFXDrawable},
    { "_FXDrawable","_FXStatusbar",SwigFXStatusbarToFXDrawable},
    { "_FXDrawable","_class_FXPyStatusline",SwigFXPyStatuslineToFXDrawable},
    { "_FXDrawable","_FXPyStatusline",SwigFXPyStatuslineToFXDrawable},
    { "_FXDrawable","_class_FXStatusline",SwigFXStatuslineToFXDrawable},
    { "_FXDrawable","_FXStatusline",SwigFXStatuslineToFXDrawable},
    { "_FXDrawable","_class_FXPyDragCorner",SwigFXPyDragCornerToFXDrawable},
    { "_FXDrawable","_FXPyDragCorner",SwigFXPyDragCornerToFXDrawable},
    { "_FXDrawable","_class_FXDragCorner",SwigFXDragCornerToFXDrawable},
    { "_FXDrawable","_FXDragCorner",SwigFXDragCornerToFXDrawable},
    { "_FXDrawable","_class_FXPyComboBox",SwigFXPyComboBoxToFXDrawable},
    { "_FXDrawable","_FXPyComboBox",SwigFXPyComboBoxToFXDrawable},
    { "_FXDrawable","_class_FXComboBox",SwigFXComboBoxToFXDrawable},
    { "_FXDrawable","_FXComboBox",SwigFXComboBoxToFXDrawable},
    { "_FXDrawable","_class_FXPyList",SwigFXPyListToFXDrawable},
    { "_FXDrawable","_FXPyList",SwigFXPyListToFXDrawable},
    { "_FXDrawable","_class_FXList",SwigFXListToFXDrawable},
    { "_FXDrawable","_FXList",SwigFXListToFXDrawable},
    { "_FXDrawable","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXDrawable},
    { "_FXDrawable","_FXPyScrollCorner",SwigFXPyScrollCornerToFXDrawable},
    { "_FXDrawable","_class_FXScrollCorner",SwigFXScrollCornerToFXDrawable},
    { "_FXDrawable","_FXScrollCorner",SwigFXScrollCornerToFXDrawable},
    { "_FXDrawable","_class_FXPyScrollbar",SwigFXPyScrollbarToFXDrawable},
    { "_FXDrawable","_FXPyScrollbar",SwigFXPyScrollbarToFXDrawable},
    { "_FXDrawable","_class_FXScrollbar",SwigFXScrollbarToFXDrawable},
    { "_FXDrawable","_FXScrollbar",SwigFXScrollbarToFXDrawable},
    { "_FXDrawable","_class_FXPyTabBook",SwigFXPyTabBookToFXDrawable},
    { "_FXDrawable","_FXPyTabBook",SwigFXPyTabBookToFXDrawable},
    { "_FXDrawable","_class_FXTabBook",SwigFXTabBookToFXDrawable},
    { "_FXDrawable","_FXTabBook",SwigFXTabBookToFXDrawable},
    { "_FXDrawable","_class_FXPyTabItem",SwigFXPyTabItemToFXDrawable},
    { "_FXDrawable","_FXPyTabItem",SwigFXPyTabItemToFXDrawable},
    { "_FXDrawable","_class_FXTabItem",SwigFXTabItemToFXDrawable},
    { "_FXDrawable","_FXTabItem",SwigFXTabItemToFXDrawable},
    { "_FXDrawable","_class_FXPyTabBar",SwigFXPyTabBarToFXDrawable},
    { "_FXDrawable","_FXPyTabBar",SwigFXPyTabBarToFXDrawable},
    { "_FXDrawable","_class_FXTabBar",SwigFXTabBarToFXDrawable},
    { "_FXDrawable","_FXTabBar",SwigFXTabBarToFXDrawable},
    { "_FXDrawable","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXDrawable},
    { "_FXDrawable","_FXPyOptionMenu",SwigFXPyOptionMenuToFXDrawable},
    { "_FXDrawable","_class_FXOptionMenu",SwigFXOptionMenuToFXDrawable},
    { "_FXDrawable","_FXOptionMenu",SwigFXOptionMenuToFXDrawable},
    { "_FXDrawable","_class_FXPyOption",SwigFXPyOptionToFXDrawable},
    { "_FXDrawable","_FXPyOption",SwigFXPyOptionToFXDrawable},
    { "_FXDrawable","_class_FXOption",SwigFXOptionToFXDrawable},
    { "_FXDrawable","_FXOption",SwigFXOptionToFXDrawable},
    { "_FXDrawable","_class_FXPyTooltip",SwigFXPyTooltipToFXDrawable},
    { "_FXDrawable","_FXPyTooltip",SwigFXPyTooltipToFXDrawable},
    { "_FXDrawable","_class_FXTooltip",SwigFXTooltipToFXDrawable},
    { "_FXDrawable","_FXTooltip",SwigFXTooltipToFXDrawable},
    { "_FXDrawable","_class_FXPySpinner",SwigFXPySpinnerToFXDrawable},
    { "_FXDrawable","_FXPySpinner",SwigFXPySpinnerToFXDrawable},
    { "_FXDrawable","_class_FXSpinner",SwigFXSpinnerToFXDrawable},
    { "_FXDrawable","_FXSpinner",SwigFXSpinnerToFXDrawable},
    { "_FXDrawable","_class_FXPyPicker",SwigFXPyPickerToFXDrawable},
    { "_FXDrawable","_FXPyPicker",SwigFXPyPickerToFXDrawable},
    { "_FXDrawable","_class_FXPicker",SwigFXPickerToFXDrawable},
    { "_FXDrawable","_FXPicker",SwigFXPickerToFXDrawable},
    { "_FXDrawable","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXDrawable},
    { "_FXDrawable","_FXPyArrowButton",SwigFXPyArrowButtonToFXDrawable},
    { "_FXDrawable","_class_FXArrowButton",SwigFXArrowButtonToFXDrawable},
    { "_FXDrawable","_FXArrowButton",SwigFXArrowButtonToFXDrawable},
    { "_FXDrawable","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXDrawable},
    { "_FXDrawable","_FXPyCheckButton",SwigFXPyCheckButtonToFXDrawable},
    { "_FXDrawable","_class_FXCheckButton",SwigFXCheckButtonToFXDrawable},
    { "_FXDrawable","_FXCheckButton",SwigFXCheckButtonToFXDrawable},
    { "_FXDrawable","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXDrawable},
    { "_FXDrawable","_FXPyRadioButton",SwigFXPyRadioButtonToFXDrawable},
    { "_FXDrawable","_class_FXRadioButton",SwigFXRadioButtonToFXDrawable},
    { "_FXDrawable","_FXRadioButton",SwigFXRadioButtonToFXDrawable},
    { "_FXDrawable","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXDrawable},
    { "_FXDrawable","_FXPyToggleButton",SwigFXPyToggleButtonToFXDrawable},
    { "_FXDrawable","_class_FXToggleButton",SwigFXToggleButtonToFXDrawable},
    { "_FXDrawable","_FXToggleButton",SwigFXToggleButtonToFXDrawable},
    { "_FXDrawable","_class_FXPyButton",SwigFXPyButtonToFXDrawable},
    { "_FXDrawable","_FXPyButton",SwigFXPyButtonToFXDrawable},
    { "_FXDrawable","_class_FXButton",SwigFXButtonToFXDrawable},
    { "_FXDrawable","_FXButton",SwigFXButtonToFXDrawable},
    { "_FXDrawable","_class_FXPyTextField",SwigFXPyTextFieldToFXDrawable},
    { "_FXDrawable","_FXPyTextField",SwigFXPyTextFieldToFXDrawable},
    { "_FXDrawable","_class_FXTextField",SwigFXTextFieldToFXDrawable},
    { "_FXDrawable","_FXTextField",SwigFXTextFieldToFXDrawable},
    { "_FXDrawable","_class_FXPyColorWell",SwigFXPyColorWellToFXDrawable},
    { "_FXDrawable","_FXPyColorWell",SwigFXPyColorWellToFXDrawable},
    { "_FXDrawable","_class_FXColorWell",SwigFXColorWellToFXDrawable},
    { "_FXDrawable","_FXColorWell",SwigFXColorWellToFXDrawable},
    { "_FXDrawable","_class_FXPyDial",SwigFXPyDialToFXDrawable},
    { "_FXDrawable","_FXPyDial",SwigFXPyDialToFXDrawable},
    { "_FXDrawable","_class_FXDial",SwigFXDialToFXDrawable},
    { "_FXDrawable","_FXDial",SwigFXDialToFXDrawable},
    { "_FXDrawable","_class_FXPyLabel",SwigFXPyLabelToFXDrawable},
    { "_FXDrawable","_FXPyLabel",SwigFXPyLabelToFXDrawable},
    { "_FXDrawable","_class_FXLabel",SwigFXLabelToFXDrawable},
    { "_FXDrawable","_FXLabel",SwigFXLabelToFXDrawable},
    { "_FXDrawable","_class_FXDrawable",0},
    { "_class_FXPCXImage","_FXPCXImage",0},
    { "_FXJPGIcon","_class_FXJPGIcon",0},
    { "_class_FXPyCanvas","_FXPyCanvas",0},
    { "_class_FX4Splitter","_FX4Splitter",0},
    { "_class_FXOption","_class_FXPyOption",SwigFXPyOptionToFXOption},
    { "_class_FXOption","_FXPyOption",SwigFXPyOptionToFXOption},
    { "_class_FXOption","_FXOption",0},
    { "_FXPyXPMIcon","_class_FXPyXPMIcon",0},
    { "_FXObject_p","_FXObjectPtr",0},
    { "_FXID","_FXInputHandle",0},
    { "_FXID","_FXDragType",0},
    { "_FXID","_FXHotKey",0},
    { "_FXID","_FXColor",0},
    { "_FXID","_unsigned_int",0},
    { "_FXID","_int",0},
    { "_FXID","_FXuint",0},
    { "_FXID","_FXint",0},
    { "_FXID","_FXSelector",0},
    { "_FXHorizontalSeparator","_class_FXHorizontalSeparator",0},
    { "_class_FXDial","_class_FXPyDial",SwigFXPyDialToFXDial},
    { "_class_FXDial","_FXPyDial",SwigFXPyDialToFXDial},
    { "_class_FXDial","_FXDial",0},
    { "_class_FXRadioButton","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXRadioButton},
    { "_class_FXRadioButton","_FXPyRadioButton",SwigFXPyRadioButtonToFXRadioButton},
    { "_class_FXRadioButton","_FXRadioButton",0},
    { "_class_FXPyGIFIcon","_FXPyGIFIcon",0},
    { "_class_FXPyVerticalSeparator","_FXPyVerticalSeparator",0},
    { "_struct_FXPrinter","_FXPrinter",0},
    { "_FXPyTIFIcon","_class_FXPyTIFIcon",0},
    { "_class_FXPCXIcon","_FXPCXIcon",0},
    { "_class_FXPySpinner","_FXPySpinner",0},
    { "_class_FXToolbarTab","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXToolbarTab},
    { "_class_FXToolbarTab","_FXPyToolbarTab",SwigFXPyToolbarTabToFXToolbarTab},
    { "_class_FXToolbarTab","_FXToolbarTab",0},
    { "_signed_short","_FXshort",0},
    { "_signed_short","_short",0},
    { "_class_FXFrame","_class_FXPyColorWheel",SwigFXPyColorWheelToFXFrame},
    { "_class_FXFrame","_FXPyColorWheel",SwigFXPyColorWheelToFXFrame},
    { "_class_FXFrame","_class_FXColorWheel",SwigFXColorWheelToFXFrame},
    { "_class_FXFrame","_FXColorWheel",SwigFXColorWheelToFXFrame},
    { "_class_FXFrame","_class_FXPyColorBar",SwigFXPyColorBarToFXFrame},
    { "_class_FXFrame","_FXPyColorBar",SwigFXPyColorBarToFXFrame},
    { "_class_FXFrame","_class_FXColorBar",SwigFXColorBarToFXFrame},
    { "_class_FXFrame","_FXColorBar",SwigFXColorBarToFXFrame},
    { "_class_FXFrame","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXFrame},
    { "_class_FXFrame","_FXPyToolbarTab",SwigFXPyToolbarTabToFXFrame},
    { "_class_FXFrame","_class_FXToolbarTab",SwigFXToolbarTabToFXFrame},
    { "_class_FXFrame","_FXToolbarTab",SwigFXToolbarTabToFXFrame},
    { "_class_FXFrame","_class_FXPyProgressBar",SwigFXPyProgressBarToFXFrame},
    { "_class_FXFrame","_FXPyProgressBar",SwigFXPyProgressBarToFXFrame},
    { "_class_FXFrame","_class_FXProgressBar",SwigFXProgressBarToFXFrame},
    { "_class_FXFrame","_FXProgressBar",SwigFXProgressBarToFXFrame},
    { "_class_FXFrame","_class_FXPyHeader",SwigFXPyHeaderToFXFrame},
    { "_class_FXFrame","_FXPyHeader",SwigFXPyHeaderToFXFrame},
    { "_class_FXFrame","_class_FXHeader",SwigFXHeaderToFXFrame},
    { "_class_FXFrame","_FXHeader",SwigFXHeaderToFXFrame},
    { "_class_FXFrame","_class_FXPySlider",SwigFXPySliderToFXFrame},
    { "_class_FXFrame","_FXPySlider",SwigFXPySliderToFXFrame},
    { "_class_FXFrame","_class_FXSlider",SwigFXSliderToFXFrame},
    { "_class_FXFrame","_FXSlider",SwigFXSliderToFXFrame},
    { "_class_FXFrame","_class_FXPyStatusline",SwigFXPyStatuslineToFXFrame},
    { "_class_FXFrame","_FXPyStatusline",SwigFXPyStatuslineToFXFrame},
    { "_class_FXFrame","_class_FXStatusline",SwigFXStatuslineToFXFrame},
    { "_class_FXFrame","_FXStatusline",SwigFXStatuslineToFXFrame},
    { "_class_FXFrame","_class_FXPyTabItem",SwigFXPyTabItemToFXFrame},
    { "_class_FXFrame","_FXPyTabItem",SwigFXPyTabItemToFXFrame},
    { "_class_FXFrame","_class_FXTabItem",SwigFXTabItemToFXFrame},
    { "_class_FXFrame","_FXTabItem",SwigFXTabItemToFXFrame},
    { "_class_FXFrame","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXFrame},
    { "_class_FXFrame","_FXPyOptionMenu",SwigFXPyOptionMenuToFXFrame},
    { "_class_FXFrame","_class_FXOptionMenu",SwigFXOptionMenuToFXFrame},
    { "_class_FXFrame","_FXOptionMenu",SwigFXOptionMenuToFXFrame},
    { "_class_FXFrame","_class_FXPyOption",SwigFXPyOptionToFXFrame},
    { "_class_FXFrame","_FXPyOption",SwigFXPyOptionToFXFrame},
    { "_class_FXFrame","_class_FXOption",SwigFXOptionToFXFrame},
    { "_class_FXFrame","_FXOption",SwigFXOptionToFXFrame},
    { "_class_FXFrame","_class_FXPyPicker",SwigFXPyPickerToFXFrame},
    { "_class_FXFrame","_FXPyPicker",SwigFXPyPickerToFXFrame},
    { "_class_FXFrame","_class_FXPicker",SwigFXPickerToFXFrame},
    { "_class_FXFrame","_FXPicker",SwigFXPickerToFXFrame},
    { "_class_FXFrame","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXFrame},
    { "_class_FXFrame","_FXPyArrowButton",SwigFXPyArrowButtonToFXFrame},
    { "_class_FXFrame","_class_FXArrowButton",SwigFXArrowButtonToFXFrame},
    { "_class_FXFrame","_FXArrowButton",SwigFXArrowButtonToFXFrame},
    { "_class_FXFrame","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXFrame},
    { "_class_FXFrame","_FXPyCheckButton",SwigFXPyCheckButtonToFXFrame},
    { "_class_FXFrame","_class_FXCheckButton",SwigFXCheckButtonToFXFrame},
    { "_class_FXFrame","_FXCheckButton",SwigFXCheckButtonToFXFrame},
    { "_class_FXFrame","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXFrame},
    { "_class_FXFrame","_FXPyRadioButton",SwigFXPyRadioButtonToFXFrame},
    { "_class_FXFrame","_class_FXRadioButton",SwigFXRadioButtonToFXFrame},
    { "_class_FXFrame","_FXRadioButton",SwigFXRadioButtonToFXFrame},
    { "_class_FXFrame","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXFrame},
    { "_class_FXFrame","_FXPyToggleButton",SwigFXPyToggleButtonToFXFrame},
    { "_class_FXFrame","_class_FXToggleButton",SwigFXToggleButtonToFXFrame},
    { "_class_FXFrame","_FXToggleButton",SwigFXToggleButtonToFXFrame},
    { "_class_FXFrame","_class_FXPyButton",SwigFXPyButtonToFXFrame},
    { "_class_FXFrame","_FXPyButton",SwigFXPyButtonToFXFrame},
    { "_class_FXFrame","_class_FXButton",SwigFXButtonToFXFrame},
    { "_class_FXFrame","_FXButton",SwigFXButtonToFXFrame},
    { "_class_FXFrame","_class_FXPyTextField",SwigFXPyTextFieldToFXFrame},
    { "_class_FXFrame","_FXPyTextField",SwigFXPyTextFieldToFXFrame},
    { "_class_FXFrame","_class_FXTextField",SwigFXTextFieldToFXFrame},
    { "_class_FXFrame","_FXTextField",SwigFXTextFieldToFXFrame},
    { "_class_FXFrame","_class_FXPyColorWell",SwigFXPyColorWellToFXFrame},
    { "_class_FXFrame","_FXPyColorWell",SwigFXPyColorWellToFXFrame},
    { "_class_FXFrame","_class_FXColorWell",SwigFXColorWellToFXFrame},
    { "_class_FXFrame","_FXColorWell",SwigFXColorWellToFXFrame},
    { "_class_FXFrame","_class_FXPyDial",SwigFXPyDialToFXFrame},
    { "_class_FXFrame","_FXPyDial",SwigFXPyDialToFXFrame},
    { "_class_FXFrame","_class_FXDial",SwigFXDialToFXFrame},
    { "_class_FXFrame","_FXDial",SwigFXDialToFXFrame},
    { "_class_FXFrame","_class_FXPyLabel",SwigFXPyLabelToFXFrame},
    { "_class_FXFrame","_FXPyLabel",SwigFXPyLabelToFXFrame},
    { "_class_FXFrame","_class_FXLabel",SwigFXLabelToFXFrame},
    { "_class_FXFrame","_FXLabel",SwigFXLabelToFXFrame},
    { "_class_FXFrame","_FXFrame",0},
    { "_class_FXTopWindow","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXTopWindow},
    { "_class_FXTopWindow","_FXPyToolbarShell",SwigFXPyToolbarShellToFXTopWindow},
    { "_class_FXTopWindow","_class_FXToolbarShell",SwigFXToolbarShellToFXTopWindow},
    { "_class_FXTopWindow","_FXToolbarShell",SwigFXToolbarShellToFXTopWindow},
    { "_class_FXTopWindow","_FXTopWindow",0},
    { "_FXfloat","_float",0},
    { "_FXEvent","_struct_FXEvent",0},
    { "_class_FXPyComposite","_FXPyComposite",0},
    { "_FXColorWell","_class_FXPyColorWell",SwigFXPyColorWellToFXColorWell},
    { "_FXColorWell","_FXPyColorWell",SwigFXPyColorWellToFXColorWell},
    { "_FXColorWell","_class_FXColorWell",0},
    { "_class_FXTextField","_class_FXPyTextField",SwigFXPyTextFieldToFXTextField},
    { "_class_FXTextField","_FXPyTextField",SwigFXPyTextFieldToFXTextField},
    { "_class_FXTextField","_FXTextField",0},
    { "_class_FXTabItem","_class_FXPyTabItem",SwigFXPyTabItemToFXTabItem},
    { "_class_FXTabItem","_FXPyTabItem",SwigFXPyTabItemToFXTabItem},
    { "_class_FXTabItem","_FXTabItem",0},
    { "_FXPyColorWheel","_class_FXPyColorWheel",0},
    { "_class_FXPyTIFImage","_FXPyTIFImage",0},
    { "_class_FXPNGIcon","_FXPNGIcon",0},
    { "_struct_FXSegment","_FXSegment",0},
    { "_FXToolbarGrip","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXToolbarGrip},
    { "_FXToolbarGrip","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXToolbarGrip},
    { "_FXToolbarGrip","_class_FXToolbarGrip",0},
    { "_FXPyTooltip","_class_FXPyTooltip",0},
    { "_unsigned_char","_FXbool",0},
    { "_unsigned_char","_FXuchar",0},
    { "_FXPixel","_unsigned_long",0},
    { "_FXPixel","_long",0},
    { "_FXPixel","_FXTime",0},
    { "_FXImage","_class_FXImage",0},
    { "_FXWindow","_class_FXPyColorWheel",SwigFXPyColorWheelToFXWindow},
    { "_FXWindow","_FXPyColorWheel",SwigFXPyColorWheelToFXWindow},
    { "_FXWindow","_class_FXColorWheel",SwigFXColorWheelToFXWindow},
    { "_FXWindow","_FXColorWheel",SwigFXColorWheelToFXWindow},
    { "_FXWindow","_class_FXPyColorBar",SwigFXPyColorBarToFXWindow},
    { "_FXWindow","_FXPyColorBar",SwigFXPyColorBarToFXWindow},
    { "_FXWindow","_class_FXColorBar",SwigFXColorBarToFXWindow},
    { "_FXWindow","_FXColorBar",SwigFXColorBarToFXWindow},
    { "_FXWindow","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXWindow},
    { "_FXWindow","_FXPyDriveBox",SwigFXPyDriveBoxToFXWindow},
    { "_FXWindow","_class_FXDriveBox",SwigFXDriveBoxToFXWindow},
    { "_FXWindow","_FXDriveBox",SwigFXDriveBoxToFXWindow},
    { "_FXWindow","_class_FXPyListBox",SwigFXPyListBoxToFXWindow},
    { "_FXWindow","_FXPyListBox",SwigFXPyListBoxToFXWindow},
    { "_FXWindow","_class_FXListBox",SwigFXListBoxToFXWindow},
    { "_FXWindow","_FXListBox",SwigFXListBoxToFXWindow},
    { "_FXWindow","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXWindow},
    { "_FXWindow","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXWindow},
    { "_FXWindow","_class_FXToolbarGrip",SwigFXToolbarGripToFXWindow},
    { "_FXWindow","_FXToolbarGrip",SwigFXToolbarGripToFXWindow},
    { "_FXWindow","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXWindow},
    { "_FXWindow","_FXPyToolbarShell",SwigFXPyToolbarShellToFXWindow},
    { "_FXWindow","_class_FXToolbarShell",SwigFXToolbarShellToFXWindow},
    { "_FXWindow","_FXToolbarShell",SwigFXToolbarShellToFXWindow},
    { "_FXWindow","_class_FXPyToolbar",SwigFXPyToolbarToFXWindow},
    { "_FXWindow","_FXPyToolbar",SwigFXPyToolbarToFXWindow},
    { "_FXWindow","_class_FXToolbar",SwigFXToolbarToFXWindow},
    { "_FXWindow","_FXToolbar",SwigFXToolbarToFXWindow},
    { "_FXWindow","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXWindow},
    { "_FXWindow","_FXPyToolbarTab",SwigFXPyToolbarTabToFXWindow},
    { "_FXWindow","_class_FXToolbarTab",SwigFXToolbarTabToFXWindow},
    { "_FXWindow","_FXToolbarTab",SwigFXToolbarTabToFXWindow},
    { "_FXWindow","_class_FXPyProgressBar",SwigFXPyProgressBarToFXWindow},
    { "_FXWindow","_FXPyProgressBar",SwigFXPyProgressBarToFXWindow},
    { "_FXWindow","_class_FXProgressBar",SwigFXProgressBarToFXWindow},
    { "_FXWindow","_FXProgressBar",SwigFXProgressBarToFXWindow},
    { "_FXWindow","_class_FXPyHeader",SwigFXPyHeaderToFXWindow},
    { "_FXWindow","_FXPyHeader",SwigFXPyHeaderToFXWindow},
    { "_FXWindow","_class_FXHeader",SwigFXHeaderToFXWindow},
    { "_FXWindow","_FXHeader",SwigFXHeaderToFXWindow},
    { "_FXWindow","_class_FXPySlider",SwigFXPySliderToFXWindow},
    { "_FXWindow","_FXPySlider",SwigFXPySliderToFXWindow},
    { "_FXWindow","_class_FXSlider",SwigFXSliderToFXWindow},
    { "_FXWindow","_FXSlider",SwigFXSliderToFXWindow},
    { "_FXWindow","_class_FXPyStatusbar",SwigFXPyStatusbarToFXWindow},
    { "_FXWindow","_FXPyStatusbar",SwigFXPyStatusbarToFXWindow},
    { "_FXWindow","_class_FXStatusbar",SwigFXStatusbarToFXWindow},
    { "_FXWindow","_FXStatusbar",SwigFXStatusbarToFXWindow},
    { "_FXWindow","_class_FXPyStatusline",SwigFXPyStatuslineToFXWindow},
    { "_FXWindow","_FXPyStatusline",SwigFXPyStatuslineToFXWindow},
    { "_FXWindow","_class_FXStatusline",SwigFXStatuslineToFXWindow},
    { "_FXWindow","_FXStatusline",SwigFXStatuslineToFXWindow},
    { "_FXWindow","_class_FXPyDragCorner",SwigFXPyDragCornerToFXWindow},
    { "_FXWindow","_FXPyDragCorner",SwigFXPyDragCornerToFXWindow},
    { "_FXWindow","_class_FXDragCorner",SwigFXDragCornerToFXWindow},
    { "_FXWindow","_FXDragCorner",SwigFXDragCornerToFXWindow},
    { "_FXWindow","_class_FXPyComboBox",SwigFXPyComboBoxToFXWindow},
    { "_FXWindow","_FXPyComboBox",SwigFXPyComboBoxToFXWindow},
    { "_FXWindow","_class_FXComboBox",SwigFXComboBoxToFXWindow},
    { "_FXWindow","_FXComboBox",SwigFXComboBoxToFXWindow},
    { "_FXWindow","_class_FXPyList",SwigFXPyListToFXWindow},
    { "_FXWindow","_FXPyList",SwigFXPyListToFXWindow},
    { "_FXWindow","_class_FXList",SwigFXListToFXWindow},
    { "_FXWindow","_FXList",SwigFXListToFXWindow},
    { "_FXWindow","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXWindow},
    { "_FXWindow","_FXPyScrollCorner",SwigFXPyScrollCornerToFXWindow},
    { "_FXWindow","_class_FXScrollCorner",SwigFXScrollCornerToFXWindow},
    { "_FXWindow","_FXScrollCorner",SwigFXScrollCornerToFXWindow},
    { "_FXWindow","_class_FXPyScrollbar",SwigFXPyScrollbarToFXWindow},
    { "_FXWindow","_FXPyScrollbar",SwigFXPyScrollbarToFXWindow},
    { "_FXWindow","_class_FXScrollbar",SwigFXScrollbarToFXWindow},
    { "_FXWindow","_FXScrollbar",SwigFXScrollbarToFXWindow},
    { "_FXWindow","_class_FXPyTabBook",SwigFXPyTabBookToFXWindow},
    { "_FXWindow","_FXPyTabBook",SwigFXPyTabBookToFXWindow},
    { "_FXWindow","_class_FXTabBook",SwigFXTabBookToFXWindow},
    { "_FXWindow","_FXTabBook",SwigFXTabBookToFXWindow},
    { "_FXWindow","_class_FXPyTabItem",SwigFXPyTabItemToFXWindow},
    { "_FXWindow","_FXPyTabItem",SwigFXPyTabItemToFXWindow},
    { "_FXWindow","_class_FXTabItem",SwigFXTabItemToFXWindow},
    { "_FXWindow","_FXTabItem",SwigFXTabItemToFXWindow},
    { "_FXWindow","_class_FXPyTabBar",SwigFXPyTabBarToFXWindow},
    { "_FXWindow","_FXPyTabBar",SwigFXPyTabBarToFXWindow},
    { "_FXWindow","_class_FXTabBar",SwigFXTabBarToFXWindow},
    { "_FXWindow","_FXTabBar",SwigFXTabBarToFXWindow},
    { "_FXWindow","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXWindow},
    { "_FXWindow","_FXPyOptionMenu",SwigFXPyOptionMenuToFXWindow},
    { "_FXWindow","_class_FXOptionMenu",SwigFXOptionMenuToFXWindow},
    { "_FXWindow","_FXOptionMenu",SwigFXOptionMenuToFXWindow},
    { "_FXWindow","_class_FXPyOption",SwigFXPyOptionToFXWindow},
    { "_FXWindow","_FXPyOption",SwigFXPyOptionToFXWindow},
    { "_FXWindow","_class_FXOption",SwigFXOptionToFXWindow},
    { "_FXWindow","_FXOption",SwigFXOptionToFXWindow},
    { "_FXWindow","_class_FXPyTooltip",SwigFXPyTooltipToFXWindow},
    { "_FXWindow","_FXPyTooltip",SwigFXPyTooltipToFXWindow},
    { "_FXWindow","_class_FXTooltip",SwigFXTooltipToFXWindow},
    { "_FXWindow","_FXTooltip",SwigFXTooltipToFXWindow},
    { "_FXWindow","_class_FXPySpinner",SwigFXPySpinnerToFXWindow},
    { "_FXWindow","_FXPySpinner",SwigFXPySpinnerToFXWindow},
    { "_FXWindow","_class_FXSpinner",SwigFXSpinnerToFXWindow},
    { "_FXWindow","_FXSpinner",SwigFXSpinnerToFXWindow},
    { "_FXWindow","_class_FXPyPicker",SwigFXPyPickerToFXWindow},
    { "_FXWindow","_FXPyPicker",SwigFXPyPickerToFXWindow},
    { "_FXWindow","_class_FXPicker",SwigFXPickerToFXWindow},
    { "_FXWindow","_FXPicker",SwigFXPickerToFXWindow},
    { "_FXWindow","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXWindow},
    { "_FXWindow","_FXPyArrowButton",SwigFXPyArrowButtonToFXWindow},
    { "_FXWindow","_class_FXArrowButton",SwigFXArrowButtonToFXWindow},
    { "_FXWindow","_FXArrowButton",SwigFXArrowButtonToFXWindow},
    { "_FXWindow","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXWindow},
    { "_FXWindow","_FXPyCheckButton",SwigFXPyCheckButtonToFXWindow},
    { "_FXWindow","_class_FXCheckButton",SwigFXCheckButtonToFXWindow},
    { "_FXWindow","_FXCheckButton",SwigFXCheckButtonToFXWindow},
    { "_FXWindow","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXWindow},
    { "_FXWindow","_FXPyRadioButton",SwigFXPyRadioButtonToFXWindow},
    { "_FXWindow","_class_FXRadioButton",SwigFXRadioButtonToFXWindow},
    { "_FXWindow","_FXRadioButton",SwigFXRadioButtonToFXWindow},
    { "_FXWindow","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXWindow},
    { "_FXWindow","_FXPyToggleButton",SwigFXPyToggleButtonToFXWindow},
    { "_FXWindow","_class_FXToggleButton",SwigFXToggleButtonToFXWindow},
    { "_FXWindow","_FXToggleButton",SwigFXToggleButtonToFXWindow},
    { "_FXWindow","_class_FXPyButton",SwigFXPyButtonToFXWindow},
    { "_FXWindow","_FXPyButton",SwigFXPyButtonToFXWindow},
    { "_FXWindow","_class_FXButton",SwigFXButtonToFXWindow},
    { "_FXWindow","_FXButton",SwigFXButtonToFXWindow},
    { "_FXWindow","_class_FXPyTextField",SwigFXPyTextFieldToFXWindow},
    { "_FXWindow","_FXPyTextField",SwigFXPyTextFieldToFXWindow},
    { "_FXWindow","_class_FXTextField",SwigFXTextFieldToFXWindow},
    { "_FXWindow","_FXTextField",SwigFXTextFieldToFXWindow},
    { "_FXWindow","_class_FXPyColorWell",SwigFXPyColorWellToFXWindow},
    { "_FXWindow","_FXPyColorWell",SwigFXPyColorWellToFXWindow},
    { "_FXWindow","_class_FXColorWell",SwigFXColorWellToFXWindow},
    { "_FXWindow","_FXColorWell",SwigFXColorWellToFXWindow},
    { "_FXWindow","_class_FXPyDial",SwigFXPyDialToFXWindow},
    { "_FXWindow","_FXPyDial",SwigFXPyDialToFXWindow},
    { "_FXWindow","_class_FXDial",SwigFXDialToFXWindow},
    { "_FXWindow","_FXDial",SwigFXDialToFXWindow},
    { "_FXWindow","_class_FXPyLabel",SwigFXPyLabelToFXWindow},
    { "_FXWindow","_FXPyLabel",SwigFXPyLabelToFXWindow},
    { "_FXWindow","_class_FXLabel",SwigFXLabelToFXWindow},
    { "_FXWindow","_FXLabel",SwigFXLabelToFXWindow},
    { "_FXWindow","_class_FXWindow",0},
    { "_unsigned_int","_FXInputHandle",0},
    { "_unsigned_int","_FXDragType",0},
    { "_unsigned_int","_FXHotKey",0},
    { "_unsigned_int","_FXColor",0},
    { "_unsigned_int","_FXID",0},
    { "_unsigned_int","_FXSelector",0},
    { "_unsigned_int","_FXint",0},
    { "_unsigned_int","_FXuint",0},
    { "_unsigned_int","_int",0},
    { "_FXPyTGAImage","_class_FXPyTGAImage",0},
    { "_FXDict","_class_FXDict",0},
    { "_FXPyDCPrint","_class_FXPyDCPrint",0},
    { "_FXColorWheel","_class_FXPyColorWheel",SwigFXPyColorWheelToFXColorWheel},
    { "_FXColorWheel","_FXPyColorWheel",SwigFXPyColorWheelToFXColorWheel},
    { "_FXColorWheel","_class_FXColorWheel",0},
    { "_FXuint","_FXInputHandle",0},
    { "_FXuint","_FXDragType",0},
    { "_FXuint","_FXHotKey",0},
    { "_FXuint","_FXColor",0},
    { "_FXuint","_FXID",0},
    { "_FXuint","_FXSelector",0},
    { "_FXuint","_FXint",0},
    { "_FXuint","_unsigned_int",0},
    { "_FXuint","_int",0},
    { "_class_FXPyScrollArea","_FXPyScrollArea",0},
    { "_FXPyTabBook","_class_FXPyTabBook",0},
    { "_class_FXPyComboBox","_FXPyComboBox",0},
    { "_short","_FXshort",0},
    { "_short","_FXushort",0},
    { "_short","_unsigned_short",0},
    { "_short","_signed_short",0},
    { "_FXRectangle","_class_FXRectangle",0},
    { "_FXPyFont","_class_FXPyFont",0},
    { "_FXPyDCWindow","_class_FXPyDCWindow",0},
    { "_FXPyStatusline","_class_FXPyStatusline",0},
    { "_class_FXApp","_FXApp",0},
    { "_FXXPMImage","_class_FXXPMImage",0},
    { "_class_FXPyWindow","_FXPyWindow",0},
    { "_FXPacker","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXPacker},
    { "_FXPacker","_FXPyDriveBox",SwigFXPyDriveBoxToFXPacker},
    { "_FXPacker","_class_FXDriveBox",SwigFXDriveBoxToFXPacker},
    { "_FXPacker","_FXDriveBox",SwigFXDriveBoxToFXPacker},
    { "_FXPacker","_class_FXPyListBox",SwigFXPyListBoxToFXPacker},
    { "_FXPacker","_FXPyListBox",SwigFXPyListBoxToFXPacker},
    { "_FXPacker","_class_FXListBox",SwigFXListBoxToFXPacker},
    { "_FXPacker","_FXListBox",SwigFXListBoxToFXPacker},
    { "_FXPacker","_class_FXPyToolbar",SwigFXPyToolbarToFXPacker},
    { "_FXPacker","_FXPyToolbar",SwigFXPyToolbarToFXPacker},
    { "_FXPacker","_class_FXToolbar",SwigFXToolbarToFXPacker},
    { "_FXPacker","_FXToolbar",SwigFXToolbarToFXPacker},
    { "_FXPacker","_class_FXPyStatusbar",SwigFXPyStatusbarToFXPacker},
    { "_FXPacker","_FXPyStatusbar",SwigFXPyStatusbarToFXPacker},
    { "_FXPacker","_class_FXStatusbar",SwigFXStatusbarToFXPacker},
    { "_FXPacker","_FXStatusbar",SwigFXStatusbarToFXPacker},
    { "_FXPacker","_class_FXPyComboBox",SwigFXPyComboBoxToFXPacker},
    { "_FXPacker","_FXPyComboBox",SwigFXPyComboBoxToFXPacker},
    { "_FXPacker","_class_FXComboBox",SwigFXComboBoxToFXPacker},
    { "_FXPacker","_FXComboBox",SwigFXComboBoxToFXPacker},
    { "_FXPacker","_class_FXPyTabBook",SwigFXPyTabBookToFXPacker},
    { "_FXPacker","_FXPyTabBook",SwigFXPyTabBookToFXPacker},
    { "_FXPacker","_class_FXTabBook",SwigFXTabBookToFXPacker},
    { "_FXPacker","_FXTabBook",SwigFXTabBookToFXPacker},
    { "_FXPacker","_class_FXPyTabBar",SwigFXPyTabBarToFXPacker},
    { "_FXPacker","_FXPyTabBar",SwigFXPyTabBarToFXPacker},
    { "_FXPacker","_class_FXTabBar",SwigFXTabBarToFXPacker},
    { "_FXPacker","_FXTabBar",SwigFXTabBarToFXPacker},
    { "_FXPacker","_class_FXPySpinner",SwigFXPySpinnerToFXPacker},
    { "_FXPacker","_FXPySpinner",SwigFXPySpinnerToFXPacker},
    { "_FXPacker","_class_FXSpinner",SwigFXSpinnerToFXPacker},
    { "_FXPacker","_FXSpinner",SwigFXSpinnerToFXPacker},
    { "_FXPacker","_class_FXPacker",0},
    { "_FXGIFImage","_class_FXGIFImage",0},
    { "_class_FXComposite","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXComposite},
    { "_class_FXComposite","_FXPyDriveBox",SwigFXPyDriveBoxToFXComposite},
    { "_class_FXComposite","_class_FXDriveBox",SwigFXDriveBoxToFXComposite},
    { "_class_FXComposite","_FXDriveBox",SwigFXDriveBoxToFXComposite},
    { "_class_FXComposite","_class_FXPyListBox",SwigFXPyListBoxToFXComposite},
    { "_class_FXComposite","_FXPyListBox",SwigFXPyListBoxToFXComposite},
    { "_class_FXComposite","_class_FXListBox",SwigFXListBoxToFXComposite},
    { "_class_FXComposite","_FXListBox",SwigFXListBoxToFXComposite},
    { "_class_FXComposite","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXComposite},
    { "_class_FXComposite","_FXPyToolbarShell",SwigFXPyToolbarShellToFXComposite},
    { "_class_FXComposite","_class_FXToolbarShell",SwigFXToolbarShellToFXComposite},
    { "_class_FXComposite","_FXToolbarShell",SwigFXToolbarShellToFXComposite},
    { "_class_FXComposite","_class_FXPyToolbar",SwigFXPyToolbarToFXComposite},
    { "_class_FXComposite","_FXPyToolbar",SwigFXPyToolbarToFXComposite},
    { "_class_FXComposite","_class_FXToolbar",SwigFXToolbarToFXComposite},
    { "_class_FXComposite","_FXToolbar",SwigFXToolbarToFXComposite},
    { "_class_FXComposite","_class_FXPyStatusbar",SwigFXPyStatusbarToFXComposite},
    { "_class_FXComposite","_FXPyStatusbar",SwigFXPyStatusbarToFXComposite},
    { "_class_FXComposite","_class_FXStatusbar",SwigFXStatusbarToFXComposite},
    { "_class_FXComposite","_FXStatusbar",SwigFXStatusbarToFXComposite},
    { "_class_FXComposite","_class_FXPyComboBox",SwigFXPyComboBoxToFXComposite},
    { "_class_FXComposite","_FXPyComboBox",SwigFXPyComboBoxToFXComposite},
    { "_class_FXComposite","_class_FXComboBox",SwigFXComboBoxToFXComposite},
    { "_class_FXComposite","_FXComboBox",SwigFXComboBoxToFXComposite},
    { "_class_FXComposite","_class_FXPyList",SwigFXPyListToFXComposite},
    { "_class_FXComposite","_FXPyList",SwigFXPyListToFXComposite},
    { "_class_FXComposite","_class_FXList",SwigFXListToFXComposite},
    { "_class_FXComposite","_FXList",SwigFXListToFXComposite},
    { "_class_FXComposite","_class_FXPyTabBook",SwigFXPyTabBookToFXComposite},
    { "_class_FXComposite","_FXPyTabBook",SwigFXPyTabBookToFXComposite},
    { "_class_FXComposite","_class_FXTabBook",SwigFXTabBookToFXComposite},
    { "_class_FXComposite","_FXTabBook",SwigFXTabBookToFXComposite},
    { "_class_FXComposite","_class_FXPyTabBar",SwigFXPyTabBarToFXComposite},
    { "_class_FXComposite","_FXPyTabBar",SwigFXPyTabBarToFXComposite},
    { "_class_FXComposite","_class_FXTabBar",SwigFXTabBarToFXComposite},
    { "_class_FXComposite","_FXTabBar",SwigFXTabBarToFXComposite},
    { "_class_FXComposite","_class_FXPyTooltip",SwigFXPyTooltipToFXComposite},
    { "_class_FXComposite","_FXPyTooltip",SwigFXPyTooltipToFXComposite},
    { "_class_FXComposite","_class_FXTooltip",SwigFXTooltipToFXComposite},
    { "_class_FXComposite","_FXTooltip",SwigFXTooltipToFXComposite},
    { "_class_FXComposite","_class_FXPySpinner",SwigFXPySpinnerToFXComposite},
    { "_class_FXComposite","_FXPySpinner",SwigFXPySpinnerToFXComposite},
    { "_class_FXComposite","_class_FXSpinner",SwigFXSpinnerToFXComposite},
    { "_class_FXComposite","_FXSpinner",SwigFXSpinnerToFXComposite},
    { "_class_FXComposite","_FXComposite",0},
    { "_FXSplitter","_class_FXSplitter",0},
    { "_FXPyCommand","_class_FXPyCommand",0},
    { "_class_FXListBox","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXListBox},
    { "_class_FXListBox","_FXPyDriveBox",SwigFXPyDriveBoxToFXListBox},
    { "_class_FXListBox","_class_FXDriveBox",SwigFXDriveBoxToFXListBox},
    { "_class_FXListBox","_FXDriveBox",SwigFXDriveBoxToFXListBox},
    { "_class_FXListBox","_class_FXPyListBox",SwigFXPyListBoxToFXListBox},
    { "_class_FXListBox","_FXPyListBox",SwigFXPyListBoxToFXListBox},
    { "_class_FXListBox","_FXListBox",0},
    { "_class_FXJPGIcon","_FXJPGIcon",0},
    { "_class_FXPyHorizontalSeparator","_FXPyHorizontalSeparator",0},
    { "_class_FXPyScrollbar","_FXPyScrollbar",0},
    { "_FXStatusline","_class_FXPyStatusline",SwigFXPyStatuslineToFXStatusline},
    { "_FXStatusline","_FXPyStatusline",SwigFXPyStatuslineToFXStatusline},
    { "_FXStatusline","_class_FXStatusline",0},
    { "_FXPyStatusbar","_class_FXPyStatusbar",0},
    { "_FXchar","_char",0},
    { "_class_FXPyPacker","_FXPyPacker",0},
    { "_FXPyOptionMenu","_class_FXPyOptionMenu",0},
    { "_class_FXPyHeaderItem","_FXPyHeaderItem",0},
    { "_FXuchar","_FXbool",0},
    { "_FXuchar","_unsigned_char",0},
    { "_class_FXHorizontalSeparator","_FXHorizontalSeparator",0},
    { "_FXPyList","_class_FXPyList",0},
    { "_int","_FXInputHandle",0},
    { "_int","_FXDragType",0},
    { "_int","_FXHotKey",0},
    { "_int","_FXColor",0},
    { "_int","_FXID",0},
    { "_int","_FXSelector",0},
    { "_int","_FXint",0},
    { "_int","_FXuint",0},
    { "_int","_unsigned_int",0},
    { "_int","_signed_int",0},
    { "_FXDragType","_FXInputHandle",0},
    { "_FXDragType","_FXID",0},
    { "_FXDragType","_FXSelector",0},
    { "_FXDragType","_FXint",0},
    { "_FXDragType","_FXuint",0},
    { "_FXDragType","_int",0},
    { "_FXDragType","_unsigned_int",0},
    { "_FXDragType","_FXColor",0},
    { "_FXDragType","_FXHotKey",0},
    { "_FXSettings","_class_FXSettings",0},
    { "_FXRegistry","_class_FXRegistry",0},
    { "_FXPyOption","_class_FXPyOption",0},
    { "_FXPyBMPIcon","_class_FXPyBMPIcon",0},
    { "_FXPyICOIcon","_class_FXPyICOIcon",0},
    { "_class_FXSwitcher","_FXSwitcher",0},
    { "_FXPyShutterItem","_class_FXPyShutterItem",0},
    { "_FXOptionMenu","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXOptionMenu},
    { "_FXOptionMenu","_FXPyOptionMenu",SwigFXPyOptionMenuToFXOptionMenu},
    { "_FXOptionMenu","_class_FXOptionMenu",0},
    { "_FXColorBar","_class_FXPyColorBar",SwigFXPyColorBarToFXColorBar},
    { "_FXColorBar","_FXPyColorBar",SwigFXPyColorBarToFXColorBar},
    { "_FXColorBar","_class_FXColorBar",0},
    { "_FXPicker","_class_FXPyPicker",SwigFXPyPickerToFXPicker},
    { "_FXPicker","_FXPyPicker",SwigFXPyPickerToFXPicker},
    { "_FXPicker","_class_FXPicker",0},
    { "_class_FXTabBar","_class_FXPyTabBook",SwigFXPyTabBookToFXTabBar},
    { "_class_FXTabBar","_FXPyTabBook",SwigFXPyTabBookToFXTabBar},
    { "_class_FXTabBar","_class_FXTabBook",SwigFXTabBookToFXTabBar},
    { "_class_FXTabBar","_FXTabBook",SwigFXTabBookToFXTabBar},
    { "_class_FXTabBar","_class_FXPyTabBar",SwigFXPyTabBarToFXTabBar},
    { "_class_FXTabBar","_FXPyTabBar",SwigFXPyTabBarToFXTabBar},
    { "_class_FXTabBar","_FXTabBar",0},
    { "_FXPSBounds","_struct_FXPSBounds",0},
    { "_FXPyJPGImage","_class_FXPyJPGImage",0},
    { "_class_FXPyPCXIcon","_FXPyPCXIcon",0},
    { "_FXPyLabel","_class_FXPyLabel",0},
    { "_FXTGAIcon","_class_FXTGAIcon",0},
    { "_FXDelegator","_class_FXDelegator",0},
    { "_class_FXScrollbar","_class_FXPyScrollbar",SwigFXPyScrollbarToFXScrollbar},
    { "_class_FXScrollbar","_FXPyScrollbar",SwigFXPyScrollbarToFXScrollbar},
    { "_class_FXScrollbar","_FXScrollbar",0},
    { "_FXGroupBox","_class_FXGroupBox",0},
    { "_class_FXArrowButton","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXArrowButton},
    { "_class_FXArrowButton","_FXPyArrowButton",SwigFXPyArrowButtonToFXArrowButton},
    { "_class_FXArrowButton","_FXArrowButton",0},
    { "_class_FXPyTabItem","_FXPyTabItem",0},
    { "_FXSlider","_class_FXPySlider",SwigFXPySliderToFXSlider},
    { "_FXSlider","_FXPySlider",SwigFXPySliderToFXSlider},
    { "_FXSlider","_class_FXSlider",0},
    { "_class_FXPNGImage","_FXPNGImage",0},
    { "_class_FXPyPNGIcon","_FXPyPNGIcon",0},
    { "_class_FXPyRootWindow","_FXPyRootWindow",0},
    { "_FXPyToggleButton","_class_FXPyToggleButton",0},
    { "_class_FXPyPicker","_FXPyPicker",0},
    { "_class_FXPyTGAImage","_FXPyTGAImage",0},
    { "_class_FXDict","_FXDict",0},
    { "_class_FXVerticalSeparator","_FXVerticalSeparator",0},
    { "_FXPyToolbar","_class_FXPyToolbar",0},
    { "_FXPyDriveBox","_class_FXPyDriveBox",0},
    { "_class_FXColorWheel","_class_FXPyColorWheel",SwigFXPyColorWheelToFXColorWheel},
    { "_class_FXColorWheel","_FXPyColorWheel",SwigFXPyColorWheelToFXColorWheel},
    { "_class_FXColorWheel","_FXColorWheel",0},
    { "_class_FXShell","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXShell},
    { "_class_FXShell","_FXPyToolbarShell",SwigFXPyToolbarShellToFXShell},
    { "_class_FXShell","_class_FXToolbarShell",SwigFXToolbarShellToFXShell},
    { "_class_FXShell","_FXToolbarShell",SwigFXToolbarShellToFXShell},
    { "_class_FXShell","_class_FXPyTooltip",SwigFXPyTooltipToFXShell},
    { "_class_FXShell","_FXPyTooltip",SwigFXPyTooltipToFXShell},
    { "_class_FXShell","_class_FXTooltip",SwigFXTooltipToFXShell},
    { "_class_FXShell","_FXTooltip",SwigFXTooltipToFXShell},
    { "_class_FXShell","_FXShell",0},
    { "_FXPyShutter","_class_FXPyShutter",0},
    { "_FXInputHandle","_FXint",0},
    { "_FXInputHandle","_FXuint",0},
    { "_FXInputHandle","_unsigned_int",0},
    { "_FXInputHandle","_signed_int",0},
    { "_FXInputHandle","_int",0},
    { "_FXInputHandle","_FXSelector",0},
    { "_FXInputHandle","_FXID",0},
    { "_FXInputHandle","_FXColor",0},
    { "_FXInputHandle","_FXHotKey",0},
    { "_FXInputHandle","_FXDragType",0},
    { "_class_FXPyFileStream","_FXPyFileStream",0},
    { "_class_FXPyDCWindow","_FXPyDCWindow",0},
    { "_class_FXCheckButton","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXCheckButton},
    { "_class_FXCheckButton","_FXPyCheckButton",SwigFXPyCheckButtonToFXCheckButton},
    { "_class_FXCheckButton","_FXCheckButton",0},
    { "_class_FXPySlider","_FXPySlider",0},
    { "_FXFont","_class_FXFont",0},
    { "_FXListItem","_class_FXPyListItem",SwigFXPyListItemToFXListItem},
    { "_FXListItem","_FXPyListItem",SwigFXPyListItemToFXListItem},
    { "_FXListItem","_class_FXListItem",0},
    { "_FXPyRGBImage","_class_FXPyRGBImage",0},
    { "_class_FXPyDataTarget","_FXPyDataTarget",0},
    { "_FXPyProgressBar","_class_FXPyProgressBar",0},
    { "_class_FXObject","_class_FXPyColorWheel",SwigFXPyColorWheelToFXObject},
    { "_class_FXObject","_FXPyColorWheel",SwigFXPyColorWheelToFXObject},
    { "_class_FXObject","_class_FXColorWheel",SwigFXColorWheelToFXObject},
    { "_class_FXObject","_FXColorWheel",SwigFXColorWheelToFXObject},
    { "_class_FXObject","_class_FXPyColorBar",SwigFXPyColorBarToFXObject},
    { "_class_FXObject","_FXPyColorBar",SwigFXPyColorBarToFXObject},
    { "_class_FXObject","_class_FXColorBar",SwigFXColorBarToFXObject},
    { "_class_FXObject","_FXColorBar",SwigFXColorBarToFXObject},
    { "_class_FXObject","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXObject},
    { "_class_FXObject","_FXPyDriveBox",SwigFXPyDriveBoxToFXObject},
    { "_class_FXObject","_class_FXDriveBox",SwigFXDriveBoxToFXObject},
    { "_class_FXObject","_FXDriveBox",SwigFXDriveBoxToFXObject},
    { "_class_FXObject","_class_FXPyListBox",SwigFXPyListBoxToFXObject},
    { "_class_FXObject","_FXPyListBox",SwigFXPyListBoxToFXObject},
    { "_class_FXObject","_class_FXListBox",SwigFXListBoxToFXObject},
    { "_class_FXObject","_FXListBox",SwigFXListBoxToFXObject},
    { "_class_FXObject","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXObject},
    { "_class_FXObject","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXObject},
    { "_class_FXObject","_class_FXToolbarGrip",SwigFXToolbarGripToFXObject},
    { "_class_FXObject","_FXToolbarGrip",SwigFXToolbarGripToFXObject},
    { "_class_FXObject","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXObject},
    { "_class_FXObject","_FXPyToolbarShell",SwigFXPyToolbarShellToFXObject},
    { "_class_FXObject","_class_FXToolbarShell",SwigFXToolbarShellToFXObject},
    { "_class_FXObject","_FXToolbarShell",SwigFXToolbarShellToFXObject},
    { "_class_FXObject","_class_FXPyToolbar",SwigFXPyToolbarToFXObject},
    { "_class_FXObject","_FXPyToolbar",SwigFXPyToolbarToFXObject},
    { "_class_FXObject","_class_FXToolbar",SwigFXToolbarToFXObject},
    { "_class_FXObject","_FXToolbar",SwigFXToolbarToFXObject},
    { "_class_FXObject","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXObject},
    { "_class_FXObject","_FXPyToolbarTab",SwigFXPyToolbarTabToFXObject},
    { "_class_FXObject","_class_FXToolbarTab",SwigFXToolbarTabToFXObject},
    { "_class_FXObject","_FXToolbarTab",SwigFXToolbarTabToFXObject},
    { "_class_FXObject","_class_FXPyProgressBar",SwigFXPyProgressBarToFXObject},
    { "_class_FXObject","_FXPyProgressBar",SwigFXPyProgressBarToFXObject},
    { "_class_FXObject","_class_FXProgressBar",SwigFXProgressBarToFXObject},
    { "_class_FXObject","_FXProgressBar",SwigFXProgressBarToFXObject},
    { "_class_FXObject","_class_FXPyHeader",SwigFXPyHeaderToFXObject},
    { "_class_FXObject","_FXPyHeader",SwigFXPyHeaderToFXObject},
    { "_class_FXObject","_class_FXHeader",SwigFXHeaderToFXObject},
    { "_class_FXObject","_FXHeader",SwigFXHeaderToFXObject},
    { "_class_FXObject","_class_FXPyHeaderItem",SwigFXPyHeaderItemToFXObject},
    { "_class_FXObject","_FXPyHeaderItem",SwigFXPyHeaderItemToFXObject},
    { "_class_FXObject","_class_FXHeaderItem",SwigFXHeaderItemToFXObject},
    { "_class_FXObject","_FXHeaderItem",SwigFXHeaderItemToFXObject},
    { "_class_FXObject","_class_FXPySlider",SwigFXPySliderToFXObject},
    { "_class_FXObject","_FXPySlider",SwigFXPySliderToFXObject},
    { "_class_FXObject","_class_FXSlider",SwigFXSliderToFXObject},
    { "_class_FXObject","_FXSlider",SwigFXSliderToFXObject},
    { "_class_FXObject","_class_FXPyStatusbar",SwigFXPyStatusbarToFXObject},
    { "_class_FXObject","_FXPyStatusbar",SwigFXPyStatusbarToFXObject},
    { "_class_FXObject","_class_FXStatusbar",SwigFXStatusbarToFXObject},
    { "_class_FXObject","_FXStatusbar",SwigFXStatusbarToFXObject},
    { "_class_FXObject","_class_FXPyStatusline",SwigFXPyStatuslineToFXObject},
    { "_class_FXObject","_FXPyStatusline",SwigFXPyStatuslineToFXObject},
    { "_class_FXObject","_class_FXStatusline",SwigFXStatuslineToFXObject},
    { "_class_FXObject","_FXStatusline",SwigFXStatuslineToFXObject},
    { "_class_FXObject","_class_FXPyDragCorner",SwigFXPyDragCornerToFXObject},
    { "_class_FXObject","_FXPyDragCorner",SwigFXPyDragCornerToFXObject},
    { "_class_FXObject","_class_FXDragCorner",SwigFXDragCornerToFXObject},
    { "_class_FXObject","_FXDragCorner",SwigFXDragCornerToFXObject},
    { "_class_FXObject","_class_FXPyComboBox",SwigFXPyComboBoxToFXObject},
    { "_class_FXObject","_FXPyComboBox",SwigFXPyComboBoxToFXObject},
    { "_class_FXObject","_class_FXComboBox",SwigFXComboBoxToFXObject},
    { "_class_FXObject","_FXComboBox",SwigFXComboBoxToFXObject},
    { "_class_FXObject","_class_FXPyList",SwigFXPyListToFXObject},
    { "_class_FXObject","_FXPyList",SwigFXPyListToFXObject},
    { "_class_FXObject","_class_FXList",SwigFXListToFXObject},
    { "_class_FXObject","_FXList",SwigFXListToFXObject},
    { "_class_FXObject","_class_FXPyListItem",SwigFXPyListItemToFXObject},
    { "_class_FXObject","_FXPyListItem",SwigFXPyListItemToFXObject},
    { "_class_FXObject","_class_FXListItem",SwigFXListItemToFXObject},
    { "_class_FXObject","_FXListItem",SwigFXListItemToFXObject},
    { "_class_FXObject","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXObject},
    { "_class_FXObject","_FXPyScrollCorner",SwigFXPyScrollCornerToFXObject},
    { "_class_FXObject","_class_FXScrollCorner",SwigFXScrollCornerToFXObject},
    { "_class_FXObject","_FXScrollCorner",SwigFXScrollCornerToFXObject},
    { "_class_FXObject","_class_FXPyScrollbar",SwigFXPyScrollbarToFXObject},
    { "_class_FXObject","_FXPyScrollbar",SwigFXPyScrollbarToFXObject},
    { "_class_FXObject","_class_FXScrollbar",SwigFXScrollbarToFXObject},
    { "_class_FXObject","_FXScrollbar",SwigFXScrollbarToFXObject},
    { "_class_FXObject","_class_FXPyTabBook",SwigFXPyTabBookToFXObject},
    { "_class_FXObject","_FXPyTabBook",SwigFXPyTabBookToFXObject},
    { "_class_FXObject","_class_FXTabBook",SwigFXTabBookToFXObject},
    { "_class_FXObject","_FXTabBook",SwigFXTabBookToFXObject},
    { "_class_FXObject","_class_FXPyTabItem",SwigFXPyTabItemToFXObject},
    { "_class_FXObject","_FXPyTabItem",SwigFXPyTabItemToFXObject},
    { "_class_FXObject","_class_FXTabItem",SwigFXTabItemToFXObject},
    { "_class_FXObject","_FXTabItem",SwigFXTabItemToFXObject},
    { "_class_FXObject","_class_FXPyTabBar",SwigFXPyTabBarToFXObject},
    { "_class_FXObject","_FXPyTabBar",SwigFXPyTabBarToFXObject},
    { "_class_FXObject","_class_FXTabBar",SwigFXTabBarToFXObject},
    { "_class_FXObject","_FXTabBar",SwigFXTabBarToFXObject},
    { "_class_FXObject","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXObject},
    { "_class_FXObject","_FXPyOptionMenu",SwigFXPyOptionMenuToFXObject},
    { "_class_FXObject","_class_FXOptionMenu",SwigFXOptionMenuToFXObject},
    { "_class_FXObject","_FXOptionMenu",SwigFXOptionMenuToFXObject},
    { "_class_FXObject","_class_FXPyOption",SwigFXPyOptionToFXObject},
    { "_class_FXObject","_FXPyOption",SwigFXPyOptionToFXObject},
    { "_class_FXObject","_class_FXOption",SwigFXOptionToFXObject},
    { "_class_FXObject","_FXOption",SwigFXOptionToFXObject},
    { "_class_FXObject","_class_FXPyTooltip",SwigFXPyTooltipToFXObject},
    { "_class_FXObject","_FXPyTooltip",SwigFXPyTooltipToFXObject},
    { "_class_FXObject","_class_FXTooltip",SwigFXTooltipToFXObject},
    { "_class_FXObject","_FXTooltip",SwigFXTooltipToFXObject},
    { "_class_FXObject","_class_FXPySpinner",SwigFXPySpinnerToFXObject},
    { "_class_FXObject","_FXPySpinner",SwigFXPySpinnerToFXObject},
    { "_class_FXObject","_class_FXSpinner",SwigFXSpinnerToFXObject},
    { "_class_FXObject","_FXSpinner",SwigFXSpinnerToFXObject},
    { "_class_FXObject","_class_FXPyPicker",SwigFXPyPickerToFXObject},
    { "_class_FXObject","_FXPyPicker",SwigFXPyPickerToFXObject},
    { "_class_FXObject","_class_FXPicker",SwigFXPickerToFXObject},
    { "_class_FXObject","_FXPicker",SwigFXPickerToFXObject},
    { "_class_FXObject","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXObject},
    { "_class_FXObject","_FXPyArrowButton",SwigFXPyArrowButtonToFXObject},
    { "_class_FXObject","_class_FXArrowButton",SwigFXArrowButtonToFXObject},
    { "_class_FXObject","_FXArrowButton",SwigFXArrowButtonToFXObject},
    { "_class_FXObject","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXObject},
    { "_class_FXObject","_FXPyCheckButton",SwigFXPyCheckButtonToFXObject},
    { "_class_FXObject","_class_FXCheckButton",SwigFXCheckButtonToFXObject},
    { "_class_FXObject","_FXCheckButton",SwigFXCheckButtonToFXObject},
    { "_class_FXObject","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXObject},
    { "_class_FXObject","_FXPyRadioButton",SwigFXPyRadioButtonToFXObject},
    { "_class_FXObject","_class_FXRadioButton",SwigFXRadioButtonToFXObject},
    { "_class_FXObject","_FXRadioButton",SwigFXRadioButtonToFXObject},
    { "_class_FXObject","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXObject},
    { "_class_FXObject","_FXPyToggleButton",SwigFXPyToggleButtonToFXObject},
    { "_class_FXObject","_class_FXToggleButton",SwigFXToggleButtonToFXObject},
    { "_class_FXObject","_FXToggleButton",SwigFXToggleButtonToFXObject},
    { "_class_FXObject","_class_FXPyButton",SwigFXPyButtonToFXObject},
    { "_class_FXObject","_FXPyButton",SwigFXPyButtonToFXObject},
    { "_class_FXObject","_class_FXButton",SwigFXButtonToFXObject},
    { "_class_FXObject","_FXButton",SwigFXButtonToFXObject},
    { "_class_FXObject","_class_FXPyTextField",SwigFXPyTextFieldToFXObject},
    { "_class_FXObject","_FXPyTextField",SwigFXPyTextFieldToFXObject},
    { "_class_FXObject","_class_FXTextField",SwigFXTextFieldToFXObject},
    { "_class_FXObject","_FXTextField",SwigFXTextFieldToFXObject},
    { "_class_FXObject","_class_FXPyColorWell",SwigFXPyColorWellToFXObject},
    { "_class_FXObject","_FXPyColorWell",SwigFXPyColorWellToFXObject},
    { "_class_FXObject","_class_FXColorWell",SwigFXColorWellToFXObject},
    { "_class_FXObject","_FXColorWell",SwigFXColorWellToFXObject},
    { "_class_FXObject","_class_FXPyDial",SwigFXPyDialToFXObject},
    { "_class_FXObject","_FXPyDial",SwigFXPyDialToFXObject},
    { "_class_FXObject","_class_FXDial",SwigFXDialToFXObject},
    { "_class_FXObject","_FXDial",SwigFXDialToFXObject},
    { "_class_FXObject","_class_FXPyLabel",SwigFXPyLabelToFXObject},
    { "_class_FXObject","_FXPyLabel",SwigFXPyLabelToFXObject},
    { "_class_FXObject","_class_FXLabel",SwigFXLabelToFXObject},
    { "_class_FXObject","_FXLabel",SwigFXLabelToFXObject},
    { "_class_FXObject","_FXObject",0},
    { "_FXXPMIcon","_class_FXXPMIcon",0},
    { "_FXPyPopup","_class_FXPyPopup",0},
    { "_FXPyVerticalFrame","_class_FXPyVerticalFrame",0},
    { "_FXPyColorWell","_class_FXPyColorWell",0},
    { "_FXId","_class_FXPyColorWheel",SwigFXPyColorWheelToFXId},
    { "_FXId","_FXPyColorWheel",SwigFXPyColorWheelToFXId},
    { "_FXId","_class_FXColorWheel",SwigFXColorWheelToFXId},
    { "_FXId","_FXColorWheel",SwigFXColorWheelToFXId},
    { "_FXId","_class_FXPyColorBar",SwigFXPyColorBarToFXId},
    { "_FXId","_FXPyColorBar",SwigFXPyColorBarToFXId},
    { "_FXId","_class_FXColorBar",SwigFXColorBarToFXId},
    { "_FXId","_FXColorBar",SwigFXColorBarToFXId},
    { "_FXId","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXId},
    { "_FXId","_FXPyDriveBox",SwigFXPyDriveBoxToFXId},
    { "_FXId","_class_FXDriveBox",SwigFXDriveBoxToFXId},
    { "_FXId","_FXDriveBox",SwigFXDriveBoxToFXId},
    { "_FXId","_class_FXPyListBox",SwigFXPyListBoxToFXId},
    { "_FXId","_FXPyListBox",SwigFXPyListBoxToFXId},
    { "_FXId","_class_FXListBox",SwigFXListBoxToFXId},
    { "_FXId","_FXListBox",SwigFXListBoxToFXId},
    { "_FXId","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXId},
    { "_FXId","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXId},
    { "_FXId","_class_FXToolbarGrip",SwigFXToolbarGripToFXId},
    { "_FXId","_FXToolbarGrip",SwigFXToolbarGripToFXId},
    { "_FXId","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXId},
    { "_FXId","_FXPyToolbarShell",SwigFXPyToolbarShellToFXId},
    { "_FXId","_class_FXToolbarShell",SwigFXToolbarShellToFXId},
    { "_FXId","_FXToolbarShell",SwigFXToolbarShellToFXId},
    { "_FXId","_class_FXPyToolbar",SwigFXPyToolbarToFXId},
    { "_FXId","_FXPyToolbar",SwigFXPyToolbarToFXId},
    { "_FXId","_class_FXToolbar",SwigFXToolbarToFXId},
    { "_FXId","_FXToolbar",SwigFXToolbarToFXId},
    { "_FXId","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXId},
    { "_FXId","_FXPyToolbarTab",SwigFXPyToolbarTabToFXId},
    { "_FXId","_class_FXToolbarTab",SwigFXToolbarTabToFXId},
    { "_FXId","_FXToolbarTab",SwigFXToolbarTabToFXId},
    { "_FXId","_class_FXPyProgressBar",SwigFXPyProgressBarToFXId},
    { "_FXId","_FXPyProgressBar",SwigFXPyProgressBarToFXId},
    { "_FXId","_class_FXProgressBar",SwigFXProgressBarToFXId},
    { "_FXId","_FXProgressBar",SwigFXProgressBarToFXId},
    { "_FXId","_class_FXPyHeader",SwigFXPyHeaderToFXId},
    { "_FXId","_FXPyHeader",SwigFXPyHeaderToFXId},
    { "_FXId","_class_FXHeader",SwigFXHeaderToFXId},
    { "_FXId","_FXHeader",SwigFXHeaderToFXId},
    { "_FXId","_class_FXPySlider",SwigFXPySliderToFXId},
    { "_FXId","_FXPySlider",SwigFXPySliderToFXId},
    { "_FXId","_class_FXSlider",SwigFXSliderToFXId},
    { "_FXId","_FXSlider",SwigFXSliderToFXId},
    { "_FXId","_class_FXPyStatusbar",SwigFXPyStatusbarToFXId},
    { "_FXId","_FXPyStatusbar",SwigFXPyStatusbarToFXId},
    { "_FXId","_class_FXStatusbar",SwigFXStatusbarToFXId},
    { "_FXId","_FXStatusbar",SwigFXStatusbarToFXId},
    { "_FXId","_class_FXPyStatusline",SwigFXPyStatuslineToFXId},
    { "_FXId","_FXPyStatusline",SwigFXPyStatuslineToFXId},
    { "_FXId","_class_FXStatusline",SwigFXStatuslineToFXId},
    { "_FXId","_FXStatusline",SwigFXStatuslineToFXId},
    { "_FXId","_class_FXPyDragCorner",SwigFXPyDragCornerToFXId},
    { "_FXId","_FXPyDragCorner",SwigFXPyDragCornerToFXId},
    { "_FXId","_class_FXDragCorner",SwigFXDragCornerToFXId},
    { "_FXId","_FXDragCorner",SwigFXDragCornerToFXId},
    { "_FXId","_class_FXPyComboBox",SwigFXPyComboBoxToFXId},
    { "_FXId","_FXPyComboBox",SwigFXPyComboBoxToFXId},
    { "_FXId","_class_FXComboBox",SwigFXComboBoxToFXId},
    { "_FXId","_FXComboBox",SwigFXComboBoxToFXId},
    { "_FXId","_class_FXPyList",SwigFXPyListToFXId},
    { "_FXId","_FXPyList",SwigFXPyListToFXId},
    { "_FXId","_class_FXList",SwigFXListToFXId},
    { "_FXId","_FXList",SwigFXListToFXId},
    { "_FXId","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXId},
    { "_FXId","_FXPyScrollCorner",SwigFXPyScrollCornerToFXId},
    { "_FXId","_class_FXScrollCorner",SwigFXScrollCornerToFXId},
    { "_FXId","_FXScrollCorner",SwigFXScrollCornerToFXId},
    { "_FXId","_class_FXPyScrollbar",SwigFXPyScrollbarToFXId},
    { "_FXId","_FXPyScrollbar",SwigFXPyScrollbarToFXId},
    { "_FXId","_class_FXScrollbar",SwigFXScrollbarToFXId},
    { "_FXId","_FXScrollbar",SwigFXScrollbarToFXId},
    { "_FXId","_class_FXPyTabBook",SwigFXPyTabBookToFXId},
    { "_FXId","_FXPyTabBook",SwigFXPyTabBookToFXId},
    { "_FXId","_class_FXTabBook",SwigFXTabBookToFXId},
    { "_FXId","_FXTabBook",SwigFXTabBookToFXId},
    { "_FXId","_class_FXPyTabItem",SwigFXPyTabItemToFXId},
    { "_FXId","_FXPyTabItem",SwigFXPyTabItemToFXId},
    { "_FXId","_class_FXTabItem",SwigFXTabItemToFXId},
    { "_FXId","_FXTabItem",SwigFXTabItemToFXId},
    { "_FXId","_class_FXPyTabBar",SwigFXPyTabBarToFXId},
    { "_FXId","_FXPyTabBar",SwigFXPyTabBarToFXId},
    { "_FXId","_class_FXTabBar",SwigFXTabBarToFXId},
    { "_FXId","_FXTabBar",SwigFXTabBarToFXId},
    { "_FXId","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXId},
    { "_FXId","_FXPyOptionMenu",SwigFXPyOptionMenuToFXId},
    { "_FXId","_class_FXOptionMenu",SwigFXOptionMenuToFXId},
    { "_FXId","_FXOptionMenu",SwigFXOptionMenuToFXId},
    { "_FXId","_class_FXPyOption",SwigFXPyOptionToFXId},
    { "_FXId","_FXPyOption",SwigFXPyOptionToFXId},
    { "_FXId","_class_FXOption",SwigFXOptionToFXId},
    { "_FXId","_FXOption",SwigFXOptionToFXId},
    { "_FXId","_class_FXPyTooltip",SwigFXPyTooltipToFXId},
    { "_FXId","_FXPyTooltip",SwigFXPyTooltipToFXId},
    { "_FXId","_class_FXTooltip",SwigFXTooltipToFXId},
    { "_FXId","_FXTooltip",SwigFXTooltipToFXId},
    { "_FXId","_class_FXPySpinner",SwigFXPySpinnerToFXId},
    { "_FXId","_FXPySpinner",SwigFXPySpinnerToFXId},
    { "_FXId","_class_FXSpinner",SwigFXSpinnerToFXId},
    { "_FXId","_FXSpinner",SwigFXSpinnerToFXId},
    { "_FXId","_class_FXPyPicker",SwigFXPyPickerToFXId},
    { "_FXId","_FXPyPicker",SwigFXPyPickerToFXId},
    { "_FXId","_class_FXPicker",SwigFXPickerToFXId},
    { "_FXId","_FXPicker",SwigFXPickerToFXId},
    { "_FXId","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXId},
    { "_FXId","_FXPyArrowButton",SwigFXPyArrowButtonToFXId},
    { "_FXId","_class_FXArrowButton",SwigFXArrowButtonToFXId},
    { "_FXId","_FXArrowButton",SwigFXArrowButtonToFXId},
    { "_FXId","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXId},
    { "_FXId","_FXPyCheckButton",SwigFXPyCheckButtonToFXId},
    { "_FXId","_class_FXCheckButton",SwigFXCheckButtonToFXId},
    { "_FXId","_FXCheckButton",SwigFXCheckButtonToFXId},
    { "_FXId","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXId},
    { "_FXId","_FXPyRadioButton",SwigFXPyRadioButtonToFXId},
    { "_FXId","_class_FXRadioButton",SwigFXRadioButtonToFXId},
    { "_FXId","_FXRadioButton",SwigFXRadioButtonToFXId},
    { "_FXId","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXId},
    { "_FXId","_FXPyToggleButton",SwigFXPyToggleButtonToFXId},
    { "_FXId","_class_FXToggleButton",SwigFXToggleButtonToFXId},
    { "_FXId","_FXToggleButton",SwigFXToggleButtonToFXId},
    { "_FXId","_class_FXPyButton",SwigFXPyButtonToFXId},
    { "_FXId","_FXPyButton",SwigFXPyButtonToFXId},
    { "_FXId","_class_FXButton",SwigFXButtonToFXId},
    { "_FXId","_FXButton",SwigFXButtonToFXId},
    { "_FXId","_class_FXPyTextField",SwigFXPyTextFieldToFXId},
    { "_FXId","_FXPyTextField",SwigFXPyTextFieldToFXId},
    { "_FXId","_class_FXTextField",SwigFXTextFieldToFXId},
    { "_FXId","_FXTextField",SwigFXTextFieldToFXId},
    { "_FXId","_class_FXPyColorWell",SwigFXPyColorWellToFXId},
    { "_FXId","_FXPyColorWell",SwigFXPyColorWellToFXId},
    { "_FXId","_class_FXColorWell",SwigFXColorWellToFXId},
    { "_FXId","_FXColorWell",SwigFXColorWellToFXId},
    { "_FXId","_class_FXPyDial",SwigFXPyDialToFXId},
    { "_FXId","_FXPyDial",SwigFXPyDialToFXId},
    { "_FXId","_class_FXDial",SwigFXDialToFXId},
    { "_FXId","_FXDial",SwigFXDialToFXId},
    { "_FXId","_class_FXPyLabel",SwigFXPyLabelToFXId},
    { "_FXId","_FXPyLabel",SwigFXPyLabelToFXId},
    { "_FXId","_class_FXLabel",SwigFXLabelToFXId},
    { "_FXId","_FXLabel",SwigFXLabelToFXId},
    { "_FXId","_class_FXId",0},
    { "_class_FXDrawable","_class_FXPyColorWheel",SwigFXPyColorWheelToFXDrawable},
    { "_class_FXDrawable","_FXPyColorWheel",SwigFXPyColorWheelToFXDrawable},
    { "_class_FXDrawable","_class_FXColorWheel",SwigFXColorWheelToFXDrawable},
    { "_class_FXDrawable","_FXColorWheel",SwigFXColorWheelToFXDrawable},
    { "_class_FXDrawable","_class_FXPyColorBar",SwigFXPyColorBarToFXDrawable},
    { "_class_FXDrawable","_FXPyColorBar",SwigFXPyColorBarToFXDrawable},
    { "_class_FXDrawable","_class_FXColorBar",SwigFXColorBarToFXDrawable},
    { "_class_FXDrawable","_FXColorBar",SwigFXColorBarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyDriveBox",SwigFXPyDriveBoxToFXDrawable},
    { "_class_FXDrawable","_FXPyDriveBox",SwigFXPyDriveBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXDriveBox",SwigFXDriveBoxToFXDrawable},
    { "_class_FXDrawable","_FXDriveBox",SwigFXDriveBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXPyListBox",SwigFXPyListBoxToFXDrawable},
    { "_class_FXDrawable","_FXPyListBox",SwigFXPyListBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXListBox",SwigFXListBoxToFXDrawable},
    { "_class_FXDrawable","_FXListBox",SwigFXListBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXDrawable},
    { "_class_FXDrawable","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXDrawable},
    { "_class_FXDrawable","_class_FXToolbarGrip",SwigFXToolbarGripToFXDrawable},
    { "_class_FXDrawable","_FXToolbarGrip",SwigFXToolbarGripToFXDrawable},
    { "_class_FXDrawable","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXDrawable},
    { "_class_FXDrawable","_FXPyToolbarShell",SwigFXPyToolbarShellToFXDrawable},
    { "_class_FXDrawable","_class_FXToolbarShell",SwigFXToolbarShellToFXDrawable},
    { "_class_FXDrawable","_FXToolbarShell",SwigFXToolbarShellToFXDrawable},
    { "_class_FXDrawable","_class_FXPyToolbar",SwigFXPyToolbarToFXDrawable},
    { "_class_FXDrawable","_FXPyToolbar",SwigFXPyToolbarToFXDrawable},
    { "_class_FXDrawable","_class_FXToolbar",SwigFXToolbarToFXDrawable},
    { "_class_FXDrawable","_FXToolbar",SwigFXToolbarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyToolbarTab",SwigFXPyToolbarTabToFXDrawable},
    { "_class_FXDrawable","_FXPyToolbarTab",SwigFXPyToolbarTabToFXDrawable},
    { "_class_FXDrawable","_class_FXToolbarTab",SwigFXToolbarTabToFXDrawable},
    { "_class_FXDrawable","_FXToolbarTab",SwigFXToolbarTabToFXDrawable},
    { "_class_FXDrawable","_class_FXPyProgressBar",SwigFXPyProgressBarToFXDrawable},
    { "_class_FXDrawable","_FXPyProgressBar",SwigFXPyProgressBarToFXDrawable},
    { "_class_FXDrawable","_class_FXProgressBar",SwigFXProgressBarToFXDrawable},
    { "_class_FXDrawable","_FXProgressBar",SwigFXProgressBarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyHeader",SwigFXPyHeaderToFXDrawable},
    { "_class_FXDrawable","_FXPyHeader",SwigFXPyHeaderToFXDrawable},
    { "_class_FXDrawable","_class_FXHeader",SwigFXHeaderToFXDrawable},
    { "_class_FXDrawable","_FXHeader",SwigFXHeaderToFXDrawable},
    { "_class_FXDrawable","_class_FXPySlider",SwigFXPySliderToFXDrawable},
    { "_class_FXDrawable","_FXPySlider",SwigFXPySliderToFXDrawable},
    { "_class_FXDrawable","_class_FXSlider",SwigFXSliderToFXDrawable},
    { "_class_FXDrawable","_FXSlider",SwigFXSliderToFXDrawable},
    { "_class_FXDrawable","_class_FXPyStatusbar",SwigFXPyStatusbarToFXDrawable},
    { "_class_FXDrawable","_FXPyStatusbar",SwigFXPyStatusbarToFXDrawable},
    { "_class_FXDrawable","_class_FXStatusbar",SwigFXStatusbarToFXDrawable},
    { "_class_FXDrawable","_FXStatusbar",SwigFXStatusbarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyStatusline",SwigFXPyStatuslineToFXDrawable},
    { "_class_FXDrawable","_FXPyStatusline",SwigFXPyStatuslineToFXDrawable},
    { "_class_FXDrawable","_class_FXStatusline",SwigFXStatuslineToFXDrawable},
    { "_class_FXDrawable","_FXStatusline",SwigFXStatuslineToFXDrawable},
    { "_class_FXDrawable","_class_FXPyDragCorner",SwigFXPyDragCornerToFXDrawable},
    { "_class_FXDrawable","_FXPyDragCorner",SwigFXPyDragCornerToFXDrawable},
    { "_class_FXDrawable","_class_FXDragCorner",SwigFXDragCornerToFXDrawable},
    { "_class_FXDrawable","_FXDragCorner",SwigFXDragCornerToFXDrawable},
    { "_class_FXDrawable","_class_FXPyComboBox",SwigFXPyComboBoxToFXDrawable},
    { "_class_FXDrawable","_FXPyComboBox",SwigFXPyComboBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXComboBox",SwigFXComboBoxToFXDrawable},
    { "_class_FXDrawable","_FXComboBox",SwigFXComboBoxToFXDrawable},
    { "_class_FXDrawable","_class_FXPyList",SwigFXPyListToFXDrawable},
    { "_class_FXDrawable","_FXPyList",SwigFXPyListToFXDrawable},
    { "_class_FXDrawable","_class_FXList",SwigFXListToFXDrawable},
    { "_class_FXDrawable","_FXList",SwigFXListToFXDrawable},
    { "_class_FXDrawable","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXDrawable},
    { "_class_FXDrawable","_FXPyScrollCorner",SwigFXPyScrollCornerToFXDrawable},
    { "_class_FXDrawable","_class_FXScrollCorner",SwigFXScrollCornerToFXDrawable},
    { "_class_FXDrawable","_FXScrollCorner",SwigFXScrollCornerToFXDrawable},
    { "_class_FXDrawable","_class_FXPyScrollbar",SwigFXPyScrollbarToFXDrawable},
    { "_class_FXDrawable","_FXPyScrollbar",SwigFXPyScrollbarToFXDrawable},
    { "_class_FXDrawable","_class_FXScrollbar",SwigFXScrollbarToFXDrawable},
    { "_class_FXDrawable","_FXScrollbar",SwigFXScrollbarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTabBook",SwigFXPyTabBookToFXDrawable},
    { "_class_FXDrawable","_FXPyTabBook",SwigFXPyTabBookToFXDrawable},
    { "_class_FXDrawable","_class_FXTabBook",SwigFXTabBookToFXDrawable},
    { "_class_FXDrawable","_FXTabBook",SwigFXTabBookToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTabItem",SwigFXPyTabItemToFXDrawable},
    { "_class_FXDrawable","_FXPyTabItem",SwigFXPyTabItemToFXDrawable},
    { "_class_FXDrawable","_class_FXTabItem",SwigFXTabItemToFXDrawable},
    { "_class_FXDrawable","_FXTabItem",SwigFXTabItemToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTabBar",SwigFXPyTabBarToFXDrawable},
    { "_class_FXDrawable","_FXPyTabBar",SwigFXPyTabBarToFXDrawable},
    { "_class_FXDrawable","_class_FXTabBar",SwigFXTabBarToFXDrawable},
    { "_class_FXDrawable","_FXTabBar",SwigFXTabBarToFXDrawable},
    { "_class_FXDrawable","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXDrawable},
    { "_class_FXDrawable","_FXPyOptionMenu",SwigFXPyOptionMenuToFXDrawable},
    { "_class_FXDrawable","_class_FXOptionMenu",SwigFXOptionMenuToFXDrawable},
    { "_class_FXDrawable","_FXOptionMenu",SwigFXOptionMenuToFXDrawable},
    { "_class_FXDrawable","_class_FXPyOption",SwigFXPyOptionToFXDrawable},
    { "_class_FXDrawable","_FXPyOption",SwigFXPyOptionToFXDrawable},
    { "_class_FXDrawable","_class_FXOption",SwigFXOptionToFXDrawable},
    { "_class_FXDrawable","_FXOption",SwigFXOptionToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTooltip",SwigFXPyTooltipToFXDrawable},
    { "_class_FXDrawable","_FXPyTooltip",SwigFXPyTooltipToFXDrawable},
    { "_class_FXDrawable","_class_FXTooltip",SwigFXTooltipToFXDrawable},
    { "_class_FXDrawable","_FXTooltip",SwigFXTooltipToFXDrawable},
    { "_class_FXDrawable","_class_FXPySpinner",SwigFXPySpinnerToFXDrawable},
    { "_class_FXDrawable","_FXPySpinner",SwigFXPySpinnerToFXDrawable},
    { "_class_FXDrawable","_class_FXSpinner",SwigFXSpinnerToFXDrawable},
    { "_class_FXDrawable","_FXSpinner",SwigFXSpinnerToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPicker",SwigFXPyPickerToFXDrawable},
    { "_class_FXDrawable","_FXPyPicker",SwigFXPyPickerToFXDrawable},
    { "_class_FXDrawable","_class_FXPicker",SwigFXPickerToFXDrawable},
    { "_class_FXDrawable","_FXPicker",SwigFXPickerToFXDrawable},
    { "_class_FXDrawable","_class_FXPyArrowButton",SwigFXPyArrowButtonToFXDrawable},
    { "_class_FXDrawable","_FXPyArrowButton",SwigFXPyArrowButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXArrowButton",SwigFXArrowButtonToFXDrawable},
    { "_class_FXDrawable","_FXArrowButton",SwigFXArrowButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXPyCheckButton",SwigFXPyCheckButtonToFXDrawable},
    { "_class_FXDrawable","_FXPyCheckButton",SwigFXPyCheckButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXCheckButton",SwigFXCheckButtonToFXDrawable},
    { "_class_FXDrawable","_FXCheckButton",SwigFXCheckButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXPyRadioButton",SwigFXPyRadioButtonToFXDrawable},
    { "_class_FXDrawable","_FXPyRadioButton",SwigFXPyRadioButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXRadioButton",SwigFXRadioButtonToFXDrawable},
    { "_class_FXDrawable","_FXRadioButton",SwigFXRadioButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXPyToggleButton",SwigFXPyToggleButtonToFXDrawable},
    { "_class_FXDrawable","_FXPyToggleButton",SwigFXPyToggleButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXToggleButton",SwigFXToggleButtonToFXDrawable},
    { "_class_FXDrawable","_FXToggleButton",SwigFXToggleButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXPyButton",SwigFXPyButtonToFXDrawable},
    { "_class_FXDrawable","_FXPyButton",SwigFXPyButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXButton",SwigFXButtonToFXDrawable},
    { "_class_FXDrawable","_FXButton",SwigFXButtonToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTextField",SwigFXPyTextFieldToFXDrawable},
    { "_class_FXDrawable","_FXPyTextField",SwigFXPyTextFieldToFXDrawable},
    { "_class_FXDrawable","_class_FXTextField",SwigFXTextFieldToFXDrawable},
    { "_class_FXDrawable","_FXTextField",SwigFXTextFieldToFXDrawable},
    { "_class_FXDrawable","_class_FXPyColorWell",SwigFXPyColorWellToFXDrawable},
    { "_class_FXDrawable","_FXPyColorWell",SwigFXPyColorWellToFXDrawable},
    { "_class_FXDrawable","_class_FXColorWell",SwigFXColorWellToFXDrawable},
    { "_class_FXDrawable","_FXColorWell",SwigFXColorWellToFXDrawable},
    { "_class_FXDrawable","_class_FXPyDial",SwigFXPyDialToFXDrawable},
    { "_class_FXDrawable","_FXPyDial",SwigFXPyDialToFXDrawable},
    { "_class_FXDrawable","_class_FXDial",SwigFXDialToFXDrawable},
    { "_class_FXDrawable","_FXDial",SwigFXDialToFXDrawable},
    { "_class_FXDrawable","_class_FXPyLabel",SwigFXPyLabelToFXDrawable},
    { "_class_FXDrawable","_FXPyLabel",SwigFXPyLabelToFXDrawable},
    { "_class_FXDrawable","_class_FXLabel",SwigFXLabelToFXDrawable},
    { "_class_FXDrawable","_FXLabel",SwigFXLabelToFXDrawable},
    { "_class_FXDrawable","_FXDrawable",0},
    { "_FXPyBMPImage","_class_FXPyBMPImage",0},
    { "_FXPyICOImage","_class_FXPyICOImage",0},
    { "_FXPyMainWindow","_class_FXPyMainWindow",0},
    { "_FXHorizontalFrame","_class_FXPyStatusbar",SwigFXPyStatusbarToFXHorizontalFrame},
    { "_FXHorizontalFrame","_FXPyStatusbar",SwigFXPyStatusbarToFXHorizontalFrame},
    { "_FXHorizontalFrame","_class_FXStatusbar",SwigFXStatusbarToFXHorizontalFrame},
    { "_FXHorizontalFrame","_FXStatusbar",SwigFXStatusbarToFXHorizontalFrame},
    { "_FXHorizontalFrame","_class_FXHorizontalFrame",0},
    { "_class_FXStatusline","_class_FXPyStatusline",SwigFXPyStatuslineToFXStatusline},
    { "_class_FXStatusline","_FXPyStatusline",SwigFXPyStatuslineToFXStatusline},
    { "_class_FXStatusline","_FXStatusline",0},
    { "_FXPyPCXImage","_class_FXPyPCXImage",0},
    { "_FXPyRGBIcon","_class_FXPyRGBIcon",0},
    { "_class_FXPyDial","_FXPyDial",0},
    { "_class_FXPyListBox","_FXPyListBox",0},
    { "_class_FXPyJPGIcon","_FXPyJPGIcon",0},
    { "_FXTIFIcon","_class_FXTIFIcon",0},
    { "_FXScrollWindow","_class_FXScrollWindow",0},
    { "_FXList","_class_FXPyList",SwigFXPyListToFXList},
    { "_FXList","_FXPyList",SwigFXPyListToFXList},
    { "_FXList","_class_FXList",0},
    { "_FXMainWindow","_class_FXMainWindow",0},
    { "_class_FXMatrix","_FXMatrix",0},
    { "__XEvent","_FXRawEvent",0},
    { "_class_FXPyShutterItem","_FXPyShutterItem",0},
    { "_class_FXOptionMenu","_class_FXPyOptionMenu",SwigFXPyOptionMenuToFXOptionMenu},
    { "_class_FXOptionMenu","_FXPyOptionMenu",SwigFXPyOptionMenuToFXOptionMenu},
    { "_class_FXOptionMenu","_FXOptionMenu",0},
    { "_struct_FXEvent","_FXEvent",0},
    { "_class_FXStream","_FXStream",0},
    { "_class_FXPyStringDict","_FXPyStringDict",0},
    { "_class_FXPyJPGImage","_FXPyJPGImage",0},
    { "_FXTIFImage","_class_FXTIFImage",0},
    { "_FXPyIcon","_class_FXPyIcon",0},
    { "_FXPyAccelTable","_class_FXPyAccelTable",0},
    { "_class_FXPyLabel","_FXPyLabel",0},
    { "_FXTooltip","_class_FXPyTooltip",SwigFXPyTooltipToFXTooltip},
    { "_FXTooltip","_FXPyTooltip",SwigFXPyTooltipToFXTooltip},
    { "_FXTooltip","_class_FXTooltip",0},
    { "_class_FXTGAIcon","_FXTGAIcon",0},
    { "_FXPyDragCorner","_class_FXPyDragCorner",0},
    { "_class_FXToolbarGrip","_class_FXPyToolbarGrip",SwigFXPyToolbarGripToFXToolbarGrip},
    { "_class_FXToolbarGrip","_FXPyToolbarGrip",SwigFXPyToolbarGripToFXToolbarGrip},
    { "_class_FXToolbarGrip","_FXToolbarGrip",0},
    { "_struct_FXPSBounds","_FXPSBounds",0},
    { "_FXDCPrint","_class_FXDCPrint",0},
    { "_class_FXImage","_FXImage",0},
    { "_FXPyTabBar","_class_FXPyTabBar",0},
    { "_FXTabBook","_class_FXPyTabBook",SwigFXPyTabBookToFXTabBook},
    { "_FXTabBook","_FXPyTabBook",SwigFXPyTabBookToFXTabBook},
    { "_FXTabBook","_class_FXTabBook",0},
    { "_FXPoint","_class_FXPoint",0},
    { "_FXAccelTable","_class_FXAccelTable",0},
    { "_FXComboBox","_class_FXPyComboBox",SwigFXPyComboBoxToFXComboBox},
    { "_FXComboBox","_FXPyComboBox",SwigFXPyComboBoxToFXComboBox},
    { "_FXComboBox","_class_FXComboBox",0},
    { "_class_FXPyDriveBox","_FXPyDriveBox",0},
    { "_FXDragCorner","_class_FXPyDragCorner",SwigFXPyDragCornerToFXDragCorner},
    { "_FXDragCorner","_FXPyDragCorner",SwigFXPyDragCornerToFXDragCorner},
    { "_FXDragCorner","_class_FXDragCorner",0},
    { "_FXPyId","_class_FXPyId",0},
    { "_FXSelector","_FXInputHandle",0},
    { "_FXSelector","_FXDragType",0},
    { "_FXSelector","_FXHotKey",0},
    { "_FXSelector","_FXColor",0},
    { "_FXSelector","_FXID",0},
    { "_FXSelector","_FXuint",0},
    { "_FXSelector","_int",0},
    { "_FXSelector","_unsigned_int",0},
    { "_FXSelector","_FXint",0},
    { "_class_FXFont","_FXFont",0},
    { "_class_FXXPMImage","_FXXPMImage",0},
    { "_FXPyRecentFiles","_class_FXPyRecentFiles",0},
    { "_FXPyDebugTarget","_class_FXPyDebugTarget",0},
    { "_FXCommand","_class_FXCommand",0},
    { "_FXPyFrame","_class_FXPyFrame",0},
    { "_class_FXGIFImage","_FXGIFImage",0},
    { "_class_FXPyRGBImage","_FXPyRGBImage",0},
    { "_class_FXSplitter","_FXSplitter",0},
    { "_class_FXPyProgressBar","_FXPyProgressBar",0},
    { "_FXToolbarShell","_class_FXPyToolbarShell",SwigFXPyToolbarShellToFXToolbarShell},
    { "_FXToolbarShell","_FXPyToolbarShell",SwigFXPyToolbarShellToFXToolbarShell},
    { "_FXToolbarShell","_class_FXToolbarShell",0},
    { "_class_FXXPMIcon","_FXXPMIcon",0},
    { "_class_FXPyPopup","_FXPyPopup",0},
    { "_FXScrollCorner","_class_FXPyScrollCorner",SwigFXPyScrollCornerToFXScrollCorner},
    { "_FXScrollCorner","_FXPyScrollCorner",SwigFXPyScrollCornerToFXScrollCorner},
    { "_FXScrollCorner","_class_FXScrollCorner",0},
{0,0,0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initcontrolsc() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("controlsc", controlscMethods);
	 d = PyModule_GetDict(m);
	 PyDict_SetItemString(d,"JUSTIFY_NORMAL", PyInt_FromLong((long) JUSTIFY_NORMAL));
	 PyDict_SetItemString(d,"JUSTIFY_CENTER_X", PyInt_FromLong((long) JUSTIFY_CENTER_X));
	 PyDict_SetItemString(d,"JUSTIFY_LEFT", PyInt_FromLong((long) JUSTIFY_LEFT));
	 PyDict_SetItemString(d,"JUSTIFY_RIGHT", PyInt_FromLong((long) JUSTIFY_RIGHT));
	 PyDict_SetItemString(d,"JUSTIFY_HZ_APART", PyInt_FromLong((long) JUSTIFY_HZ_APART));
	 PyDict_SetItemString(d,"JUSTIFY_CENTER_Y", PyInt_FromLong((long) JUSTIFY_CENTER_Y));
	 PyDict_SetItemString(d,"JUSTIFY_TOP", PyInt_FromLong((long) JUSTIFY_TOP));
	 PyDict_SetItemString(d,"JUSTIFY_BOTTOM", PyInt_FromLong((long) JUSTIFY_BOTTOM));
	 PyDict_SetItemString(d,"JUSTIFY_VT_APART", PyInt_FromLong((long) JUSTIFY_VT_APART));
	 PyDict_SetItemString(d,"ICON_UNDER_TEXT", PyInt_FromLong((long) ICON_UNDER_TEXT));
	 PyDict_SetItemString(d,"ICON_AFTER_TEXT", PyInt_FromLong((long) ICON_AFTER_TEXT));
	 PyDict_SetItemString(d,"ICON_BEFORE_TEXT", PyInt_FromLong((long) ICON_BEFORE_TEXT));
	 PyDict_SetItemString(d,"ICON_ABOVE_TEXT", PyInt_FromLong((long) ICON_ABOVE_TEXT));
	 PyDict_SetItemString(d,"ICON_BELOW_TEXT", PyInt_FromLong((long) ICON_BELOW_TEXT));
	 PyDict_SetItemString(d,"TEXT_OVER_ICON", PyInt_FromLong((long) TEXT_OVER_ICON));
	 PyDict_SetItemString(d,"TEXT_AFTER_ICON", PyInt_FromLong((long) TEXT_AFTER_ICON));
	 PyDict_SetItemString(d,"TEXT_BEFORE_ICON", PyInt_FromLong((long) TEXT_BEFORE_ICON));
	 PyDict_SetItemString(d,"TEXT_ABOVE_ICON", PyInt_FromLong((long) TEXT_ABOVE_ICON));
	 PyDict_SetItemString(d,"TEXT_BELOW_ICON", PyInt_FromLong((long) TEXT_BELOW_ICON));
	 PyDict_SetItemString(d,"LABEL_NORMAL", PyInt_FromLong((long) LABEL_NORMAL));
	 PyDict_SetItemString(d,"DIAL_VERTICAL", PyInt_FromLong((long) DIAL_VERTICAL));
	 PyDict_SetItemString(d,"DIAL_HORIZONTAL", PyInt_FromLong((long) DIAL_HORIZONTAL));
	 PyDict_SetItemString(d,"DIAL_CYCLIC", PyInt_FromLong((long) DIAL_CYCLIC));
	 PyDict_SetItemString(d,"DIAL_HAS_NOTCH", PyInt_FromLong((long) DIAL_HAS_NOTCH));
	 PyDict_SetItemString(d,"DIAL_NORMAL", PyInt_FromLong((long) DIAL_NORMAL));
	 PyDict_SetItemString(d,"COLORWELL_OPAQUEONLY", PyInt_FromLong((long) COLORWELL_OPAQUEONLY));
	 PyDict_SetItemString(d,"COLORWELL_SOURCEONLY", PyInt_FromLong((long) COLORWELL_SOURCEONLY));
	 PyDict_SetItemString(d,"COLORWELL_NORMAL", PyInt_FromLong((long) COLORWELL_NORMAL));
	 PyDict_SetItemString(d,"TEXTFIELD_PASSWD", PyInt_FromLong((long) TEXTFIELD_PASSWD));
	 PyDict_SetItemString(d,"TEXTFIELD_INTEGER", PyInt_FromLong((long) TEXTFIELD_INTEGER));
	 PyDict_SetItemString(d,"TEXTFIELD_REAL", PyInt_FromLong((long) TEXTFIELD_REAL));
	 PyDict_SetItemString(d,"TEXTFIELD_READONLY", PyInt_FromLong((long) TEXTFIELD_READONLY));
	 PyDict_SetItemString(d,"TEXTFIELD_ENTER_ONLY", PyInt_FromLong((long) TEXTFIELD_ENTER_ONLY));
	 PyDict_SetItemString(d,"TEXTFIELD_LIMITED", PyInt_FromLong((long) TEXTFIELD_LIMITED));
	 PyDict_SetItemString(d,"TEXTFIELD_OVERSTRIKE", PyInt_FromLong((long) TEXTFIELD_OVERSTRIKE));
	 PyDict_SetItemString(d,"TEXTFIELD_NORMAL", PyInt_FromLong((long) TEXTFIELD_NORMAL));
	 PyDict_SetItemString(d,"STATE_UP", PyInt_FromLong((long) STATE_UP));
	 PyDict_SetItemString(d,"STATE_DOWN", PyInt_FromLong((long) STATE_DOWN));
	 PyDict_SetItemString(d,"STATE_ENGAGED", PyInt_FromLong((long) STATE_ENGAGED));
	 PyDict_SetItemString(d,"STATE_UNCHECKED", PyInt_FromLong((long) STATE_UNCHECKED));
	 PyDict_SetItemString(d,"STATE_CHECKED", PyInt_FromLong((long) STATE_CHECKED));
	 PyDict_SetItemString(d,"BUTTON_AUTOGRAY", PyInt_FromLong((long) BUTTON_AUTOGRAY));
	 PyDict_SetItemString(d,"BUTTON_AUTOHIDE", PyInt_FromLong((long) BUTTON_AUTOHIDE));
	 PyDict_SetItemString(d,"BUTTON_TOOLBAR", PyInt_FromLong((long) BUTTON_TOOLBAR));
	 PyDict_SetItemString(d,"BUTTON_DEFAULT", PyInt_FromLong((long) BUTTON_DEFAULT));
	 PyDict_SetItemString(d,"BUTTON_INITIAL", PyInt_FromLong((long) BUTTON_INITIAL));
	 PyDict_SetItemString(d,"BUTTON_NORMAL", PyInt_FromLong((long) BUTTON_NORMAL));
	 PyDict_SetItemString(d,"TOGGLEBUTTON_AUTOGRAY", PyInt_FromLong((long) TOGGLEBUTTON_AUTOGRAY));
	 PyDict_SetItemString(d,"TOGGLEBUTTON_AUTOHIDE", PyInt_FromLong((long) TOGGLEBUTTON_AUTOHIDE));
	 PyDict_SetItemString(d,"TOGGLEBUTTON_TOOLBAR", PyInt_FromLong((long) TOGGLEBUTTON_TOOLBAR));
	 PyDict_SetItemString(d,"TOGGLEBUTTON_NORMAL", PyInt_FromLong((long) TOGGLEBUTTON_NORMAL));
	 PyDict_SetItemString(d,"RADIOBUTTON_AUTOGRAY", PyInt_FromLong((long) RADIOBUTTON_AUTOGRAY));
	 PyDict_SetItemString(d,"RADIOBUTTON_AUTOHIDE", PyInt_FromLong((long) RADIOBUTTON_AUTOHIDE));
	 PyDict_SetItemString(d,"RADIOBUTTON_NORMAL", PyInt_FromLong((long) RADIOBUTTON_NORMAL));
	 PyDict_SetItemString(d,"CHECKBUTTON_AUTOGRAY", PyInt_FromLong((long) CHECKBUTTON_AUTOGRAY));
	 PyDict_SetItemString(d,"CHECKBUTTON_AUTOHIDE", PyInt_FromLong((long) CHECKBUTTON_AUTOHIDE));
	 PyDict_SetItemString(d,"CHECKBUTTON_NORMAL", PyInt_FromLong((long) CHECKBUTTON_NORMAL));
	 PyDict_SetItemString(d,"ARROW_NONE", PyInt_FromLong((long) ARROW_NONE));
	 PyDict_SetItemString(d,"ARROW_UP", PyInt_FromLong((long) ARROW_UP));
	 PyDict_SetItemString(d,"ARROW_DOWN", PyInt_FromLong((long) ARROW_DOWN));
	 PyDict_SetItemString(d,"ARROW_LEFT", PyInt_FromLong((long) ARROW_LEFT));
	 PyDict_SetItemString(d,"ARROW_RIGHT", PyInt_FromLong((long) ARROW_RIGHT));
	 PyDict_SetItemString(d,"ARROW_REPEAT", PyInt_FromLong((long) ARROW_REPEAT));
	 PyDict_SetItemString(d,"ARROW_AUTOGRAY", PyInt_FromLong((long) ARROW_AUTOGRAY));
	 PyDict_SetItemString(d,"ARROW_AUTOHIDE", PyInt_FromLong((long) ARROW_AUTOHIDE));
	 PyDict_SetItemString(d,"ARROW_TOOLBAR", PyInt_FromLong((long) ARROW_TOOLBAR));
	 PyDict_SetItemString(d,"ARROW_NORMAL", PyInt_FromLong((long) ARROW_NORMAL));
	 PyDict_SetItemString(d,"SPIN_NORMAL", PyInt_FromLong((long) SPIN_NORMAL));
	 PyDict_SetItemString(d,"SPIN_CYCLIC", PyInt_FromLong((long) SPIN_CYCLIC));
	 PyDict_SetItemString(d,"SPIN_NOTEXT", PyInt_FromLong((long) SPIN_NOTEXT));
	 PyDict_SetItemString(d,"SPIN_NOMAX", PyInt_FromLong((long) SPIN_NOMAX));
	 PyDict_SetItemString(d,"SPIN_NOMIN", PyInt_FromLong((long) SPIN_NOMIN));
	 PyDict_SetItemString(d,"TOOLTIP_NORMAL", PyInt_FromLong((long) TOOLTIP_NORMAL));
	 PyDict_SetItemString(d,"TOOLTIP_PERMANENT", PyInt_FromLong((long) TOOLTIP_PERMANENT));
	 PyDict_SetItemString(d,"TOOLTIP_VARIABLE", PyInt_FromLong((long) TOOLTIP_VARIABLE));
	 PyDict_SetItemString(d,"TAB_TOP", PyInt_FromLong((long) TAB_TOP));
	 PyDict_SetItemString(d,"TAB_LEFT", PyInt_FromLong((long) TAB_LEFT));
	 PyDict_SetItemString(d,"TAB_RIGHT", PyInt_FromLong((long) TAB_RIGHT));
	 PyDict_SetItemString(d,"TAB_BOTTOM", PyInt_FromLong((long) TAB_BOTTOM));
	 PyDict_SetItemString(d,"TAB_TOP_NORMAL", PyInt_FromLong((long) TAB_TOP_NORMAL));
	 PyDict_SetItemString(d,"TAB_BOTTOM_NORMAL", PyInt_FromLong((long) TAB_BOTTOM_NORMAL));
	 PyDict_SetItemString(d,"TAB_LEFT_NORMAL", PyInt_FromLong((long) TAB_LEFT_NORMAL));
	 PyDict_SetItemString(d,"TAB_RIGHT_NORMAL", PyInt_FromLong((long) TAB_RIGHT_NORMAL));
	 PyDict_SetItemString(d,"TABBOOK_TOPTABS", PyInt_FromLong((long) TABBOOK_TOPTABS));
	 PyDict_SetItemString(d,"TABBOOK_BOTTOMTABS", PyInt_FromLong((long) TABBOOK_BOTTOMTABS));
	 PyDict_SetItemString(d,"TABBOOK_SIDEWAYS", PyInt_FromLong((long) TABBOOK_SIDEWAYS));
	 PyDict_SetItemString(d,"TABBOOK_LEFTTABS", PyInt_FromLong((long) TABBOOK_LEFTTABS));
	 PyDict_SetItemString(d,"TABBOOK_RIGHTTABS", PyInt_FromLong((long) TABBOOK_RIGHTTABS));
	 PyDict_SetItemString(d,"TABBOOK_NORMAL", PyInt_FromLong((long) TABBOOK_NORMAL));
	 PyDict_SetItemString(d,"SCROLLBAR_HORIZONTAL", PyInt_FromLong((long) SCROLLBAR_HORIZONTAL));
	 PyDict_SetItemString(d,"SCROLLBAR_VERTICAL", PyInt_FromLong((long) SCROLLBAR_VERTICAL));
	 PyDict_SetItemString(d,"LIST_EXTENDEDSELECT", PyInt_FromLong((long) LIST_EXTENDEDSELECT));
	 PyDict_SetItemString(d,"LIST_SINGLESELECT", PyInt_FromLong((long) LIST_SINGLESELECT));
	 PyDict_SetItemString(d,"LIST_BROWSESELECT", PyInt_FromLong((long) LIST_BROWSESELECT));
	 PyDict_SetItemString(d,"LIST_MULTIPLESELECT", PyInt_FromLong((long) LIST_MULTIPLESELECT));
	 PyDict_SetItemString(d,"LIST_AUTOSELECT", PyInt_FromLong((long) LIST_AUTOSELECT));
	 PyDict_SetItemString(d,"LIST_NORMAL", PyInt_FromLong((long) LIST_NORMAL));
	 PyDict_SetItemString(d,"COMBOBOX_NO_REPLACE", PyInt_FromLong((long) COMBOBOX_NO_REPLACE));
	 PyDict_SetItemString(d,"COMBOBOX_REPLACE", PyInt_FromLong((long) COMBOBOX_REPLACE));
	 PyDict_SetItemString(d,"COMBOBOX_INSERT_BEFORE", PyInt_FromLong((long) COMBOBOX_INSERT_BEFORE));
	 PyDict_SetItemString(d,"COMBOBOX_INSERT_AFTER", PyInt_FromLong((long) COMBOBOX_INSERT_AFTER));
	 PyDict_SetItemString(d,"COMBOBOX_INSERT_FIRST", PyInt_FromLong((long) COMBOBOX_INSERT_FIRST));
	 PyDict_SetItemString(d,"COMBOBOX_INSERT_LAST", PyInt_FromLong((long) COMBOBOX_INSERT_LAST));
	 PyDict_SetItemString(d,"COMBOBOX_STATIC", PyInt_FromLong((long) COMBOBOX_STATIC));
	 PyDict_SetItemString(d,"COMBOBOX_NORMAL", PyInt_FromLong((long) COMBOBOX_NORMAL));
	 PyDict_SetItemString(d,"STATUSBAR_WITH_DRAGCORNER", PyInt_FromLong((long) STATUSBAR_WITH_DRAGCORNER));
	 PyDict_SetItemString(d,"SLIDERBAR_SIZE", PyInt_FromLong((long) 5));
	 PyDict_SetItemString(d,"SLIDERHEAD_SIZE", PyInt_FromLong((long) 7));
	 PyDict_SetItemString(d,"SLIDER_HORIZONTAL", PyInt_FromLong((long) SLIDER_HORIZONTAL));
	 PyDict_SetItemString(d,"SLIDER_VERTICAL", PyInt_FromLong((long) SLIDER_VERTICAL));
	 PyDict_SetItemString(d,"SLIDER_ARROW_UP", PyInt_FromLong((long) SLIDER_ARROW_UP));
	 PyDict_SetItemString(d,"SLIDER_ARROW_DOWN", PyInt_FromLong((long) SLIDER_ARROW_DOWN));
	 PyDict_SetItemString(d,"SLIDER_ARROW_LEFT", PyInt_FromLong((long) SLIDER_ARROW_LEFT));
	 PyDict_SetItemString(d,"SLIDER_ARROW_RIGHT", PyInt_FromLong((long) SLIDER_ARROW_RIGHT));
	 PyDict_SetItemString(d,"SLIDER_INSIDE_BAR", PyInt_FromLong((long) SLIDER_INSIDE_BAR));
	 PyDict_SetItemString(d,"SLIDER_TICKS_TOP", PyInt_FromLong((long) SLIDER_TICKS_TOP));
	 PyDict_SetItemString(d,"SLIDER_TICKS_BOTTOM", PyInt_FromLong((long) SLIDER_TICKS_BOTTOM));
	 PyDict_SetItemString(d,"SLIDER_TICKS_LEFT", PyInt_FromLong((long) SLIDER_TICKS_LEFT));
	 PyDict_SetItemString(d,"SLIDER_TICKS_RIGHT", PyInt_FromLong((long) SLIDER_TICKS_RIGHT));
	 PyDict_SetItemString(d,"SLIDER_NORMAL", PyInt_FromLong((long) SLIDER_NORMAL));
	 PyDict_SetItemString(d,"HEADER_BUTTON", PyInt_FromLong((long) HEADER_BUTTON));
	 PyDict_SetItemString(d,"HEADER_HORIZONTAL", PyInt_FromLong((long) HEADER_HORIZONTAL));
	 PyDict_SetItemString(d,"HEADER_VERTICAL", PyInt_FromLong((long) HEADER_VERTICAL));
	 PyDict_SetItemString(d,"HEADER_TRACKING", PyInt_FromLong((long) HEADER_TRACKING));
	 PyDict_SetItemString(d,"HEADER_NORMAL", PyInt_FromLong((long) HEADER_NORMAL));
	 PyDict_SetItemString(d,"PROGRESSBAR_HORIZONTAL", PyInt_FromLong((long) PROGRESSBAR_HORIZONTAL));
	 PyDict_SetItemString(d,"PROGRESSBAR_VERTICAL", PyInt_FromLong((long) PROGRESSBAR_VERTICAL));
	 PyDict_SetItemString(d,"PROGRESSBAR_PERCENTAGE", PyInt_FromLong((long) PROGRESSBAR_PERCENTAGE));
	 PyDict_SetItemString(d,"PROGRESSBAR_DIAL", PyInt_FromLong((long) PROGRESSBAR_DIAL));
	 PyDict_SetItemString(d,"PROGRESSBAR_NORMAL", PyInt_FromLong((long) PROGRESSBAR_NORMAL));
	 PyDict_SetItemString(d,"TOOLBARTAB_HORIZONTAL", PyInt_FromLong((long) TOOLBARTAB_HORIZONTAL));
	 PyDict_SetItemString(d,"TOOLBARTAB_VERTICAL", PyInt_FromLong((long) TOOLBARTAB_VERTICAL));
	 PyDict_SetItemString(d,"TOOLBARGRIP_SINGLE", PyInt_FromLong((long) TOOLBARGRIP_SINGLE));
	 PyDict_SetItemString(d,"TOOLBARGRIP_DOUBLE", PyInt_FromLong((long) TOOLBARGRIP_DOUBLE));
	 PyDict_SetItemString(d,"TOOLBARGRIP_SEPARATOR", PyInt_FromLong((long) TOOLBARGRIP_SEPARATOR));
	 PyDict_SetItemString(d,"LISTBOX_NORMAL", PyInt_FromLong((long) LISTBOX_NORMAL));
	 PyDict_SetItemString(d,"COLORBAR_HORIZONTAL", PyInt_FromLong((long) COLORBAR_HORIZONTAL));
	 PyDict_SetItemString(d,"COLORBAR_VERTICAL", PyInt_FromLong((long) COLORBAR_VERTICAL));
	 PyDict_SetItemString(d,"FX_ColorWell_ID_COLORDIALOG", PyInt_FromLong((long) FXColorWell::ID_COLORDIALOG));
	 PyDict_SetItemString(d,"FX_ColorWell_ID_LAST", PyInt_FromLong((long) FXColorWell::ID_LAST));
	 PyDict_SetItemString(d,"FX_TextField_ID_CURSOR_HOME", PyInt_FromLong((long) FXTextField::ID_CURSOR_HOME));
	 PyDict_SetItemString(d,"FX_TextField_ID_CURSOR_END", PyInt_FromLong((long) FXTextField::ID_CURSOR_END));
	 PyDict_SetItemString(d,"FX_TextField_ID_CURSOR_RIGHT", PyInt_FromLong((long) FXTextField::ID_CURSOR_RIGHT));
	 PyDict_SetItemString(d,"FX_TextField_ID_CURSOR_LEFT", PyInt_FromLong((long) FXTextField::ID_CURSOR_LEFT));
	 PyDict_SetItemString(d,"FX_TextField_ID_MARK", PyInt_FromLong((long) FXTextField::ID_MARK));
	 PyDict_SetItemString(d,"FX_TextField_ID_EXTEND", PyInt_FromLong((long) FXTextField::ID_EXTEND));
	 PyDict_SetItemString(d,"FX_TextField_ID_SELECT_ALL", PyInt_FromLong((long) FXTextField::ID_SELECT_ALL));
	 PyDict_SetItemString(d,"FX_TextField_ID_DESELECT_ALL", PyInt_FromLong((long) FXTextField::ID_DESELECT_ALL));
	 PyDict_SetItemString(d,"FX_TextField_ID_CUT_SEL", PyInt_FromLong((long) FXTextField::ID_CUT_SEL));
	 PyDict_SetItemString(d,"FX_TextField_ID_COPY_SEL", PyInt_FromLong((long) FXTextField::ID_COPY_SEL));
	 PyDict_SetItemString(d,"FX_TextField_ID_PASTE_SEL", PyInt_FromLong((long) FXTextField::ID_PASTE_SEL));
	 PyDict_SetItemString(d,"FX_TextField_ID_DELETE_SEL", PyInt_FromLong((long) FXTextField::ID_DELETE_SEL));
	 PyDict_SetItemString(d,"FX_TextField_ID_OVERST_STRING", PyInt_FromLong((long) FXTextField::ID_OVERST_STRING));
	 PyDict_SetItemString(d,"FX_TextField_ID_INSERT_STRING", PyInt_FromLong((long) FXTextField::ID_INSERT_STRING));
	 PyDict_SetItemString(d,"FX_TextField_ID_BACKSPACE", PyInt_FromLong((long) FXTextField::ID_BACKSPACE));
	 PyDict_SetItemString(d,"FX_TextField_ID_DELETE", PyInt_FromLong((long) FXTextField::ID_DELETE));
	 PyDict_SetItemString(d,"FX_TextField_ID_TOGGLE_EDITABLE", PyInt_FromLong((long) FXTextField::ID_TOGGLE_EDITABLE));
	 PyDict_SetItemString(d,"FX_TextField_ID_TOGGLE_OVERSTRIKE", PyInt_FromLong((long) FXTextField::ID_TOGGLE_OVERSTRIKE));
	 PyDict_SetItemString(d,"FX_TextField_ID_BLINK", PyInt_FromLong((long) FXTextField::ID_BLINK));
	 PyDict_SetItemString(d,"FX_TextField_ID_LAST", PyInt_FromLong((long) FXTextField::ID_LAST));
	 PyDict_SetItemString(d,"FX_ArrowButton_ID_REPEAT", PyInt_FromLong((long) FXArrowButton::ID_REPEAT));
	 PyDict_SetItemString(d,"FX_ArrowButton_ID_LAST", PyInt_FromLong((long) FXArrowButton::ID_LAST));
	 PyDict_SetItemString(d,"FX_Spinner_ID_INCREMENT", PyInt_FromLong((long) FXSpinner::ID_INCREMENT));
	 PyDict_SetItemString(d,"FX_Spinner_ID_DECREMENT", PyInt_FromLong((long) FXSpinner::ID_DECREMENT));
	 PyDict_SetItemString(d,"FX_Spinner_ID_ENTRY", PyInt_FromLong((long) FXSpinner::ID_ENTRY));
	 PyDict_SetItemString(d,"FX_Spinner_ID_LAST", PyInt_FromLong((long) FXSpinner::ID_LAST));
	 PyDict_SetItemString(d,"FX_Tooltip_ID_TIP_SHOW", PyInt_FromLong((long) FXTooltip::ID_TIP_SHOW));
	 PyDict_SetItemString(d,"FX_Tooltip_ID_TIP_HIDE", PyInt_FromLong((long) FXTooltip::ID_TIP_HIDE));
	 PyDict_SetItemString(d,"FX_Tooltip_ID_LAST", PyInt_FromLong((long) FXTooltip::ID_LAST));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_ITEM", PyInt_FromLong((long) FXTabBar::ID_OPEN_ITEM));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_FIRST", PyInt_FromLong((long) FXTabBar::ID_OPEN_FIRST));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_SECOND", PyInt_FromLong((long) FXTabBar::ID_OPEN_SECOND));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_THIRD", PyInt_FromLong((long) FXTabBar::ID_OPEN_THIRD));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_FOURTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_FOURTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_FIFTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_FIFTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_SIXTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_SIXTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_SEVENTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_SEVENTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_EIGHTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_EIGHTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_NINETH", PyInt_FromLong((long) FXTabBar::ID_OPEN_NINETH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_TENTH", PyInt_FromLong((long) FXTabBar::ID_OPEN_TENTH));
	 PyDict_SetItemString(d,"FX_TabBar_ID_OPEN_LAST", PyInt_FromLong((long) FXTabBar::ID_OPEN_LAST));
	 PyDict_SetItemString(d,"FX_TabBar_ID_LAST", PyInt_FromLong((long) FXTabBar::ID_LAST));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_TIMEWHEEL", PyInt_FromLong((long) FXScrollbar::ID_TIMEWHEEL));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTOINC_LINE", PyInt_FromLong((long) FXScrollbar::ID_AUTOINC_LINE));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTODEC_LINE", PyInt_FromLong((long) FXScrollbar::ID_AUTODEC_LINE));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTOINC_PAGE", PyInt_FromLong((long) FXScrollbar::ID_AUTOINC_PAGE));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTODEC_PAGE", PyInt_FromLong((long) FXScrollbar::ID_AUTODEC_PAGE));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTOINC_PIX", PyInt_FromLong((long) FXScrollbar::ID_AUTOINC_PIX));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_AUTODEC_PIX", PyInt_FromLong((long) FXScrollbar::ID_AUTODEC_PIX));
	 PyDict_SetItemString(d,"FX_Scrollbar_ID_LAST", PyInt_FromLong((long) FXScrollbar::ID_LAST));
	 PyDict_SetItemString(d,"cvar", SWIG_globals);
	 SWIG_addvarlink(SWIG_globals,"FX_Scrollbar_deleteType",_wrap_FXScrollbar__deleteType_get, _wrap_FXScrollbar__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Scrollbar_textType",_wrap_FXScrollbar__textType_get, _wrap_FXScrollbar__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Scrollbar_stringType",_wrap_FXScrollbar__stringType_get, _wrap_FXScrollbar__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Scrollbar_colorType",_wrap_FXScrollbar__colorType_get, _wrap_FXScrollbar__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Scrollbar_urilistType",_wrap_FXScrollbar__urilistType_get, _wrap_FXScrollbar__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollbar_deleteType",_wrap_FXPyScrollbar__deleteType_get, _wrap_FXPyScrollbar__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollbar_textType",_wrap_FXPyScrollbar__textType_get, _wrap_FXPyScrollbar__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollbar_stringType",_wrap_FXPyScrollbar__stringType_get, _wrap_FXPyScrollbar__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollbar_colorType",_wrap_FXPyScrollbar__colorType_get, _wrap_FXPyScrollbar__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollbar_urilistType",_wrap_FXPyScrollbar__urilistType_get, _wrap_FXPyScrollbar__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ScrollCorner_deleteType",_wrap_FXScrollCorner__deleteType_get, _wrap_FXScrollCorner__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ScrollCorner_textType",_wrap_FXScrollCorner__textType_get, _wrap_FXScrollCorner__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ScrollCorner_stringType",_wrap_FXScrollCorner__stringType_get, _wrap_FXScrollCorner__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ScrollCorner_colorType",_wrap_FXScrollCorner__colorType_get, _wrap_FXScrollCorner__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ScrollCorner_urilistType",_wrap_FXScrollCorner__urilistType_get, _wrap_FXScrollCorner__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollCorner_deleteType",_wrap_FXPyScrollCorner__deleteType_get, _wrap_FXPyScrollCorner__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollCorner_textType",_wrap_FXPyScrollCorner__textType_get, _wrap_FXPyScrollCorner__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollCorner_stringType",_wrap_FXPyScrollCorner__stringType_get, _wrap_FXPyScrollCorner__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollCorner_colorType",_wrap_FXPyScrollCorner__colorType_get, _wrap_FXPyScrollCorner__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXScrollCorner_urilistType",_wrap_FXPyScrollCorner__urilistType_get, _wrap_FXPyScrollCorner__urilistType_set);
	 PyDict_SetItemString(d,"FX_List_ID_TIPTIMER", PyInt_FromLong((long) FXList::ID_TIPTIMER));
	 PyDict_SetItemString(d,"FX_List_ID_LOOKUPTIMER", PyInt_FromLong((long) FXList::ID_LOOKUPTIMER));
	 PyDict_SetItemString(d,"FX_List_ID_LAST", PyInt_FromLong((long) FXList::ID_LAST));
	 PyDict_SetItemString(d,"FX_ComboBox_ID_LIST", PyInt_FromLong((long) FXComboBox::ID_LIST));
	 PyDict_SetItemString(d,"FX_ComboBox_ID_TEXT", PyInt_FromLong((long) FXComboBox::ID_TEXT));
	 PyDict_SetItemString(d,"FX_ComboBox_ID_LAST", PyInt_FromLong((long) FXComboBox::ID_LAST));
	 SWIG_addvarlink(SWIG_globals,"FX_DragCorner_deleteType",_wrap_FXDragCorner__deleteType_get, _wrap_FXDragCorner__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_DragCorner_textType",_wrap_FXDragCorner__textType_get, _wrap_FXDragCorner__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_DragCorner_stringType",_wrap_FXDragCorner__stringType_get, _wrap_FXDragCorner__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_DragCorner_colorType",_wrap_FXDragCorner__colorType_get, _wrap_FXDragCorner__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_DragCorner_urilistType",_wrap_FXDragCorner__urilistType_get, _wrap_FXDragCorner__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXDragCorner_deleteType",_wrap_FXPyDragCorner__deleteType_get, _wrap_FXPyDragCorner__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXDragCorner_textType",_wrap_FXPyDragCorner__textType_get, _wrap_FXPyDragCorner__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXDragCorner_stringType",_wrap_FXPyDragCorner__stringType_get, _wrap_FXPyDragCorner__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXDragCorner_colorType",_wrap_FXPyDragCorner__colorType_get, _wrap_FXPyDragCorner__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXDragCorner_urilistType",_wrap_FXPyDragCorner__urilistType_get, _wrap_FXPyDragCorner__urilistType_set);
	 PyDict_SetItemString(d,"FX_Slider_ID_AUTOINC", PyInt_FromLong((long) FXSlider::ID_AUTOINC));
	 PyDict_SetItemString(d,"FX_Slider_ID_AUTODEC", PyInt_FromLong((long) FXSlider::ID_AUTODEC));
	 PyDict_SetItemString(d,"FX_Slider_ID_LAST", PyInt_FromLong((long) FXSlider::ID_LAST));
	 PyDict_SetItemString(d,"FX_Header_ID_TIPTIMER", PyInt_FromLong((long) FXHeader::ID_TIPTIMER));
	 PyDict_SetItemString(d,"FX_Header_ID_LAST", PyInt_FromLong((long) FXHeader::ID_LAST));
	 PyDict_SetItemString(d,"FX_ToolbarTab_ID_COLLAPSE", PyInt_FromLong((long) FXToolbarTab::ID_COLLAPSE));
	 PyDict_SetItemString(d,"FX_ToolbarTab_ID_UNCOLLAPSE", PyInt_FromLong((long) FXToolbarTab::ID_UNCOLLAPSE));
	 PyDict_SetItemString(d,"FX_ToolbarTab_ID_LAST", PyInt_FromLong((long) FXToolbarTab::ID_LAST));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_UNDOCK", PyInt_FromLong((long) FXToolbar::ID_UNDOCK));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_DOCK_TOP", PyInt_FromLong((long) FXToolbar::ID_DOCK_TOP));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_DOCK_BOTTOM", PyInt_FromLong((long) FXToolbar::ID_DOCK_BOTTOM));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_DOCK_LEFT", PyInt_FromLong((long) FXToolbar::ID_DOCK_LEFT));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_DOCK_RIGHT", PyInt_FromLong((long) FXToolbar::ID_DOCK_RIGHT));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_TOOLBARGRIP", PyInt_FromLong((long) FXToolbar::ID_TOOLBARGRIP));
	 PyDict_SetItemString(d,"FX_Toolbar_ID_LAST", PyInt_FromLong((long) FXToolbar::ID_LAST));
	 SWIG_addvarlink(SWIG_globals,"FX_ToolbarGrip_deleteType",_wrap_FXToolbarGrip__deleteType_get, _wrap_FXToolbarGrip__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ToolbarGrip_textType",_wrap_FXToolbarGrip__textType_get, _wrap_FXToolbarGrip__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ToolbarGrip_stringType",_wrap_FXToolbarGrip__stringType_get, _wrap_FXToolbarGrip__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ToolbarGrip_colorType",_wrap_FXToolbarGrip__colorType_get, _wrap_FXToolbarGrip__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_ToolbarGrip_urilistType",_wrap_FXToolbarGrip__urilistType_get, _wrap_FXToolbarGrip__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXToolbarGrip_deleteType",_wrap_FXPyToolbarGrip__deleteType_get, _wrap_FXPyToolbarGrip__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXToolbarGrip_textType",_wrap_FXPyToolbarGrip__textType_get, _wrap_FXPyToolbarGrip__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXToolbarGrip_stringType",_wrap_FXPyToolbarGrip__stringType_get, _wrap_FXPyToolbarGrip__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXToolbarGrip_colorType",_wrap_FXPyToolbarGrip__colorType_get, _wrap_FXPyToolbarGrip__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXToolbarGrip_urilistType",_wrap_FXPyToolbarGrip__urilistType_get, _wrap_FXPyToolbarGrip__urilistType_set);
	 PyDict_SetItemString(d,"FX_ListBox_ID_LIST", PyInt_FromLong((long) FXListBox::ID_LIST));
	 PyDict_SetItemString(d,"FX_ListBox_ID_FIELD", PyInt_FromLong((long) FXListBox::ID_FIELD));
	 PyDict_SetItemString(d,"FX_ListBox_ID_LAST", PyInt_FromLong((long) FXListBox::ID_LAST));
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
}
