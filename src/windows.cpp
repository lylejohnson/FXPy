/*
 * FILE : ../src/windows.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a) __declspec(dllexport) a
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a) a _export 
#	else
#	    define SWIGEXPORT(a) a 
#	endif
#   endif
#else
#   define SWIGEXPORT(a) a 
#endif

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif
extern void SWIG_MakePtr(char *, void *, char *);
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
extern char *SWIG_GetPtr(char *, void **, char *);
extern char *SWIG_GetPtrObj(PyObject *, void **, char *);
extern void SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
extern PyObject *SWIG_newvarlink(void);
#ifdef __cplusplus
}
#endif
#define SWIG_init    initwindowsc

#define SWIG_name    "windowsc"

#include "fx.h"
#include "fx3d.h"
#include "FXCURCursor.h"
#include "FXJPGImage.h"
#include "FXJPGIcon.h"
#include "FXPNGIcon.h"
#include "FXPNGImage.h"
#include "FXTIFIcon.h"
#include "FXTIFImage.h"
#include "FXRGBIcon.h"
#include "FXRGBImage.h"
#include "FXICOIcon.h"
#include "FXICOImage.h"
#include "FXPyApp.h"
#include "FXPy.h"

static PyObject* l_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyList_Check(target)) {
            o2 = target;
            target = PyList_New(0);
            PyList_Append(target, o2);
	    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
	Py_XDECREF(o);
    }
    return target;
}

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                         
        if (!PyTuple_Check(target)) {
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}
#ifdef __cplusplus
extern "C" {
#endif
static void *SwigFXWindowToFXDrawable(void *ptr) {
    FXWindow *src;
    FXDrawable *dest;
    src = (FXWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXWindowToFXId(void *ptr) {
    FXWindow *src;
    FXId *dest;
    src = (FXWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXWindowToFXObject(void *ptr) {
    FXWindow *src;
    FXObject *dest;
    src = (FXWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

static int _wrap_FXWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Window_deleteType'(FXDragType )");
        return 1; 
    }
    FXWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXWindow::deleteType);
    return pyobj;
}

static int _wrap_FXWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Window_textType'(FXDragType )");
        return 1; 
    }
    FXWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXWindow::textType);
    return pyobj;
}

static int _wrap_FXWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Window_stringType'(FXDragType )");
        return 1; 
    }
    FXWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXWindow::stringType);
    return pyobj;
}

static int _wrap_FXWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Window_colorType'(FXDragType )");
        return 1; 
    }
    FXWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXWindow::colorType);
    return pyobj;
}

static int _wrap_FXWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Window_urilistType'(FXDragType )");
        return 1; 
    }
    FXWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXWindow::urilistType);
    return pyobj;
}

#define FX_Window_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onPaint",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onMap(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMap(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onMap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onMap",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onMap. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onMap(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onUnmap(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUnmap(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onUnmap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onUnmap",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onUnmap. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onUnmap(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onConfigure(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onConfigure(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onConfigure(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onConfigure",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onConfigure. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onConfigure(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onUpdate",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onMotion",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onMouseWheel(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMouseWheel(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onMouseWheel(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onMouseWheel",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onMouseWheel. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onMouseWheel(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onEnter",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onLeave",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onLeftBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onLeftBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onLeftBtnPress",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onLeftBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onLeftBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onLeftBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeftBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onLeftBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onLeftBtnRelease",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onLeftBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onLeftBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onMiddleBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onMiddleBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onMiddleBtnPress",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onMiddleBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onMiddleBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onMiddleBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMiddleBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onMiddleBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onMiddleBtnRelease",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onMiddleBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onMiddleBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onRightBtnPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onRightBtnPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onRightBtnPress",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onRightBtnPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onRightBtnPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onRightBtnRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onRightBtnRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onRightBtnRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onRightBtnRelease",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onRightBtnRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onRightBtnRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onBeginDrag(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onBeginDrag(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onBeginDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onBeginDrag",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onBeginDrag. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onBeginDrag(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onEndDrag(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEndDrag(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onEndDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onEndDrag",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onEndDrag. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onEndDrag(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDragged(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDragged(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDragged(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDragged",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDragged. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDragged(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onKeyPress",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onKeyRelease",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onUngrabbed",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDestroy(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDestroy(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDestroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDestroy",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDestroy. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDestroy(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onFocusSelf(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusSelf(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onFocusSelf(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onFocusSelf",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onFocusSelf. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onFocusSelf(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onFocusIn(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusIn(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onFocusIn(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onFocusIn",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onFocusIn. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onFocusIn(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onFocusOut(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusOut(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onFocusOut(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onFocusOut",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onFocusOut. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onFocusOut(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onSelectionLost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionLost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onSelectionLost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onSelectionLost",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onSelectionLost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onSelectionLost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onSelectionGained(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionGained(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onSelectionGained(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onSelectionGained",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onSelectionGained. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onSelectionGained(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onSelectionRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onSelectionRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onSelectionRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onSelectionRequest",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onSelectionRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onSelectionRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onClipboardLost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardLost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onClipboardLost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onClipboardLost",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onClipboardLost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onClipboardLost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onClipboardGained(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardGained(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onClipboardGained(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onClipboardGained",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onClipboardGained. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onClipboardGained(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onClipboardRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClipboardRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onClipboardRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onClipboardRequest",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onClipboardRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onClipboardRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDNDEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDNDEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDNDEnter",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDNDEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDNDEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDNDLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDNDLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDNDLeave",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDNDLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDNDLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDNDMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDNDMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDNDMotion",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDNDMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDNDMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDNDDrop(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDDrop(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDNDDrop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDNDDrop",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDNDDrop. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDNDDrop(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onDNDRequest(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onDNDRequest(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onDNDRequest(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onDNDRequest",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onDNDRequest. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onDNDRequest(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdShow(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdShow(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdShow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdShow",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdShow. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdShow(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdHide(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdHide(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdHide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdHide",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdHide. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdHide(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onUpdToggleShown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdToggleShown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onUpdToggleShown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onUpdToggleShown",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onUpdToggleShown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onUpdToggleShown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdToggleShown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdToggleShown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdToggleShown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdToggleShown",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdToggleShown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdToggleShown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdRaise(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdRaise(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdRaise(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdRaise",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdRaise. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdRaise(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdLower(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdLower(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdLower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdLower",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdLower. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdLower(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdEnable(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdEnable(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdEnable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdEnable",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdEnable. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdEnable(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdDisable(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDisable(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdDisable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdDisable",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdDisable. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdDisable(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdUpdate",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onUpdYes(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUpdYes(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onUpdYes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onUpdYes",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onUpdYes. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onUpdYes(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Window_onCmdDelete(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDelete(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_onCmdDelete(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Window_onCmdDelete",_kwnames,&_obj0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_onCmdDelete. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Window_onCmdDelete(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Window(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_Window(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FX_Window",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Window. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)new_FX_Window(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getParent(_swigobj)  (_swigobj->getParent())
static PyObject *_wrap_FX_Window_getParent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getParent",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getParent(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getOwner(_swigobj)  (_swigobj->getOwner())
static PyObject *_wrap_FX_Window_getOwner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getOwner",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getOwner(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getShell(_swigobj)  (_swigobj->getShell())
static PyObject *_wrap_FX_Window_getShell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getShell",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getShell(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getRoot(_swigobj)  (_swigobj->getRoot())
static PyObject *_wrap_FX_Window_getRoot(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getRoot",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getRoot(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getNext(_swigobj)  (_swigobj->getNext())
static PyObject *_wrap_FX_Window_getNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getNext",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getNext(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getPrev(_swigobj)  (_swigobj->getPrev())
static PyObject *_wrap_FX_Window_getPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getPrev",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getPrev(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getFirst(_swigobj)  (_swigobj->getFirst())
static PyObject *_wrap_FX_Window_getFirst(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getFirst",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getFirst(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getLast(_swigobj)  (_swigobj->getLast())
static PyObject *_wrap_FX_Window_getLast(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getLast",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getLast(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_getFocus(_swigobj)  (_swigobj->getFocus())
static PyObject *_wrap_FX_Window_getFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getFocus",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_setKey(_swigobj,_swigarg0)  (_swigobj->setKey(_swigarg0))
static PyObject *_wrap_FX_Window_setKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXuint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","k", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setKey",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setKey(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getKey(_swigobj)  (_swigobj->getKey())
static PyObject *_wrap_FX_Window_getKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getKey",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Window_getKey(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_setTarget(_swigobj,_swigarg0)  (_swigobj->setTarget(_swigarg0))
static PyObject *_wrap_FX_Window_setTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXObject * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","t", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_setTarget",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setTarget(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getTarget(_swigobj)  (_swigobj->getTarget())
static PyObject *_wrap_FX_Window_getTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXObject * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getTarget",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXObject *)FX_Window_getTarget(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXObject_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Window_setSelector(_swigobj,_swigarg0)  (_swigobj->setSelector(_swigarg0))
static PyObject *_wrap_FX_Window_setSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXSelector  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","sel", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setSelector",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setSelector(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getSelector(_swigobj)  (_swigobj->getSelector())
static PyObject *_wrap_FX_Window_getSelector(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXSelector  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getSelector",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXSelector )FX_Window_getSelector(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getX(_swigobj)  (_swigobj->getX())
static PyObject *_wrap_FX_Window_getX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getX",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getX(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getY(_swigobj)  (_swigobj->getY())
static PyObject *_wrap_FX_Window_getY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getY",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getY(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getDefaultWidth(_swigobj)  (_swigobj->getDefaultWidth())
static PyObject *_wrap_FX_Window_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getDefaultWidth",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getDefaultHeight(_swigobj)  (_swigobj->getDefaultHeight())
static PyObject *_wrap_FX_Window_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getDefaultHeight",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->getWidthForHeight(_swigarg0))
static PyObject *_wrap_FX_Window_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","givenheight", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_getWidthForHeight",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->getHeightForWidth(_swigarg0))
static PyObject *_wrap_FX_Window_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","givenwidth", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_getHeightForWidth",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_setX(_swigobj,_swigarg0)  (_swigobj->setX(_swigarg0))
static PyObject *_wrap_FX_Window_setX(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setX",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setX(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_setY(_swigobj,_swigarg0)  (_swigobj->setY(_swigarg0))
static PyObject *_wrap_FX_Window_setY(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setY",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setY(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_setWidth(_swigobj,_swigarg0)  (_swigobj->setWidth(_swigarg0))
static PyObject *_wrap_FX_Window_setWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setWidth",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_setHeight(_swigobj,_swigarg0)  (_swigobj->setHeight(_swigarg0))
static PyObject *_wrap_FX_Window_setHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setHeight",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_setLayoutHints(_swigobj,_swigarg0)  (_swigobj->setLayoutHints(_swigarg0))
static PyObject *_wrap_FX_Window_setLayoutHints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXuint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","lout", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setLayoutHints",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setLayoutHints(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getLayoutHints(_swigobj)  (_swigobj->getLayoutHints())
static PyObject *_wrap_FX_Window_getLayoutHints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getLayoutHints",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Window_getLayoutHints(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_getAccelTable(_swigobj)  (_swigobj->getAccelTable())
static PyObject *_wrap_FX_Window_getAccelTable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXAccelTable * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getAccelTable",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXAccelTable *)FX_Window_getAccelTable(_arg0);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXAccelTable_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Window_setAccelTable(_swigobj,_swigarg0)  (_swigobj->setAccelTable(_swigarg0))
static PyObject *_wrap_FX_Window_setAccelTable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXAccelTable * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","acceltable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_setAccelTable",_kwnames,&_obj0,&_argo1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXAccelTable_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Window_setAccelTable. Expected _FXAccelTable_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setAccelTable(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_addHotKey(_swigobj,_swigarg0)  (_swigobj->addHotKey(_swigarg0))
static PyObject *_wrap_FX_Window_addHotKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXHotKey  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","code", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_addHotKey",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_addHotKey(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_remHotKey(_swigobj,_swigarg0)  (_swigobj->remHotKey(_swigarg0))
static PyObject *_wrap_FX_Window_remHotKey(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXHotKey  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","code", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_remHotKey",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_remHotKey(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_isShell(_swigobj)  (_swigobj->isShell())
static PyObject *_wrap_FX_Window_isShell(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isShell",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isShell(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isChildOf(_swigobj,_swigarg0)  (_swigobj->isChildOf(_swigarg0))
static PyObject *_wrap_FX_Window_isChildOf(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_isChildOf",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isChildOf(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_containsChild(_swigobj,_swigarg0)  (_swigobj->containsChild(_swigarg0))
static PyObject *_wrap_FX_Window_containsChild(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","child", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_containsChild",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_containsChild(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_getChildAt(_swigobj,_swigarg0,_swigarg1)  (_swigobj->getChildAt(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_getChildAt(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_getChildAt",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_getChildAt(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_numChildren(_swigobj)  (_swigobj->numChildren())
static PyObject *_wrap_FX_Window_numChildren(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_numChildren",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_numChildren(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_indexOfChild(_swigobj,_swigarg0)  (_swigobj->indexOfChild(_swigarg0))
static PyObject *_wrap_FX_Window_indexOfChild(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","window", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_indexOfChild",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_indexOfChild(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_childAtIndex(_swigobj,_swigarg0)  (_swigobj->childAtIndex(_swigarg0))
static PyObject *_wrap_FX_Window_childAtIndex(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    FXint  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","index", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_childAtIndex",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Window_childAtIndex(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

static PyObject *_wrap_FX_Window_commonAncestor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "a","b", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_commonAncestor",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FXWindow::commonAncestor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_setDefaultCursor(_swigobj,_swigarg0)  (_swigobj->setDefaultCursor(_swigarg0))
static PyObject *_wrap_FX_Window_setDefaultCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXCursor * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","cur", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_setDefaultCursor",_kwnames,&_obj0,&_argo1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXCursor_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Window_setDefaultCursor. Expected _FXCursor_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setDefaultCursor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getDefaultCursor(_swigobj)  (_swigobj->getDefaultCursor())
static PyObject *_wrap_FX_Window_getDefaultCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCursor * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getDefaultCursor",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCursor *)FX_Window_getDefaultCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Window_setDragCursor(_swigobj,_swigarg0)  (_swigobj->setDragCursor(_swigarg0))
static PyObject *_wrap_FX_Window_setDragCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXCursor * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","cur", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_setDragCursor",_kwnames,&_obj0,&_argo1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXCursor_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FX_Window_setDragCursor. Expected _FXCursor_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setDragCursor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getDragCursor(_swigobj)  (_swigobj->getDragCursor())
static PyObject *_wrap_FX_Window_getDragCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCursor * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getDragCursor",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCursor *)FX_Window_getDragCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

static PyObject * FXWindow_getCursorPosition(FXWindow *self) {
      FXint x, y;
      FXuint buttons;
      self->getCursorPosition(x, y, buttons);
      FXbool doSave=FXPyRestoreThread();
      PyObject* tuple = PyTuple_New(3);
      if (!tuple) {
        FXPySaveThread(doSave);
	return NULL;
      }
      if (PyTuple_SetItem(tuple, 0, PyInt_FromLong(x)) < 0) {
	Py_DECREF(tuple);
        FXPySaveThread(doSave);
	return NULL;
      }
      if (PyTuple_SetItem(tuple, 1, PyInt_FromLong(y)) < 0) {
	Py_DECREF(tuple);
        FXPySaveThread(doSave);
	return NULL;
      }
      if (PyTuple_SetItem(tuple, 2, PyInt_FromLong(buttons)) < 0) {
	Py_DECREF(tuple);
        FXPySaveThread(doSave);
	return NULL;
      }
      FXPySaveThread(doSave);
      return tuple;
    }
static PyObject *_wrap_FX_Window_getCursorPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getCursorPosition",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_getCursorPosition(_arg0);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_setCursorPosition(_swigobj,_swigarg0,_swigarg1)  (_swigobj->setCursorPosition(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_setCursorPosition(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_setCursorPosition",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Window_setCursorPosition(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_canFocus(_swigobj)  (_swigobj->canFocus())
static PyObject *_wrap_FX_Window_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_canFocus",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isEnabled(_swigobj)  (_swigobj->isEnabled())
static PyObject *_wrap_FX_Window_isEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isEnabled",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isEnabled(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isActive(_swigobj)  (_swigobj->isActive())
static PyObject *_wrap_FX_Window_isActive(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isActive",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isActive(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_hasFocus(_swigobj)  (_swigobj->hasFocus())
static PyObject *_wrap_FX_Window_hasFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_hasFocus",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_hasFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_setFocus(_swigobj)  (_swigobj->setFocus())
static PyObject *_wrap_FX_Window_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_setFocus",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_killFocus(_swigobj)  (_swigobj->killFocus())
static PyObject *_wrap_FX_Window_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_killFocus",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_setDefault(_swigobj,_swigarg0)  (_swigobj->setDefault(_swigarg0))
static PyObject *_wrap_FX_Window_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Window_setDefault",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_isDefault(_swigobj)  (_swigobj->isDefault())
static PyObject *_wrap_FX_Window_isDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isDefault",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isDefault(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_setInitial(_swigobj,_swigarg0)  (_swigobj->setInitial(_swigarg0))
static PyObject *_wrap_FX_Window_setInitial(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Window_setInitial",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setInitial(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_isInitial(_swigobj)  (_swigobj->isInitial())
static PyObject *_wrap_FX_Window_isInitial(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isInitial",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isInitial(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_enable(_swigobj)  (_swigobj->enable())
static PyObject *_wrap_FX_Window_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_enable",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_disable(_swigobj)  (_swigobj->disable())
static PyObject *_wrap_FX_Window_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_disable",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_create(_swigobj)  (_swigobj->create())
static PyObject *_wrap_FX_Window_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_create",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_detach(_swigobj)  (_swigobj->detach())
static PyObject *_wrap_FX_Window_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_detach",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_destroy(_swigobj)  (_swigobj->destroy())
static PyObject *_wrap_FX_Window_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_destroy",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_lower(_swigobj)  (_swigobj->lower())
static PyObject *_wrap_FX_Window_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_lower",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->move(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_move",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_resize",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Window_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FX_Window_position",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_recalc(_swigobj)  (_swigobj->recalc())
static PyObject *_wrap_FX_Window_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_recalc",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_forceRefresh(_swigobj)  (_swigobj->forceRefresh())
static PyObject *_wrap_FX_Window_forceRefresh(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_forceRefresh",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_forceRefresh(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_reparent(_swigobj,_swigarg0)  (_swigobj->reparent(_swigarg0))
static PyObject *_wrap_FX_Window_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_reparent",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_scroll(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5)  (_swigobj->scroll(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_FX_Window_scroll(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    FXint  _arg5;
    FXint  _arg6;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","w","h","dx","dy", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiiiii:FX_Window_scroll",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_scroll(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_update2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->update(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Window_update2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FX_Window_update2",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_update2(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_update(_swigobj)  (_swigobj->update())
static PyObject *_wrap_FX_Window_update(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_update",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_update(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_repaint2(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->repaint(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Window_repaint2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FX_Window_repaint2",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_repaint2(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_repaint(_swigobj)  (_swigobj->repaint())
static PyObject *_wrap_FX_Window_repaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_repaint",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_repaint(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_grab(_swigobj)  (_swigobj->grab())
static PyObject *_wrap_FX_Window_grab(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_grab",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_grab(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_ungrab(_swigobj)  (_swigobj->ungrab())
static PyObject *_wrap_FX_Window_ungrab(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_ungrab",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_ungrab(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_grabbed(_swigobj)  (_swigobj->grabbed())
static PyObject *_wrap_FX_Window_grabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_grabbed",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_grabbed(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_grabKeyboard(_swigobj)  (_swigobj->grabKeyboard())
static PyObject *_wrap_FX_Window_grabKeyboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_grabKeyboard",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_grabKeyboard(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_ungrabKeyboard(_swigobj)  (_swigobj->ungrabKeyboard())
static PyObject *_wrap_FX_Window_ungrabKeyboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_ungrabKeyboard",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_ungrabKeyboard(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_grabbedKeyboard(_swigobj)  (_swigobj->grabbedKeyboard())
static PyObject *_wrap_FX_Window_grabbedKeyboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_grabbedKeyboard",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_grabbedKeyboard(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_show(_swigobj)  (_swigobj->show())
static PyObject *_wrap_FX_Window_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_show",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_hide(_swigobj)  (_swigobj->hide())
static PyObject *_wrap_FX_Window_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_hide",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_shown(_swigobj)  (_swigobj->shown())
static PyObject *_wrap_FX_Window_shown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_shown",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_shown(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isComposite(_swigobj)  (_swigobj->isComposite())
static PyObject *_wrap_FX_Window_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isComposite",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_underCursor(_swigobj)  (_swigobj->underCursor())
static PyObject *_wrap_FX_Window_underCursor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_underCursor",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_underCursor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_hasSelection(_swigobj)  (_swigobj->hasSelection())
static PyObject *_wrap_FX_Window_hasSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_hasSelection",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_hasSelection(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject * FXWindow_acquireSelection(FXWindow *self,PyObject * obj) {
      FXbool doSave=FXPyRestoreThread();
      if(!PyList_Check(obj)){
	PyErr_SetString(PyExc_TypeError,"expected a list of drag types");
        FXPySaveThread(doSave);
	return NULL;
	}

      if(PyList_Size(obj) < 0) {
        FXPySaveThread(doSave);
        return NULL;
        }

      FXuint numtypes = (FXuint) PyList_Size(obj);
      FXDragType *types;
      if (FXMALLOC(&types, FXDragType, numtypes)) {
        for (FXuint i = 0; i < numtypes; i++) {
          PyObject *item = PyList_GetItem(obj, i);
          if (!item) {
            FXPySaveThread(doSave);
	    FXFREE(&types);
            return NULL;
	    }
	  types[i] = (FXDragType) PyInt_AsLong(item);
	  }
        FXbool result=self->acquireSelection(types, numtypes);
        FXFREE(&types);
        PyObject *resultobj=PyInt_FromLong((long) result);
        FXPySaveThread(doSave);
        return resultobj;
        }
      else {
        PyErr_SetString(PyExc_MemoryError, "out of memory");
        FXPySaveThread(doSave);
	return NULL;
        }
      }
static PyObject *_wrap_FX_Window_acquireSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    PyObject * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","obj", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_acquireSelection",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_acquireSelection(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_releaseSelection(_swigobj)  (_swigobj->releaseSelection())
static PyObject *_wrap_FX_Window_releaseSelection(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_releaseSelection",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_releaseSelection(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_hasClipboard(_swigobj)  (_swigobj->hasClipboard())
static PyObject *_wrap_FX_Window_hasClipboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_hasClipboard",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_hasClipboard(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject * FXWindow_acquireClipboard(FXWindow *self,PyObject * obj) {
      FXbool doSave=FXPyRestoreThread();
      if(!PyList_Check(obj)){
	PyErr_SetString(PyExc_TypeError,"expected a list of drag types");
        FXPySaveThread(doSave);
	return NULL;
	}
      FXDragType *types;
      FXuint numtypes=(FXuint)PyList_Size(obj);
      FXMALLOC(&types,FXDragType,numtypes);
      for(FXuint i=0;i<numtypes;i++)
	types[i]=(FXDragType)PyInt_AsLong(PyList_GetItem(obj,i));
      FXbool result=self->acquireClipboard(types,numtypes);
      FXFREE(&types);
      PyObject* resultobj=PyInt_FromLong((long)result);
      FXPySaveThread(doSave);
      return resultobj;
      }
static PyObject *_wrap_FX_Window_acquireClipboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    PyObject * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","obj", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_acquireClipboard",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_acquireClipboard(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_releaseClipboard(_swigobj)  (_swigobj->releaseClipboard())
static PyObject *_wrap_FX_Window_releaseClipboard(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_releaseClipboard",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_releaseClipboard(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_dropEnable(_swigobj)  (_swigobj->dropEnable())
static PyObject *_wrap_FX_Window_dropEnable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_dropEnable",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_dropEnable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_dropDisable(_swigobj)  (_swigobj->dropDisable())
static PyObject *_wrap_FX_Window_dropDisable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_dropDisable",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_dropDisable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_isDropEnabled(_swigobj)  (_swigobj->isDropEnabled())
static PyObject *_wrap_FX_Window_isDropEnabled(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isDropEnabled",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isDropEnabled(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isDragging(_swigobj)  (_swigobj->isDragging())
static PyObject *_wrap_FX_Window_isDragging(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isDragging",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isDragging(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject * FXWindow_beginDrag(FXWindow *self,PyObject * obj) {
      FXbool doSave=FXPyRestoreThread();
      if(!PyList_Check(obj)){
	PyErr_SetString(PyExc_TypeError,"expected a list of drag types");
        FXPySaveThread(doSave);
	return NULL;
	}
      FXDragType *types;
      FXuint numtypes=(FXuint)PyList_Size(obj);
      FXMALLOC(&types,FXDragType,numtypes);
      for(FXuint i=0;i<numtypes;i++)
	types[i]=(FXDragType)PyInt_AsLong(PyList_GetItem(obj,i));
      FXbool result=self->beginDrag(types,numtypes);
      FXFREE(&types);
      PyObject *resultobj=PyInt_FromLong((long)result);
      FXPySaveThread(doSave);
      return resultobj;
      }
static PyObject *_wrap_FX_Window_beginDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    PyObject * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","obj", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_beginDrag",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
  _arg1 = _obj1;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_beginDrag(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_handleDrag(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->handleDrag(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Window_handleDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXDragAction  _arg3 = (FXDragAction ) DRAG_COPY;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","action", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii|i:FX_Window_handleDrag",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_handleDrag(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_endDrag(_swigobj,_swigarg0)  (_swigobj->endDrag(_swigarg0))
static PyObject *_wrap_FX_Window_endDrag(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","drop", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FX_Window_endDrag",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_endDrag(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_isDropTarget(_swigobj)  (_swigobj->isDropTarget())
static PyObject *_wrap_FX_Window_isDropTarget(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_isDropTarget",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_isDropTarget(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_setDragRectangle(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->setDragRectangle(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_Window_setDragRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    FXbool  _arg5 = (FXbool ) TRUE;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","x","y","w","h","wantupdates", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii|b:FX_Window_setDragRectangle",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setDragRectangle(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_clearDragRectangle(_swigobj)  (_swigobj->clearDragRectangle())
static PyObject *_wrap_FX_Window_clearDragRectangle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_clearDragRectangle",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_clearDragRectangle(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_acceptDrop(_swigobj,_swigarg0)  (_swigobj->acceptDrop(_swigarg0))
static PyObject *_wrap_FX_Window_acceptDrop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXDragAction  _arg1 = (FXDragAction ) DRAG_ACCEPT;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","action", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|i:FX_Window_acceptDrop",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_acceptDrop(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_didAccept(_swigobj)  (_swigobj->didAccept())
static PyObject *_wrap_FX_Window_didAccept(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragAction  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_didAccept",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragAction )FX_Window_didAccept(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static PyObject * FXWindow_inquireDNDTypes(FXWindow *self,FXDNDOrigin  origin) {
      FXDragType *types;
      FXuint numtypes;
      if(self->inquireDNDTypes(origin,types,numtypes)){
        FXbool doSave=FXPyRestoreThread();
	PyObject *list=PyList_New(numtypes);
	if(!list){
	  FXFREE(&types);
          FXPySaveThread(doSave);
	  return NULL;
	  }
	for(FXuint i=0;i<numtypes;i++){
	  PyObject *item=PyInt_FromLong((long)types[i]);
	  if (!item || PyList_SetItem(list,i,item) < 0){
	    Py_DECREF(list);
            FXPySaveThread(doSave);
	    FXFREE(&types);
	    return NULL;
	    }
	  }
        FXPySaveThread(doSave);
	FXFREE(&types);
	return list;
	}
      else{
	return NULL;
	}
      }
static PyObject *_wrap_FX_Window_inquireDNDTypes(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    FXDNDOrigin  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","origin", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_inquireDNDTypes",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_inquireDNDTypes(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_offeredDNDType(_swigobj,_swigarg0,_swigarg1)  (_swigobj->offeredDNDType(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_offeredDNDType(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXDNDOrigin  _arg1;
    FXDragType  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","origin","type", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_offeredDNDType",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_offeredDNDType(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Window_inquireDNDAction(_swigobj)  (_swigobj->inquireDNDAction())
static PyObject *_wrap_FX_Window_inquireDNDAction(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXDragAction  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_inquireDNDAction",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXDragAction )FX_Window_inquireDNDAction(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_setDNDData(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->setDNDData(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FX_Window_setDNDData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXDNDOrigin  _arg1;
    FXDragType  _arg2;
    FXuchar * _arg3;
    FXuint  _arg4;
    PyObject * _obj0 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","origin","type","data","size", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OiiOi:FX_Window_setDNDData",_kwnames,&_obj0,&_arg1,&_arg2,&_argo3,&_arg4)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,"_FXuchar_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Window_setDNDData. Expected _FXuchar_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_setDNDData(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject * FXWindow_getDNDData(FXWindow *self,FXDNDOrigin  origin,FXDragType  type) {
      FXuchar* data;
      FXuint size;
      if(self->getDNDData(origin,type,data,size)==TRUE){
        PyObject* s=PyString_FromStringAndSize((const char*)data,(int)size);
        FXFREE(&data);
        return s;
        }
      else{
        Py_INCREF(Py_None);
        return Py_None;
        }
      }
static PyObject *_wrap_FX_Window_getDNDData(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    FXDNDOrigin  _arg1;
    FXDragType  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","origin","type", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_getDNDData",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_getDNDData(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FX_Window_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","parentx","parenty", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FX_Window_contains",_kwnames,&_obj0,&_arg1,&_arg2)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static PyObject * FXWindow_translateCoordinatesFrom(FXWindow *self,FXWindow * fromWindow,FXint  fromx,FXint  fromy) {
      FXint tox, toy;
      self->translateCoordinatesFrom(tox,toy,fromWindow,fromx,fromy);
      FXbool doSave=FXPyRestoreThread();
      PyObject* tuple = PyTuple_New(2);
      PyTuple_SetItem(tuple, 0, PyInt_FromLong(tox));
      PyTuple_SetItem(tuple, 1, PyInt_FromLong(toy));
      FXPySaveThread(doSave);
      return tuple;
      }
static PyObject *_wrap_FX_Window_translateCoordinatesFrom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    FXint  _arg2;
    FXint  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","fromWindow","fromx","fromy", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOii:FX_Window_translateCoordinatesFrom",_kwnames,&_obj0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_translateCoordinatesFrom(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

static PyObject * FXWindow_translateCoordinatesTo(FXWindow *self,FXWindow * toWindow,FXint  fromx,FXint  fromy) {
      FXint tox, toy;
      self->translateCoordinatesTo(tox,toy,toWindow,fromx,fromy);
      FXbool doSave=FXPyRestoreThread();
      PyObject* tuple = PyTuple_New(2);
      PyTuple_SetItem(tuple, 0, PyInt_FromLong(tox));
      PyTuple_SetItem(tuple, 1, PyInt_FromLong(toy));
      FXPySaveThread(doSave);
      return tuple;
      }
static PyObject *_wrap_FX_Window_translateCoordinatesTo(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    PyObject * _result;
    FXWindow * _arg0;
    FXWindow * _arg1;
    FXint  _arg2;
    FXint  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","toWindow","fromx","fromy", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOii:FX_Window_translateCoordinatesTo",_kwnames,&_obj0,&_obj1,&_arg2,&_arg3)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (PyObject *)FXWindow_translateCoordinatesTo(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}{
  _resultobj = _result;
}
    return _resultobj;
}

#define FX_Window_setBackColor(_swigobj,_swigarg0)  (_swigobj->setBackColor(_swigarg0))
static PyObject *_wrap_FX_Window_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXColor  _arg1;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Window_setBackColor",_kwnames,&_obj0,&_arg1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_getBackColor(_swigobj)  (_swigobj->getBackColor())
static PyObject *_wrap_FX_Window_getBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_getBackColor",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Window_getBackColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Window_linkBefore(_swigobj,_swigarg0)  (_swigobj->linkBefore(_swigarg0))
static PyObject *_wrap_FX_Window_linkBefore(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","sibling", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_linkBefore",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_linkBefore(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_linkAfter(_swigobj,_swigarg0)  (_swigobj->linkAfter(_swigarg0))
static PyObject *_wrap_FX_Window_linkAfter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _arg0;
    FXWindow * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","sibling", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_Window_linkAfter",_kwnames,&_obj0,&_obj1)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Window_linkAfter(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Window_doesSaveUnder(_swigobj)  (_swigobj->doesSaveUnder())
static PyObject *_wrap_FX_Window_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXWindow * _arg0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Window_doesSaveUnder",_kwnames,&_obj0)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Window_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

static void *SwigFXPyWindowToFXWindow(void *ptr) {
    FXPyWindow *src;
    FXWindow *dest;
    src = (FXPyWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyWindowToFXDrawable(void *ptr) {
    FXPyWindow *src;
    FXDrawable *dest;
    src = (FXPyWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyWindowToFXId(void *ptr) {
    FXPyWindow *src;
    FXId *dest;
    src = (FXPyWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyWindowToFXObject(void *ptr) {
    FXPyWindow *src;
    FXObject *dest;
    src = (FXPyWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FXWindow",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXWindow. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyWindow *)new_FXWindow(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyWindow_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXWindow_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXWindow_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXWindow_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_onDefault. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXWindow_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXWindow_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXWindow_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_create. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXWindow_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_destroy. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXWindow_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_detach. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXWindow_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXWindow_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_resize. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXWindow_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_getDefaultWidth. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXWindow_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXWindow_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXWindow_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_getDefaultHeight. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXWindow_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXWindow_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXWindow_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_show. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXWindow_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_hide. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXWindow_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_enable. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXWindow_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_disable. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXWindow_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_canFocus. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXWindow_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXWindow_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXWindow_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_setFocus. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXWindow_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_killFocus. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXWindow_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXWindow_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_setDefault. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXWindow_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_recalc. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXWindow_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_layout. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXWindow_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_lower. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXWindow_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXWindow_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_move. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXWindow_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXWindow_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_position. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXWindow_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_isComposite. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXWindow_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXWindow_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXWindow_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXWindow_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_contains. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXWindow_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXWindow_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXWindow_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXWindow_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_getWidthForHeight. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXWindow_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXWindow_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXWindow_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXWindow_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_getHeightForWidth. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXWindow_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXWindow_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXWindow_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXWindow_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_doesSaveUnder. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXWindow_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXWindow_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXWindow_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXWindow_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_reparent. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXWindow_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXWindow_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXWindow_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyWindow * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXWindow_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXWindow_setBackColor. Expected _FXPyWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXWindow_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyWindow::deleteType);
    return pyobj;
}

static int _wrap_FXPyWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXWindow_textType'(FXDragType )");
        return 1; 
    }
    FXPyWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyWindow::textType);
    return pyobj;
}

static int _wrap_FXPyWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXPyWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyWindow::stringType);
    return pyobj;
}

static int _wrap_FXPyWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXPyWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyWindow::colorType);
    return pyobj;
}

static int _wrap_FXPyWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyWindow::urilistType);
    return pyobj;
}

static void *SwigFXCompositeToFXWindow(void *ptr) {
    FXComposite *src;
    FXWindow *dest;
    src = (FXComposite *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXCompositeToFXDrawable(void *ptr) {
    FXComposite *src;
    FXDrawable *dest;
    src = (FXComposite *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXCompositeToFXId(void *ptr) {
    FXComposite *src;
    FXId *dest;
    src = (FXComposite *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXCompositeToFXObject(void *ptr) {
    FXComposite *src;
    FXObject *dest;
    src = (FXComposite *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Composite_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Composite_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Composite_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_onKeyPress. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Composite_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Composite_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Composite_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Composite_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Composite_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_onKeyRelease. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Composite_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Composite_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Composite_onFocusNext(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusNext(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Composite_onFocusNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Composite_onFocusNext",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_onFocusNext. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Composite_onFocusNext. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Composite_onFocusNext(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Composite_onFocusPrev(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusPrev(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Composite_onFocusPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Composite_onFocusPrev",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_onFocusPrev. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Composite_onFocusPrev. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Composite_onFocusPrev(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Composite_onCmdUpdate(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUpdate(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Composite_onCmdUpdate(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Composite_onCmdUpdate",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_onCmdUpdate. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Composite_onCmdUpdate. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Composite_onCmdUpdate(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Composite(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXComposite(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_Composite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXComposite * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FX_Composite",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Composite. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXComposite *)new_FX_Composite(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Composite_maxChildWidth(_swigobj)  (_swigobj->maxChildWidth())
static PyObject *_wrap_FX_Composite_maxChildWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Composite_maxChildWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_maxChildWidth. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Composite_maxChildWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Composite_maxChildHeight(_swigobj)  (_swigobj->maxChildHeight())
static PyObject *_wrap_FX_Composite_maxChildHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Composite_maxChildHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Composite_maxChildHeight. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Composite_maxChildHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

static int _wrap_FXComposite__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Composite_deleteType'(FXDragType )");
        return 1; 
    }
    FXComposite::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXComposite__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXComposite::deleteType);
    return pyobj;
}

static int _wrap_FXComposite__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Composite_textType'(FXDragType )");
        return 1; 
    }
    FXComposite::textType = tval;
    return 0;
}

static PyObject *_wrap_FXComposite__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXComposite::textType);
    return pyobj;
}

static int _wrap_FXComposite__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Composite_stringType'(FXDragType )");
        return 1; 
    }
    FXComposite::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXComposite__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXComposite::stringType);
    return pyobj;
}

static int _wrap_FXComposite__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Composite_colorType'(FXDragType )");
        return 1; 
    }
    FXComposite::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXComposite__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXComposite::colorType);
    return pyobj;
}

static int _wrap_FXComposite__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Composite_urilistType'(FXDragType )");
        return 1; 
    }
    FXComposite::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXComposite__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXComposite::urilistType);
    return pyobj;
}

static void *SwigFXPyCompositeToFXComposite(void *ptr) {
    FXPyComposite *src;
    FXComposite *dest;
    src = (FXPyComposite *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyCompositeToFXWindow(void *ptr) {
    FXPyComposite *src;
    FXWindow *dest;
    src = (FXPyComposite *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyCompositeToFXDrawable(void *ptr) {
    FXPyComposite *src;
    FXDrawable *dest;
    src = (FXPyComposite *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyCompositeToFXId(void *ptr) {
    FXPyComposite *src;
    FXId *dest;
    src = (FXPyComposite *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyCompositeToFXObject(void *ptr) {
    FXPyComposite *src;
    FXObject *dest;
    src = (FXPyComposite *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXComposite(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyComposite(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) 0;
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FXComposite",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXComposite. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyComposite *)new_FXComposite(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyComposite_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXComposite_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXComposite_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyComposite * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXComposite_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_onDefault. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXComposite_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXComposite_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXComposite_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_create. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXComposite_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_destroy. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXComposite_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_detach. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComposite_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComposite_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_resize. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXComposite_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_getDefaultWidth. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComposite_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComposite_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXComposite_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_getDefaultHeight. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComposite_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComposite_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXComposite_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_show. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXComposite_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_hide. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXComposite_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_enable. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXComposite_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_disable. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXComposite_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_canFocus. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComposite_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComposite_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXComposite_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_setFocus. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXComposite_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_killFocus. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXComposite_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXComposite_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_setDefault. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXComposite_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_recalc. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXComposite_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_layout. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXComposite_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_lower. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComposite_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComposite_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_move. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXComposite_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXComposite_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_position. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXComposite_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_isComposite. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComposite_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComposite_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXComposite_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComposite * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXComposite_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_contains. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComposite_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComposite_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXComposite_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComposite * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComposite_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_getWidthForHeight. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComposite_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComposite_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXComposite_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyComposite * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComposite_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_getHeightForWidth. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXComposite_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXComposite_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXComposite_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyComposite * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXComposite_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_doesSaveUnder. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXComposite_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXComposite_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXComposite_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXComposite_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_reparent. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXComposite_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXComposite_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXComposite_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyComposite * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXComposite_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXComposite_setBackColor. Expected _FXPyComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXComposite_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyComposite__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXComposite_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyComposite::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyComposite__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyComposite::deleteType);
    return pyobj;
}

static int _wrap_FXPyComposite__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXComposite_textType'(FXDragType )");
        return 1; 
    }
    FXPyComposite::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyComposite__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyComposite::textType);
    return pyobj;
}

static int _wrap_FXPyComposite__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXComposite_stringType'(FXDragType )");
        return 1; 
    }
    FXPyComposite::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyComposite__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyComposite::stringType);
    return pyobj;
}

static int _wrap_FXPyComposite__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXComposite_colorType'(FXDragType )");
        return 1; 
    }
    FXPyComposite::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyComposite__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyComposite::colorType);
    return pyobj;
}

static int _wrap_FXPyComposite__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXComposite_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyComposite::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyComposite__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyComposite::urilistType);
    return pyobj;
}

static void *SwigFXFrameToFXWindow(void *ptr) {
    FXFrame *src;
    FXWindow *dest;
    src = (FXFrame *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXFrameToFXDrawable(void *ptr) {
    FXFrame *src;
    FXDrawable *dest;
    src = (FXFrame *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXFrameToFXId(void *ptr) {
    FXFrame *src;
    FXId *dest;
    src = (FXFrame *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXFrameToFXObject(void *ptr) {
    FXFrame *src;
    FXObject *dest;
    src = (FXFrame *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Frame_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Frame_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXFrame * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Frame_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_onPaint. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Frame_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Frame_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Frame(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9) (new FXFrame(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9))
static PyObject *_wrap_new_FX_Frame(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) (FRAME_NORMAL);
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) (2);
    FXint  _arg7 = (FXint ) (2);
    FXint  _arg8 = (FXint ) (2);
    FXint  _arg9 = (FXint ) (2);
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiiiii:new_FX_Frame",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Frame. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXFrame *)new_FX_Frame(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXFrame_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FX_Frame_setFrameStyle(_swigobj,_swigarg0)  (_swigobj->setFrameStyle(_swigarg0))
static PyObject *_wrap_FX_Frame_setFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setFrameStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setFrameStyle. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setFrameStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_getFrameStyle(_swigobj)  (_swigobj->getFrameStyle())
static PyObject *_wrap_FX_Frame_getFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getFrameStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getFrameStyle. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Frame_getFrameStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getBorderWidth(_swigobj)  (_swigobj->getBorderWidth())
static PyObject *_wrap_FX_Frame_getBorderWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getBorderWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getBorderWidth. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Frame_getBorderWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getPadTop(_swigobj)  (_swigobj->getPadTop())
static PyObject *_wrap_FX_Frame_getPadTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getPadTop",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getPadTop. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Frame_getPadTop(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getPadBottom(_swigobj)  (_swigobj->getPadBottom())
static PyObject *_wrap_FX_Frame_getPadBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getPadBottom",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getPadBottom. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Frame_getPadBottom(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getPadLeft(_swigobj)  (_swigobj->getPadLeft())
static PyObject *_wrap_FX_Frame_getPadLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getPadLeft",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getPadLeft. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Frame_getPadLeft(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getPadRight(_swigobj)  (_swigobj->getPadRight())
static PyObject *_wrap_FX_Frame_getPadRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getPadRight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getPadRight. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Frame_getPadRight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_setPadTop(_swigobj,_swigarg0)  (_swigobj->setPadTop(_swigarg0))
static PyObject *_wrap_FX_Frame_setPadTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setPadTop",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setPadTop. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setPadTop(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setPadBottom(_swigobj,_swigarg0)  (_swigobj->setPadBottom(_swigarg0))
static PyObject *_wrap_FX_Frame_setPadBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pb", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setPadBottom",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setPadBottom. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setPadBottom(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setPadLeft(_swigobj,_swigarg0)  (_swigobj->setPadLeft(_swigarg0))
static PyObject *_wrap_FX_Frame_setPadLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pl", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setPadLeft",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setPadLeft. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setPadLeft(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setPadRight(_swigobj,_swigarg0)  (_swigobj->setPadRight(_swigarg0))
static PyObject *_wrap_FX_Frame_setPadRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setPadRight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setPadRight. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setPadRight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_Frame_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getHiliteColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Frame_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_Frame_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getShadowColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Frame_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_Frame_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getBorderColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Frame_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_getBaseColor(_swigobj)  (_swigobj->getBaseColor())
static PyObject *_wrap_FX_Frame_getBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Frame_getBaseColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_getBaseColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Frame_getBaseColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Frame_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_Frame_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setHiliteColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_Frame_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setShadowColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_Frame_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setBorderColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Frame_setBaseColor(_swigobj,_swigarg0)  (_swigobj->setBaseColor(_swigarg0))
static PyObject *_wrap_FX_Frame_setBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXFrame * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Frame_setBaseColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Frame_setBaseColor. Expected _FXFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Frame_setBaseColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXFrame__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Frame_deleteType'(FXDragType )");
        return 1; 
    }
    FXFrame::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXFrame__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXFrame::deleteType);
    return pyobj;
}

static int _wrap_FXFrame__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Frame_textType'(FXDragType )");
        return 1; 
    }
    FXFrame::textType = tval;
    return 0;
}

static PyObject *_wrap_FXFrame__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXFrame::textType);
    return pyobj;
}

static int _wrap_FXFrame__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Frame_stringType'(FXDragType )");
        return 1; 
    }
    FXFrame::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXFrame__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXFrame::stringType);
    return pyobj;
}

static int _wrap_FXFrame__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Frame_colorType'(FXDragType )");
        return 1; 
    }
    FXFrame::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXFrame__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXFrame::colorType);
    return pyobj;
}

static int _wrap_FXFrame__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Frame_urilistType'(FXDragType )");
        return 1; 
    }
    FXFrame::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXFrame__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXFrame::urilistType);
    return pyobj;
}

static void *SwigFXPyFrameToFXFrame(void *ptr) {
    FXPyFrame *src;
    FXFrame *dest;
    src = (FXPyFrame *) ptr;
    dest = (FXFrame *) src;
    return (void *) dest;
}

static void *SwigFXPyFrameToFXWindow(void *ptr) {
    FXPyFrame *src;
    FXWindow *dest;
    src = (FXPyFrame *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyFrameToFXDrawable(void *ptr) {
    FXPyFrame *src;
    FXDrawable *dest;
    src = (FXPyFrame *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyFrameToFXId(void *ptr) {
    FXPyFrame *src;
    FXId *dest;
    src = (FXPyFrame *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyFrameToFXObject(void *ptr) {
    FXPyFrame *src;
    FXObject *dest;
    src = (FXPyFrame *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXFrame(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9) (new FXPyFrame(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9))
static PyObject *_wrap_new_FXFrame(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _result;
    FXComposite * _arg0;
    FXuint  _arg1 = (FXuint ) (FRAME_NORMAL);
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) (2);
    FXint  _arg7 = (FXint ) (2);
    FXint  _arg8 = (FXint ) (2);
    FXint  _arg9 = (FXint ) (2);
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "p","opts","x","y","w","h","pl","pr","pt","pb", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiiiiiii:new_FXFrame",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXFrame. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyFrame *)new_FXFrame(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyFrame_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXFrame_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXFrame_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyFrame * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXFrame_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_onDefault. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXFrame_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXFrame_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXFrame_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_create. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXFrame_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_destroy. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXFrame_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_detach. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXFrame_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXFrame_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_resize. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXFrame_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_getDefaultWidth. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXFrame_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFrame_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXFrame_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_getDefaultHeight. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXFrame_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFrame_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXFrame_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_show. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXFrame_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_hide. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXFrame_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_enable. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXFrame_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_disable. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXFrame_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_canFocus. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXFrame_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXFrame_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXFrame_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_setFocus. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXFrame_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_killFocus. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXFrame_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXFrame_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_setDefault. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXFrame_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_recalc. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXFrame_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_layout. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXFrame_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_lower. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXFrame_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXFrame_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_move. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXFrame_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXFrame_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_position. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXFrame_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_isComposite. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXFrame_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXFrame_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXFrame_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyFrame * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXFrame_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_contains. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXFrame_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXFrame_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXFrame_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFrame_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_getWidthForHeight. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXFrame_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFrame_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXFrame_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyFrame * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFrame_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_getHeightForWidth. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXFrame_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXFrame_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXFrame_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyFrame * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXFrame_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_doesSaveUnder. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXFrame_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXFrame_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXFrame_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXFrame_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_reparent. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXFrame_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXFrame_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXFrame_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyFrame * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXFrame_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyFrame_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXFrame_setBackColor. Expected _FXPyFrame_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXFrame_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyFrame__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXFrame_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyFrame::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyFrame__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyFrame::deleteType);
    return pyobj;
}

static int _wrap_FXPyFrame__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXFrame_textType'(FXDragType )");
        return 1; 
    }
    FXPyFrame::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyFrame__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyFrame::textType);
    return pyobj;
}

static int _wrap_FXPyFrame__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXFrame_stringType'(FXDragType )");
        return 1; 
    }
    FXPyFrame::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyFrame__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyFrame::stringType);
    return pyobj;
}

static int _wrap_FXPyFrame__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXFrame_colorType'(FXDragType )");
        return 1; 
    }
    FXPyFrame::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyFrame__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyFrame::colorType);
    return pyobj;
}

static int _wrap_FXPyFrame__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXFrame_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyFrame::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyFrame__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyFrame::urilistType);
    return pyobj;
}

static void *SwigFXRootWindowToFXComposite(void *ptr) {
    FXRootWindow *src;
    FXComposite *dest;
    src = (FXRootWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXRootWindowToFXWindow(void *ptr) {
    FXRootWindow *src;
    FXWindow *dest;
    src = (FXRootWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXRootWindowToFXDrawable(void *ptr) {
    FXRootWindow *src;
    FXDrawable *dest;
    src = (FXRootWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXRootWindowToFXId(void *ptr) {
    FXRootWindow *src;
    FXId *dest;
    src = (FXRootWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXRootWindowToFXObject(void *ptr) {
    FXRootWindow *src;
    FXObject *dest;
    src = (FXRootWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FX_RootWindow(_swigarg0,_swigarg1) (new FXRootWindow(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FX_RootWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXRootWindow * _result;
    FXApp * _arg0;
    FXVisual * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","vis", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:new_FX_RootWindow",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_RootWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FX_RootWindow. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXRootWindow *)new_FX_RootWindow(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

static int _wrap_FXRootWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_RootWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXRootWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXRootWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXRootWindow::deleteType);
    return pyobj;
}

static int _wrap_FXRootWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_RootWindow_textType'(FXDragType )");
        return 1; 
    }
    FXRootWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXRootWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXRootWindow::textType);
    return pyobj;
}

static int _wrap_FXRootWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_RootWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXRootWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXRootWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXRootWindow::stringType);
    return pyobj;
}

static int _wrap_FXRootWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_RootWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXRootWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXRootWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXRootWindow::colorType);
    return pyobj;
}

static int _wrap_FXRootWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_RootWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXRootWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXRootWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXRootWindow::urilistType);
    return pyobj;
}

static void *SwigFXPyRootWindowToFXRootWindow(void *ptr) {
    FXPyRootWindow *src;
    FXRootWindow *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXRootWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyRootWindowToFXComposite(void *ptr) {
    FXPyRootWindow *src;
    FXComposite *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyRootWindowToFXWindow(void *ptr) {
    FXPyRootWindow *src;
    FXWindow *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyRootWindowToFXDrawable(void *ptr) {
    FXPyRootWindow *src;
    FXDrawable *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyRootWindowToFXId(void *ptr) {
    FXPyRootWindow *src;
    FXId *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyRootWindowToFXObject(void *ptr) {
    FXPyRootWindow *src;
    FXObject *dest;
    src = (FXPyRootWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXRootWindow(_swigarg0,_swigarg1) (new FXPyRootWindow(_swigarg0,_swigarg1))
static PyObject *_wrap_new_FXRootWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _result;
    FXApp * _arg0;
    FXVisual * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "a","vis", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:new_FXRootWindow",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXRootWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXVisual_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of new_FXRootWindow. Expected _FXVisual_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyRootWindow *)new_FXRootWindow(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyRootWindow_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXRootWindow_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXRootWindow_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyRootWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXRootWindow_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_onDefault. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXRootWindow_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXRootWindow_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXRootWindow_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_create. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXRootWindow_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_destroy. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXRootWindow_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_detach. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRootWindow_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRootWindow_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_resize. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXRootWindow_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_getDefaultWidth. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRootWindow_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRootWindow_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXRootWindow_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_getDefaultHeight. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRootWindow_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRootWindow_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXRootWindow_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_show. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXRootWindow_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_hide. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXRootWindow_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_enable. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXRootWindow_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_disable. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXRootWindow_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_canFocus. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRootWindow_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRootWindow_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXRootWindow_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_setFocus. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXRootWindow_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_killFocus. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXRootWindow_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXRootWindow_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_setDefault. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXRootWindow_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_recalc. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXRootWindow_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_layout. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXRootWindow_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_lower. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRootWindow_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRootWindow_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_move. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXRootWindow_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXRootWindow_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_position. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXRootWindow_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_isComposite. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRootWindow_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRootWindow_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXRootWindow_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXRootWindow_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_contains. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRootWindow_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRootWindow_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXRootWindow_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRootWindow_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_getWidthForHeight. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRootWindow_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRootWindow_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXRootWindow_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyRootWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRootWindow_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_getHeightForWidth. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXRootWindow_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXRootWindow_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXRootWindow_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyRootWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXRootWindow_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_doesSaveUnder. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXRootWindow_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXRootWindow_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXRootWindow_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXRootWindow_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_reparent. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXRootWindow_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXRootWindow_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXRootWindow_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyRootWindow * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXRootWindow_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyRootWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXRootWindow_setBackColor. Expected _FXPyRootWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXRootWindow_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyRootWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXRootWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyRootWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyRootWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyRootWindow::deleteType);
    return pyobj;
}

static int _wrap_FXPyRootWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXRootWindow_textType'(FXDragType )");
        return 1; 
    }
    FXPyRootWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyRootWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyRootWindow::textType);
    return pyobj;
}

static int _wrap_FXPyRootWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXRootWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXPyRootWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyRootWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyRootWindow::stringType);
    return pyobj;
}

static int _wrap_FXPyRootWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXRootWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXPyRootWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyRootWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyRootWindow::colorType);
    return pyobj;
}

static int _wrap_FXPyRootWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXRootWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyRootWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyRootWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyRootWindow::urilistType);
    return pyobj;
}

static void *SwigFXCanvasToFXWindow(void *ptr) {
    FXCanvas *src;
    FXWindow *dest;
    src = (FXCanvas *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXCanvasToFXDrawable(void *ptr) {
    FXCanvas *src;
    FXDrawable *dest;
    src = (FXCanvas *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXCanvasToFXId(void *ptr) {
    FXCanvas *src;
    FXId *dest;
    src = (FXCanvas *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXCanvasToFXObject(void *ptr) {
    FXCanvas *src;
    FXObject *dest;
    src = (FXCanvas *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Canvas_onPaint(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onPaint(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Canvas_onPaint(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCanvas * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Canvas_onPaint",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Canvas_onPaint. Expected _FXCanvas_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Canvas_onPaint. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Canvas_onPaint(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Canvas_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Canvas_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCanvas * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Canvas_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Canvas_onMotion. Expected _FXCanvas_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Canvas_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Canvas_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Canvas_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Canvas_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCanvas * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Canvas_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Canvas_onKeyPress. Expected _FXCanvas_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Canvas_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Canvas_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Canvas_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Canvas_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXCanvas * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Canvas_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Canvas_onKeyRelease. Expected _FXCanvas_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Canvas_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Canvas_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Canvas(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXCanvas(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FX_Canvas(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXCanvas * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (FRAME_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FX_Canvas",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_Canvas. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXCanvas *)new_FX_Canvas(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXCanvas_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

static int _wrap_FXCanvas__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Canvas_deleteType'(FXDragType )");
        return 1; 
    }
    FXCanvas::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXCanvas__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXCanvas::deleteType);
    return pyobj;
}

static int _wrap_FXCanvas__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Canvas_textType'(FXDragType )");
        return 1; 
    }
    FXCanvas::textType = tval;
    return 0;
}

static PyObject *_wrap_FXCanvas__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXCanvas::textType);
    return pyobj;
}

static int _wrap_FXCanvas__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Canvas_stringType'(FXDragType )");
        return 1; 
    }
    FXCanvas::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXCanvas__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXCanvas::stringType);
    return pyobj;
}

static int _wrap_FXCanvas__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Canvas_colorType'(FXDragType )");
        return 1; 
    }
    FXCanvas::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXCanvas__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXCanvas::colorType);
    return pyobj;
}

static int _wrap_FXCanvas__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Canvas_urilistType'(FXDragType )");
        return 1; 
    }
    FXCanvas::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXCanvas__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXCanvas::urilistType);
    return pyobj;
}

static void *SwigFXPyCanvasToFXCanvas(void *ptr) {
    FXPyCanvas *src;
    FXCanvas *dest;
    src = (FXPyCanvas *) ptr;
    dest = (FXCanvas *) src;
    return (void *) dest;
}

static void *SwigFXPyCanvasToFXWindow(void *ptr) {
    FXPyCanvas *src;
    FXWindow *dest;
    src = (FXPyCanvas *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyCanvasToFXDrawable(void *ptr) {
    FXPyCanvas *src;
    FXDrawable *dest;
    src = (FXPyCanvas *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyCanvasToFXId(void *ptr) {
    FXPyCanvas *src;
    FXId *dest;
    src = (FXPyCanvas *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyCanvasToFXObject(void *ptr) {
    FXPyCanvas *src;
    FXObject *dest;
    src = (FXPyCanvas *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXCanvas(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7) (new FXPyCanvas(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7))
static PyObject *_wrap_new_FXCanvas(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _result;
    FXComposite * _arg0;
    FXObject * _arg1 = (FXObject *) NULL;
    FXSelector  _arg2 = (FXSelector ) 0;
    FXuint  _arg3 = (FXuint ) (FRAME_NORMAL);
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "p","tgt","sel","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|Oiiiiii:new_FXCanvas",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_arg7)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXCanvas. Expected _FXComposite_p.");
        return NULL;
        }
    }
    if (_obj1)
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyCanvas *)new_FXCanvas(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyCanvas_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXCanvas_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXCanvas_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyCanvas * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXCanvas_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_onDefault. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXCanvas_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXCanvas_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXCanvas_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_create. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXCanvas_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_destroy. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXCanvas_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_detach. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCanvas_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCanvas_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_resize. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXCanvas_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_getDefaultWidth. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCanvas_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCanvas_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXCanvas_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_getDefaultHeight. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCanvas_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCanvas_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXCanvas_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_show. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXCanvas_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_hide. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXCanvas_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_enable. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXCanvas_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_disable. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXCanvas_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_canFocus. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCanvas_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCanvas_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXCanvas_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_setFocus. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXCanvas_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_killFocus. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXCanvas_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXCanvas_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_setDefault. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXCanvas_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_recalc. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXCanvas_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_layout. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXCanvas_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_lower. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCanvas_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCanvas_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_move. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXCanvas_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXCanvas_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_position. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXCanvas_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_isComposite. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCanvas_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCanvas_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXCanvas_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXCanvas_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_contains. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCanvas_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCanvas_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXCanvas_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCanvas_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_getWidthForHeight. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCanvas_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCanvas_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXCanvas_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyCanvas * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCanvas_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_getHeightForWidth. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXCanvas_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXCanvas_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXCanvas_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyCanvas * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXCanvas_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_doesSaveUnder. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXCanvas_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXCanvas_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXCanvas_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXCanvas_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_reparent. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXCanvas_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXCanvas_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXCanvas_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyCanvas * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXCanvas_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyCanvas_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXCanvas_setBackColor. Expected _FXPyCanvas_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXCanvas_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyCanvas__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXCanvas_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyCanvas::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyCanvas__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyCanvas::deleteType);
    return pyobj;
}

static int _wrap_FXPyCanvas__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXCanvas_textType'(FXDragType )");
        return 1; 
    }
    FXPyCanvas::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyCanvas__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyCanvas::textType);
    return pyobj;
}

static int _wrap_FXPyCanvas__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXCanvas_stringType'(FXDragType )");
        return 1; 
    }
    FXPyCanvas::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyCanvas__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyCanvas::stringType);
    return pyobj;
}

static int _wrap_FXPyCanvas__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXCanvas_colorType'(FXDragType )");
        return 1; 
    }
    FXPyCanvas::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyCanvas__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyCanvas::colorType);
    return pyobj;
}

static int _wrap_FXPyCanvas__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXCanvas_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyCanvas::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyCanvas__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyCanvas::urilistType);
    return pyobj;
}

static void *SwigFXShellToFXComposite(void *ptr) {
    FXShell *src;
    FXComposite *dest;
    src = (FXShell *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXShellToFXWindow(void *ptr) {
    FXShell *src;
    FXWindow *dest;
    src = (FXShell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXShellToFXDrawable(void *ptr) {
    FXShell *src;
    FXDrawable *dest;
    src = (FXShell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXShellToFXId(void *ptr) {
    FXShell *src;
    FXId *dest;
    src = (FXShell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXShellToFXObject(void *ptr) {
    FXShell *src;
    FXObject *dest;
    src = (FXShell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Shell_onConfigure(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onConfigure(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Shell_onConfigure(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Shell_onConfigure",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Shell_onConfigure. Expected _FXShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Shell_onConfigure. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Shell_onConfigure(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Shell_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Shell_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Shell_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Shell_onKeyPress. Expected _FXShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Shell_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Shell_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Shell_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Shell_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Shell_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Shell_onKeyRelease. Expected _FXShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Shell_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Shell_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Shell_onFocusNext(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusNext(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Shell_onFocusNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Shell_onFocusNext",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Shell_onFocusNext. Expected _FXShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Shell_onFocusNext. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Shell_onFocusNext(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Shell_onFocusPrev(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusPrev(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Shell_onFocusPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Shell_onFocusPrev",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Shell_onFocusPrev. Expected _FXShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Shell_onFocusPrev. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Shell_onFocusPrev(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static int _wrap_FXShell__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Shell_deleteType'(FXDragType )");
        return 1; 
    }
    FXShell::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXShell__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXShell::deleteType);
    return pyobj;
}

static int _wrap_FXShell__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Shell_textType'(FXDragType )");
        return 1; 
    }
    FXShell::textType = tval;
    return 0;
}

static PyObject *_wrap_FXShell__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXShell::textType);
    return pyobj;
}

static int _wrap_FXShell__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Shell_stringType'(FXDragType )");
        return 1; 
    }
    FXShell::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXShell__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXShell::stringType);
    return pyobj;
}

static int _wrap_FXShell__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Shell_colorType'(FXDragType )");
        return 1; 
    }
    FXShell::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXShell__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXShell::colorType);
    return pyobj;
}

static int _wrap_FXShell__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Shell_urilistType'(FXDragType )");
        return 1; 
    }
    FXShell::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXShell__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXShell::urilistType);
    return pyobj;
}

static void *SwigFXPyShellToFXShell(void *ptr) {
    FXPyShell *src;
    FXShell *dest;
    src = (FXPyShell *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyShellToFXComposite(void *ptr) {
    FXPyShell *src;
    FXComposite *dest;
    src = (FXPyShell *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyShellToFXWindow(void *ptr) {
    FXPyShell *src;
    FXWindow *dest;
    src = (FXPyShell *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyShellToFXDrawable(void *ptr) {
    FXPyShell *src;
    FXDrawable *dest;
    src = (FXPyShell *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyShellToFXId(void *ptr) {
    FXPyShell *src;
    FXId *dest;
    src = (FXPyShell *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyShellToFXObject(void *ptr) {
    FXPyShell *src;
    FXObject *dest;
    src = (FXPyShell *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FXShell_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXShell_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyShell * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXShell_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_onDefault. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXShell_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXShell_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXShell_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_create. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXShell_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_destroy. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXShell_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_detach. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXShell_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXShell_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_resize. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXShell_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_getDefaultWidth. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXShell_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXShell_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXShell_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_getDefaultHeight. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXShell_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXShell_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXShell_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_show. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXShell_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_hide. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXShell_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_enable. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXShell_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_disable. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXShell_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_canFocus. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXShell_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXShell_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXShell_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_setFocus. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXShell_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_killFocus. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXShell_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXShell_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_setDefault. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXShell_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_recalc. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXShell_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_layout. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXShell_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_lower. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXShell_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXShell_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_move. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXShell_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXShell_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_position. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXShell_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_isComposite. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXShell_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXShell_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXShell_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyShell * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXShell_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_contains. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXShell_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXShell_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXShell_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyShell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXShell_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_getWidthForHeight. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXShell_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXShell_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXShell_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyShell * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXShell_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_getHeightForWidth. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXShell_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXShell_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXShell_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyShell * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXShell_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_doesSaveUnder. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXShell_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXShell_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXShell_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXShell_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_reparent. Expected _FXPyShell_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXShell_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXShell_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXShell_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyShell * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXShell_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyShell_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXShell_setBackColor. Expected _FXPyShell_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXShell_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyShell__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXShell_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyShell::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyShell__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyShell::deleteType);
    return pyobj;
}

static int _wrap_FXPyShell__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXShell_textType'(FXDragType )");
        return 1; 
    }
    FXPyShell::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyShell__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyShell::textType);
    return pyobj;
}

static int _wrap_FXPyShell__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXShell_stringType'(FXDragType )");
        return 1; 
    }
    FXPyShell::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyShell__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyShell::stringType);
    return pyobj;
}

static int _wrap_FXPyShell__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXShell_colorType'(FXDragType )");
        return 1; 
    }
    FXPyShell::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyShell__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyShell::colorType);
    return pyobj;
}

static int _wrap_FXPyShell__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXShell_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyShell::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyShell__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyShell::urilistType);
    return pyobj;
}

static void *SwigFXPopupToFXShell(void *ptr) {
    FXPopup *src;
    FXShell *dest;
    src = (FXPopup *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPopupToFXComposite(void *ptr) {
    FXPopup *src;
    FXComposite *dest;
    src = (FXPopup *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPopupToFXWindow(void *ptr) {
    FXPopup *src;
    FXWindow *dest;
    src = (FXPopup *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPopupToFXDrawable(void *ptr) {
    FXPopup *src;
    FXDrawable *dest;
    src = (FXPopup *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPopupToFXId(void *ptr) {
    FXPopup *src;
    FXId *dest;
    src = (FXPopup *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPopupToFXObject(void *ptr) {
    FXPopup *src;
    FXObject *dest;
    src = (FXPopup *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_Popup_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusUp. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusDown. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onFocusLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusLeft. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onFocusRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusRight. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onFocusNext(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusNext(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusNext(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusNext",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusNext. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusNext. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusNext(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onFocusPrev(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusPrev(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onFocusPrev(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onFocusPrev",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onFocusPrev. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onFocusPrev. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onFocusPrev(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onEnter(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onEnter(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onEnter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onEnter",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onEnter. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onEnter. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onEnter(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onLeave(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onLeave(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onLeave(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onLeave",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onLeave. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onLeave. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onLeave(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onMotion(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMotion(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onMotion(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onMotion",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onMotion. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onMotion. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onMotion(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onMap(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onMap(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onMap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onMap",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onMap. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onMap. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onMap(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onButtonPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onButtonPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onButtonPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onButtonPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onButtonPress. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onButtonPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onButtonPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onButtonRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onButtonRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onButtonRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onButtonRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onButtonRelease. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onButtonRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onButtonRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onUngrabbed(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onUngrabbed(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onUngrabbed(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onUngrabbed",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onUngrabbed. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onUngrabbed. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onUngrabbed(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onCmdUnpost(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdUnpost(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onCmdUnpost(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onCmdUnpost",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onCmdUnpost. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onCmdUnpost. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onCmdUnpost(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onKeyPress(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyPress(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onKeyPress(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onKeyPress",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onKeyPress. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onKeyPress. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onKeyPress(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onKeyRelease(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onKeyRelease(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onKeyRelease(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onKeyRelease",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onKeyRelease. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onKeyRelease. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onKeyRelease(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_Popup_onCmdChoice(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdChoice(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_Popup_onCmdChoice(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_Popup_onCmdChoice",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_onCmdChoice. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_Popup_onCmdChoice. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_Popup_onCmdChoice(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_Popup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPopup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FX_Popup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _result;
    FXWindow * _arg0;
    FXuint  _arg1 = (FXuint ) (POPUP_VERTICAL)|(FRAME_RAISED)|(FRAME_THICK);
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "owner","opts","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FX_Popup",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPopup *)new_FX_Popup(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Popup_setFrameStyle(_swigobj,_swigarg0)  (_swigobj->setFrameStyle(_swigarg0))
static PyObject *_wrap_FX_Popup_setFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","style", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setFrameStyle",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setFrameStyle. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setFrameStyle(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getFrameStyle(_swigobj)  (_swigobj->getFrameStyle())
static PyObject *_wrap_FX_Popup_getFrameStyle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getFrameStyle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getFrameStyle. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Popup_getFrameStyle(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_getBorderWidth(_swigobj)  (_swigobj->getBorderWidth())
static PyObject *_wrap_FX_Popup_getBorderWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getBorderWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getBorderWidth. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_Popup_getBorderWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_setHiliteColor(_swigobj,_swigarg0)  (_swigobj->setHiliteColor(_swigarg0))
static PyObject *_wrap_FX_Popup_setHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setHiliteColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setHiliteColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setHiliteColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getHiliteColor(_swigobj)  (_swigobj->getHiliteColor())
static PyObject *_wrap_FX_Popup_getHiliteColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getHiliteColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getHiliteColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Popup_getHiliteColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_setShadowColor(_swigobj,_swigarg0)  (_swigobj->setShadowColor(_swigarg0))
static PyObject *_wrap_FX_Popup_setShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setShadowColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setShadowColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setShadowColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getShadowColor(_swigobj)  (_swigobj->getShadowColor())
static PyObject *_wrap_FX_Popup_getShadowColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getShadowColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getShadowColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Popup_getShadowColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_setBorderColor(_swigobj,_swigarg0)  (_swigobj->setBorderColor(_swigarg0))
static PyObject *_wrap_FX_Popup_setBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setBorderColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setBorderColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setBorderColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getBorderColor(_swigobj)  (_swigobj->getBorderColor())
static PyObject *_wrap_FX_Popup_getBorderColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getBorderColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getBorderColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Popup_getBorderColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_setBaseColor(_swigobj,_swigarg0)  (_swigobj->setBaseColor(_swigarg0))
static PyObject *_wrap_FX_Popup_setBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setBaseColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setBaseColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setBaseColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getBaseColor(_swigobj)  (_swigobj->getBaseColor())
static PyObject *_wrap_FX_Popup_getBaseColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXColor  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getBaseColor",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getBaseColor. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXColor )FX_Popup_getBaseColor(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_popup(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->popup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FX_Popup_popup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXWindow * _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","grabto","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOii|ii:FX_Popup_popup",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_popup. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_popup(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_popdown(_swigobj)  (_swigobj->popdown())
static PyObject *_wrap_FX_Popup_popdown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_popdown",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_popdown. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_popdown(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getGrabOwner(_swigobj)  (_swigobj->getGrabOwner())
static PyObject *_wrap_FX_Popup_getGrabOwner(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXWindow * _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getGrabOwner",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getGrabOwner. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXWindow *)FX_Popup_getGrabOwner(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_Popup_getOrientation(_swigobj)  (_swigobj->getOrientation())
static PyObject *_wrap_FX_Popup_getOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getOrientation",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getOrientation. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_Popup_getOrientation(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_Popup_setOrientation(_swigobj,_swigarg0)  (_swigobj->setOrientation(_swigarg0))
static PyObject *_wrap_FX_Popup_setOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","orient", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_Popup_setOrientation",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setOrientation. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setOrientation(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_Popup_getShrinkWrap(_swigobj)  (_swigobj->getShrinkWrap())
static PyObject *_wrap_FX_Popup_getShrinkWrap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_Popup_getShrinkWrap",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_getShrinkWrap. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_Popup_getShrinkWrap(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_Popup_setShrinkWrap(_swigobj,_swigarg0)  (_swigobj->setShrinkWrap(_swigarg0))
static PyObject *_wrap_FX_Popup_setShrinkWrap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPopup * _arg0;
    FXbool  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","sw", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Ob:FX_Popup_setShrinkWrap",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_Popup_setShrinkWrap. Expected _FXPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_Popup_setShrinkWrap(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPopup__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Popup_deleteType'(FXDragType )");
        return 1; 
    }
    FXPopup::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPopup__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPopup::deleteType);
    return pyobj;
}

static int _wrap_FXPopup__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Popup_textType'(FXDragType )");
        return 1; 
    }
    FXPopup::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPopup__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPopup::textType);
    return pyobj;
}

static int _wrap_FXPopup__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Popup_stringType'(FXDragType )");
        return 1; 
    }
    FXPopup::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPopup__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPopup::stringType);
    return pyobj;
}

static int _wrap_FXPopup__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Popup_colorType'(FXDragType )");
        return 1; 
    }
    FXPopup::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPopup__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPopup::colorType);
    return pyobj;
}

static int _wrap_FXPopup__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_Popup_urilistType'(FXDragType )");
        return 1; 
    }
    FXPopup::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPopup__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPopup::urilistType);
    return pyobj;
}

static void *SwigFXPyPopupToFXPopup(void *ptr) {
    FXPyPopup *src;
    FXPopup *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXPopup *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXShell(void *ptr) {
    FXPyPopup *src;
    FXShell *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXComposite(void *ptr) {
    FXPyPopup *src;
    FXComposite *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXWindow(void *ptr) {
    FXPyPopup *src;
    FXWindow *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXDrawable(void *ptr) {
    FXPyPopup *src;
    FXDrawable *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXId(void *ptr) {
    FXPyPopup *src;
    FXId *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyPopupToFXObject(void *ptr) {
    FXPyPopup *src;
    FXObject *dest;
    src = (FXPyPopup *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXPopup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5) (new FXPyPopup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5))
static PyObject *_wrap_new_FXPopup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _result;
    FXWindow * _arg0;
    FXuint  _arg1 = (FXuint ) (POPUP_VERTICAL)|(FRAME_RAISED)|(FRAME_THICK);
    FXint  _arg2 = (FXint ) 0;
    FXint  _arg3 = (FXint ) 0;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _obj0 = 0;
    char *_kwnames[] = { "owner","opts","x","y","w","h", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|iiiii:new_FXPopup",_kwnames,&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
{
    if (_obj0 == Py_None)
	_arg0 = NULL;
    else
	SWIG_GetPtrObj(_obj0, (void**) &_arg0, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyPopup *)new_FXPopup(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyPopup_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
    return _resultobj;
}

#define FXPopup_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXPopup_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyPopup * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXPopup_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_onDefault. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXPopup_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXPopup_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXPopup_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_create. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXPopup_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_destroy. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXPopup_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_detach. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPopup_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPopup_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_resize. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXPopup_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_getDefaultWidth. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPopup_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPopup_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXPopup_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_getDefaultHeight. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPopup_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPopup_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXPopup_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_show. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXPopup_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_hide. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXPopup_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_enable. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXPopup_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_disable. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXPopup_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_canFocus. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPopup_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPopup_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXPopup_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_setFocus. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXPopup_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_killFocus. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXPopup_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXPopup_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_setDefault. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXPopup_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_recalc. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXPopup_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_layout. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXPopup_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_lower. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPopup_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPopup_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_move. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXPopup_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXPopup_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_position. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXPopup_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_isComposite. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPopup_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPopup_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXPopup_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPopup * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXPopup_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_contains. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPopup_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPopup_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXPopup_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPopup * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPopup_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_getWidthForHeight. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPopup_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPopup_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXPopup_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyPopup * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPopup_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_getHeightForWidth. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXPopup_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXPopup_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXPopup_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_doesSaveUnder. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXPopup_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXPopup_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXPopup_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXPopup_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_reparent. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXPopup_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXPopup_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXPopup_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_setBackColor. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_popup(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4)  (_swigobj->_popup(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4))
static PyObject *_wrap_FXPopup_popup(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    FXWindow * _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4 = (FXint ) 0;
    FXint  _arg5 = (FXint ) 0;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","grabto","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOii|ii:FXPopup_popup",_kwnames,&_argo0,&_obj1,&_arg2,&_arg3,&_arg4,&_arg5)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_popup. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXWindow_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_popup(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXPopup_popdown(_swigobj)  (_swigobj->_popdown())
static PyObject *_wrap_FXPopup_popdown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyPopup * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXPopup_popdown",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyPopup_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXPopup_popdown. Expected _FXPyPopup_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXPopup_popdown(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyPopup__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXPopup_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyPopup::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyPopup__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyPopup::deleteType);
    return pyobj;
}

static int _wrap_FXPyPopup__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXPopup_textType'(FXDragType )");
        return 1; 
    }
    FXPyPopup::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyPopup__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyPopup::textType);
    return pyobj;
}

static int _wrap_FXPyPopup__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXPopup_stringType'(FXDragType )");
        return 1; 
    }
    FXPyPopup::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyPopup__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyPopup::stringType);
    return pyobj;
}

static int _wrap_FXPyPopup__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXPopup_colorType'(FXDragType )");
        return 1; 
    }
    FXPyPopup::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyPopup__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyPopup::colorType);
    return pyobj;
}

static int _wrap_FXPyPopup__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXPopup_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyPopup::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyPopup__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyPopup::urilistType);
    return pyobj;
}

static void *SwigFXTopWindowToFXShell(void *ptr) {
    FXTopWindow *src;
    FXShell *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXTopWindowToFXComposite(void *ptr) {
    FXTopWindow *src;
    FXComposite *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXTopWindowToFXWindow(void *ptr) {
    FXTopWindow *src;
    FXWindow *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXTopWindowToFXDrawable(void *ptr) {
    FXTopWindow *src;
    FXDrawable *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXTopWindowToFXId(void *ptr) {
    FXTopWindow *src;
    FXId *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXTopWindowToFXObject(void *ptr) {
    FXTopWindow *src;
    FXObject *dest;
    src = (FXTopWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_TopWindow_onClose(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClose(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onClose(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onClose",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onClose. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onClose. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onClose(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onCmdSetStringValue(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdSetStringValue(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onCmdSetStringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onCmdSetStringValue",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onCmdSetStringValue. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onCmdSetStringValue. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onCmdSetStringValue(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onCmdIconify(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdIconify(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onCmdIconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onCmdIconify",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onCmdIconify. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onCmdIconify. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onCmdIconify(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onCmdDeiconify(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onCmdDeiconify(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onCmdDeiconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onCmdDeiconify",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onCmdDeiconify. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onCmdDeiconify. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onCmdDeiconify(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onFocusUp(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusUp(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onFocusUp(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onFocusUp",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onFocusUp. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onFocusUp. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onFocusUp(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onFocusDown(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusDown(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onFocusDown(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onFocusDown",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onFocusDown. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onFocusDown. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onFocusDown(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onFocusLeft(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusLeft(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onFocusLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onFocusLeft",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onFocusLeft. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onFocusLeft. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onFocusLeft(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_onFocusRight(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onFocusRight(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_TopWindow_onFocusRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_TopWindow_onFocusRight",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_onFocusRight. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_TopWindow_onFocusRight. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_TopWindow_onFocusRight(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FX_TopWindow_show2(_swigobj,_swigarg0)  (_swigobj->show(_swigarg0))
static PyObject *_wrap_FX_TopWindow_show2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","placement", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_show2",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_show2. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_show2(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_place(_swigobj,_swigarg0)  (_swigobj->place(_swigarg0))
static PyObject *_wrap_FX_TopWindow_place(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","placement", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_place",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_place. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_place(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_iconify(_swigobj)  (_swigobj->iconify())
static PyObject *_wrap_FX_TopWindow_iconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_iconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_iconify. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_iconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_deiconify(_swigobj)  (_swigobj->deiconify())
static PyObject *_wrap_FX_TopWindow_deiconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_deiconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_deiconify. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_deiconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_isIconified(_swigobj)  (_swigobj->isIconified())
static PyObject *_wrap_FX_TopWindow_isIconified(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_isIconified",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_isIconified. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FX_TopWindow_isIconified(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FX_TopWindow_setTitle(_swigobj,_swigarg0)  (_swigobj->setTitle(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setTitle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXString * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","name", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TopWindow_setTitle",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setTitle. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setTitle(_arg0,*_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    delete _arg1;
}
    return _resultobj;
}

#define FX_TopWindow_getTitle(_swigobj)  (_swigobj->getTitle())
static PyObject *_wrap_FX_TopWindow_getTitle(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXString * _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getTitle",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getTitle. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = new FXString (FX_TopWindow_getTitle(_arg0));

    FXPy_END_ALLOW_THREADS
}{
    _resultobj = PyString_FromString(_result->text());
}
{
    delete _result;
}
    return _resultobj;
}

#define FX_TopWindow_setPadTop(_swigobj,_swigarg0)  (_swigobj->setPadTop(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setPadTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pt", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setPadTop",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setPadTop. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setPadTop(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getPadTop(_swigobj)  (_swigobj->getPadTop())
static PyObject *_wrap_FX_TopWindow_getPadTop(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getPadTop",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getPadTop. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getPadTop(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_setPadBottom(_swigobj,_swigarg0)  (_swigobj->setPadBottom(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setPadBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pb", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setPadBottom",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setPadBottom. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setPadBottom(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getPadBottom(_swigobj)  (_swigobj->getPadBottom())
static PyObject *_wrap_FX_TopWindow_getPadBottom(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getPadBottom",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getPadBottom. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getPadBottom(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_setPadLeft(_swigobj,_swigarg0)  (_swigobj->setPadLeft(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setPadLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pl", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setPadLeft",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setPadLeft. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setPadLeft(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getPadLeft(_swigobj)  (_swigobj->getPadLeft())
static PyObject *_wrap_FX_TopWindow_getPadLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getPadLeft",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getPadLeft. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getPadLeft(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_setPadRight(_swigobj,_swigarg0)  (_swigobj->setPadRight(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setPadRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","pr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setPadRight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setPadRight. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setPadRight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getPadRight(_swigobj)  (_swigobj->getPadRight())
static PyObject *_wrap_FX_TopWindow_getPadRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getPadRight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getPadRight. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getPadRight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_getHSpacing(_swigobj)  (_swigobj->getHSpacing())
static PyObject *_wrap_FX_TopWindow_getHSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getHSpacing",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getHSpacing. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getHSpacing(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_getVSpacing(_swigobj)  (_swigobj->getVSpacing())
static PyObject *_wrap_FX_TopWindow_getVSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getVSpacing",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getVSpacing. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FX_TopWindow_getVSpacing(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_setHSpacing(_swigobj,_swigarg0)  (_swigobj->setHSpacing(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setHSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","hs", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setHSpacing",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setHSpacing. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setHSpacing(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_setVSpacing(_swigobj,_swigarg0)  (_swigobj->setVSpacing(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setVSpacing(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","vs", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setVSpacing",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setVSpacing. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setVSpacing(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_setPackingHints(_swigobj,_swigarg0)  (_swigobj->setPackingHints(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setPackingHints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","ph", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setPackingHints",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setPackingHints. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setPackingHints(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getPackingHints(_swigobj)  (_swigobj->getPackingHints())
static PyObject *_wrap_FX_TopWindow_getPackingHints(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getPackingHints",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getPackingHints. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TopWindow_getPackingHints(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_setDecorations(_swigobj,_swigarg0)  (_swigobj->setDecorations(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setDecorations(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","decorations", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FX_TopWindow_setDecorations",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setDecorations. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setDecorations(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getDecorations(_swigobj)  (_swigobj->getDecorations())
static PyObject *_wrap_FX_TopWindow_getDecorations(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXuint  _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getDecorations",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getDecorations. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXuint )FX_TopWindow_getDecorations(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FX_TopWindow_getIcon(_swigobj)  (_swigobj->getIcon())
static PyObject *_wrap_FX_TopWindow_getIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getIcon. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_TopWindow_getIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_TopWindow_setIcon(_swigobj,_swigarg0)  (_swigobj->setIcon(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TopWindow_setIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setIcon. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FX_TopWindow_getMiniIcon(_swigobj)  (_swigobj->getMiniIcon())
static PyObject *_wrap_FX_TopWindow_getMiniIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXIcon * _result;
    FXTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FX_TopWindow_getMiniIcon",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_getMiniIcon. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXIcon *)FX_TopWindow_getMiniIcon(_arg0);

    FXPy_END_ALLOW_THREADS
}{
    if (_result) {
	_resultobj = FXPyMakeShadowObject(_result);
    } else {
	Py_INCREF(Py_None);
	_resultobj = Py_None;
    }
}
    return _resultobj;
}

#define FX_TopWindow_setMiniIcon(_swigobj,_swigarg0)  (_swigobj->setMiniIcon(_swigarg0))
static PyObject *_wrap_FX_TopWindow_setMiniIcon(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXTopWindow * _arg0;
    FXIcon * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    char *_kwnames[] = { "self","ic", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FX_TopWindow_setMiniIcon",_kwnames,&_argo0,&_obj1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_TopWindow_setMiniIcon. Expected _FXTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        FX_TopWindow_setMiniIcon(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXTopWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_TopWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXTopWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXTopWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXTopWindow::deleteType);
    return pyobj;
}

static int _wrap_FXTopWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_TopWindow_textType'(FXDragType )");
        return 1; 
    }
    FXTopWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXTopWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXTopWindow::textType);
    return pyobj;
}

static int _wrap_FXTopWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_TopWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXTopWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXTopWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXTopWindow::stringType);
    return pyobj;
}

static int _wrap_FXTopWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_TopWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXTopWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXTopWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXTopWindow::colorType);
    return pyobj;
}

static int _wrap_FXTopWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_TopWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXTopWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXTopWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXTopWindow::urilistType);
    return pyobj;
}

static void *SwigFXPyTopWindowToFXTopWindow(void *ptr) {
    FXPyTopWindow *src;
    FXTopWindow *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXTopWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXShell(void *ptr) {
    FXPyTopWindow *src;
    FXShell *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXComposite(void *ptr) {
    FXPyTopWindow *src;
    FXComposite *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXWindow(void *ptr) {
    FXPyTopWindow *src;
    FXWindow *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXDrawable(void *ptr) {
    FXPyTopWindow *src;
    FXDrawable *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXId(void *ptr) {
    FXPyTopWindow *src;
    FXId *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyTopWindowToFXObject(void *ptr) {
    FXPyTopWindow *src;
    FXObject *dest;
    src = (FXPyTopWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FXTopWindow_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXTopWindow_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyTopWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXTopWindow_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_onDefault. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXTopWindow_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXTopWindow_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXTopWindow_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_create. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXTopWindow_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_destroy. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXTopWindow_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_detach. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTopWindow_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTopWindow_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_resize. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXTopWindow_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_getDefaultWidth. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTopWindow_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTopWindow_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXTopWindow_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_getDefaultHeight. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTopWindow_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTopWindow_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXTopWindow_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_show. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXTopWindow_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_hide. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXTopWindow_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_enable. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXTopWindow_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_disable. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXTopWindow_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_canFocus. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTopWindow_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTopWindow_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXTopWindow_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_setFocus. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXTopWindow_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_killFocus. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXTopWindow_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXTopWindow_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_setDefault. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXTopWindow_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_recalc. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXTopWindow_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_layout. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXTopWindow_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_lower. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTopWindow_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTopWindow_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_move. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXTopWindow_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXTopWindow_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_position. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXTopWindow_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_isComposite. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTopWindow_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTopWindow_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXTopWindow_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXTopWindow_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_contains. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTopWindow_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTopWindow_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXTopWindow_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTopWindow_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_getWidthForHeight. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTopWindow_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTopWindow_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXTopWindow_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyTopWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTopWindow_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_getHeightForWidth. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXTopWindow_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXTopWindow_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXTopWindow_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_doesSaveUnder. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXTopWindow_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXTopWindow_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXTopWindow_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXTopWindow_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_reparent. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXTopWindow_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXTopWindow_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTopWindow_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_setBackColor. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_show2(_swigobj,_swigarg0)  (_swigobj->_show(_swigarg0))
static PyObject *_wrap_FXTopWindow_show2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","placement", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXTopWindow_show2",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_show2. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_show2(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_iconify(_swigobj)  (_swigobj->_iconify())
static PyObject *_wrap_FXTopWindow_iconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_iconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_iconify. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_iconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXTopWindow_deiconify(_swigobj)  (_swigobj->_deiconify())
static PyObject *_wrap_FXTopWindow_deiconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyTopWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXTopWindow_deiconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyTopWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXTopWindow_deiconify. Expected _FXPyTopWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXTopWindow_deiconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyTopWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXTopWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyTopWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyTopWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyTopWindow::deleteType);
    return pyobj;
}

static int _wrap_FXPyTopWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXTopWindow_textType'(FXDragType )");
        return 1; 
    }
    FXPyTopWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyTopWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyTopWindow::textType);
    return pyobj;
}

static int _wrap_FXPyTopWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXTopWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXPyTopWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyTopWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyTopWindow::stringType);
    return pyobj;
}

static int _wrap_FXPyTopWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXTopWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXPyTopWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyTopWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyTopWindow::colorType);
    return pyobj;
}

static int _wrap_FXPyTopWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXTopWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyTopWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyTopWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyTopWindow::urilistType);
    return pyobj;
}

static void *SwigFXMainWindowToFXTopWindow(void *ptr) {
    FXMainWindow *src;
    FXTopWindow *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXTopWindow *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXShell(void *ptr) {
    FXMainWindow *src;
    FXShell *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXComposite(void *ptr) {
    FXMainWindow *src;
    FXComposite *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXWindow(void *ptr) {
    FXMainWindow *src;
    FXWindow *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXDrawable(void *ptr) {
    FXMainWindow *src;
    FXDrawable *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXId(void *ptr) {
    FXMainWindow *src;
    FXId *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXMainWindowToFXObject(void *ptr) {
    FXMainWindow *src;
    FXObject *dest;
    src = (FXMainWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define FX_MainWindow_onClose(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->onClose(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FX_MainWindow_onClose(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXMainWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _argo3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","arg4", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FX_MainWindow_onClose",_kwnames,&_argo0,&_obj1,&_arg2,&_argo3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FX_MainWindow_onClose. Expected _FXMainWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
    if (_argo3) {
        if (_argo3 == Py_None) { _arg3 = NULL; }
        else if (SWIG_GetPtrObj(_argo3,(void **) &_arg3,(char *) 0 )) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 4 of FX_MainWindow_onClose. Expected _void_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FX_MainWindow_onClose(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define new_FX_MainWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10) (new FXMainWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10))
static PyObject *_wrap_new_FX_MainWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXMainWindow * _result;
    FXApp * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXuint  _arg4 = (FXuint ) (DECOR_ALL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 4;
    FXint  _arg10 = (FXint ) 4;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "app","name","ic","mi","opts","x","y","w","h","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiii:new_FX_MainWindow",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FX_MainWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXMainWindow *)new_FX_MainWindow(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXMainWindow_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

static int _wrap_FXMainWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_MainWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXMainWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXMainWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXMainWindow::deleteType);
    return pyobj;
}

static int _wrap_FXMainWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_MainWindow_textType'(FXDragType )");
        return 1; 
    }
    FXMainWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXMainWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXMainWindow::textType);
    return pyobj;
}

static int _wrap_FXMainWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_MainWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXMainWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXMainWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXMainWindow::stringType);
    return pyobj;
}

static int _wrap_FXMainWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_MainWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXMainWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXMainWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXMainWindow::colorType);
    return pyobj;
}

static int _wrap_FXMainWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FX_MainWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXMainWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXMainWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXMainWindow::urilistType);
    return pyobj;
}

static void *SwigFXPyMainWindowToFXMainWindow(void *ptr) {
    FXPyMainWindow *src;
    FXMainWindow *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXMainWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXTopWindow(void *ptr) {
    FXPyMainWindow *src;
    FXTopWindow *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXTopWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXShell(void *ptr) {
    FXPyMainWindow *src;
    FXShell *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXShell *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXComposite(void *ptr) {
    FXPyMainWindow *src;
    FXComposite *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXComposite *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXWindow(void *ptr) {
    FXPyMainWindow *src;
    FXWindow *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXWindow *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXDrawable(void *ptr) {
    FXPyMainWindow *src;
    FXDrawable *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXDrawable *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXId(void *ptr) {
    FXPyMainWindow *src;
    FXId *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXId *) src;
    return (void *) dest;
}

static void *SwigFXPyMainWindowToFXObject(void *ptr) {
    FXPyMainWindow *src;
    FXObject *dest;
    src = (FXPyMainWindow *) ptr;
    dest = (FXObject *) src;
    return (void *) dest;
}

#define new_FXMainWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14) (new FXPyMainWindow(_swigarg0,_swigarg1,_swigarg2,_swigarg3,_swigarg4,_swigarg5,_swigarg6,_swigarg7,_swigarg8,_swigarg9,_swigarg10,_swigarg11,_swigarg12,_swigarg13,_swigarg14))
static PyObject *_wrap_new_FXMainWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _result;
    FXApp * _arg0;
    FXString * _arg1;
    FXIcon * _arg2 = (FXIcon *) NULL;
    FXIcon * _arg3 = (FXIcon *) NULL;
    FXuint  _arg4 = (FXuint ) (DECOR_ALL);
    FXint  _arg5 = (FXint ) 0;
    FXint  _arg6 = (FXint ) 0;
    FXint  _arg7 = (FXint ) 0;
    FXint  _arg8 = (FXint ) 0;
    FXint  _arg9 = (FXint ) 0;
    FXint  _arg10 = (FXint ) 0;
    FXint  _arg11 = (FXint ) 0;
    FXint  _arg12 = (FXint ) 0;
    FXint  _arg13 = (FXint ) 4;
    FXint  _arg14 = (FXint ) 4;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "app","name","ic","mi","opts","x","y","w","h","pl","pr","pt","pb","hs","vs", NULL };
    char _ptemp[128];

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO|OOiiiiiiiiiii:new_FXMainWindow",_kwnames,&_argo0,&_obj1,&_obj2,&_obj3,&_arg4,&_arg5,&_arg6,&_arg7,&_arg8,&_arg9,&_arg10,&_arg11,&_arg12,&_arg13,&_arg14)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXApp_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of new_FXMainWindow. Expected _FXApp_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = new FXString;
    else if (!PyString_Check(_obj1)) {
	PyErr_SetString(PyExc_TypeError, "not a string");
	return NULL;
    }
    else
	_arg1 = new FXString(PyString_AsString(_obj1));
}
    if (_obj2)
{
    if (_obj2 == Py_None)
	_arg2 = NULL;
    else
	SWIG_GetPtrObj(_obj2, (void**) &_arg2, "_FXIcon_p");
}
    if (_obj3)
{
    if (_obj3 == Py_None)
	_arg3 = NULL;
    else
	SWIG_GetPtrObj(_obj3, (void**) &_arg3, "_FXIcon_p");
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXPyMainWindow *)new_FXMainWindow(_arg0,*_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10,_arg11,_arg12,_arg13,_arg14);

    FXPy_END_ALLOW_THREADS
}    if (_result) {
        SWIG_MakePtr(_ptemp, (char *) _result,"_FXPyMainWindow_p");
        _resultobj = Py_BuildValue("s",_ptemp);
    } else {
        Py_INCREF(Py_None);
        _resultobj = Py_None;
    }
{
    delete _arg1;
}
    return _resultobj;
}

#define FXMainWindow_onDefault(_swigobj,_swigarg0,_swigarg1,_swigarg2)  (_swigobj->_onDefault(_swigarg0,_swigarg1,_swigarg2))
static PyObject *_wrap_FXMainWindow_onDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    long  _result;
    FXPyMainWindow * _arg0;
    FXObject * _arg1;
    FXSelector  _arg2;
    void * _arg3;
    PyObject * _argo0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj3 = 0;
    char *_kwnames[] = { "self","arg2","arg3","ptr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OOiO:FXMainWindow_onDefault",_kwnames,&_argo0,&_obj1,&_arg2,&_obj3)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_onDefault. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    if (_obj1 == Py_None)
	_arg1 = NULL;
    else
	SWIG_GetPtrObj(_obj1, (void**) &_arg1, "_FXObject_p");
}
{
    _arg3 = NULL;
    if (PyObject_HasAttrString(_obj3, "this")) {
	PyObject *obj = PyObject_GetAttrString(_obj3, "this");
	char *str = PyString_AsString(obj);
	if (str) {
	    if (!strcmp(str, "NULL"))
		_arg3 = NULL;
	}
	else
	    _arg3 = (void*) _obj3;
	Py_DECREF(obj);
    }
    else
	_arg3 = (void*) _obj3;
}
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (long )FXMainWindow_onDefault(_arg0,_arg1,_arg2,_arg3);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

#define FXMainWindow_create(_swigobj)  (_swigobj->_create())
static PyObject *_wrap_FXMainWindow_create(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_create",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_create. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_create(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_destroy(_swigobj)  (_swigobj->_destroy())
static PyObject *_wrap_FXMainWindow_destroy(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_destroy",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_destroy. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_destroy(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_detach(_swigobj)  (_swigobj->_detach())
static PyObject *_wrap_FXMainWindow_detach(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_detach",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_detach. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_detach(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_resize(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_resize(_swigarg0,_swigarg1))
static PyObject *_wrap_FXMainWindow_resize(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXMainWindow_resize",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_resize. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_resize(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_getDefaultWidth(_swigobj)  (_swigobj->_getDefaultWidth())
static PyObject *_wrap_FXMainWindow_getDefaultWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_getDefaultWidth",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_getDefaultWidth. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXMainWindow_getDefaultWidth(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXMainWindow_getDefaultHeight(_swigobj)  (_swigobj->_getDefaultHeight())
static PyObject *_wrap_FXMainWindow_getDefaultHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_getDefaultHeight",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_getDefaultHeight. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXMainWindow_getDefaultHeight(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXMainWindow_show(_swigobj)  (_swigobj->_show())
static PyObject *_wrap_FXMainWindow_show(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_show",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_show. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_show(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_hide(_swigobj)  (_swigobj->_hide())
static PyObject *_wrap_FXMainWindow_hide(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_hide",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_hide. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_hide(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_enable(_swigobj)  (_swigobj->_enable())
static PyObject *_wrap_FXMainWindow_enable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_enable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_enable. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_enable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_disable(_swigobj)  (_swigobj->_disable())
static PyObject *_wrap_FXMainWindow_disable(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_disable",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_disable. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_disable(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_canFocus(_swigobj)  (_swigobj->_canFocus())
static PyObject *_wrap_FXMainWindow_canFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_canFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_canFocus. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXMainWindow_canFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXMainWindow_setFocus(_swigobj)  (_swigobj->_setFocus())
static PyObject *_wrap_FXMainWindow_setFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_setFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_setFocus. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_setFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_killFocus(_swigobj)  (_swigobj->_killFocus())
static PyObject *_wrap_FXMainWindow_killFocus(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_killFocus",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_killFocus. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_killFocus(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_setDefault(_swigobj,_swigarg0)  (_swigobj->_setDefault(_swigarg0))
static PyObject *_wrap_FXMainWindow_setDefault(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXbool  _arg1 = (FXbool ) TRUE;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","enable", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O|b:FXMainWindow_setDefault",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_setDefault. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_setDefault(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_recalc(_swigobj)  (_swigobj->_recalc())
static PyObject *_wrap_FXMainWindow_recalc(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_recalc",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_recalc. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_recalc(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_layout(_swigobj)  (_swigobj->_layout())
static PyObject *_wrap_FXMainWindow_layout(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_layout",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_layout. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_layout(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_lower(_swigobj)  (_swigobj->_lowerWindow())
static PyObject *_wrap_FXMainWindow_lower(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_lower",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_lower. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_lower(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_move(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_move(_swigarg0,_swigarg1))
static PyObject *_wrap_FXMainWindow_move(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXMainWindow_move",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_move. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_move(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_position(_swigobj,_swigarg0,_swigarg1,_swigarg2,_swigarg3)  (_swigobj->_position(_swigarg0,_swigarg1,_swigarg2,_swigarg3))
static PyObject *_wrap_FXMainWindow_position(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    FXint  _arg3;
    FXint  _arg4;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y","w","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oiiii:FXMainWindow_position",_kwnames,&_argo0,&_arg1,&_arg2,&_arg3,&_arg4)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_position. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_position(_arg0,_arg1,_arg2,_arg3,_arg4);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_isComposite(_swigobj)  (_swigobj->_isComposite())
static PyObject *_wrap_FXMainWindow_isComposite(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_isComposite",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_isComposite. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXMainWindow_isComposite(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXMainWindow_contains(_swigobj,_swigarg0,_swigarg1)  (_swigobj->_contains(_swigarg0,_swigarg1))
static PyObject *_wrap_FXMainWindow_contains(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    FXint  _arg2;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","x","y", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oii:FXMainWindow_contains",_kwnames,&_argo0,&_arg1,&_arg2)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_contains. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXMainWindow_contains(_arg0,_arg1,_arg2);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXMainWindow_getWidthForHeight(_swigobj,_swigarg0)  (_swigobj->_getWidthForHeight(_swigarg0))
static PyObject *_wrap_FXMainWindow_getWidthForHeight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","h", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXMainWindow_getWidthForHeight",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_getWidthForHeight. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXMainWindow_getWidthForHeight(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXMainWindow_getHeightForWidth(_swigobj,_swigarg0)  (_swigobj->_getHeightForWidth(_swigarg0))
static PyObject *_wrap_FXMainWindow_getHeightForWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXint  _result;
    FXPyMainWindow * _arg0;
    FXint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","w", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXMainWindow_getHeightForWidth",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_getHeightForWidth. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXint )FXMainWindow_getHeightForWidth(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("i",_result);
    return _resultobj;
}

#define FXMainWindow_doesSaveUnder(_swigobj)  (_swigobj->_doesSaveUnder())
static PyObject *_wrap_FXMainWindow_doesSaveUnder(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXbool  _result;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_doesSaveUnder",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_doesSaveUnder. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        _result = (FXbool )FXMainWindow_doesSaveUnder(_arg0);

    FXPy_END_ALLOW_THREADS
}    _resultobj = Py_BuildValue("b",_result);
    return _resultobj;
}

#define FXMainWindow_reparent(_swigobj,_swigarg0)  (_swigobj->_reparent(_swigarg0))
static PyObject *_wrap_FXMainWindow_reparent(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXComposite * _arg1;
    PyObject * _argo0 = 0;
    PyObject * _argo1 = 0;
    char *_kwnames[] = { "self","newparent", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"OO:FXMainWindow_reparent",_kwnames,&_argo0,&_argo1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_reparent. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
    if (_argo1) {
        if (_argo1 == Py_None) { _arg1 = NULL; }
        else if (SWIG_GetPtrObj(_argo1,(void **) &_arg1,"_FXComposite_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 2 of FXMainWindow_reparent. Expected _FXComposite_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_reparent(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_setBackColor(_swigobj,_swigarg0)  (_swigobj->_setBackColor(_swigarg0))
static PyObject *_wrap_FXMainWindow_setBackColor(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXColor  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","clr", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXMainWindow_setBackColor",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_setBackColor. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_setBackColor(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_show2(_swigobj,_swigarg0)  (_swigobj->_show(_swigarg0))
static PyObject *_wrap_FXMainWindow_show2(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    FXuint  _arg1;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self","placement", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"Oi:FXMainWindow_show2",_kwnames,&_argo0,&_arg1)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_show2. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_show2(_arg0,_arg1);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_iconify(_swigobj)  (_swigobj->_iconify())
static PyObject *_wrap_FXMainWindow_iconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_iconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_iconify. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_iconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

#define FXMainWindow_deiconify(_swigobj)  (_swigobj->_deiconify())
static PyObject *_wrap_FXMainWindow_deiconify(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject * _resultobj;
    FXPyMainWindow * _arg0;
    PyObject * _argo0 = 0;
    char *_kwnames[] = { "self", NULL };

    self = self;
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,"O:FXMainWindow_deiconify",_kwnames,&_argo0)) 
        return NULL;
    if (_argo0) {
        if (_argo0 == Py_None) { _arg0 = NULL; }
        else if (SWIG_GetPtrObj(_argo0,(void **) &_arg0,"_FXPyMainWindow_p")) {
            PyErr_SetString(PyExc_TypeError,"Type error in argument 1 of FXMainWindow_deiconify. Expected _FXPyMainWindow_p.");
        return NULL;
        }
    }
{
    FXPy_BEGIN_ALLOW_THREADS
        FXMainWindow_deiconify(_arg0);

    FXPy_END_ALLOW_THREADS
}    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static int _wrap_FXPyMainWindow__deleteType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXMainWindow_deleteType'(FXDragType )");
        return 1; 
    }
    FXPyMainWindow::deleteType = tval;
    return 0;
}

static PyObject *_wrap_FXPyMainWindow__deleteType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyMainWindow::deleteType);
    return pyobj;
}

static int _wrap_FXPyMainWindow__textType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXMainWindow_textType'(FXDragType )");
        return 1; 
    }
    FXPyMainWindow::textType = tval;
    return 0;
}

static PyObject *_wrap_FXPyMainWindow__textType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyMainWindow::textType);
    return pyobj;
}

static int _wrap_FXPyMainWindow__stringType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXMainWindow_stringType'(FXDragType )");
        return 1; 
    }
    FXPyMainWindow::stringType = tval;
    return 0;
}

static PyObject *_wrap_FXPyMainWindow__stringType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyMainWindow::stringType);
    return pyobj;
}

static int _wrap_FXPyMainWindow__colorType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXMainWindow_colorType'(FXDragType )");
        return 1; 
    }
    FXPyMainWindow::colorType = tval;
    return 0;
}

static PyObject *_wrap_FXPyMainWindow__colorType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyMainWindow::colorType);
    return pyobj;
}

static int _wrap_FXPyMainWindow__urilistType_set(PyObject *val) {
    FXDragType  tval;

    tval = (FXDragType )PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'FXMainWindow_urilistType'(FXDragType )");
        return 1; 
    }
    FXPyMainWindow::urilistType = tval;
    return 0;
}

static PyObject *_wrap_FXPyMainWindow__urilistType_get() {
    PyObject * pyobj;

    pyobj = PyInt_FromLong((long) FXPyMainWindow::urilistType);
    return pyobj;
}

static PyMethodDef windowscMethods[] = {
	 { "FXMainWindow_deiconify", (PyCFunction) _wrap_FXMainWindow_deiconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_iconify", (PyCFunction) _wrap_FXMainWindow_iconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_show2", (PyCFunction) _wrap_FXMainWindow_show2, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_setBackColor", (PyCFunction) _wrap_FXMainWindow_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_reparent", (PyCFunction) _wrap_FXMainWindow_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_doesSaveUnder", (PyCFunction) _wrap_FXMainWindow_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_getHeightForWidth", (PyCFunction) _wrap_FXMainWindow_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_getWidthForHeight", (PyCFunction) _wrap_FXMainWindow_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_contains", (PyCFunction) _wrap_FXMainWindow_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_isComposite", (PyCFunction) _wrap_FXMainWindow_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_position", (PyCFunction) _wrap_FXMainWindow_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_move", (PyCFunction) _wrap_FXMainWindow_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_lower", (PyCFunction) _wrap_FXMainWindow_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_layout", (PyCFunction) _wrap_FXMainWindow_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_recalc", (PyCFunction) _wrap_FXMainWindow_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_setDefault", (PyCFunction) _wrap_FXMainWindow_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_killFocus", (PyCFunction) _wrap_FXMainWindow_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_setFocus", (PyCFunction) _wrap_FXMainWindow_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_canFocus", (PyCFunction) _wrap_FXMainWindow_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_disable", (PyCFunction) _wrap_FXMainWindow_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_enable", (PyCFunction) _wrap_FXMainWindow_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_hide", (PyCFunction) _wrap_FXMainWindow_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_show", (PyCFunction) _wrap_FXMainWindow_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_getDefaultHeight", (PyCFunction) _wrap_FXMainWindow_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_getDefaultWidth", (PyCFunction) _wrap_FXMainWindow_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_resize", (PyCFunction) _wrap_FXMainWindow_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_detach", (PyCFunction) _wrap_FXMainWindow_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_destroy", (PyCFunction) _wrap_FXMainWindow_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_create", (PyCFunction) _wrap_FXMainWindow_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXMainWindow_onDefault", (PyCFunction) _wrap_FXMainWindow_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXMainWindow", (PyCFunction) _wrap_new_FXMainWindow, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_MainWindow", (PyCFunction) _wrap_new_FX_MainWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_MainWindow_onClose", (PyCFunction) _wrap_FX_MainWindow_onClose, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_deiconify", (PyCFunction) _wrap_FXTopWindow_deiconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_iconify", (PyCFunction) _wrap_FXTopWindow_iconify, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_show2", (PyCFunction) _wrap_FXTopWindow_show2, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_setBackColor", (PyCFunction) _wrap_FXTopWindow_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_reparent", (PyCFunction) _wrap_FXTopWindow_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_doesSaveUnder", (PyCFunction) _wrap_FXTopWindow_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_getHeightForWidth", (PyCFunction) _wrap_FXTopWindow_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_getWidthForHeight", (PyCFunction) _wrap_FXTopWindow_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_contains", (PyCFunction) _wrap_FXTopWindow_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_isComposite", (PyCFunction) _wrap_FXTopWindow_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_position", (PyCFunction) _wrap_FXTopWindow_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_move", (PyCFunction) _wrap_FXTopWindow_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_lower", (PyCFunction) _wrap_FXTopWindow_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_layout", (PyCFunction) _wrap_FXTopWindow_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_recalc", (PyCFunction) _wrap_FXTopWindow_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_setDefault", (PyCFunction) _wrap_FXTopWindow_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_killFocus", (PyCFunction) _wrap_FXTopWindow_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_setFocus", (PyCFunction) _wrap_FXTopWindow_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_canFocus", (PyCFunction) _wrap_FXTopWindow_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_disable", (PyCFunction) _wrap_FXTopWindow_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_enable", (PyCFunction) _wrap_FXTopWindow_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_hide", (PyCFunction) _wrap_FXTopWindow_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_show", (PyCFunction) _wrap_FXTopWindow_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_getDefaultHeight", (PyCFunction) _wrap_FXTopWindow_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_getDefaultWidth", (PyCFunction) _wrap_FXTopWindow_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_resize", (PyCFunction) _wrap_FXTopWindow_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_detach", (PyCFunction) _wrap_FXTopWindow_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_destroy", (PyCFunction) _wrap_FXTopWindow_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_create", (PyCFunction) _wrap_FXTopWindow_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXTopWindow_onDefault", (PyCFunction) _wrap_FXTopWindow_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setMiniIcon", (PyCFunction) _wrap_FX_TopWindow_setMiniIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getMiniIcon", (PyCFunction) _wrap_FX_TopWindow_getMiniIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setIcon", (PyCFunction) _wrap_FX_TopWindow_setIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getIcon", (PyCFunction) _wrap_FX_TopWindow_getIcon, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getDecorations", (PyCFunction) _wrap_FX_TopWindow_getDecorations, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setDecorations", (PyCFunction) _wrap_FX_TopWindow_setDecorations, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getPackingHints", (PyCFunction) _wrap_FX_TopWindow_getPackingHints, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setPackingHints", (PyCFunction) _wrap_FX_TopWindow_setPackingHints, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setVSpacing", (PyCFunction) _wrap_FX_TopWindow_setVSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setHSpacing", (PyCFunction) _wrap_FX_TopWindow_setHSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getVSpacing", (PyCFunction) _wrap_FX_TopWindow_getVSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getHSpacing", (PyCFunction) _wrap_FX_TopWindow_getHSpacing, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getPadRight", (PyCFunction) _wrap_FX_TopWindow_getPadRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setPadRight", (PyCFunction) _wrap_FX_TopWindow_setPadRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getPadLeft", (PyCFunction) _wrap_FX_TopWindow_getPadLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setPadLeft", (PyCFunction) _wrap_FX_TopWindow_setPadLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getPadBottom", (PyCFunction) _wrap_FX_TopWindow_getPadBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setPadBottom", (PyCFunction) _wrap_FX_TopWindow_setPadBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getPadTop", (PyCFunction) _wrap_FX_TopWindow_getPadTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setPadTop", (PyCFunction) _wrap_FX_TopWindow_setPadTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_getTitle", (PyCFunction) _wrap_FX_TopWindow_getTitle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_setTitle", (PyCFunction) _wrap_FX_TopWindow_setTitle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_isIconified", (PyCFunction) _wrap_FX_TopWindow_isIconified, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_deiconify", (PyCFunction) _wrap_FX_TopWindow_deiconify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_iconify", (PyCFunction) _wrap_FX_TopWindow_iconify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_place", (PyCFunction) _wrap_FX_TopWindow_place, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_show2", (PyCFunction) _wrap_FX_TopWindow_show2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onFocusRight", (PyCFunction) _wrap_FX_TopWindow_onFocusRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onFocusLeft", (PyCFunction) _wrap_FX_TopWindow_onFocusLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onFocusDown", (PyCFunction) _wrap_FX_TopWindow_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onFocusUp", (PyCFunction) _wrap_FX_TopWindow_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onCmdDeiconify", (PyCFunction) _wrap_FX_TopWindow_onCmdDeiconify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onCmdIconify", (PyCFunction) _wrap_FX_TopWindow_onCmdIconify, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onCmdSetStringValue", (PyCFunction) _wrap_FX_TopWindow_onCmdSetStringValue, METH_VARARGS | METH_KEYWORDS },
	 { "FX_TopWindow_onClose", (PyCFunction) _wrap_FX_TopWindow_onClose, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_popdown", (PyCFunction) _wrap_FXPopup_popdown, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_popup", (PyCFunction) _wrap_FXPopup_popup, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_setBackColor", (PyCFunction) _wrap_FXPopup_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_reparent", (PyCFunction) _wrap_FXPopup_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_doesSaveUnder", (PyCFunction) _wrap_FXPopup_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_getHeightForWidth", (PyCFunction) _wrap_FXPopup_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_getWidthForHeight", (PyCFunction) _wrap_FXPopup_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_contains", (PyCFunction) _wrap_FXPopup_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_isComposite", (PyCFunction) _wrap_FXPopup_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_position", (PyCFunction) _wrap_FXPopup_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_move", (PyCFunction) _wrap_FXPopup_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_lower", (PyCFunction) _wrap_FXPopup_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_layout", (PyCFunction) _wrap_FXPopup_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_recalc", (PyCFunction) _wrap_FXPopup_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_setDefault", (PyCFunction) _wrap_FXPopup_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_killFocus", (PyCFunction) _wrap_FXPopup_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_setFocus", (PyCFunction) _wrap_FXPopup_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_canFocus", (PyCFunction) _wrap_FXPopup_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_disable", (PyCFunction) _wrap_FXPopup_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_enable", (PyCFunction) _wrap_FXPopup_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_hide", (PyCFunction) _wrap_FXPopup_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_show", (PyCFunction) _wrap_FXPopup_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_getDefaultHeight", (PyCFunction) _wrap_FXPopup_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_getDefaultWidth", (PyCFunction) _wrap_FXPopup_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_resize", (PyCFunction) _wrap_FXPopup_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_detach", (PyCFunction) _wrap_FXPopup_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_destroy", (PyCFunction) _wrap_FXPopup_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_create", (PyCFunction) _wrap_FXPopup_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXPopup_onDefault", (PyCFunction) _wrap_FXPopup_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXPopup", (PyCFunction) _wrap_new_FXPopup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setShrinkWrap", (PyCFunction) _wrap_FX_Popup_setShrinkWrap, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getShrinkWrap", (PyCFunction) _wrap_FX_Popup_getShrinkWrap, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setOrientation", (PyCFunction) _wrap_FX_Popup_setOrientation, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getOrientation", (PyCFunction) _wrap_FX_Popup_getOrientation, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getGrabOwner", (PyCFunction) _wrap_FX_Popup_getGrabOwner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_popdown", (PyCFunction) _wrap_FX_Popup_popdown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_popup", (PyCFunction) _wrap_FX_Popup_popup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getBaseColor", (PyCFunction) _wrap_FX_Popup_getBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setBaseColor", (PyCFunction) _wrap_FX_Popup_setBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getBorderColor", (PyCFunction) _wrap_FX_Popup_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setBorderColor", (PyCFunction) _wrap_FX_Popup_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getShadowColor", (PyCFunction) _wrap_FX_Popup_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setShadowColor", (PyCFunction) _wrap_FX_Popup_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getHiliteColor", (PyCFunction) _wrap_FX_Popup_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setHiliteColor", (PyCFunction) _wrap_FX_Popup_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getBorderWidth", (PyCFunction) _wrap_FX_Popup_getBorderWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_getFrameStyle", (PyCFunction) _wrap_FX_Popup_getFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_setFrameStyle", (PyCFunction) _wrap_FX_Popup_setFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Popup", (PyCFunction) _wrap_new_FX_Popup, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onCmdChoice", (PyCFunction) _wrap_FX_Popup_onCmdChoice, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onKeyRelease", (PyCFunction) _wrap_FX_Popup_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onKeyPress", (PyCFunction) _wrap_FX_Popup_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onCmdUnpost", (PyCFunction) _wrap_FX_Popup_onCmdUnpost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onUngrabbed", (PyCFunction) _wrap_FX_Popup_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onButtonRelease", (PyCFunction) _wrap_FX_Popup_onButtonRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onButtonPress", (PyCFunction) _wrap_FX_Popup_onButtonPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onMap", (PyCFunction) _wrap_FX_Popup_onMap, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onMotion", (PyCFunction) _wrap_FX_Popup_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onLeave", (PyCFunction) _wrap_FX_Popup_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onEnter", (PyCFunction) _wrap_FX_Popup_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusPrev", (PyCFunction) _wrap_FX_Popup_onFocusPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusNext", (PyCFunction) _wrap_FX_Popup_onFocusNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusRight", (PyCFunction) _wrap_FX_Popup_onFocusRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusLeft", (PyCFunction) _wrap_FX_Popup_onFocusLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusDown", (PyCFunction) _wrap_FX_Popup_onFocusDown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Popup_onFocusUp", (PyCFunction) _wrap_FX_Popup_onFocusUp, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_setBackColor", (PyCFunction) _wrap_FXShell_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_reparent", (PyCFunction) _wrap_FXShell_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_doesSaveUnder", (PyCFunction) _wrap_FXShell_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_getHeightForWidth", (PyCFunction) _wrap_FXShell_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_getWidthForHeight", (PyCFunction) _wrap_FXShell_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_contains", (PyCFunction) _wrap_FXShell_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_isComposite", (PyCFunction) _wrap_FXShell_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_position", (PyCFunction) _wrap_FXShell_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_move", (PyCFunction) _wrap_FXShell_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_lower", (PyCFunction) _wrap_FXShell_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_layout", (PyCFunction) _wrap_FXShell_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_recalc", (PyCFunction) _wrap_FXShell_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_setDefault", (PyCFunction) _wrap_FXShell_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_killFocus", (PyCFunction) _wrap_FXShell_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_setFocus", (PyCFunction) _wrap_FXShell_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_canFocus", (PyCFunction) _wrap_FXShell_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_disable", (PyCFunction) _wrap_FXShell_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_enable", (PyCFunction) _wrap_FXShell_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_hide", (PyCFunction) _wrap_FXShell_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_show", (PyCFunction) _wrap_FXShell_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_getDefaultHeight", (PyCFunction) _wrap_FXShell_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_getDefaultWidth", (PyCFunction) _wrap_FXShell_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_resize", (PyCFunction) _wrap_FXShell_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_detach", (PyCFunction) _wrap_FXShell_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_destroy", (PyCFunction) _wrap_FXShell_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_create", (PyCFunction) _wrap_FXShell_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXShell_onDefault", (PyCFunction) _wrap_FXShell_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Shell_onFocusPrev", (PyCFunction) _wrap_FX_Shell_onFocusPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Shell_onFocusNext", (PyCFunction) _wrap_FX_Shell_onFocusNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Shell_onKeyRelease", (PyCFunction) _wrap_FX_Shell_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Shell_onKeyPress", (PyCFunction) _wrap_FX_Shell_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Shell_onConfigure", (PyCFunction) _wrap_FX_Shell_onConfigure, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_setBackColor", (PyCFunction) _wrap_FXCanvas_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_reparent", (PyCFunction) _wrap_FXCanvas_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_doesSaveUnder", (PyCFunction) _wrap_FXCanvas_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_getHeightForWidth", (PyCFunction) _wrap_FXCanvas_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_getWidthForHeight", (PyCFunction) _wrap_FXCanvas_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_contains", (PyCFunction) _wrap_FXCanvas_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_isComposite", (PyCFunction) _wrap_FXCanvas_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_position", (PyCFunction) _wrap_FXCanvas_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_move", (PyCFunction) _wrap_FXCanvas_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_lower", (PyCFunction) _wrap_FXCanvas_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_layout", (PyCFunction) _wrap_FXCanvas_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_recalc", (PyCFunction) _wrap_FXCanvas_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_setDefault", (PyCFunction) _wrap_FXCanvas_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_killFocus", (PyCFunction) _wrap_FXCanvas_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_setFocus", (PyCFunction) _wrap_FXCanvas_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_canFocus", (PyCFunction) _wrap_FXCanvas_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_disable", (PyCFunction) _wrap_FXCanvas_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_enable", (PyCFunction) _wrap_FXCanvas_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_hide", (PyCFunction) _wrap_FXCanvas_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_show", (PyCFunction) _wrap_FXCanvas_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_getDefaultHeight", (PyCFunction) _wrap_FXCanvas_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_getDefaultWidth", (PyCFunction) _wrap_FXCanvas_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_resize", (PyCFunction) _wrap_FXCanvas_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_detach", (PyCFunction) _wrap_FXCanvas_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_destroy", (PyCFunction) _wrap_FXCanvas_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_create", (PyCFunction) _wrap_FXCanvas_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXCanvas_onDefault", (PyCFunction) _wrap_FXCanvas_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXCanvas", (PyCFunction) _wrap_new_FXCanvas, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Canvas", (PyCFunction) _wrap_new_FX_Canvas, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Canvas_onKeyRelease", (PyCFunction) _wrap_FX_Canvas_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Canvas_onKeyPress", (PyCFunction) _wrap_FX_Canvas_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Canvas_onMotion", (PyCFunction) _wrap_FX_Canvas_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Canvas_onPaint", (PyCFunction) _wrap_FX_Canvas_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_setBackColor", (PyCFunction) _wrap_FXRootWindow_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_reparent", (PyCFunction) _wrap_FXRootWindow_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_doesSaveUnder", (PyCFunction) _wrap_FXRootWindow_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_getHeightForWidth", (PyCFunction) _wrap_FXRootWindow_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_getWidthForHeight", (PyCFunction) _wrap_FXRootWindow_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_contains", (PyCFunction) _wrap_FXRootWindow_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_isComposite", (PyCFunction) _wrap_FXRootWindow_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_position", (PyCFunction) _wrap_FXRootWindow_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_move", (PyCFunction) _wrap_FXRootWindow_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_lower", (PyCFunction) _wrap_FXRootWindow_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_layout", (PyCFunction) _wrap_FXRootWindow_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_recalc", (PyCFunction) _wrap_FXRootWindow_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_setDefault", (PyCFunction) _wrap_FXRootWindow_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_killFocus", (PyCFunction) _wrap_FXRootWindow_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_setFocus", (PyCFunction) _wrap_FXRootWindow_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_canFocus", (PyCFunction) _wrap_FXRootWindow_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_disable", (PyCFunction) _wrap_FXRootWindow_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_enable", (PyCFunction) _wrap_FXRootWindow_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_hide", (PyCFunction) _wrap_FXRootWindow_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_show", (PyCFunction) _wrap_FXRootWindow_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_getDefaultHeight", (PyCFunction) _wrap_FXRootWindow_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_getDefaultWidth", (PyCFunction) _wrap_FXRootWindow_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_resize", (PyCFunction) _wrap_FXRootWindow_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_detach", (PyCFunction) _wrap_FXRootWindow_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_destroy", (PyCFunction) _wrap_FXRootWindow_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_create", (PyCFunction) _wrap_FXRootWindow_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXRootWindow_onDefault", (PyCFunction) _wrap_FXRootWindow_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXRootWindow", (PyCFunction) _wrap_new_FXRootWindow, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_RootWindow", (PyCFunction) _wrap_new_FX_RootWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_setBackColor", (PyCFunction) _wrap_FXFrame_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_reparent", (PyCFunction) _wrap_FXFrame_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_doesSaveUnder", (PyCFunction) _wrap_FXFrame_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_getHeightForWidth", (PyCFunction) _wrap_FXFrame_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_getWidthForHeight", (PyCFunction) _wrap_FXFrame_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_contains", (PyCFunction) _wrap_FXFrame_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_isComposite", (PyCFunction) _wrap_FXFrame_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_position", (PyCFunction) _wrap_FXFrame_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_move", (PyCFunction) _wrap_FXFrame_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_lower", (PyCFunction) _wrap_FXFrame_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_layout", (PyCFunction) _wrap_FXFrame_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_recalc", (PyCFunction) _wrap_FXFrame_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_setDefault", (PyCFunction) _wrap_FXFrame_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_killFocus", (PyCFunction) _wrap_FXFrame_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_setFocus", (PyCFunction) _wrap_FXFrame_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_canFocus", (PyCFunction) _wrap_FXFrame_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_disable", (PyCFunction) _wrap_FXFrame_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_enable", (PyCFunction) _wrap_FXFrame_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_hide", (PyCFunction) _wrap_FXFrame_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_show", (PyCFunction) _wrap_FXFrame_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_getDefaultHeight", (PyCFunction) _wrap_FXFrame_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_getDefaultWidth", (PyCFunction) _wrap_FXFrame_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_resize", (PyCFunction) _wrap_FXFrame_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_detach", (PyCFunction) _wrap_FXFrame_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_destroy", (PyCFunction) _wrap_FXFrame_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_create", (PyCFunction) _wrap_FXFrame_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXFrame_onDefault", (PyCFunction) _wrap_FXFrame_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXFrame", (PyCFunction) _wrap_new_FXFrame, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setBaseColor", (PyCFunction) _wrap_FX_Frame_setBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setBorderColor", (PyCFunction) _wrap_FX_Frame_setBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setShadowColor", (PyCFunction) _wrap_FX_Frame_setShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setHiliteColor", (PyCFunction) _wrap_FX_Frame_setHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getBaseColor", (PyCFunction) _wrap_FX_Frame_getBaseColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getBorderColor", (PyCFunction) _wrap_FX_Frame_getBorderColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getShadowColor", (PyCFunction) _wrap_FX_Frame_getShadowColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getHiliteColor", (PyCFunction) _wrap_FX_Frame_getHiliteColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setPadRight", (PyCFunction) _wrap_FX_Frame_setPadRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setPadLeft", (PyCFunction) _wrap_FX_Frame_setPadLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setPadBottom", (PyCFunction) _wrap_FX_Frame_setPadBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setPadTop", (PyCFunction) _wrap_FX_Frame_setPadTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getPadRight", (PyCFunction) _wrap_FX_Frame_getPadRight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getPadLeft", (PyCFunction) _wrap_FX_Frame_getPadLeft, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getPadBottom", (PyCFunction) _wrap_FX_Frame_getPadBottom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getPadTop", (PyCFunction) _wrap_FX_Frame_getPadTop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getBorderWidth", (PyCFunction) _wrap_FX_Frame_getBorderWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_getFrameStyle", (PyCFunction) _wrap_FX_Frame_getFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_setFrameStyle", (PyCFunction) _wrap_FX_Frame_setFrameStyle, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Frame", (PyCFunction) _wrap_new_FX_Frame, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Frame_onPaint", (PyCFunction) _wrap_FX_Frame_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_setBackColor", (PyCFunction) _wrap_FXComposite_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_reparent", (PyCFunction) _wrap_FXComposite_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_doesSaveUnder", (PyCFunction) _wrap_FXComposite_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_getHeightForWidth", (PyCFunction) _wrap_FXComposite_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_getWidthForHeight", (PyCFunction) _wrap_FXComposite_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_contains", (PyCFunction) _wrap_FXComposite_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_isComposite", (PyCFunction) _wrap_FXComposite_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_position", (PyCFunction) _wrap_FXComposite_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_move", (PyCFunction) _wrap_FXComposite_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_lower", (PyCFunction) _wrap_FXComposite_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_layout", (PyCFunction) _wrap_FXComposite_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_recalc", (PyCFunction) _wrap_FXComposite_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_setDefault", (PyCFunction) _wrap_FXComposite_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_killFocus", (PyCFunction) _wrap_FXComposite_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_setFocus", (PyCFunction) _wrap_FXComposite_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_canFocus", (PyCFunction) _wrap_FXComposite_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_disable", (PyCFunction) _wrap_FXComposite_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_enable", (PyCFunction) _wrap_FXComposite_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_hide", (PyCFunction) _wrap_FXComposite_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_show", (PyCFunction) _wrap_FXComposite_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_getDefaultHeight", (PyCFunction) _wrap_FXComposite_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_getDefaultWidth", (PyCFunction) _wrap_FXComposite_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_resize", (PyCFunction) _wrap_FXComposite_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_detach", (PyCFunction) _wrap_FXComposite_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_destroy", (PyCFunction) _wrap_FXComposite_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_create", (PyCFunction) _wrap_FXComposite_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXComposite_onDefault", (PyCFunction) _wrap_FXComposite_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXComposite", (PyCFunction) _wrap_new_FXComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_maxChildHeight", (PyCFunction) _wrap_FX_Composite_maxChildHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_maxChildWidth", (PyCFunction) _wrap_FX_Composite_maxChildWidth, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Composite", (PyCFunction) _wrap_new_FX_Composite, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_onCmdUpdate", (PyCFunction) _wrap_FX_Composite_onCmdUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_onFocusPrev", (PyCFunction) _wrap_FX_Composite_onFocusPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_onFocusNext", (PyCFunction) _wrap_FX_Composite_onFocusNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_onKeyRelease", (PyCFunction) _wrap_FX_Composite_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Composite_onKeyPress", (PyCFunction) _wrap_FX_Composite_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_setBackColor", (PyCFunction) _wrap_FXWindow_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_reparent", (PyCFunction) _wrap_FXWindow_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_doesSaveUnder", (PyCFunction) _wrap_FXWindow_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_getHeightForWidth", (PyCFunction) _wrap_FXWindow_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_getWidthForHeight", (PyCFunction) _wrap_FXWindow_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_contains", (PyCFunction) _wrap_FXWindow_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_isComposite", (PyCFunction) _wrap_FXWindow_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_position", (PyCFunction) _wrap_FXWindow_position, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_move", (PyCFunction) _wrap_FXWindow_move, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_lower", (PyCFunction) _wrap_FXWindow_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_layout", (PyCFunction) _wrap_FXWindow_layout, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_recalc", (PyCFunction) _wrap_FXWindow_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_setDefault", (PyCFunction) _wrap_FXWindow_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_killFocus", (PyCFunction) _wrap_FXWindow_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_setFocus", (PyCFunction) _wrap_FXWindow_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_canFocus", (PyCFunction) _wrap_FXWindow_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_disable", (PyCFunction) _wrap_FXWindow_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_enable", (PyCFunction) _wrap_FXWindow_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_hide", (PyCFunction) _wrap_FXWindow_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_show", (PyCFunction) _wrap_FXWindow_show, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_getDefaultHeight", (PyCFunction) _wrap_FXWindow_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_getDefaultWidth", (PyCFunction) _wrap_FXWindow_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_resize", (PyCFunction) _wrap_FXWindow_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_detach", (PyCFunction) _wrap_FXWindow_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_destroy", (PyCFunction) _wrap_FXWindow_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_create", (PyCFunction) _wrap_FXWindow_create, METH_VARARGS | METH_KEYWORDS },
	 { "FXWindow_onDefault", (PyCFunction) _wrap_FXWindow_onDefault, METH_VARARGS | METH_KEYWORDS },
	 { "new_FXWindow", (PyCFunction) _wrap_new_FXWindow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_doesSaveUnder", (PyCFunction) _wrap_FX_Window_doesSaveUnder, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_linkAfter", (PyCFunction) _wrap_FX_Window_linkAfter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_linkBefore", (PyCFunction) _wrap_FX_Window_linkBefore, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getBackColor", (PyCFunction) _wrap_FX_Window_getBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setBackColor", (PyCFunction) _wrap_FX_Window_setBackColor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_translateCoordinatesTo", (PyCFunction) _wrap_FX_Window_translateCoordinatesTo, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_translateCoordinatesFrom", (PyCFunction) _wrap_FX_Window_translateCoordinatesFrom, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_contains", (PyCFunction) _wrap_FX_Window_contains, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getDNDData", (PyCFunction) _wrap_FX_Window_getDNDData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setDNDData", (PyCFunction) _wrap_FX_Window_setDNDData, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_inquireDNDAction", (PyCFunction) _wrap_FX_Window_inquireDNDAction, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_offeredDNDType", (PyCFunction) _wrap_FX_Window_offeredDNDType, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_inquireDNDTypes", (PyCFunction) _wrap_FX_Window_inquireDNDTypes, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_didAccept", (PyCFunction) _wrap_FX_Window_didAccept, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_acceptDrop", (PyCFunction) _wrap_FX_Window_acceptDrop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_clearDragRectangle", (PyCFunction) _wrap_FX_Window_clearDragRectangle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setDragRectangle", (PyCFunction) _wrap_FX_Window_setDragRectangle, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isDropTarget", (PyCFunction) _wrap_FX_Window_isDropTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_endDrag", (PyCFunction) _wrap_FX_Window_endDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_handleDrag", (PyCFunction) _wrap_FX_Window_handleDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_beginDrag", (PyCFunction) _wrap_FX_Window_beginDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isDragging", (PyCFunction) _wrap_FX_Window_isDragging, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isDropEnabled", (PyCFunction) _wrap_FX_Window_isDropEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_dropDisable", (PyCFunction) _wrap_FX_Window_dropDisable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_dropEnable", (PyCFunction) _wrap_FX_Window_dropEnable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_releaseClipboard", (PyCFunction) _wrap_FX_Window_releaseClipboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_acquireClipboard", (PyCFunction) _wrap_FX_Window_acquireClipboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_hasClipboard", (PyCFunction) _wrap_FX_Window_hasClipboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_releaseSelection", (PyCFunction) _wrap_FX_Window_releaseSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_acquireSelection", (PyCFunction) _wrap_FX_Window_acquireSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_hasSelection", (PyCFunction) _wrap_FX_Window_hasSelection, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_underCursor", (PyCFunction) _wrap_FX_Window_underCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isComposite", (PyCFunction) _wrap_FX_Window_isComposite, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_shown", (PyCFunction) _wrap_FX_Window_shown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_hide", (PyCFunction) _wrap_FX_Window_hide, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_show", (PyCFunction) _wrap_FX_Window_show, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_grabbedKeyboard", (PyCFunction) _wrap_FX_Window_grabbedKeyboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_ungrabKeyboard", (PyCFunction) _wrap_FX_Window_ungrabKeyboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_grabKeyboard", (PyCFunction) _wrap_FX_Window_grabKeyboard, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_grabbed", (PyCFunction) _wrap_FX_Window_grabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_ungrab", (PyCFunction) _wrap_FX_Window_ungrab, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_grab", (PyCFunction) _wrap_FX_Window_grab, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_repaint", (PyCFunction) _wrap_FX_Window_repaint, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_repaint2", (PyCFunction) _wrap_FX_Window_repaint2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_update", (PyCFunction) _wrap_FX_Window_update, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_update2", (PyCFunction) _wrap_FX_Window_update2, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_scroll", (PyCFunction) _wrap_FX_Window_scroll, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_reparent", (PyCFunction) _wrap_FX_Window_reparent, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_forceRefresh", (PyCFunction) _wrap_FX_Window_forceRefresh, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_recalc", (PyCFunction) _wrap_FX_Window_recalc, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_position", (PyCFunction) _wrap_FX_Window_position, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_resize", (PyCFunction) _wrap_FX_Window_resize, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_move", (PyCFunction) _wrap_FX_Window_move, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_lower", (PyCFunction) _wrap_FX_Window_lower, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_destroy", (PyCFunction) _wrap_FX_Window_destroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_detach", (PyCFunction) _wrap_FX_Window_detach, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_create", (PyCFunction) _wrap_FX_Window_create, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_disable", (PyCFunction) _wrap_FX_Window_disable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_enable", (PyCFunction) _wrap_FX_Window_enable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isInitial", (PyCFunction) _wrap_FX_Window_isInitial, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setInitial", (PyCFunction) _wrap_FX_Window_setInitial, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isDefault", (PyCFunction) _wrap_FX_Window_isDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setDefault", (PyCFunction) _wrap_FX_Window_setDefault, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_killFocus", (PyCFunction) _wrap_FX_Window_killFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setFocus", (PyCFunction) _wrap_FX_Window_setFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_hasFocus", (PyCFunction) _wrap_FX_Window_hasFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isActive", (PyCFunction) _wrap_FX_Window_isActive, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isEnabled", (PyCFunction) _wrap_FX_Window_isEnabled, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_canFocus", (PyCFunction) _wrap_FX_Window_canFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setCursorPosition", (PyCFunction) _wrap_FX_Window_setCursorPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getCursorPosition", (PyCFunction) _wrap_FX_Window_getCursorPosition, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getDragCursor", (PyCFunction) _wrap_FX_Window_getDragCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setDragCursor", (PyCFunction) _wrap_FX_Window_setDragCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getDefaultCursor", (PyCFunction) _wrap_FX_Window_getDefaultCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setDefaultCursor", (PyCFunction) _wrap_FX_Window_setDefaultCursor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_commonAncestor", (PyCFunction) _wrap_FX_Window_commonAncestor, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_childAtIndex", (PyCFunction) _wrap_FX_Window_childAtIndex, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_indexOfChild", (PyCFunction) _wrap_FX_Window_indexOfChild, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_numChildren", (PyCFunction) _wrap_FX_Window_numChildren, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getChildAt", (PyCFunction) _wrap_FX_Window_getChildAt, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_containsChild", (PyCFunction) _wrap_FX_Window_containsChild, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isChildOf", (PyCFunction) _wrap_FX_Window_isChildOf, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_isShell", (PyCFunction) _wrap_FX_Window_isShell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_remHotKey", (PyCFunction) _wrap_FX_Window_remHotKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_addHotKey", (PyCFunction) _wrap_FX_Window_addHotKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setAccelTable", (PyCFunction) _wrap_FX_Window_setAccelTable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getAccelTable", (PyCFunction) _wrap_FX_Window_getAccelTable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getLayoutHints", (PyCFunction) _wrap_FX_Window_getLayoutHints, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setLayoutHints", (PyCFunction) _wrap_FX_Window_setLayoutHints, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setHeight", (PyCFunction) _wrap_FX_Window_setHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setWidth", (PyCFunction) _wrap_FX_Window_setWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setY", (PyCFunction) _wrap_FX_Window_setY, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setX", (PyCFunction) _wrap_FX_Window_setX, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getHeightForWidth", (PyCFunction) _wrap_FX_Window_getHeightForWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getWidthForHeight", (PyCFunction) _wrap_FX_Window_getWidthForHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getDefaultHeight", (PyCFunction) _wrap_FX_Window_getDefaultHeight, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getDefaultWidth", (PyCFunction) _wrap_FX_Window_getDefaultWidth, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getY", (PyCFunction) _wrap_FX_Window_getY, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getX", (PyCFunction) _wrap_FX_Window_getX, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getSelector", (PyCFunction) _wrap_FX_Window_getSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setSelector", (PyCFunction) _wrap_FX_Window_setSelector, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getTarget", (PyCFunction) _wrap_FX_Window_getTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setTarget", (PyCFunction) _wrap_FX_Window_setTarget, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getKey", (PyCFunction) _wrap_FX_Window_getKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_setKey", (PyCFunction) _wrap_FX_Window_setKey, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getFocus", (PyCFunction) _wrap_FX_Window_getFocus, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getLast", (PyCFunction) _wrap_FX_Window_getLast, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getFirst", (PyCFunction) _wrap_FX_Window_getFirst, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getPrev", (PyCFunction) _wrap_FX_Window_getPrev, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getNext", (PyCFunction) _wrap_FX_Window_getNext, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getRoot", (PyCFunction) _wrap_FX_Window_getRoot, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getShell", (PyCFunction) _wrap_FX_Window_getShell, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getOwner", (PyCFunction) _wrap_FX_Window_getOwner, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_getParent", (PyCFunction) _wrap_FX_Window_getParent, METH_VARARGS | METH_KEYWORDS },
	 { "new_FX_Window", (PyCFunction) _wrap_new_FX_Window, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdDelete", (PyCFunction) _wrap_FX_Window_onCmdDelete, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onUpdYes", (PyCFunction) _wrap_FX_Window_onUpdYes, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdUpdate", (PyCFunction) _wrap_FX_Window_onCmdUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdDisable", (PyCFunction) _wrap_FX_Window_onCmdDisable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdEnable", (PyCFunction) _wrap_FX_Window_onCmdEnable, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdLower", (PyCFunction) _wrap_FX_Window_onCmdLower, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdRaise", (PyCFunction) _wrap_FX_Window_onCmdRaise, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdToggleShown", (PyCFunction) _wrap_FX_Window_onCmdToggleShown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onUpdToggleShown", (PyCFunction) _wrap_FX_Window_onUpdToggleShown, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdHide", (PyCFunction) _wrap_FX_Window_onCmdHide, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onCmdShow", (PyCFunction) _wrap_FX_Window_onCmdShow, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDNDRequest", (PyCFunction) _wrap_FX_Window_onDNDRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDNDDrop", (PyCFunction) _wrap_FX_Window_onDNDDrop, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDNDMotion", (PyCFunction) _wrap_FX_Window_onDNDMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDNDLeave", (PyCFunction) _wrap_FX_Window_onDNDLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDNDEnter", (PyCFunction) _wrap_FX_Window_onDNDEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onClipboardRequest", (PyCFunction) _wrap_FX_Window_onClipboardRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onClipboardGained", (PyCFunction) _wrap_FX_Window_onClipboardGained, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onClipboardLost", (PyCFunction) _wrap_FX_Window_onClipboardLost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onSelectionRequest", (PyCFunction) _wrap_FX_Window_onSelectionRequest, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onSelectionGained", (PyCFunction) _wrap_FX_Window_onSelectionGained, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onSelectionLost", (PyCFunction) _wrap_FX_Window_onSelectionLost, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onFocusOut", (PyCFunction) _wrap_FX_Window_onFocusOut, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onFocusIn", (PyCFunction) _wrap_FX_Window_onFocusIn, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onFocusSelf", (PyCFunction) _wrap_FX_Window_onFocusSelf, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDestroy", (PyCFunction) _wrap_FX_Window_onDestroy, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onUngrabbed", (PyCFunction) _wrap_FX_Window_onUngrabbed, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onKeyRelease", (PyCFunction) _wrap_FX_Window_onKeyRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onKeyPress", (PyCFunction) _wrap_FX_Window_onKeyPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onDragged", (PyCFunction) _wrap_FX_Window_onDragged, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onEndDrag", (PyCFunction) _wrap_FX_Window_onEndDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onBeginDrag", (PyCFunction) _wrap_FX_Window_onBeginDrag, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onRightBtnRelease", (PyCFunction) _wrap_FX_Window_onRightBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onRightBtnPress", (PyCFunction) _wrap_FX_Window_onRightBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onMiddleBtnRelease", (PyCFunction) _wrap_FX_Window_onMiddleBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onMiddleBtnPress", (PyCFunction) _wrap_FX_Window_onMiddleBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onLeftBtnRelease", (PyCFunction) _wrap_FX_Window_onLeftBtnRelease, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onLeftBtnPress", (PyCFunction) _wrap_FX_Window_onLeftBtnPress, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onLeave", (PyCFunction) _wrap_FX_Window_onLeave, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onEnter", (PyCFunction) _wrap_FX_Window_onEnter, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onMouseWheel", (PyCFunction) _wrap_FX_Window_onMouseWheel, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onMotion", (PyCFunction) _wrap_FX_Window_onMotion, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onUpdate", (PyCFunction) _wrap_FX_Window_onUpdate, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onConfigure", (PyCFunction) _wrap_FX_Window_onConfigure, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onUnmap", (PyCFunction) _wrap_FX_Window_onUnmap, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onMap", (PyCFunction) _wrap_FX_Window_onMap, METH_VARARGS | METH_KEYWORDS },
	 { "FX_Window_onPaint", (PyCFunction) _wrap_FX_Window_onPaint, METH_VARARGS | METH_KEYWORDS },
	 { NULL, NULL }
};
#ifdef __cplusplus
}
#endif
/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "_class_FXPyBMPImage","_FXPyBMPImage",0},
    { "_class_FXPyICOImage","_FXPyICOImage",0},
    { "_FXPyDelegator","_class_FXPyDelegator",0},
    { "_signed_long","_FXTime",0},
    { "_signed_long","_long",0},
    { "_class_FXPyPCXImage","_FXPyPCXImage",0},
    { "_class_FXTIFIcon","_FXTIFIcon",0},
    { "_double","_FXdouble",0},
    { "_FXPyObject","_class_FXPyObject",0},
    { "_FXPyGIFIcon","_class_FXPyGIFIcon",0},
    { "_FXBMPIcon","_class_FXBMPIcon",0},
    { "_FXICOIcon","_class_FXICOIcon",0},
    { "_class_FXSettings","_FXSettings",0},
    { "_class_FXRegistry","_FXRegistry",0},
    { "_class_FXMainWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXMainWindow},
    { "_class_FXMainWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXMainWindow},
    { "_class_FXMainWindow","_FXMainWindow",0},
    { "_FXTopWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXTopWindow},
    { "_FXTopWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXTopWindow},
    { "_FXTopWindow","_class_FXMainWindow",SwigFXMainWindowToFXTopWindow},
    { "_FXTopWindow","_FXMainWindow",SwigFXMainWindowToFXTopWindow},
    { "_FXTopWindow","_class_FXPyTopWindow",SwigFXPyTopWindowToFXTopWindow},
    { "_FXTopWindow","_FXPyTopWindow",SwigFXPyTopWindowToFXTopWindow},
    { "_FXTopWindow","_class_FXTopWindow",0},
    { "_class_FXVisual","_FXVisual",0},
    { "_FXIcon","_class_FXIcon",0},
    { "_FXTGAImage","_class_FXTGAImage",0},
    { "_class_FXPyTGAIcon","_FXPyTGAIcon",0},
    { "_FXPyStream","_class_FXPyStream",0},
    { "_class_FXPyDict","_FXPyDict",0},
    { "_class_FXRegion","_FXRegion",0},
    { "_FXPyPNGImage","_class_FXPyPNGImage",0},
    { "_class_FXAccelTable","_FXAccelTable",0},
    { "_FXPyApp","_class_FXPyApp",0},
    { "_class_FXPyId","_FXPyId",0},
    { "_class_FXCanvas","_class_FXPyCanvas",SwigFXPyCanvasToFXCanvas},
    { "_class_FXCanvas","_FXPyCanvas",SwigFXPyCanvasToFXCanvas},
    { "_class_FXCanvas","_FXCanvas",0},
    { "_FXApp","_class_FXApp",0},
    { "_class_FXPyRecentFiles","_FXPyRecentFiles",0},
    { "_class_FXPyDebugTarget","_FXPyDebugTarget",0},
    { "_class_FXCommand","_FXCommand",0},
    { "_class_FXPyFrame","_FXPyFrame",0},
    { "_long","_FXPixel",0},
    { "_long","_FXTime",0},
    { "_long","_unsigned_long",0},
    { "_long","_signed_long",0},
    { "_FXComposite","_class_FXPyMainWindow",SwigFXPyMainWindowToFXComposite},
    { "_FXComposite","_FXPyMainWindow",SwigFXPyMainWindowToFXComposite},
    { "_FXComposite","_class_FXMainWindow",SwigFXMainWindowToFXComposite},
    { "_FXComposite","_FXMainWindow",SwigFXMainWindowToFXComposite},
    { "_FXComposite","_class_FXPyTopWindow",SwigFXPyTopWindowToFXComposite},
    { "_FXComposite","_FXPyTopWindow",SwigFXPyTopWindowToFXComposite},
    { "_FXComposite","_class_FXTopWindow",SwigFXTopWindowToFXComposite},
    { "_FXComposite","_FXTopWindow",SwigFXTopWindowToFXComposite},
    { "_FXComposite","_class_FXPyPopup",SwigFXPyPopupToFXComposite},
    { "_FXComposite","_FXPyPopup",SwigFXPyPopupToFXComposite},
    { "_FXComposite","_class_FXPopup",SwigFXPopupToFXComposite},
    { "_FXComposite","_FXPopup",SwigFXPopupToFXComposite},
    { "_FXComposite","_class_FXPyShell",SwigFXPyShellToFXComposite},
    { "_FXComposite","_FXPyShell",SwigFXPyShellToFXComposite},
    { "_FXComposite","_class_FXShell",SwigFXShellToFXComposite},
    { "_FXComposite","_FXShell",SwigFXShellToFXComposite},
    { "_FXComposite","_class_FXPyRootWindow",SwigFXPyRootWindowToFXComposite},
    { "_FXComposite","_FXPyRootWindow",SwigFXPyRootWindowToFXComposite},
    { "_FXComposite","_class_FXRootWindow",SwigFXRootWindowToFXComposite},
    { "_FXComposite","_FXRootWindow",SwigFXRootWindowToFXComposite},
    { "_FXComposite","_class_FXPyComposite",SwigFXPyCompositeToFXComposite},
    { "_FXComposite","_FXPyComposite",SwigFXPyCompositeToFXComposite},
    { "_FXComposite","_class_FXComposite",0},
    { "_FXRGBIcon","_class_FXRGBIcon",0},
    { "_FXPrinter","_struct_FXPrinter",0},
    { "_class_FXId","_class_FXPyMainWindow",SwigFXPyMainWindowToFXId},
    { "_class_FXId","_FXPyMainWindow",SwigFXPyMainWindowToFXId},
    { "_class_FXId","_class_FXMainWindow",SwigFXMainWindowToFXId},
    { "_class_FXId","_FXMainWindow",SwigFXMainWindowToFXId},
    { "_class_FXId","_class_FXPyTopWindow",SwigFXPyTopWindowToFXId},
    { "_class_FXId","_FXPyTopWindow",SwigFXPyTopWindowToFXId},
    { "_class_FXId","_class_FXTopWindow",SwigFXTopWindowToFXId},
    { "_class_FXId","_FXTopWindow",SwigFXTopWindowToFXId},
    { "_class_FXId","_class_FXPyPopup",SwigFXPyPopupToFXId},
    { "_class_FXId","_FXPyPopup",SwigFXPyPopupToFXId},
    { "_class_FXId","_class_FXPopup",SwigFXPopupToFXId},
    { "_class_FXId","_FXPopup",SwigFXPopupToFXId},
    { "_class_FXId","_class_FXPyShell",SwigFXPyShellToFXId},
    { "_class_FXId","_FXPyShell",SwigFXPyShellToFXId},
    { "_class_FXId","_class_FXShell",SwigFXShellToFXId},
    { "_class_FXId","_FXShell",SwigFXShellToFXId},
    { "_class_FXId","_class_FXPyCanvas",SwigFXPyCanvasToFXId},
    { "_class_FXId","_FXPyCanvas",SwigFXPyCanvasToFXId},
    { "_class_FXId","_class_FXCanvas",SwigFXCanvasToFXId},
    { "_class_FXId","_FXCanvas",SwigFXCanvasToFXId},
    { "_class_FXId","_class_FXPyRootWindow",SwigFXPyRootWindowToFXId},
    { "_class_FXId","_FXPyRootWindow",SwigFXPyRootWindowToFXId},
    { "_class_FXId","_class_FXRootWindow",SwigFXRootWindowToFXId},
    { "_class_FXId","_FXRootWindow",SwigFXRootWindowToFXId},
    { "_class_FXId","_class_FXPyFrame",SwigFXPyFrameToFXId},
    { "_class_FXId","_FXPyFrame",SwigFXPyFrameToFXId},
    { "_class_FXId","_class_FXFrame",SwigFXFrameToFXId},
    { "_class_FXId","_FXFrame",SwigFXFrameToFXId},
    { "_class_FXId","_class_FXPyComposite",SwigFXPyCompositeToFXId},
    { "_class_FXId","_FXPyComposite",SwigFXPyCompositeToFXId},
    { "_class_FXId","_class_FXComposite",SwigFXCompositeToFXId},
    { "_class_FXId","_FXComposite",SwigFXCompositeToFXId},
    { "_class_FXId","_class_FXPyWindow",SwigFXPyWindowToFXId},
    { "_class_FXId","_FXPyWindow",SwigFXPyWindowToFXId},
    { "_class_FXId","_class_FXWindow",SwigFXWindowToFXId},
    { "_class_FXId","_FXWindow",SwigFXWindowToFXId},
    { "_class_FXId","_FXId",0},
    { "_float","_FXfloat",0},
    { "_FXPyDrawable","_class_FXPyDrawable",0},
    { "_class_FXPyXPMIcon","_FXPyXPMIcon",0},
    { "_FXshort","_short",0},
    { "_FXshort","_signed_short",0},
    { "_FXshort","_unsigned_short",0},
    { "_FXshort","_FXushort",0},
    { "_FXFontDesc","_struct_FXFontDesc",0},
    { "_FXSize","_class_FXSize",0},
    { "_class_FXBMPIcon","_FXBMPIcon",0},
    { "_class_FXICOIcon","_FXICOIcon",0},
    { "_FXPyShell","_class_FXPyShell",0},
    { "_class_FXPyTIFIcon","_FXPyTIFIcon",0},
    { "_FXJPGImage","_class_FXJPGImage",0},
    { "_class_FXTIFImage","_FXTIFImage",0},
    { "_FXPyPCXIcon","_class_FXPyPCXIcon",0},
    { "_class_FXIcon","_FXIcon",0},
    { "_FXPopup","_class_FXPyPopup",SwigFXPyPopupToFXPopup},
    { "_FXPopup","_FXPyPopup",SwigFXPyPopupToFXPopup},
    { "_FXPopup","_class_FXPopup",0},
    { "_FXint","_FXInputHandle",0},
    { "_FXint","_FXDragType",0},
    { "_FXint","_FXHotKey",0},
    { "_FXint","_FXColor",0},
    { "_FXint","_FXID",0},
    { "_FXint","_FXSelector",0},
    { "_FXint","_int",0},
    { "_FXint","_signed_int",0},
    { "_FXint","_unsigned_int",0},
    { "_FXint","_FXuint",0},
    { "_FXPyPNGIcon","_class_FXPyPNGIcon",0},
    { "_class_FXWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXWindow},
    { "_class_FXWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXWindow},
    { "_class_FXWindow","_class_FXMainWindow",SwigFXMainWindowToFXWindow},
    { "_class_FXWindow","_FXMainWindow",SwigFXMainWindowToFXWindow},
    { "_class_FXWindow","_class_FXPyTopWindow",SwigFXPyTopWindowToFXWindow},
    { "_class_FXWindow","_FXPyTopWindow",SwigFXPyTopWindowToFXWindow},
    { "_class_FXWindow","_class_FXTopWindow",SwigFXTopWindowToFXWindow},
    { "_class_FXWindow","_FXTopWindow",SwigFXTopWindowToFXWindow},
    { "_class_FXWindow","_class_FXPyPopup",SwigFXPyPopupToFXWindow},
    { "_class_FXWindow","_FXPyPopup",SwigFXPyPopupToFXWindow},
    { "_class_FXWindow","_class_FXPopup",SwigFXPopupToFXWindow},
    { "_class_FXWindow","_FXPopup",SwigFXPopupToFXWindow},
    { "_class_FXWindow","_class_FXPyShell",SwigFXPyShellToFXWindow},
    { "_class_FXWindow","_FXPyShell",SwigFXPyShellToFXWindow},
    { "_class_FXWindow","_class_FXShell",SwigFXShellToFXWindow},
    { "_class_FXWindow","_FXShell",SwigFXShellToFXWindow},
    { "_class_FXWindow","_class_FXPyCanvas",SwigFXPyCanvasToFXWindow},
    { "_class_FXWindow","_FXPyCanvas",SwigFXPyCanvasToFXWindow},
    { "_class_FXWindow","_class_FXCanvas",SwigFXCanvasToFXWindow},
    { "_class_FXWindow","_FXCanvas",SwigFXCanvasToFXWindow},
    { "_class_FXWindow","_class_FXPyRootWindow",SwigFXPyRootWindowToFXWindow},
    { "_class_FXWindow","_FXPyRootWindow",SwigFXPyRootWindowToFXWindow},
    { "_class_FXWindow","_class_FXRootWindow",SwigFXRootWindowToFXWindow},
    { "_class_FXWindow","_FXRootWindow",SwigFXRootWindowToFXWindow},
    { "_class_FXWindow","_class_FXPyFrame",SwigFXPyFrameToFXWindow},
    { "_class_FXWindow","_FXPyFrame",SwigFXPyFrameToFXWindow},
    { "_class_FXWindow","_class_FXFrame",SwigFXFrameToFXWindow},
    { "_class_FXWindow","_FXFrame",SwigFXFrameToFXWindow},
    { "_class_FXWindow","_class_FXPyComposite",SwigFXPyCompositeToFXWindow},
    { "_class_FXWindow","_FXPyComposite",SwigFXPyCompositeToFXWindow},
    { "_class_FXWindow","_class_FXComposite",SwigFXCompositeToFXWindow},
    { "_class_FXWindow","_FXComposite",SwigFXCompositeToFXWindow},
    { "_class_FXWindow","_class_FXPyWindow",SwigFXPyWindowToFXWindow},
    { "_class_FXWindow","_FXPyWindow",SwigFXPyWindowToFXWindow},
    { "_class_FXWindow","_FXWindow",0},
    { "_FXPyRootWindow","_class_FXPyRootWindow",0},
    { "_FXushort","_FXshort",0},
    { "_FXushort","_unsigned_short",0},
    { "_FXushort","_short",0},
    { "_class_FXPoint","_FXPoint",0},
    { "_class_FXPyPNGImage","_FXPyPNGImage",0},
    { "_FXPyVisual","_class_FXPyVisual",0},
    { "_class_FXRectangle","_FXRectangle",0},
    { "_class_FXPyFont","_FXPyFont",0},
    { "_FXPyFileStream","_class_FXPyFileStream",0},
    { "_FXRGBImage","_class_FXRGBImage",0},
    { "_FXRootWindow","_class_FXPyRootWindow",SwigFXPyRootWindowToFXRootWindow},
    { "_FXRootWindow","_FXPyRootWindow",SwigFXPyRootWindowToFXRootWindow},
    { "_FXRootWindow","_class_FXRootWindow",0},
    { "_FXPyXPMImage","_class_FXPyXPMImage",0},
    { "_FXPyDataTarget","_class_FXPyDataTarget",0},
    { "_FXPyTopWindow","_class_FXPyTopWindow",0},
    { "_FXObject","_class_FXPyMainWindow",SwigFXPyMainWindowToFXObject},
    { "_FXObject","_FXPyMainWindow",SwigFXPyMainWindowToFXObject},
    { "_FXObject","_class_FXMainWindow",SwigFXMainWindowToFXObject},
    { "_FXObject","_FXMainWindow",SwigFXMainWindowToFXObject},
    { "_FXObject","_class_FXPyTopWindow",SwigFXPyTopWindowToFXObject},
    { "_FXObject","_FXPyTopWindow",SwigFXPyTopWindowToFXObject},
    { "_FXObject","_class_FXTopWindow",SwigFXTopWindowToFXObject},
    { "_FXObject","_FXTopWindow",SwigFXTopWindowToFXObject},
    { "_FXObject","_class_FXPyPopup",SwigFXPyPopupToFXObject},
    { "_FXObject","_FXPyPopup",SwigFXPyPopupToFXObject},
    { "_FXObject","_class_FXPopup",SwigFXPopupToFXObject},
    { "_FXObject","_FXPopup",SwigFXPopupToFXObject},
    { "_FXObject","_class_FXPyShell",SwigFXPyShellToFXObject},
    { "_FXObject","_FXPyShell",SwigFXPyShellToFXObject},
    { "_FXObject","_class_FXShell",SwigFXShellToFXObject},
    { "_FXObject","_FXShell",SwigFXShellToFXObject},
    { "_FXObject","_class_FXPyCanvas",SwigFXPyCanvasToFXObject},
    { "_FXObject","_FXPyCanvas",SwigFXPyCanvasToFXObject},
    { "_FXObject","_class_FXCanvas",SwigFXCanvasToFXObject},
    { "_FXObject","_FXCanvas",SwigFXCanvasToFXObject},
    { "_FXObject","_class_FXPyRootWindow",SwigFXPyRootWindowToFXObject},
    { "_FXObject","_FXPyRootWindow",SwigFXPyRootWindowToFXObject},
    { "_FXObject","_class_FXRootWindow",SwigFXRootWindowToFXObject},
    { "_FXObject","_FXRootWindow",SwigFXRootWindowToFXObject},
    { "_FXObject","_class_FXPyFrame",SwigFXPyFrameToFXObject},
    { "_FXObject","_FXPyFrame",SwigFXPyFrameToFXObject},
    { "_FXObject","_class_FXFrame",SwigFXFrameToFXObject},
    { "_FXObject","_FXFrame",SwigFXFrameToFXObject},
    { "_FXObject","_class_FXPyComposite",SwigFXPyCompositeToFXObject},
    { "_FXObject","_FXPyComposite",SwigFXPyCompositeToFXObject},
    { "_FXObject","_class_FXComposite",SwigFXCompositeToFXObject},
    { "_FXObject","_FXComposite",SwigFXCompositeToFXObject},
    { "_FXObject","_class_FXPyWindow",SwigFXPyWindowToFXObject},
    { "_FXObject","_FXPyWindow",SwigFXPyWindowToFXObject},
    { "_FXObject","_class_FXWindow",SwigFXWindowToFXObject},
    { "_FXObject","_FXWindow",SwigFXWindowToFXObject},
    { "_FXObject","_class_FXObject",0},
    { "_FXPyGIFImage","_class_FXPyGIFImage",0},
    { "_FXBMPImage","_class_FXBMPImage",0},
    { "_FXICOImage","_class_FXICOImage",0},
    { "_class_FXRGBIcon","_FXRGBIcon",0},
    { "_FXRecentFiles","_class_FXRecentFiles",0},
    { "_FXDebugTarget","_class_FXDebugTarget",0},
    { "_class_FXPyCommand","_FXPyCommand",0},
    { "_FXPCXImage","_class_FXPCXImage",0},
    { "_FXFileStream","_class_FXFileStream",0},
    { "_class_FXPyDelegator","_FXPyDelegator",0},
    { "_FXPyCanvas","_class_FXPyCanvas",0},
    { "_class_FXPyDrawable","_FXPyDrawable",0},
    { "_FXPyImage","_class_FXPyImage",0},
    { "_FXGIFIcon","_class_FXGIFIcon",0},
    { "_FXColor","_FXInputHandle",0},
    { "_FXColor","_FXDragType",0},
    { "_FXColor","_FXHotKey",0},
    { "_FXColor","_FXuint",0},
    { "_FXColor","_int",0},
    { "_FXColor","_unsigned_int",0},
    { "_FXColor","_FXint",0},
    { "_FXColor","_FXSelector",0},
    { "_FXColor","_FXID",0},
    { "_FXPyJPGIcon","_class_FXPyJPGIcon",0},
    { "_FXDataTarget","_class_FXDataTarget",0},
    { "_FXTime","_FXPixel",0},
    { "_FXTime","_long",0},
    { "_FXTime","_signed_long",0},
    { "_FXTime","_unsigned_long",0},
    { "_FXHotKey","_FXInputHandle",0},
    { "_FXHotKey","_FXDragType",0},
    { "_FXHotKey","_FXuint",0},
    { "_FXHotKey","_int",0},
    { "_FXHotKey","_unsigned_int",0},
    { "_FXHotKey","_FXint",0},
    { "_FXHotKey","_FXSelector",0},
    { "_FXHotKey","_FXID",0},
    { "_FXHotKey","_FXColor",0},
    { "_class_FXSize","_FXSize",0},
    { "_class_FXPyObject","_FXPyObject",0},
    { "_class_FXPyShell","_FXPyShell",0},
    { "_struct_FXFontDesc","_FXFontDesc",0},
    { "_class_FXPyBMPIcon","_FXPyBMPIcon",0},
    { "_class_FXPyICOIcon","_FXPyICOIcon",0},
    { "_char","_FXchar",0},
    { "_FXdouble","_double",0},
    { "_FXStream","_class_FXStream",0},
    { "_FXPyStringDict","_class_FXPyStringDict",0},
    { "_FXFrame","_class_FXPyFrame",SwigFXPyFrameToFXFrame},
    { "_FXFrame","_FXPyFrame",SwigFXPyFrameToFXFrame},
    { "_FXFrame","_class_FXFrame",0},
    { "_FXObjectPtr","_FXObject_p",0},
    { "_FXPyComposite","_class_FXPyComposite",0},
    { "_class_FXDelegator","_FXDelegator",0},
    { "_FXbool","_FXuchar",0},
    { "_FXbool","_unsigned_char",0},
    { "_class_FXTGAImage","_FXTGAImage",0},
    { "_class_FXPyStream","_FXPyStream",0},
    { "_FXStringDict","_class_FXStringDict",0},
    { "_class_FXPyApp","_FXPyApp",0},
    { "_FXPyWindow","_class_FXPyWindow",0},
    { "_class_FXRootWindow","_class_FXPyRootWindow",SwigFXPyRootWindowToFXRootWindow},
    { "_class_FXRootWindow","_FXPyRootWindow",SwigFXPyRootWindowToFXRootWindow},
    { "_class_FXRootWindow","_FXRootWindow",0},
    { "_class_FXPyXPMImage","_FXPyXPMImage",0},
    { "_class_FXPyGIFImage","_FXPyGIFImage",0},
    { "_class_FXFileStream","_FXFileStream",0},
    { "_class_FXPyMainWindow","_FXPyMainWindow",0},
    { "_class_FXPyImage","_FXPyImage",0},
    { "_class_FXGIFIcon","_FXGIFIcon",0},
    { "_class_FXPyRGBIcon","_FXPyRGBIcon",0},
    { "_unsigned_long","_FXPixel",0},
    { "_unsigned_long","_FXTime",0},
    { "_unsigned_long","_long",0},
    { "_class_FXDataTarget","_FXDataTarget",0},
    { "_FXPCXIcon","_class_FXPCXIcon",0},
    { "_class_FXJPGImage","_FXJPGImage",0},
    { "_class_FXPyIcon","_FXPyIcon",0},
    { "_class_FXPyAccelTable","_FXPyAccelTable",0},
    { "_FXVisual","_class_FXVisual",0},
    { "_FXPyTIFImage","_class_FXPyTIFImage",0},
    { "_FXPNGIcon","_class_FXPNGIcon",0},
    { "_class_FXPopup","_class_FXPyPopup",SwigFXPyPopupToFXPopup},
    { "_class_FXPopup","_FXPyPopup",SwigFXPyPopupToFXPopup},
    { "_class_FXPopup","_FXPopup",0},
    { "_signed_int","_FXInputHandle",0},
    { "_signed_int","_FXint",0},
    { "_signed_int","_int",0},
    { "_FXPNGImage","_class_FXPNGImage",0},
    { "_FXPyTGAIcon","_class_FXPyTGAIcon",0},
    { "_FXPyDict","_class_FXPyDict",0},
    { "_class_FXStringDict","_FXStringDict",0},
    { "_FXRegion","_class_FXRegion",0},
    { "_FXRawEvent","__XEvent",0},
    { "_class_FXPyVisual","_FXPyVisual",0},
    { "_FXShell","_class_FXPyMainWindow",SwigFXPyMainWindowToFXShell},
    { "_FXShell","_FXPyMainWindow",SwigFXPyMainWindowToFXShell},
    { "_FXShell","_class_FXMainWindow",SwigFXMainWindowToFXShell},
    { "_FXShell","_FXMainWindow",SwigFXMainWindowToFXShell},
    { "_FXShell","_class_FXPyTopWindow",SwigFXPyTopWindowToFXShell},
    { "_FXShell","_FXPyTopWindow",SwigFXPyTopWindowToFXShell},
    { "_FXShell","_class_FXTopWindow",SwigFXTopWindowToFXShell},
    { "_FXShell","_FXTopWindow",SwigFXTopWindowToFXShell},
    { "_FXShell","_class_FXPyPopup",SwigFXPyPopupToFXShell},
    { "_FXShell","_FXPyPopup",SwigFXPyPopupToFXShell},
    { "_FXShell","_class_FXPopup",SwigFXPopupToFXShell},
    { "_FXShell","_FXPopup",SwigFXPopupToFXShell},
    { "_FXShell","_class_FXPyShell",SwigFXPyShellToFXShell},
    { "_FXShell","_FXPyShell",SwigFXPyShellToFXShell},
    { "_FXShell","_class_FXShell",0},
    { "_FXCanvas","_class_FXPyCanvas",SwigFXPyCanvasToFXCanvas},
    { "_FXCanvas","_FXPyCanvas",SwigFXPyCanvasToFXCanvas},
    { "_FXCanvas","_class_FXCanvas",0},
    { "_class_FXRGBImage","_FXRGBImage",0},
    { "_unsigned_short","_FXshort",0},
    { "_unsigned_short","_FXushort",0},
    { "_unsigned_short","_short",0},
    { "_class_FXPyTopWindow","_FXPyTopWindow",0},
    { "_class_FXBMPImage","_FXBMPImage",0},
    { "_class_FXICOImage","_FXICOImage",0},
    { "_class_FXRecentFiles","_FXRecentFiles",0},
    { "_class_FXDebugTarget","_FXDebugTarget",0},
    { "_FXDrawable","_class_FXPyMainWindow",SwigFXPyMainWindowToFXDrawable},
    { "_FXDrawable","_FXPyMainWindow",SwigFXPyMainWindowToFXDrawable},
    { "_FXDrawable","_class_FXMainWindow",SwigFXMainWindowToFXDrawable},
    { "_FXDrawable","_FXMainWindow",SwigFXMainWindowToFXDrawable},
    { "_FXDrawable","_class_FXPyTopWindow",SwigFXPyTopWindowToFXDrawable},
    { "_FXDrawable","_FXPyTopWindow",SwigFXPyTopWindowToFXDrawable},
    { "_FXDrawable","_class_FXTopWindow",SwigFXTopWindowToFXDrawable},
    { "_FXDrawable","_FXTopWindow",SwigFXTopWindowToFXDrawable},
    { "_FXDrawable","_class_FXPyPopup",SwigFXPyPopupToFXDrawable},
    { "_FXDrawable","_FXPyPopup",SwigFXPyPopupToFXDrawable},
    { "_FXDrawable","_class_FXPopup",SwigFXPopupToFXDrawable},
    { "_FXDrawable","_FXPopup",SwigFXPopupToFXDrawable},
    { "_FXDrawable","_class_FXPyShell",SwigFXPyShellToFXDrawable},
    { "_FXDrawable","_FXPyShell",SwigFXPyShellToFXDrawable},
    { "_FXDrawable","_class_FXShell",SwigFXShellToFXDrawable},
    { "_FXDrawable","_FXShell",SwigFXShellToFXDrawable},
    { "_FXDrawable","_class_FXPyCanvas",SwigFXPyCanvasToFXDrawable},
    { "_FXDrawable","_FXPyCanvas",SwigFXPyCanvasToFXDrawable},
    { "_FXDrawable","_class_FXCanvas",SwigFXCanvasToFXDrawable},
    { "_FXDrawable","_FXCanvas",SwigFXCanvasToFXDrawable},
    { "_FXDrawable","_class_FXPyRootWindow",SwigFXPyRootWindowToFXDrawable},
    { "_FXDrawable","_FXPyRootWindow",SwigFXPyRootWindowToFXDrawable},
    { "_FXDrawable","_class_FXRootWindow",SwigFXRootWindowToFXDrawable},
    { "_FXDrawable","_FXRootWindow",SwigFXRootWindowToFXDrawable},
    { "_FXDrawable","_class_FXPyFrame",SwigFXPyFrameToFXDrawable},
    { "_FXDrawable","_FXPyFrame",SwigFXPyFrameToFXDrawable},
    { "_FXDrawable","_class_FXFrame",SwigFXFrameToFXDrawable},
    { "_FXDrawable","_FXFrame",SwigFXFrameToFXDrawable},
    { "_FXDrawable","_class_FXPyComposite",SwigFXPyCompositeToFXDrawable},
    { "_FXDrawable","_FXPyComposite",SwigFXPyCompositeToFXDrawable},
    { "_FXDrawable","_class_FXComposite",SwigFXCompositeToFXDrawable},
    { "_FXDrawable","_FXComposite",SwigFXCompositeToFXDrawable},
    { "_FXDrawable","_class_FXPyWindow",SwigFXPyWindowToFXDrawable},
    { "_FXDrawable","_FXPyWindow",SwigFXPyWindowToFXDrawable},
    { "_FXDrawable","_class_FXWindow",SwigFXWindowToFXDrawable},
    { "_FXDrawable","_FXWindow",SwigFXWindowToFXDrawable},
    { "_FXDrawable","_class_FXDrawable",0},
    { "_class_FXPCXImage","_FXPCXImage",0},
    { "_FXJPGIcon","_class_FXJPGIcon",0},
    { "_class_FXPyCanvas","_FXPyCanvas",0},
    { "_FXPyXPMIcon","_class_FXPyXPMIcon",0},
    { "_FXObject_p","_FXObjectPtr",0},
    { "_FXID","_FXInputHandle",0},
    { "_FXID","_FXDragType",0},
    { "_FXID","_FXHotKey",0},
    { "_FXID","_FXColor",0},
    { "_FXID","_unsigned_int",0},
    { "_FXID","_int",0},
    { "_FXID","_FXuint",0},
    { "_FXID","_FXint",0},
    { "_FXID","_FXSelector",0},
    { "_class_FXPyGIFIcon","_FXPyGIFIcon",0},
    { "_struct_FXPrinter","_FXPrinter",0},
    { "_FXPyTIFIcon","_class_FXPyTIFIcon",0},
    { "_class_FXPCXIcon","_FXPCXIcon",0},
    { "_signed_short","_FXshort",0},
    { "_signed_short","_short",0},
    { "_class_FXFrame","_class_FXPyFrame",SwigFXPyFrameToFXFrame},
    { "_class_FXFrame","_FXPyFrame",SwigFXPyFrameToFXFrame},
    { "_class_FXFrame","_FXFrame",0},
    { "_class_FXTopWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXTopWindow},
    { "_class_FXTopWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXTopWindow},
    { "_class_FXTopWindow","_class_FXMainWindow",SwigFXMainWindowToFXTopWindow},
    { "_class_FXTopWindow","_FXMainWindow",SwigFXMainWindowToFXTopWindow},
    { "_class_FXTopWindow","_class_FXPyTopWindow",SwigFXPyTopWindowToFXTopWindow},
    { "_class_FXTopWindow","_FXPyTopWindow",SwigFXPyTopWindowToFXTopWindow},
    { "_class_FXTopWindow","_FXTopWindow",0},
    { "_FXfloat","_float",0},
    { "_FXEvent","_struct_FXEvent",0},
    { "_class_FXPyComposite","_FXPyComposite",0},
    { "_class_FXPyTIFImage","_FXPyTIFImage",0},
    { "_class_FXPNGIcon","_FXPNGIcon",0},
    { "_unsigned_char","_FXbool",0},
    { "_unsigned_char","_FXuchar",0},
    { "_FXPixel","_unsigned_long",0},
    { "_FXPixel","_long",0},
    { "_FXPixel","_FXTime",0},
    { "_FXImage","_class_FXImage",0},
    { "_FXWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXWindow},
    { "_FXWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXWindow},
    { "_FXWindow","_class_FXMainWindow",SwigFXMainWindowToFXWindow},
    { "_FXWindow","_FXMainWindow",SwigFXMainWindowToFXWindow},
    { "_FXWindow","_class_FXPyTopWindow",SwigFXPyTopWindowToFXWindow},
    { "_FXWindow","_FXPyTopWindow",SwigFXPyTopWindowToFXWindow},
    { "_FXWindow","_class_FXTopWindow",SwigFXTopWindowToFXWindow},
    { "_FXWindow","_FXTopWindow",SwigFXTopWindowToFXWindow},
    { "_FXWindow","_class_FXPyPopup",SwigFXPyPopupToFXWindow},
    { "_FXWindow","_FXPyPopup",SwigFXPyPopupToFXWindow},
    { "_FXWindow","_class_FXPopup",SwigFXPopupToFXWindow},
    { "_FXWindow","_FXPopup",SwigFXPopupToFXWindow},
    { "_FXWindow","_class_FXPyShell",SwigFXPyShellToFXWindow},
    { "_FXWindow","_FXPyShell",SwigFXPyShellToFXWindow},
    { "_FXWindow","_class_FXShell",SwigFXShellToFXWindow},
    { "_FXWindow","_FXShell",SwigFXShellToFXWindow},
    { "_FXWindow","_class_FXPyCanvas",SwigFXPyCanvasToFXWindow},
    { "_FXWindow","_FXPyCanvas",SwigFXPyCanvasToFXWindow},
    { "_FXWindow","_class_FXCanvas",SwigFXCanvasToFXWindow},
    { "_FXWindow","_FXCanvas",SwigFXCanvasToFXWindow},
    { "_FXWindow","_class_FXPyRootWindow",SwigFXPyRootWindowToFXWindow},
    { "_FXWindow","_FXPyRootWindow",SwigFXPyRootWindowToFXWindow},
    { "_FXWindow","_class_FXRootWindow",SwigFXRootWindowToFXWindow},
    { "_FXWindow","_FXRootWindow",SwigFXRootWindowToFXWindow},
    { "_FXWindow","_class_FXPyFrame",SwigFXPyFrameToFXWindow},
    { "_FXWindow","_FXPyFrame",SwigFXPyFrameToFXWindow},
    { "_FXWindow","_class_FXFrame",SwigFXFrameToFXWindow},
    { "_FXWindow","_FXFrame",SwigFXFrameToFXWindow},
    { "_FXWindow","_class_FXPyComposite",SwigFXPyCompositeToFXWindow},
    { "_FXWindow","_FXPyComposite",SwigFXPyCompositeToFXWindow},
    { "_FXWindow","_class_FXComposite",SwigFXCompositeToFXWindow},
    { "_FXWindow","_FXComposite",SwigFXCompositeToFXWindow},
    { "_FXWindow","_class_FXPyWindow",SwigFXPyWindowToFXWindow},
    { "_FXWindow","_FXPyWindow",SwigFXPyWindowToFXWindow},
    { "_FXWindow","_class_FXWindow",0},
    { "_unsigned_int","_FXInputHandle",0},
    { "_unsigned_int","_FXDragType",0},
    { "_unsigned_int","_FXHotKey",0},
    { "_unsigned_int","_FXColor",0},
    { "_unsigned_int","_FXID",0},
    { "_unsigned_int","_FXSelector",0},
    { "_unsigned_int","_FXint",0},
    { "_unsigned_int","_FXuint",0},
    { "_unsigned_int","_int",0},
    { "_FXPyTGAImage","_class_FXPyTGAImage",0},
    { "_FXDict","_class_FXDict",0},
    { "_FXuint","_FXInputHandle",0},
    { "_FXuint","_FXDragType",0},
    { "_FXuint","_FXHotKey",0},
    { "_FXuint","_FXColor",0},
    { "_FXuint","_FXID",0},
    { "_FXuint","_FXSelector",0},
    { "_FXuint","_FXint",0},
    { "_FXuint","_unsigned_int",0},
    { "_FXuint","_int",0},
    { "_short","_FXshort",0},
    { "_short","_FXushort",0},
    { "_short","_unsigned_short",0},
    { "_short","_signed_short",0},
    { "_FXRectangle","_class_FXRectangle",0},
    { "_FXPyFont","_class_FXPyFont",0},
    { "_class_FXApp","_FXApp",0},
    { "_FXXPMImage","_class_FXXPMImage",0},
    { "_class_FXPyWindow","_FXPyWindow",0},
    { "_FXGIFImage","_class_FXGIFImage",0},
    { "_class_FXComposite","_class_FXPyMainWindow",SwigFXPyMainWindowToFXComposite},
    { "_class_FXComposite","_FXPyMainWindow",SwigFXPyMainWindowToFXComposite},
    { "_class_FXComposite","_class_FXMainWindow",SwigFXMainWindowToFXComposite},
    { "_class_FXComposite","_FXMainWindow",SwigFXMainWindowToFXComposite},
    { "_class_FXComposite","_class_FXPyTopWindow",SwigFXPyTopWindowToFXComposite},
    { "_class_FXComposite","_FXPyTopWindow",SwigFXPyTopWindowToFXComposite},
    { "_class_FXComposite","_class_FXTopWindow",SwigFXTopWindowToFXComposite},
    { "_class_FXComposite","_FXTopWindow",SwigFXTopWindowToFXComposite},
    { "_class_FXComposite","_class_FXPyPopup",SwigFXPyPopupToFXComposite},
    { "_class_FXComposite","_FXPyPopup",SwigFXPyPopupToFXComposite},
    { "_class_FXComposite","_class_FXPopup",SwigFXPopupToFXComposite},
    { "_class_FXComposite","_FXPopup",SwigFXPopupToFXComposite},
    { "_class_FXComposite","_class_FXPyShell",SwigFXPyShellToFXComposite},
    { "_class_FXComposite","_FXPyShell",SwigFXPyShellToFXComposite},
    { "_class_FXComposite","_class_FXShell",SwigFXShellToFXComposite},
    { "_class_FXComposite","_FXShell",SwigFXShellToFXComposite},
    { "_class_FXComposite","_class_FXPyRootWindow",SwigFXPyRootWindowToFXComposite},
    { "_class_FXComposite","_FXPyRootWindow",SwigFXPyRootWindowToFXComposite},
    { "_class_FXComposite","_class_FXRootWindow",SwigFXRootWindowToFXComposite},
    { "_class_FXComposite","_FXRootWindow",SwigFXRootWindowToFXComposite},
    { "_class_FXComposite","_class_FXPyComposite",SwigFXPyCompositeToFXComposite},
    { "_class_FXComposite","_FXPyComposite",SwigFXPyCompositeToFXComposite},
    { "_class_FXComposite","_FXComposite",0},
    { "_FXPyCommand","_class_FXPyCommand",0},
    { "_class_FXJPGIcon","_FXJPGIcon",0},
    { "_FXchar","_char",0},
    { "_FXuchar","_FXbool",0},
    { "_FXuchar","_unsigned_char",0},
    { "_int","_FXInputHandle",0},
    { "_int","_FXDragType",0},
    { "_int","_FXHotKey",0},
    { "_int","_FXColor",0},
    { "_int","_FXID",0},
    { "_int","_FXSelector",0},
    { "_int","_FXint",0},
    { "_int","_FXuint",0},
    { "_int","_unsigned_int",0},
    { "_int","_signed_int",0},
    { "_FXDragType","_FXInputHandle",0},
    { "_FXDragType","_FXID",0},
    { "_FXDragType","_FXSelector",0},
    { "_FXDragType","_FXint",0},
    { "_FXDragType","_FXuint",0},
    { "_FXDragType","_int",0},
    { "_FXDragType","_unsigned_int",0},
    { "_FXDragType","_FXColor",0},
    { "_FXDragType","_FXHotKey",0},
    { "_FXSettings","_class_FXSettings",0},
    { "_FXRegistry","_class_FXRegistry",0},
    { "_FXPyBMPIcon","_class_FXPyBMPIcon",0},
    { "_FXPyICOIcon","_class_FXPyICOIcon",0},
    { "_FXPSBounds","_struct_FXPSBounds",0},
    { "_FXPyJPGImage","_class_FXPyJPGImage",0},
    { "_class_FXPyPCXIcon","_FXPyPCXIcon",0},
    { "_FXTGAIcon","_class_FXTGAIcon",0},
    { "_FXDelegator","_class_FXDelegator",0},
    { "_class_FXPNGImage","_FXPNGImage",0},
    { "_class_FXPyPNGIcon","_FXPyPNGIcon",0},
    { "_class_FXPyRootWindow","_FXPyRootWindow",0},
    { "_class_FXPyTGAImage","_FXPyTGAImage",0},
    { "_class_FXDict","_FXDict",0},
    { "_class_FXShell","_class_FXPyMainWindow",SwigFXPyMainWindowToFXShell},
    { "_class_FXShell","_FXPyMainWindow",SwigFXPyMainWindowToFXShell},
    { "_class_FXShell","_class_FXMainWindow",SwigFXMainWindowToFXShell},
    { "_class_FXShell","_FXMainWindow",SwigFXMainWindowToFXShell},
    { "_class_FXShell","_class_FXPyTopWindow",SwigFXPyTopWindowToFXShell},
    { "_class_FXShell","_FXPyTopWindow",SwigFXPyTopWindowToFXShell},
    { "_class_FXShell","_class_FXTopWindow",SwigFXTopWindowToFXShell},
    { "_class_FXShell","_FXTopWindow",SwigFXTopWindowToFXShell},
    { "_class_FXShell","_class_FXPyPopup",SwigFXPyPopupToFXShell},
    { "_class_FXShell","_FXPyPopup",SwigFXPyPopupToFXShell},
    { "_class_FXShell","_class_FXPopup",SwigFXPopupToFXShell},
    { "_class_FXShell","_FXPopup",SwigFXPopupToFXShell},
    { "_class_FXShell","_class_FXPyShell",SwigFXPyShellToFXShell},
    { "_class_FXShell","_FXPyShell",SwigFXPyShellToFXShell},
    { "_class_FXShell","_FXShell",0},
    { "_FXInputHandle","_FXint",0},
    { "_FXInputHandle","_FXuint",0},
    { "_FXInputHandle","_unsigned_int",0},
    { "_FXInputHandle","_signed_int",0},
    { "_FXInputHandle","_int",0},
    { "_FXInputHandle","_FXSelector",0},
    { "_FXInputHandle","_FXID",0},
    { "_FXInputHandle","_FXColor",0},
    { "_FXInputHandle","_FXHotKey",0},
    { "_FXInputHandle","_FXDragType",0},
    { "_class_FXPyFileStream","_FXPyFileStream",0},
    { "_FXFont","_class_FXFont",0},
    { "_FXPyRGBImage","_class_FXPyRGBImage",0},
    { "_class_FXPyDataTarget","_FXPyDataTarget",0},
    { "_class_FXObject","_class_FXPyMainWindow",SwigFXPyMainWindowToFXObject},
    { "_class_FXObject","_FXPyMainWindow",SwigFXPyMainWindowToFXObject},
    { "_class_FXObject","_class_FXMainWindow",SwigFXMainWindowToFXObject},
    { "_class_FXObject","_FXMainWindow",SwigFXMainWindowToFXObject},
    { "_class_FXObject","_class_FXPyTopWindow",SwigFXPyTopWindowToFXObject},
    { "_class_FXObject","_FXPyTopWindow",SwigFXPyTopWindowToFXObject},
    { "_class_FXObject","_class_FXTopWindow",SwigFXTopWindowToFXObject},
    { "_class_FXObject","_FXTopWindow",SwigFXTopWindowToFXObject},
    { "_class_FXObject","_class_FXPyPopup",SwigFXPyPopupToFXObject},
    { "_class_FXObject","_FXPyPopup",SwigFXPyPopupToFXObject},
    { "_class_FXObject","_class_FXPopup",SwigFXPopupToFXObject},
    { "_class_FXObject","_FXPopup",SwigFXPopupToFXObject},
    { "_class_FXObject","_class_FXPyShell",SwigFXPyShellToFXObject},
    { "_class_FXObject","_FXPyShell",SwigFXPyShellToFXObject},
    { "_class_FXObject","_class_FXShell",SwigFXShellToFXObject},
    { "_class_FXObject","_FXShell",SwigFXShellToFXObject},
    { "_class_FXObject","_class_FXPyCanvas",SwigFXPyCanvasToFXObject},
    { "_class_FXObject","_FXPyCanvas",SwigFXPyCanvasToFXObject},
    { "_class_FXObject","_class_FXCanvas",SwigFXCanvasToFXObject},
    { "_class_FXObject","_FXCanvas",SwigFXCanvasToFXObject},
    { "_class_FXObject","_class_FXPyRootWindow",SwigFXPyRootWindowToFXObject},
    { "_class_FXObject","_FXPyRootWindow",SwigFXPyRootWindowToFXObject},
    { "_class_FXObject","_class_FXRootWindow",SwigFXRootWindowToFXObject},
    { "_class_FXObject","_FXRootWindow",SwigFXRootWindowToFXObject},
    { "_class_FXObject","_class_FXPyFrame",SwigFXPyFrameToFXObject},
    { "_class_FXObject","_FXPyFrame",SwigFXPyFrameToFXObject},
    { "_class_FXObject","_class_FXFrame",SwigFXFrameToFXObject},
    { "_class_FXObject","_FXFrame",SwigFXFrameToFXObject},
    { "_class_FXObject","_class_FXPyComposite",SwigFXPyCompositeToFXObject},
    { "_class_FXObject","_FXPyComposite",SwigFXPyCompositeToFXObject},
    { "_class_FXObject","_class_FXComposite",SwigFXCompositeToFXObject},
    { "_class_FXObject","_FXComposite",SwigFXCompositeToFXObject},
    { "_class_FXObject","_class_FXPyWindow",SwigFXPyWindowToFXObject},
    { "_class_FXObject","_FXPyWindow",SwigFXPyWindowToFXObject},
    { "_class_FXObject","_class_FXWindow",SwigFXWindowToFXObject},
    { "_class_FXObject","_FXWindow",SwigFXWindowToFXObject},
    { "_class_FXObject","_FXObject",0},
    { "_FXXPMIcon","_class_FXXPMIcon",0},
    { "_FXPyPopup","_class_FXPyPopup",0},
    { "_FXId","_class_FXPyMainWindow",SwigFXPyMainWindowToFXId},
    { "_FXId","_FXPyMainWindow",SwigFXPyMainWindowToFXId},
    { "_FXId","_class_FXMainWindow",SwigFXMainWindowToFXId},
    { "_FXId","_FXMainWindow",SwigFXMainWindowToFXId},
    { "_FXId","_class_FXPyTopWindow",SwigFXPyTopWindowToFXId},
    { "_FXId","_FXPyTopWindow",SwigFXPyTopWindowToFXId},
    { "_FXId","_class_FXTopWindow",SwigFXTopWindowToFXId},
    { "_FXId","_FXTopWindow",SwigFXTopWindowToFXId},
    { "_FXId","_class_FXPyPopup",SwigFXPyPopupToFXId},
    { "_FXId","_FXPyPopup",SwigFXPyPopupToFXId},
    { "_FXId","_class_FXPopup",SwigFXPopupToFXId},
    { "_FXId","_FXPopup",SwigFXPopupToFXId},
    { "_FXId","_class_FXPyShell",SwigFXPyShellToFXId},
    { "_FXId","_FXPyShell",SwigFXPyShellToFXId},
    { "_FXId","_class_FXShell",SwigFXShellToFXId},
    { "_FXId","_FXShell",SwigFXShellToFXId},
    { "_FXId","_class_FXPyCanvas",SwigFXPyCanvasToFXId},
    { "_FXId","_FXPyCanvas",SwigFXPyCanvasToFXId},
    { "_FXId","_class_FXCanvas",SwigFXCanvasToFXId},
    { "_FXId","_FXCanvas",SwigFXCanvasToFXId},
    { "_FXId","_class_FXPyRootWindow",SwigFXPyRootWindowToFXId},
    { "_FXId","_FXPyRootWindow",SwigFXPyRootWindowToFXId},
    { "_FXId","_class_FXRootWindow",SwigFXRootWindowToFXId},
    { "_FXId","_FXRootWindow",SwigFXRootWindowToFXId},
    { "_FXId","_class_FXPyFrame",SwigFXPyFrameToFXId},
    { "_FXId","_FXPyFrame",SwigFXPyFrameToFXId},
    { "_FXId","_class_FXFrame",SwigFXFrameToFXId},
    { "_FXId","_FXFrame",SwigFXFrameToFXId},
    { "_FXId","_class_FXPyComposite",SwigFXPyCompositeToFXId},
    { "_FXId","_FXPyComposite",SwigFXPyCompositeToFXId},
    { "_FXId","_class_FXComposite",SwigFXCompositeToFXId},
    { "_FXId","_FXComposite",SwigFXCompositeToFXId},
    { "_FXId","_class_FXPyWindow",SwigFXPyWindowToFXId},
    { "_FXId","_FXPyWindow",SwigFXPyWindowToFXId},
    { "_FXId","_class_FXWindow",SwigFXWindowToFXId},
    { "_FXId","_FXWindow",SwigFXWindowToFXId},
    { "_FXId","_class_FXId",0},
    { "_class_FXDrawable","_class_FXPyMainWindow",SwigFXPyMainWindowToFXDrawable},
    { "_class_FXDrawable","_FXPyMainWindow",SwigFXPyMainWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXMainWindow",SwigFXMainWindowToFXDrawable},
    { "_class_FXDrawable","_FXMainWindow",SwigFXMainWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXPyTopWindow",SwigFXPyTopWindowToFXDrawable},
    { "_class_FXDrawable","_FXPyTopWindow",SwigFXPyTopWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXTopWindow",SwigFXTopWindowToFXDrawable},
    { "_class_FXDrawable","_FXTopWindow",SwigFXTopWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXPyPopup",SwigFXPyPopupToFXDrawable},
    { "_class_FXDrawable","_FXPyPopup",SwigFXPyPopupToFXDrawable},
    { "_class_FXDrawable","_class_FXPopup",SwigFXPopupToFXDrawable},
    { "_class_FXDrawable","_FXPopup",SwigFXPopupToFXDrawable},
    { "_class_FXDrawable","_class_FXPyShell",SwigFXPyShellToFXDrawable},
    { "_class_FXDrawable","_FXPyShell",SwigFXPyShellToFXDrawable},
    { "_class_FXDrawable","_class_FXShell",SwigFXShellToFXDrawable},
    { "_class_FXDrawable","_FXShell",SwigFXShellToFXDrawable},
    { "_class_FXDrawable","_class_FXPyCanvas",SwigFXPyCanvasToFXDrawable},
    { "_class_FXDrawable","_FXPyCanvas",SwigFXPyCanvasToFXDrawable},
    { "_class_FXDrawable","_class_FXCanvas",SwigFXCanvasToFXDrawable},
    { "_class_FXDrawable","_FXCanvas",SwigFXCanvasToFXDrawable},
    { "_class_FXDrawable","_class_FXPyRootWindow",SwigFXPyRootWindowToFXDrawable},
    { "_class_FXDrawable","_FXPyRootWindow",SwigFXPyRootWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXRootWindow",SwigFXRootWindowToFXDrawable},
    { "_class_FXDrawable","_FXRootWindow",SwigFXRootWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXPyFrame",SwigFXPyFrameToFXDrawable},
    { "_class_FXDrawable","_FXPyFrame",SwigFXPyFrameToFXDrawable},
    { "_class_FXDrawable","_class_FXFrame",SwigFXFrameToFXDrawable},
    { "_class_FXDrawable","_FXFrame",SwigFXFrameToFXDrawable},
    { "_class_FXDrawable","_class_FXPyComposite",SwigFXPyCompositeToFXDrawable},
    { "_class_FXDrawable","_FXPyComposite",SwigFXPyCompositeToFXDrawable},
    { "_class_FXDrawable","_class_FXComposite",SwigFXCompositeToFXDrawable},
    { "_class_FXDrawable","_FXComposite",SwigFXCompositeToFXDrawable},
    { "_class_FXDrawable","_class_FXPyWindow",SwigFXPyWindowToFXDrawable},
    { "_class_FXDrawable","_FXPyWindow",SwigFXPyWindowToFXDrawable},
    { "_class_FXDrawable","_class_FXWindow",SwigFXWindowToFXDrawable},
    { "_class_FXDrawable","_FXWindow",SwigFXWindowToFXDrawable},
    { "_class_FXDrawable","_FXDrawable",0},
    { "_FXPyBMPImage","_class_FXPyBMPImage",0},
    { "_FXPyICOImage","_class_FXPyICOImage",0},
    { "_FXPyMainWindow","_class_FXPyMainWindow",0},
    { "_FXPyPCXImage","_class_FXPyPCXImage",0},
    { "_FXPyRGBIcon","_class_FXPyRGBIcon",0},
    { "_class_FXPyJPGIcon","_FXPyJPGIcon",0},
    { "_FXTIFIcon","_class_FXTIFIcon",0},
    { "_FXMainWindow","_class_FXPyMainWindow",SwigFXPyMainWindowToFXMainWindow},
    { "_FXMainWindow","_FXPyMainWindow",SwigFXPyMainWindowToFXMainWindow},
    { "_FXMainWindow","_class_FXMainWindow",0},
    { "__XEvent","_FXRawEvent",0},
    { "_struct_FXEvent","_FXEvent",0},
    { "_class_FXStream","_FXStream",0},
    { "_class_FXPyStringDict","_FXPyStringDict",0},
    { "_class_FXPyJPGImage","_FXPyJPGImage",0},
    { "_FXTIFImage","_class_FXTIFImage",0},
    { "_FXPyIcon","_class_FXPyIcon",0},
    { "_FXPyAccelTable","_class_FXPyAccelTable",0},
    { "_class_FXTGAIcon","_FXTGAIcon",0},
    { "_struct_FXPSBounds","_FXPSBounds",0},
    { "_class_FXImage","_FXImage",0},
    { "_FXPoint","_class_FXPoint",0},
    { "_FXAccelTable","_class_FXAccelTable",0},
    { "_FXPyId","_class_FXPyId",0},
    { "_FXSelector","_FXInputHandle",0},
    { "_FXSelector","_FXDragType",0},
    { "_FXSelector","_FXHotKey",0},
    { "_FXSelector","_FXColor",0},
    { "_FXSelector","_FXID",0},
    { "_FXSelector","_FXuint",0},
    { "_FXSelector","_int",0},
    { "_FXSelector","_unsigned_int",0},
    { "_FXSelector","_FXint",0},
    { "_class_FXFont","_FXFont",0},
    { "_class_FXXPMImage","_FXXPMImage",0},
    { "_FXPyRecentFiles","_class_FXPyRecentFiles",0},
    { "_FXPyDebugTarget","_class_FXPyDebugTarget",0},
    { "_FXCommand","_class_FXCommand",0},
    { "_FXPyFrame","_class_FXPyFrame",0},
    { "_class_FXGIFImage","_FXGIFImage",0},
    { "_class_FXPyRGBImage","_FXPyRGBImage",0},
    { "_class_FXXPMIcon","_FXXPMIcon",0},
    { "_class_FXPyPopup","_FXPyPopup",0},
{0,0,0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initwindowsc() {
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
	 m = Py_InitModule("windowsc", windowscMethods);
	 d = PyModule_GetDict(m);
	 PyDict_SetItemString(d,"POPUP_VERTICAL", PyInt_FromLong((long) POPUP_VERTICAL));
	 PyDict_SetItemString(d,"POPUP_HORIZONTAL", PyInt_FromLong((long) POPUP_HORIZONTAL));
	 PyDict_SetItemString(d,"POPUP_SHRINKWRAP", PyInt_FromLong((long) POPUP_SHRINKWRAP));
	 PyDict_SetItemString(d,"LAYOUT_NORMAL", PyInt_FromLong((long) LAYOUT_NORMAL));
	 PyDict_SetItemString(d,"LAYOUT_SIDE_TOP", PyInt_FromLong((long) LAYOUT_SIDE_TOP));
	 PyDict_SetItemString(d,"LAYOUT_SIDE_BOTTOM", PyInt_FromLong((long) LAYOUT_SIDE_BOTTOM));
	 PyDict_SetItemString(d,"LAYOUT_SIDE_LEFT", PyInt_FromLong((long) LAYOUT_SIDE_LEFT));
	 PyDict_SetItemString(d,"LAYOUT_SIDE_RIGHT", PyInt_FromLong((long) LAYOUT_SIDE_RIGHT));
	 PyDict_SetItemString(d,"LAYOUT_FILL_COLUMN", PyInt_FromLong((long) LAYOUT_FILL_COLUMN));
	 PyDict_SetItemString(d,"LAYOUT_FILL_ROW", PyInt_FromLong((long) LAYOUT_FILL_ROW));
	 PyDict_SetItemString(d,"LAYOUT_LEFT", PyInt_FromLong((long) LAYOUT_LEFT));
	 PyDict_SetItemString(d,"LAYOUT_RIGHT", PyInt_FromLong((long) LAYOUT_RIGHT));
	 PyDict_SetItemString(d,"LAYOUT_CENTER_X", PyInt_FromLong((long) LAYOUT_CENTER_X));
	 PyDict_SetItemString(d,"LAYOUT_FIX_X", PyInt_FromLong((long) LAYOUT_FIX_X));
	 PyDict_SetItemString(d,"LAYOUT_TOP", PyInt_FromLong((long) LAYOUT_TOP));
	 PyDict_SetItemString(d,"LAYOUT_BOTTOM", PyInt_FromLong((long) LAYOUT_BOTTOM));
	 PyDict_SetItemString(d,"LAYOUT_CENTER_Y", PyInt_FromLong((long) LAYOUT_CENTER_Y));
	 PyDict_SetItemString(d,"LAYOUT_FIX_Y", PyInt_FromLong((long) LAYOUT_FIX_Y));
	 PyDict_SetItemString(d,"LAYOUT_RESERVED_1", PyInt_FromLong((long) LAYOUT_RESERVED_1));
	 PyDict_SetItemString(d,"LAYOUT_RESERVED_2", PyInt_FromLong((long) LAYOUT_RESERVED_2));
	 PyDict_SetItemString(d,"LAYOUT_FIX_WIDTH", PyInt_FromLong((long) LAYOUT_FIX_WIDTH));
	 PyDict_SetItemString(d,"LAYOUT_FIX_HEIGHT", PyInt_FromLong((long) LAYOUT_FIX_HEIGHT));
	 PyDict_SetItemString(d,"LAYOUT_MIN_WIDTH", PyInt_FromLong((long) LAYOUT_MIN_WIDTH));
	 PyDict_SetItemString(d,"LAYOUT_MIN_HEIGHT", PyInt_FromLong((long) LAYOUT_MIN_HEIGHT));
	 PyDict_SetItemString(d,"LAYOUT_FILL_X", PyInt_FromLong((long) LAYOUT_FILL_X));
	 PyDict_SetItemString(d,"LAYOUT_FILL_Y", PyInt_FromLong((long) LAYOUT_FILL_Y));
	 PyDict_SetItemString(d,"LAYOUT_EXPLICIT", PyInt_FromLong((long) LAYOUT_EXPLICIT));
	 PyDict_SetItemString(d,"FRAME_NONE", PyInt_FromLong((long) FRAME_NONE));
	 PyDict_SetItemString(d,"FRAME_SUNKEN", PyInt_FromLong((long) FRAME_SUNKEN));
	 PyDict_SetItemString(d,"FRAME_RAISED", PyInt_FromLong((long) FRAME_RAISED));
	 PyDict_SetItemString(d,"FRAME_THICK", PyInt_FromLong((long) FRAME_THICK));
	 PyDict_SetItemString(d,"FRAME_GROOVE", PyInt_FromLong((long) FRAME_GROOVE));
	 PyDict_SetItemString(d,"FRAME_RIDGE", PyInt_FromLong((long) FRAME_RIDGE));
	 PyDict_SetItemString(d,"FRAME_LINE", PyInt_FromLong((long) FRAME_LINE));
	 PyDict_SetItemString(d,"FRAME_NORMAL", PyInt_FromLong((long) FRAME_NORMAL));
	 PyDict_SetItemString(d,"PACK_NORMAL", PyInt_FromLong((long) PACK_NORMAL));
	 PyDict_SetItemString(d,"PACK_UNIFORM_HEIGHT", PyInt_FromLong((long) PACK_UNIFORM_HEIGHT));
	 PyDict_SetItemString(d,"PACK_UNIFORM_WIDTH", PyInt_FromLong((long) PACK_UNIFORM_WIDTH));
	 PyDict_SetItemString(d,"DEFAULT_PAD", PyInt_FromLong((long) 2));
	 PyDict_SetItemString(d,"DECOR_NONE", PyInt_FromLong((long) DECOR_NONE));
	 PyDict_SetItemString(d,"DECOR_TITLE", PyInt_FromLong((long) DECOR_TITLE));
	 PyDict_SetItemString(d,"DECOR_MINIMIZE", PyInt_FromLong((long) DECOR_MINIMIZE));
	 PyDict_SetItemString(d,"DECOR_MAXIMIZE", PyInt_FromLong((long) DECOR_MAXIMIZE));
	 PyDict_SetItemString(d,"DECOR_CLOSE", PyInt_FromLong((long) DECOR_CLOSE));
	 PyDict_SetItemString(d,"DECOR_BORDER", PyInt_FromLong((long) DECOR_BORDER));
	 PyDict_SetItemString(d,"DECOR_RESIZE", PyInt_FromLong((long) DECOR_RESIZE));
	 PyDict_SetItemString(d,"DECOR_MENU", PyInt_FromLong((long) DECOR_MENU));
	 PyDict_SetItemString(d,"DECOR_ALL", PyInt_FromLong((long) DECOR_ALL));
	 PyDict_SetItemString(d,"PLACEMENT_DEFAULT", PyInt_FromLong((long) PLACEMENT_DEFAULT));
	 PyDict_SetItemString(d,"PLACEMENT_VISIBLE", PyInt_FromLong((long) PLACEMENT_VISIBLE));
	 PyDict_SetItemString(d,"PLACEMENT_CURSOR", PyInt_FromLong((long) PLACEMENT_CURSOR));
	 PyDict_SetItemString(d,"PLACEMENT_OWNER", PyInt_FromLong((long) PLACEMENT_OWNER));
	 PyDict_SetItemString(d,"PLACEMENT_SCREEN", PyInt_FromLong((long) PLACEMENT_SCREEN));
	 PyDict_SetItemString(d,"PLACEMENT_MAXIMIZED", PyInt_FromLong((long) PLACEMENT_MAXIMIZED));
	 PyDict_SetItemString(d,"cvar", SWIG_globals);
	 SWIG_addvarlink(SWIG_globals,"FX_Window_deleteType",_wrap_FXWindow__deleteType_get, _wrap_FXWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Window_textType",_wrap_FXWindow__textType_get, _wrap_FXWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Window_stringType",_wrap_FXWindow__stringType_get, _wrap_FXWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Window_colorType",_wrap_FXWindow__colorType_get, _wrap_FXWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Window_urilistType",_wrap_FXWindow__urilistType_get, _wrap_FXWindow__urilistType_set);
	 PyDict_SetItemString(d,"FX_Window_ID_NONE", PyInt_FromLong((long) FXWindow::ID_NONE));
	 PyDict_SetItemString(d,"FX_Window_ID_HIDE", PyInt_FromLong((long) FXWindow::ID_HIDE));
	 PyDict_SetItemString(d,"FX_Window_ID_SHOW", PyInt_FromLong((long) FXWindow::ID_SHOW));
	 PyDict_SetItemString(d,"FX_Window_ID_TOGGLESHOWN", PyInt_FromLong((long) FXWindow::ID_TOGGLESHOWN));
	 PyDict_SetItemString(d,"FX_Window_ID_LOWER", PyInt_FromLong((long) FXWindow::ID_LOWER));
	 PyDict_SetItemString(d,"FX_Window_ID_RAISE", PyInt_FromLong((long) FXWindow::ID_RAISE));
	 PyDict_SetItemString(d,"FX_Window_ID_DELETE", PyInt_FromLong((long) FXWindow::ID_DELETE));
	 PyDict_SetItemString(d,"FX_Window_ID_DISABLE", PyInt_FromLong((long) FXWindow::ID_DISABLE));
	 PyDict_SetItemString(d,"FX_Window_ID_ENABLE", PyInt_FromLong((long) FXWindow::ID_ENABLE));
	 PyDict_SetItemString(d,"FX_Window_ID_UNCHECK", PyInt_FromLong((long) FXWindow::ID_UNCHECK));
	 PyDict_SetItemString(d,"FX_Window_ID_CHECK", PyInt_FromLong((long) FXWindow::ID_CHECK));
	 PyDict_SetItemString(d,"FX_Window_ID_UNKNOWN", PyInt_FromLong((long) FXWindow::ID_UNKNOWN));
	 PyDict_SetItemString(d,"FX_Window_ID_UPDATE", PyInt_FromLong((long) FXWindow::ID_UPDATE));
	 PyDict_SetItemString(d,"FX_Window_ID_AUTOSCROLL", PyInt_FromLong((long) FXWindow::ID_AUTOSCROLL));
	 PyDict_SetItemString(d,"FX_Window_ID_HSCROLLED", PyInt_FromLong((long) FXWindow::ID_HSCROLLED));
	 PyDict_SetItemString(d,"FX_Window_ID_VSCROLLED", PyInt_FromLong((long) FXWindow::ID_VSCROLLED));
	 PyDict_SetItemString(d,"FX_Window_ID_SETVALUE", PyInt_FromLong((long) FXWindow::ID_SETVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_SETINTVALUE", PyInt_FromLong((long) FXWindow::ID_SETINTVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_SETREALVALUE", PyInt_FromLong((long) FXWindow::ID_SETREALVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_SETSTRINGVALUE", PyInt_FromLong((long) FXWindow::ID_SETSTRINGVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_SETINTRANGE", PyInt_FromLong((long) FXWindow::ID_SETINTRANGE));
	 PyDict_SetItemString(d,"FX_Window_ID_SETREALRANGE", PyInt_FromLong((long) FXWindow::ID_SETREALRANGE));
	 PyDict_SetItemString(d,"FX_Window_ID_GETINTVALUE", PyInt_FromLong((long) FXWindow::ID_GETINTVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_GETREALVALUE", PyInt_FromLong((long) FXWindow::ID_GETREALVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_GETSTRINGVALUE", PyInt_FromLong((long) FXWindow::ID_GETSTRINGVALUE));
	 PyDict_SetItemString(d,"FX_Window_ID_GETINTRANGE", PyInt_FromLong((long) FXWindow::ID_GETINTRANGE));
	 PyDict_SetItemString(d,"FX_Window_ID_GETREALRANGE", PyInt_FromLong((long) FXWindow::ID_GETREALRANGE));
	 PyDict_SetItemString(d,"FX_Window_ID_QUERY_TIP", PyInt_FromLong((long) FXWindow::ID_QUERY_TIP));
	 PyDict_SetItemString(d,"FX_Window_ID_QUERY_HELP", PyInt_FromLong((long) FXWindow::ID_QUERY_HELP));
	 PyDict_SetItemString(d,"FX_Window_ID_QUERY_MENU", PyInt_FromLong((long) FXWindow::ID_QUERY_MENU));
	 PyDict_SetItemString(d,"FX_Window_ID_HOTKEY", PyInt_FromLong((long) FXWindow::ID_HOTKEY));
	 PyDict_SetItemString(d,"FX_Window_ID_ACCEL", PyInt_FromLong((long) FXWindow::ID_ACCEL));
	 PyDict_SetItemString(d,"FX_Window_ID_UNPOST", PyInt_FromLong((long) FXWindow::ID_UNPOST));
	 PyDict_SetItemString(d,"FX_Window_ID_POST", PyInt_FromLong((long) FXWindow::ID_POST));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_TILEHORIZONTAL", PyInt_FromLong((long) FXWindow::ID_MDI_TILEHORIZONTAL));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_TILEVERTICAL", PyInt_FromLong((long) FXWindow::ID_MDI_TILEVERTICAL));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_CASCADE", PyInt_FromLong((long) FXWindow::ID_MDI_CASCADE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MAXIMIZE", PyInt_FromLong((long) FXWindow::ID_MDI_MAXIMIZE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MINIMIZE", PyInt_FromLong((long) FXWindow::ID_MDI_MINIMIZE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_RESTORE", PyInt_FromLong((long) FXWindow::ID_MDI_RESTORE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_CLOSE", PyInt_FromLong((long) FXWindow::ID_MDI_CLOSE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_WINDOW", PyInt_FromLong((long) FXWindow::ID_MDI_WINDOW));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MENUWINDOW", PyInt_FromLong((long) FXWindow::ID_MDI_MENUWINDOW));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MENUMINIMIZE", PyInt_FromLong((long) FXWindow::ID_MDI_MENUMINIMIZE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MENURESTORE", PyInt_FromLong((long) FXWindow::ID_MDI_MENURESTORE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_MENUCLOSE", PyInt_FromLong((long) FXWindow::ID_MDI_MENUCLOSE));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_NEXT", PyInt_FromLong((long) FXWindow::ID_MDI_NEXT));
	 PyDict_SetItemString(d,"FX_Window_ID_MDI_PREV", PyInt_FromLong((long) FXWindow::ID_MDI_PREV));
	 PyDict_SetItemString(d,"FX_Window_ID_CLOSE_DOCUMENT", PyInt_FromLong((long) FXWindow::ID_CLOSE_DOCUMENT));
	 PyDict_SetItemString(d,"FX_Window_ID_CLOSE_ALL_DOCUMENTS", PyInt_FromLong((long) FXWindow::ID_CLOSE_ALL_DOCUMENTS));
	 PyDict_SetItemString(d,"FX_Window_ID_LAST", PyInt_FromLong((long) FXWindow::ID_LAST));
	 SWIG_addvarlink(SWIG_globals,"FXWindow_deleteType",_wrap_FXPyWindow__deleteType_get, _wrap_FXPyWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXWindow_textType",_wrap_FXPyWindow__textType_get, _wrap_FXPyWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXWindow_stringType",_wrap_FXPyWindow__stringType_get, _wrap_FXPyWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXWindow_colorType",_wrap_FXPyWindow__colorType_get, _wrap_FXPyWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXWindow_urilistType",_wrap_FXPyWindow__urilistType_get, _wrap_FXPyWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Composite_deleteType",_wrap_FXComposite__deleteType_get, _wrap_FXComposite__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Composite_textType",_wrap_FXComposite__textType_get, _wrap_FXComposite__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Composite_stringType",_wrap_FXComposite__stringType_get, _wrap_FXComposite__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Composite_colorType",_wrap_FXComposite__colorType_get, _wrap_FXComposite__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Composite_urilistType",_wrap_FXComposite__urilistType_get, _wrap_FXComposite__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXComposite_deleteType",_wrap_FXPyComposite__deleteType_get, _wrap_FXPyComposite__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXComposite_textType",_wrap_FXPyComposite__textType_get, _wrap_FXPyComposite__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXComposite_stringType",_wrap_FXPyComposite__stringType_get, _wrap_FXPyComposite__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXComposite_colorType",_wrap_FXPyComposite__colorType_get, _wrap_FXPyComposite__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXComposite_urilistType",_wrap_FXPyComposite__urilistType_get, _wrap_FXPyComposite__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Frame_deleteType",_wrap_FXFrame__deleteType_get, _wrap_FXFrame__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Frame_textType",_wrap_FXFrame__textType_get, _wrap_FXFrame__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Frame_stringType",_wrap_FXFrame__stringType_get, _wrap_FXFrame__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Frame_colorType",_wrap_FXFrame__colorType_get, _wrap_FXFrame__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Frame_urilistType",_wrap_FXFrame__urilistType_get, _wrap_FXFrame__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXFrame_deleteType",_wrap_FXPyFrame__deleteType_get, _wrap_FXPyFrame__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXFrame_textType",_wrap_FXPyFrame__textType_get, _wrap_FXPyFrame__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXFrame_stringType",_wrap_FXPyFrame__stringType_get, _wrap_FXPyFrame__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXFrame_colorType",_wrap_FXPyFrame__colorType_get, _wrap_FXPyFrame__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXFrame_urilistType",_wrap_FXPyFrame__urilistType_get, _wrap_FXPyFrame__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_RootWindow_deleteType",_wrap_FXRootWindow__deleteType_get, _wrap_FXRootWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_RootWindow_textType",_wrap_FXRootWindow__textType_get, _wrap_FXRootWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_RootWindow_stringType",_wrap_FXRootWindow__stringType_get, _wrap_FXRootWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_RootWindow_colorType",_wrap_FXRootWindow__colorType_get, _wrap_FXRootWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_RootWindow_urilistType",_wrap_FXRootWindow__urilistType_get, _wrap_FXRootWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXRootWindow_deleteType",_wrap_FXPyRootWindow__deleteType_get, _wrap_FXPyRootWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXRootWindow_textType",_wrap_FXPyRootWindow__textType_get, _wrap_FXPyRootWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXRootWindow_stringType",_wrap_FXPyRootWindow__stringType_get, _wrap_FXPyRootWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXRootWindow_colorType",_wrap_FXPyRootWindow__colorType_get, _wrap_FXPyRootWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXRootWindow_urilistType",_wrap_FXPyRootWindow__urilistType_get, _wrap_FXPyRootWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Canvas_deleteType",_wrap_FXCanvas__deleteType_get, _wrap_FXCanvas__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Canvas_textType",_wrap_FXCanvas__textType_get, _wrap_FXCanvas__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Canvas_stringType",_wrap_FXCanvas__stringType_get, _wrap_FXCanvas__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Canvas_colorType",_wrap_FXCanvas__colorType_get, _wrap_FXCanvas__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Canvas_urilistType",_wrap_FXCanvas__urilistType_get, _wrap_FXCanvas__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXCanvas_deleteType",_wrap_FXPyCanvas__deleteType_get, _wrap_FXPyCanvas__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXCanvas_textType",_wrap_FXPyCanvas__textType_get, _wrap_FXPyCanvas__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXCanvas_stringType",_wrap_FXPyCanvas__stringType_get, _wrap_FXPyCanvas__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXCanvas_colorType",_wrap_FXPyCanvas__colorType_get, _wrap_FXPyCanvas__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXCanvas_urilistType",_wrap_FXPyCanvas__urilistType_get, _wrap_FXPyCanvas__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Shell_deleteType",_wrap_FXShell__deleteType_get, _wrap_FXShell__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Shell_textType",_wrap_FXShell__textType_get, _wrap_FXShell__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Shell_stringType",_wrap_FXShell__stringType_get, _wrap_FXShell__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Shell_colorType",_wrap_FXShell__colorType_get, _wrap_FXShell__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Shell_urilistType",_wrap_FXShell__urilistType_get, _wrap_FXShell__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXShell_deleteType",_wrap_FXPyShell__deleteType_get, _wrap_FXPyShell__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXShell_textType",_wrap_FXPyShell__textType_get, _wrap_FXPyShell__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXShell_stringType",_wrap_FXPyShell__stringType_get, _wrap_FXPyShell__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXShell_colorType",_wrap_FXPyShell__colorType_get, _wrap_FXPyShell__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXShell_urilistType",_wrap_FXPyShell__urilistType_get, _wrap_FXPyShell__urilistType_set);
	 PyDict_SetItemString(d,"FX_Popup_ID_CHOICE", PyInt_FromLong((long) FXPopup::ID_CHOICE));
	 PyDict_SetItemString(d,"FX_Popup_ID_LAST", PyInt_FromLong((long) FXPopup::ID_LAST));
	 SWIG_addvarlink(SWIG_globals,"FX_Popup_deleteType",_wrap_FXPopup__deleteType_get, _wrap_FXPopup__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Popup_textType",_wrap_FXPopup__textType_get, _wrap_FXPopup__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Popup_stringType",_wrap_FXPopup__stringType_get, _wrap_FXPopup__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Popup_colorType",_wrap_FXPopup__colorType_get, _wrap_FXPopup__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_Popup_urilistType",_wrap_FXPopup__urilistType_get, _wrap_FXPopup__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXPopup_deleteType",_wrap_FXPyPopup__deleteType_get, _wrap_FXPyPopup__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXPopup_textType",_wrap_FXPyPopup__textType_get, _wrap_FXPyPopup__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXPopup_stringType",_wrap_FXPyPopup__stringType_get, _wrap_FXPyPopup__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXPopup_colorType",_wrap_FXPyPopup__colorType_get, _wrap_FXPyPopup__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXPopup_urilistType",_wrap_FXPyPopup__urilistType_get, _wrap_FXPyPopup__urilistType_set);
	 PyDict_SetItemString(d,"FX_TopWindow_ID_ICONIFY", PyInt_FromLong((long) FXTopWindow::ID_ICONIFY));
	 PyDict_SetItemString(d,"FX_TopWindow_ID_DEICONIFY", PyInt_FromLong((long) FXTopWindow::ID_DEICONIFY));
	 PyDict_SetItemString(d,"FX_TopWindow_ID_QUERY_DOCK", PyInt_FromLong((long) FXTopWindow::ID_QUERY_DOCK));
	 PyDict_SetItemString(d,"FX_TopWindow_ID_LAST", PyInt_FromLong((long) FXTopWindow::ID_LAST));
	 SWIG_addvarlink(SWIG_globals,"FX_TopWindow_deleteType",_wrap_FXTopWindow__deleteType_get, _wrap_FXTopWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_TopWindow_textType",_wrap_FXTopWindow__textType_get, _wrap_FXTopWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_TopWindow_stringType",_wrap_FXTopWindow__stringType_get, _wrap_FXTopWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_TopWindow_colorType",_wrap_FXTopWindow__colorType_get, _wrap_FXTopWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_TopWindow_urilistType",_wrap_FXTopWindow__urilistType_get, _wrap_FXTopWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXTopWindow_deleteType",_wrap_FXPyTopWindow__deleteType_get, _wrap_FXPyTopWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXTopWindow_textType",_wrap_FXPyTopWindow__textType_get, _wrap_FXPyTopWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXTopWindow_stringType",_wrap_FXPyTopWindow__stringType_get, _wrap_FXPyTopWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXTopWindow_colorType",_wrap_FXPyTopWindow__colorType_get, _wrap_FXPyTopWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXTopWindow_urilistType",_wrap_FXPyTopWindow__urilistType_get, _wrap_FXPyTopWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_MainWindow_deleteType",_wrap_FXMainWindow__deleteType_get, _wrap_FXMainWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_MainWindow_textType",_wrap_FXMainWindow__textType_get, _wrap_FXMainWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_MainWindow_stringType",_wrap_FXMainWindow__stringType_get, _wrap_FXMainWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_MainWindow_colorType",_wrap_FXMainWindow__colorType_get, _wrap_FXMainWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FX_MainWindow_urilistType",_wrap_FXMainWindow__urilistType_get, _wrap_FXMainWindow__urilistType_set);
	 SWIG_addvarlink(SWIG_globals,"FXMainWindow_deleteType",_wrap_FXPyMainWindow__deleteType_get, _wrap_FXPyMainWindow__deleteType_set);
	 SWIG_addvarlink(SWIG_globals,"FXMainWindow_textType",_wrap_FXPyMainWindow__textType_get, _wrap_FXPyMainWindow__textType_set);
	 SWIG_addvarlink(SWIG_globals,"FXMainWindow_stringType",_wrap_FXPyMainWindow__stringType_get, _wrap_FXPyMainWindow__stringType_set);
	 SWIG_addvarlink(SWIG_globals,"FXMainWindow_colorType",_wrap_FXPyMainWindow__colorType_get, _wrap_FXPyMainWindow__colorType_set);
	 SWIG_addvarlink(SWIG_globals,"FXMainWindow_urilistType",_wrap_FXPyMainWindow__urilistType_get, _wrap_FXPyMainWindow__urilistType_set);
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
}
